<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="29859"><g><title>main::main::{{closure}} (4 samples, 0.01%)</title><rect x="0.0335%" y="949" width="0.0134%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="4"/><text x="0.2835%" y="959.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="0.0804%" y="837" width="0.0134%" height="15" fill="rgb(217,0,24)" fg:x="24" fg:w="4"/><text x="0.3304%" y="847.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (6 samples, 0.02%)</title><rect x="0.0770%" y="853" width="0.0201%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="6"/><text x="0.3270%" y="863.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.01%)</title><rect x="0.0971%" y="853" width="0.0100%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="3"/><text x="0.3471%" y="863.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.01%)</title><rect x="0.0971%" y="837" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="3"/><text x="0.3471%" y="847.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (12 samples, 0.04%)</title><rect x="0.0737%" y="949" width="0.0402%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="12"/><text x="0.3237%" y="959.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (12 samples, 0.04%)</title><rect x="0.0737%" y="933" width="0.0402%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="12"/><text x="0.3237%" y="943.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (12 samples, 0.04%)</title><rect x="0.0737%" y="917" width="0.0402%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="12"/><text x="0.3237%" y="927.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (12 samples, 0.04%)</title><rect x="0.0737%" y="901" width="0.0402%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="12"/><text x="0.3237%" y="911.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (12 samples, 0.04%)</title><rect x="0.0737%" y="885" width="0.0402%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="12"/><text x="0.3237%" y="895.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (12 samples, 0.04%)</title><rect x="0.0737%" y="869" width="0.0402%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="12"/><text x="0.3237%" y="879.50"></text></g><g><title>[unknown] (34 samples, 0.11%)</title><rect x="0.0100%" y="965" width="0.1139%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="34"/><text x="0.2600%" y="975.50"></text></g><g><title>__GI___mmap64 (5 samples, 0.02%)</title><rect x="0.1373%" y="901" width="0.0167%" height="15" fill="rgb(216,20,37)" fg:x="41" fg:w="5"/><text x="0.3873%" y="911.50"></text></g><g><title>__clone3 (10 samples, 0.03%)</title><rect x="0.1239%" y="965" width="0.0335%" height="15" fill="rgb(206,188,39)" fg:x="37" fg:w="10"/><text x="0.3739%" y="975.50"></text></g><g><title>start_thread (6 samples, 0.02%)</title><rect x="0.1373%" y="949" width="0.0201%" height="15" fill="rgb(217,207,13)" fg:x="41" fg:w="6"/><text x="0.3873%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6 samples, 0.02%)</title><rect x="0.1373%" y="933" width="0.0201%" height="15" fill="rgb(231,73,38)" fg:x="41" fg:w="6"/><text x="0.3873%" y="943.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (6 samples, 0.02%)</title><rect x="0.1373%" y="917" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="41" fg:w="6"/><text x="0.3873%" y="927.50"></text></g><g><title>tokio::runtime::builder::Builder::build (6 samples, 0.02%)</title><rect x="0.1842%" y="805" width="0.0201%" height="15" fill="rgb(210,31,41)" fg:x="55" fg:w="6"/><text x="0.4342%" y="815.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (6 samples, 0.02%)</title><rect x="0.1842%" y="789" width="0.0201%" height="15" fill="rgb(221,200,47)" fg:x="55" fg:w="6"/><text x="0.4342%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (6 samples, 0.02%)</title><rect x="0.1842%" y="773" width="0.0201%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="6"/><text x="0.4342%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.02%)</title><rect x="0.1842%" y="757" width="0.0201%" height="15" fill="rgb(249,33,26)" fg:x="55" fg:w="6"/><text x="0.4342%" y="767.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (6 samples, 0.02%)</title><rect x="0.1842%" y="741" width="0.0201%" height="15" fill="rgb(235,183,28)" fg:x="55" fg:w="6"/><text x="0.4342%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (6 samples, 0.02%)</title><rect x="0.1842%" y="725" width="0.0201%" height="15" fill="rgb(221,5,38)" fg:x="55" fg:w="6"/><text x="0.4342%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (6 samples, 0.02%)</title><rect x="0.1842%" y="709" width="0.0201%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="6"/><text x="0.4342%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (6 samples, 0.02%)</title><rect x="0.1842%" y="693" width="0.0201%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="6"/><text x="0.4342%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.02%)</title><rect x="0.1842%" y="677" width="0.0201%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="6"/><text x="0.4342%" y="687.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.02%)</title><rect x="0.1842%" y="661" width="0.0201%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="6"/><text x="0.4342%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.02%)</title><rect x="0.1842%" y="645" width="0.0201%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="6"/><text x="0.4342%" y="655.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.02%)</title><rect x="0.1842%" y="629" width="0.0201%" height="15" fill="rgb(214,148,48)" fg:x="55" fg:w="6"/><text x="0.4342%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 0.02%)</title><rect x="0.1842%" y="613" width="0.0201%" height="15" fill="rgb(232,36,49)" fg:x="55" fg:w="6"/><text x="0.4342%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 0.02%)</title><rect x="0.1842%" y="597" width="0.0201%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="6"/><text x="0.4342%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 0.02%)</title><rect x="0.1842%" y="581" width="0.0201%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="6"/><text x="0.4342%" y="591.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.02%)</title><rect x="0.1842%" y="565" width="0.0201%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="6"/><text x="0.4342%" y="575.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.02%)</title><rect x="0.1842%" y="549" width="0.0201%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="6"/><text x="0.4342%" y="559.50"></text></g><g><title>syscall (6 samples, 0.02%)</title><rect x="0.1842%" y="533" width="0.0201%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="6"/><text x="0.4342%" y="543.50"></text></g><g><title>__libc_start_main_alias_2 (14 samples, 0.05%)</title><rect x="0.1808%" y="949" width="0.0469%" height="15" fill="rgb(233,36,39)" fg:x="54" fg:w="14"/><text x="0.4308%" y="959.50"></text></g><g><title>__libc_start_call_main (14 samples, 0.05%)</title><rect x="0.1808%" y="933" width="0.0469%" height="15" fill="rgb(226,3,54)" fg:x="54" fg:w="14"/><text x="0.4308%" y="943.50"></text></g><g><title>main (14 samples, 0.05%)</title><rect x="0.1808%" y="917" width="0.0469%" height="15" fill="rgb(245,192,40)" fg:x="54" fg:w="14"/><text x="0.4308%" y="927.50"></text></g><g><title>std::rt::lang_start (14 samples, 0.05%)</title><rect x="0.1808%" y="901" width="0.0469%" height="15" fill="rgb(238,167,29)" fg:x="54" fg:w="14"/><text x="0.4308%" y="911.50"></text></g><g><title>std::rt::lang_start_internal (14 samples, 0.05%)</title><rect x="0.1808%" y="885" width="0.0469%" height="15" fill="rgb(232,182,51)" fg:x="54" fg:w="14"/><text x="0.4308%" y="895.50"></text></g><g><title>std::rt::lang_start::{{closure}} (13 samples, 0.04%)</title><rect x="0.1842%" y="869" width="0.0435%" height="15" fill="rgb(231,60,39)" fg:x="55" fg:w="13"/><text x="0.4342%" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.04%)</title><rect x="0.1842%" y="853" width="0.0435%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="13"/><text x="0.4342%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.04%)</title><rect x="0.1842%" y="837" width="0.0435%" height="15" fill="rgb(235,93,37)" fg:x="55" fg:w="13"/><text x="0.4342%" y="847.50"></text></g><g><title>main::main (13 samples, 0.04%)</title><rect x="0.1842%" y="821" width="0.0435%" height="15" fill="rgb(213,116,39)" fg:x="55" fg:w="13"/><text x="0.4342%" y="831.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (7 samples, 0.02%)</title><rect x="0.2043%" y="805" width="0.0234%" height="15" fill="rgb(222,207,29)" fg:x="61" fg:w="7"/><text x="0.4543%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (7 samples, 0.02%)</title><rect x="0.2043%" y="789" width="0.0234%" height="15" fill="rgb(206,96,30)" fg:x="61" fg:w="7"/><text x="0.4543%" y="799.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (7 samples, 0.02%)</title><rect x="0.2043%" y="773" width="0.0234%" height="15" fill="rgb(218,138,4)" fg:x="61" fg:w="7"/><text x="0.4543%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (7 samples, 0.02%)</title><rect x="0.2043%" y="757" width="0.0234%" height="15" fill="rgb(250,191,14)" fg:x="61" fg:w="7"/><text x="0.4543%" y="767.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (7 samples, 0.02%)</title><rect x="0.2043%" y="741" width="0.0234%" height="15" fill="rgb(239,60,40)" fg:x="61" fg:w="7"/><text x="0.4543%" y="751.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (7 samples, 0.02%)</title><rect x="0.2043%" y="725" width="0.0234%" height="15" fill="rgb(206,27,48)" fg:x="61" fg:w="7"/><text x="0.4543%" y="735.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (7 samples, 0.02%)</title><rect x="0.2043%" y="709" width="0.0234%" height="15" fill="rgb(225,35,8)" fg:x="61" fg:w="7"/><text x="0.4543%" y="719.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (7 samples, 0.02%)</title><rect x="0.2043%" y="693" width="0.0234%" height="15" fill="rgb(250,213,24)" fg:x="61" fg:w="7"/><text x="0.4543%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.02%)</title><rect x="0.2043%" y="677" width="0.0234%" height="15" fill="rgb(247,123,22)" fg:x="61" fg:w="7"/><text x="0.4543%" y="687.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (7 samples, 0.02%)</title><rect x="0.2043%" y="661" width="0.0234%" height="15" fill="rgb(231,138,38)" fg:x="61" fg:w="7"/><text x="0.4543%" y="671.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (7 samples, 0.02%)</title><rect x="0.2043%" y="645" width="0.0234%" height="15" fill="rgb(231,145,46)" fg:x="61" fg:w="7"/><text x="0.4543%" y="655.50"></text></g><g><title>tokio::runtime::park::Inner::park (7 samples, 0.02%)</title><rect x="0.2043%" y="629" width="0.0234%" height="15" fill="rgb(251,118,11)" fg:x="61" fg:w="7"/><text x="0.4543%" y="639.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (7 samples, 0.02%)</title><rect x="0.2043%" y="613" width="0.0234%" height="15" fill="rgb(217,147,25)" fg:x="61" fg:w="7"/><text x="0.4543%" y="623.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (7 samples, 0.02%)</title><rect x="0.2043%" y="597" width="0.0234%" height="15" fill="rgb(247,81,37)" fg:x="61" fg:w="7"/><text x="0.4543%" y="607.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (7 samples, 0.02%)</title><rect x="0.2043%" y="581" width="0.0234%" height="15" fill="rgb(209,12,38)" fg:x="61" fg:w="7"/><text x="0.4543%" y="591.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 0.02%)</title><rect x="0.2076%" y="565" width="0.0201%" height="15" fill="rgb(227,1,9)" fg:x="62" fg:w="6"/><text x="0.4576%" y="575.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 0.02%)</title><rect x="0.2076%" y="549" width="0.0201%" height="15" fill="rgb(248,47,43)" fg:x="62" fg:w="6"/><text x="0.4576%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 0.02%)</title><rect x="0.2076%" y="533" width="0.0201%" height="15" fill="rgb(221,10,30)" fg:x="62" fg:w="6"/><text x="0.4576%" y="543.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.02%)</title><rect x="0.2076%" y="517" width="0.0201%" height="15" fill="rgb(210,229,1)" fg:x="62" fg:w="6"/><text x="0.4576%" y="527.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.02%)</title><rect x="0.2076%" y="501" width="0.0201%" height="15" fill="rgb(222,148,37)" fg:x="62" fg:w="6"/><text x="0.4576%" y="511.50"></text></g><g><title>syscall (6 samples, 0.02%)</title><rect x="0.2076%" y="485" width="0.0201%" height="15" fill="rgb(234,67,33)" fg:x="62" fg:w="6"/><text x="0.4576%" y="495.50"></text></g><g><title>main (72 samples, 0.24%)</title><rect x="0.0000%" y="981" width="0.2411%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="72"/><text x="0.2500%" y="991.50"></text></g><g><title>_start (25 samples, 0.08%)</title><rect x="0.1574%" y="965" width="0.0837%" height="15" fill="rgb(247,138,52)" fg:x="47" fg:w="25"/><text x="0.4074%" y="975.50"></text></g><g><title>_dl_start (4 samples, 0.01%)</title><rect x="0.2277%" y="949" width="0.0134%" height="15" fill="rgb(213,79,30)" fg:x="68" fg:w="4"/><text x="0.4777%" y="959.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.01%)</title><rect x="0.2277%" y="933" width="0.0134%" height="15" fill="rgb(246,177,23)" fg:x="68" fg:w="4"/><text x="0.4777%" y="943.50"></text></g><g><title>dl_main (3 samples, 0.01%)</title><rect x="0.2311%" y="917" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="69" fg:w="3"/><text x="0.4811%" y="927.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="0.2411%" y="965" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="72" fg:w="3"/><text x="0.4911%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="0.2880%" y="949" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="86" fg:w="3"/><text x="0.5380%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.04%)</title><rect x="0.2981%" y="949" width="0.0435%" height="15" fill="rgb(251,115,12)" fg:x="89" fg:w="13"/><text x="0.5481%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (175 samples, 0.59%)</title><rect x="0.3416%" y="949" width="0.5861%" height="15" fill="rgb(240,54,50)" fg:x="102" fg:w="175"/><text x="0.5916%" y="959.50"></text></g><g><title>_int_free (16 samples, 0.05%)</title><rect x="0.9344%" y="949" width="0.0536%" height="15" fill="rgb(233,84,52)" fg:x="279" fg:w="16"/><text x="1.1844%" y="959.50"></text></g><g><title>_int_malloc (18 samples, 0.06%)</title><rect x="0.9880%" y="949" width="0.0603%" height="15" fill="rgb(207,117,47)" fg:x="295" fg:w="18"/><text x="1.2380%" y="959.50"></text></g><g><title>alloc::fmt::format::format_inner (13 samples, 0.04%)</title><rect x="1.0516%" y="949" width="0.0435%" height="15" fill="rgb(249,43,39)" fg:x="314" fg:w="13"/><text x="1.3016%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (3 samples, 0.01%)</title><rect x="1.1085%" y="949" width="0.0100%" height="15" fill="rgb(209,38,44)" fg:x="331" fg:w="3"/><text x="1.3585%" y="959.50"></text></g><g><title>[[heap]] (253 samples, 0.85%)</title><rect x="0.2880%" y="965" width="0.8473%" height="15" fill="rgb(236,212,23)" fg:x="86" fg:w="253"/><text x="0.5380%" y="975.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="1.1387%" y="949" width="0.0167%" height="15" fill="rgb(242,79,21)" fg:x="340" fg:w="5"/><text x="1.3887%" y="959.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5 samples, 0.02%)</title><rect x="1.1554%" y="949" width="0.0167%" height="15" fill="rgb(211,96,35)" fg:x="345" fg:w="5"/><text x="1.4054%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="1.1789%" y="949" width="0.0301%" height="15" fill="rgb(253,215,40)" fg:x="352" fg:w="9"/><text x="1.4289%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.04%)</title><rect x="1.2124%" y="949" width="0.0402%" height="15" fill="rgb(211,81,21)" fg:x="362" fg:w="12"/><text x="1.4624%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.02%)</title><rect x="1.2559%" y="949" width="0.0234%" height="15" fill="rgb(208,190,38)" fg:x="375" fg:w="7"/><text x="1.5059%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.01%)</title><rect x="1.2860%" y="949" width="0.0100%" height="15" fill="rgb(235,213,38)" fg:x="384" fg:w="3"/><text x="1.5360%" y="959.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="1.3195%" y="949" width="0.0134%" height="15" fill="rgb(237,122,38)" fg:x="394" fg:w="4"/><text x="1.5695%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.01%)</title><rect x="1.3396%" y="949" width="0.0134%" height="15" fill="rgb(244,218,35)" fg:x="400" fg:w="4"/><text x="1.5896%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="1.3564%" y="949" width="0.0167%" height="15" fill="rgb(240,68,47)" fg:x="405" fg:w="5"/><text x="1.6064%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.01%)</title><rect x="1.3731%" y="949" width="0.0100%" height="15" fill="rgb(210,16,53)" fg:x="410" fg:w="3"/><text x="1.6231%" y="959.50"></text></g><g><title>&lt;quick_xml::name::QName as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="1.3999%" y="949" width="0.0100%" height="15" fill="rgb(235,124,12)" fg:x="418" fg:w="3"/><text x="1.6499%" y="959.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="1.4133%" y="949" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="422" fg:w="3"/><text x="1.6633%" y="959.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (3 samples, 0.01%)</title><rect x="1.4267%" y="949" width="0.0100%" height="15" fill="rgb(250,166,2)" fg:x="426" fg:w="3"/><text x="1.6767%" y="959.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.04%)</title><rect x="1.4368%" y="949" width="0.0435%" height="15" fill="rgb(242,216,29)" fg:x="429" fg:w="13"/><text x="1.6868%" y="959.50"></text></g><g><title>__clone3 (6 samples, 0.02%)</title><rect x="1.4803%" y="949" width="0.0201%" height="15" fill="rgb(230,116,27)" fg:x="442" fg:w="6"/><text x="1.7303%" y="959.50"></text></g><g><title>__free (5 samples, 0.02%)</title><rect x="1.5004%" y="949" width="0.0167%" height="15" fill="rgb(228,99,48)" fg:x="448" fg:w="5"/><text x="1.7504%" y="959.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="1.5238%" y="949" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="455" fg:w="3"/><text x="1.7738%" y="959.50"></text></g><g><title>_int_malloc (83 samples, 0.28%)</title><rect x="1.5339%" y="949" width="0.2780%" height="15" fill="rgb(247,143,39)" fg:x="458" fg:w="83"/><text x="1.7839%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="1.8118%" y="949" width="0.0100%" height="15" fill="rgb(236,97,10)" fg:x="541" fg:w="3"/><text x="2.0618%" y="959.50"></text></g><g><title>alloc::fmt::format::format_inner (25 samples, 0.08%)</title><rect x="1.8420%" y="949" width="0.0837%" height="15" fill="rgb(233,208,19)" fg:x="550" fg:w="25"/><text x="2.0920%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.01%)</title><rect x="1.9291%" y="949" width="0.0134%" height="15" fill="rgb(216,164,2)" fg:x="576" fg:w="4"/><text x="2.1791%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.06%)</title><rect x="1.9425%" y="949" width="0.0569%" height="15" fill="rgb(220,129,5)" fg:x="580" fg:w="17"/><text x="2.1925%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.10%)</title><rect x="1.9994%" y="949" width="0.1038%" height="15" fill="rgb(242,17,10)" fg:x="597" fg:w="31"/><text x="2.2494%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="2.1032%" y="949" width="0.0167%" height="15" fill="rgb(242,107,0)" fg:x="628" fg:w="5"/><text x="2.3532%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.01%)</title><rect x="2.1267%" y="949" width="0.0100%" height="15" fill="rgb(251,28,31)" fg:x="635" fg:w="3"/><text x="2.3767%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.15%)</title><rect x="2.1367%" y="949" width="0.1541%" height="15" fill="rgb(233,223,10)" fg:x="638" fg:w="46"/><text x="2.3867%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (67 samples, 0.22%)</title><rect x="2.2908%" y="949" width="0.2244%" height="15" fill="rgb(215,21,27)" fg:x="684" fg:w="67"/><text x="2.5408%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.02%)</title><rect x="2.5152%" y="949" width="0.0234%" height="15" fill="rgb(232,23,21)" fg:x="751" fg:w="7"/><text x="2.7652%" y="959.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (48 samples, 0.16%)</title><rect x="2.5587%" y="949" width="0.1608%" height="15" fill="rgb(244,5,23)" fg:x="764" fg:w="48"/><text x="2.8087%" y="959.50"></text></g><g><title>core::cmp::max_by (5 samples, 0.02%)</title><rect x="2.7261%" y="949" width="0.0167%" height="15" fill="rgb(226,81,46)" fg:x="814" fg:w="5"/><text x="2.9761%" y="959.50"></text></g><g><title>core::fmt::Arguments::new_v1 (60 samples, 0.20%)</title><rect x="2.7496%" y="949" width="0.2009%" height="15" fill="rgb(247,70,30)" fg:x="821" fg:w="60"/><text x="2.9996%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad (3 samples, 0.01%)</title><rect x="2.9505%" y="949" width="0.0100%" height="15" fill="rgb(212,68,19)" fg:x="881" fg:w="3"/><text x="3.2005%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad_integral (24 samples, 0.08%)</title><rect x="2.9606%" y="949" width="0.0804%" height="15" fill="rgb(240,187,13)" fg:x="884" fg:w="24"/><text x="3.2106%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (16 samples, 0.05%)</title><rect x="3.0410%" y="949" width="0.0536%" height="15" fill="rgb(223,113,26)" fg:x="908" fg:w="16"/><text x="3.2910%" y="959.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (3 samples, 0.01%)</title><rect x="3.0945%" y="949" width="0.0100%" height="15" fill="rgb(206,192,2)" fg:x="924" fg:w="3"/><text x="3.3445%" y="959.50"></text></g><g><title>core::fmt::write (23 samples, 0.08%)</title><rect x="3.1113%" y="949" width="0.0770%" height="15" fill="rgb(241,108,4)" fg:x="929" fg:w="23"/><text x="3.3613%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.01%)</title><rect x="3.1950%" y="949" width="0.0100%" height="15" fill="rgb(247,173,49)" fg:x="954" fg:w="3"/><text x="3.4450%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.02%)</title><rect x="3.2051%" y="949" width="0.0167%" height="15" fill="rgb(224,114,35)" fg:x="957" fg:w="5"/><text x="3.4551%" y="959.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (3 samples, 0.01%)</title><rect x="3.2319%" y="949" width="0.0100%" height="15" fill="rgb(245,159,27)" fg:x="965" fg:w="3"/><text x="3.4819%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.02%)</title><rect x="3.2586%" y="949" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="973" fg:w="5"/><text x="3.5086%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="3.2787%" y="949" width="0.0134%" height="15" fill="rgb(236,23,11)" fg:x="979" fg:w="4"/><text x="3.5287%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(usize,regex::regex::string::Captures)&gt;&gt; (3 samples, 0.01%)</title><rect x="3.2921%" y="949" width="0.0100%" height="15" fill="rgb(205,117,38)" fg:x="983" fg:w="3"/><text x="3.5421%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (11 samples, 0.04%)</title><rect x="3.3290%" y="949" width="0.0368%" height="15" fill="rgb(237,72,25)" fg:x="994" fg:w="11"/><text x="3.5790%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (29 samples, 0.10%)</title><rect x="3.3658%" y="949" width="0.0971%" height="15" fill="rgb(244,70,9)" fg:x="1005" fg:w="29"/><text x="3.6158%" y="959.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.01%)</title><rect x="3.4797%" y="949" width="0.0100%" height="15" fill="rgb(217,125,39)" fg:x="1039" fg:w="3"/><text x="3.7297%" y="959.50"></text></g><g><title>[anon] (749 samples, 2.51%)</title><rect x="1.1353%" y="965" width="2.5085%" height="15" fill="rgb(235,36,10)" fg:x="339" fg:w="749"/><text x="1.3853%" y="975.50">[a..</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.01%)</title><rect x="3.6304%" y="949" width="0.0134%" height="15" fill="rgb(251,123,47)" fg:x="1084" fg:w="4"/><text x="3.8804%" y="959.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="4.0323%" y="949" width="0.0100%" height="15" fill="rgb(221,13,13)" fg:x="1204" fg:w="3"/><text x="4.2823%" y="959.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.08%)</title><rect x="4.0591%" y="949" width="0.0837%" height="15" fill="rgb(238,131,9)" fg:x="1212" fg:w="25"/><text x="4.3091%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.03%)</title><rect x="4.1562%" y="949" width="0.0335%" height="15" fill="rgb(211,50,8)" fg:x="1241" fg:w="10"/><text x="4.4062%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.02%)</title><rect x="4.1930%" y="949" width="0.0201%" height="15" fill="rgb(245,182,24)" fg:x="1252" fg:w="6"/><text x="4.4430%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="4.2131%" y="949" width="0.0167%" height="15" fill="rgb(242,14,37)" fg:x="1258" fg:w="5"/><text x="4.4631%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad_integral (23 samples, 0.08%)</title><rect x="4.2366%" y="949" width="0.0770%" height="15" fill="rgb(246,228,12)" fg:x="1265" fg:w="23"/><text x="4.4866%" y="959.50"></text></g><g><title>[main] (206 samples, 0.69%)</title><rect x="3.6438%" y="965" width="0.6899%" height="15" fill="rgb(213,55,15)" fg:x="1088" fg:w="206"/><text x="3.8938%" y="975.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (128 samples, 0.43%)</title><rect x="4.3371%" y="949" width="0.4287%" height="15" fill="rgb(209,9,3)" fg:x="1295" fg:w="128"/><text x="4.5871%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="4.7925%" y="901" width="0.0167%" height="15" fill="rgb(230,59,30)" fg:x="1431" fg:w="5"/><text x="5.0425%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.03%)</title><rect x="4.8160%" y="901" width="0.0301%" height="15" fill="rgb(209,121,21)" fg:x="1438" fg:w="9"/><text x="5.0660%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="4.8193%" y="885" width="0.0268%" height="15" fill="rgb(220,109,13)" fg:x="1439" fg:w="8"/><text x="5.0693%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="4.8193%" y="869" width="0.0268%" height="15" fill="rgb(232,18,1)" fg:x="1439" fg:w="8"/><text x="5.0693%" y="879.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="4.8294%" y="853" width="0.0167%" height="15" fill="rgb(215,41,42)" fg:x="1442" fg:w="5"/><text x="5.0794%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.01%)</title><rect x="4.8528%" y="837" width="0.0134%" height="15" fill="rgb(224,123,36)" fg:x="1449" fg:w="4"/><text x="5.1028%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.01%)</title><rect x="4.8528%" y="821" width="0.0134%" height="15" fill="rgb(240,125,3)" fg:x="1449" fg:w="4"/><text x="5.1028%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="4.8562%" y="805" width="0.0100%" height="15" fill="rgb(205,98,50)" fg:x="1450" fg:w="3"/><text x="5.1062%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="4.8562%" y="789" width="0.0100%" height="15" fill="rgb(205,185,37)" fg:x="1450" fg:w="3"/><text x="5.1062%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="4.8562%" y="773" width="0.0100%" height="15" fill="rgb(238,207,15)" fg:x="1450" fg:w="3"/><text x="5.1062%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.03%)</title><rect x="4.8495%" y="901" width="0.0268%" height="15" fill="rgb(213,199,42)" fg:x="1448" fg:w="8"/><text x="5.0995%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="4.8495%" y="885" width="0.0268%" height="15" fill="rgb(235,201,11)" fg:x="1448" fg:w="8"/><text x="5.0995%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="4.8495%" y="869" width="0.0268%" height="15" fill="rgb(207,46,11)" fg:x="1448" fg:w="8"/><text x="5.0995%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="4.8495%" y="853" width="0.0268%" height="15" fill="rgb(241,35,35)" fg:x="1448" fg:w="8"/><text x="5.0995%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.01%)</title><rect x="4.8662%" y="837" width="0.0100%" height="15" fill="rgb(243,32,47)" fg:x="1453" fg:w="3"/><text x="5.1162%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="4.8662%" y="821" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="1453" fg:w="3"/><text x="5.1162%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="4.8662%" y="805" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="1453" fg:w="3"/><text x="5.1162%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.01%)</title><rect x="4.8662%" y="789" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="1453" fg:w="3"/><text x="5.1162%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="4.8829%" y="885" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="1458" fg:w="3"/><text x="5.1329%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;alloc::string::String&gt;&gt; (5 samples, 0.02%)</title><rect x="4.8829%" y="901" width="0.0167%" height="15" fill="rgb(216,99,12)" fg:x="1458" fg:w="5"/><text x="5.1329%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (3 samples, 0.01%)</title><rect x="4.8997%" y="901" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="1463" fg:w="3"/><text x="5.1497%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (3 samples, 0.01%)</title><rect x="4.8997%" y="885" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="1463" fg:w="3"/><text x="5.1497%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="4.8997%" y="869" width="0.0100%" height="15" fill="rgb(213,25,53)" fg:x="1463" fg:w="3"/><text x="5.1497%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="4.8997%" y="853" width="0.0100%" height="15" fill="rgb(252,105,26)" fg:x="1463" fg:w="3"/><text x="5.1497%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(&amp;rust_xlsxwriter::format::Format,&amp;str)&gt;&gt; (4 samples, 0.01%)</title><rect x="4.9097%" y="901" width="0.0134%" height="15" fill="rgb(220,39,43)" fg:x="1466" fg:w="4"/><text x="5.1597%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(&amp;rust_xlsxwriter::format::Format,&amp;str)&gt;&gt; (4 samples, 0.01%)</title><rect x="4.9097%" y="885" width="0.0134%" height="15" fill="rgb(229,68,48)" fg:x="1466" fg:w="4"/><text x="5.1597%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="4.9131%" y="869" width="0.0100%" height="15" fill="rgb(252,8,32)" fg:x="1467" fg:w="3"/><text x="5.1631%" y="879.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.01%)</title><rect x="4.9265%" y="629" width="0.0134%" height="15" fill="rgb(223,20,43)" fg:x="1471" fg:w="4"/><text x="5.1765%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (3 samples, 0.01%)</title><rect x="4.9298%" y="613" width="0.0100%" height="15" fill="rgb(229,81,49)" fg:x="1472" fg:w="3"/><text x="5.1798%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.01%)</title><rect x="4.9466%" y="549" width="0.0134%" height="15" fill="rgb(236,28,36)" fg:x="1477" fg:w="4"/><text x="5.1966%" y="559.50"></text></g><g><title>core::mem::drop (4 samples, 0.01%)</title><rect x="4.9466%" y="533" width="0.0134%" height="15" fill="rgb(249,185,26)" fg:x="1477" fg:w="4"/><text x="5.1966%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;str&gt;&gt; (4 samples, 0.01%)</title><rect x="4.9466%" y="517" width="0.0134%" height="15" fill="rgb(249,174,33)" fg:x="1477" fg:w="4"/><text x="5.1966%" y="527.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="4.9499%" y="501" width="0.0100%" height="15" fill="rgb(233,201,37)" fg:x="1478" fg:w="3"/><text x="5.1999%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.01%)</title><rect x="4.9600%" y="549" width="0.0100%" height="15" fill="rgb(221,78,26)" fg:x="1481" fg:w="3"/><text x="5.2100%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.01%)</title><rect x="4.9600%" y="533" width="0.0100%" height="15" fill="rgb(250,127,30)" fg:x="1481" fg:w="3"/><text x="5.2100%" y="543.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (10 samples, 0.03%)</title><rect x="4.9399%" y="613" width="0.0335%" height="15" fill="rgb(230,49,44)" fg:x="1475" fg:w="10"/><text x="5.1899%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::CellType&gt; (10 samples, 0.03%)</title><rect x="4.9399%" y="597" width="0.0335%" height="15" fill="rgb(229,67,23)" fg:x="1475" fg:w="10"/><text x="5.1899%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (9 samples, 0.03%)</title><rect x="4.9432%" y="581" width="0.0301%" height="15" fill="rgb(249,83,47)" fg:x="1476" fg:w="9"/><text x="5.1932%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="4.9432%" y="565" width="0.0301%" height="15" fill="rgb(215,43,3)" fg:x="1476" fg:w="9"/><text x="5.1932%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::workbook::Workbook&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="901" width="0.0569%" height="15" fill="rgb(238,154,13)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_xlsxwriter::worksheet::Worksheet&gt;&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="885" width="0.0569%" height="15" fill="rgb(219,56,2)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="869" width="0.0569%" height="15" fill="rgb(233,0,4)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust_xlsxwriter::worksheet::Worksheet]&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="853" width="0.0569%" height="15" fill="rgb(235,30,7)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::Worksheet&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="837" width="0.0569%" height="15" fill="rgb(250,79,13)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="821" width="0.0569%" height="15" fill="rgb(211,146,34)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="831.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="805" width="0.0569%" height="15" fill="rgb(228,22,38)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="815.50"></text></g><g><title>core::mem::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="789" width="0.0569%" height="15" fill="rgb(235,168,5)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="773" width="0.0569%" height="15" fill="rgb(221,155,16)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="757" width="0.0569%" height="15" fill="rgb(215,215,53)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="767.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (17 samples, 0.06%)</title><rect x="4.9231%" y="741" width="0.0569%" height="15" fill="rgb(223,4,10)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (17 samples, 0.06%)</title><rect x="4.9231%" y="725" width="0.0569%" height="15" fill="rgb(234,103,6)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="709" width="0.0569%" height="15" fill="rgb(227,97,0)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="693" width="0.0569%" height="15" fill="rgb(234,150,53)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="703.50"></text></g><g><title>core::mem::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="677" width="0.0569%" height="15" fill="rgb(228,201,54)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (17 samples, 0.06%)</title><rect x="4.9231%" y="661" width="0.0569%" height="15" fill="rgb(222,22,37)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.06%)</title><rect x="4.9231%" y="645" width="0.0569%" height="15" fill="rgb(237,53,32)" fg:x="1470" fg:w="17"/><text x="5.1731%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (12 samples, 0.04%)</title><rect x="4.9399%" y="629" width="0.0402%" height="15" fill="rgb(233,25,53)" fg:x="1475" fg:w="12"/><text x="5.1899%" y="639.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5 samples, 0.02%)</title><rect x="5.0270%" y="805" width="0.0167%" height="15" fill="rgb(210,40,34)" fg:x="1501" fg:w="5"/><text x="5.2770%" y="815.50"></text></g><g><title>core::str::validations::next_code_point_reverse (5 samples, 0.02%)</title><rect x="5.0270%" y="789" width="0.0167%" height="15" fill="rgb(241,220,44)" fg:x="1501" fg:w="5"/><text x="5.2770%" y="799.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (14 samples, 0.05%)</title><rect x="5.0035%" y="869" width="0.0469%" height="15" fill="rgb(235,28,35)" fg:x="1494" fg:w="14"/><text x="5.2535%" y="879.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (13 samples, 0.04%)</title><rect x="5.0069%" y="853" width="0.0435%" height="15" fill="rgb(210,56,17)" fg:x="1495" fg:w="13"/><text x="5.2569%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (11 samples, 0.04%)</title><rect x="5.0136%" y="837" width="0.0368%" height="15" fill="rgb(224,130,29)" fg:x="1497" fg:w="11"/><text x="5.2636%" y="847.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (8 samples, 0.03%)</title><rect x="5.0236%" y="821" width="0.0268%" height="15" fill="rgb(235,212,8)" fg:x="1500" fg:w="8"/><text x="5.2736%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (3 samples, 0.01%)</title><rect x="5.0538%" y="821" width="0.0100%" height="15" fill="rgb(223,33,50)" fg:x="1509" fg:w="3"/><text x="5.3038%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (9 samples, 0.03%)</title><rect x="5.0504%" y="869" width="0.0301%" height="15" fill="rgb(219,149,13)" fg:x="1508" fg:w="9"/><text x="5.3004%" y="879.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (9 samples, 0.03%)</title><rect x="5.0504%" y="853" width="0.0301%" height="15" fill="rgb(250,156,29)" fg:x="1508" fg:w="9"/><text x="5.3004%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (9 samples, 0.03%)</title><rect x="5.0504%" y="837" width="0.0301%" height="15" fill="rgb(216,193,19)" fg:x="1508" fg:w="9"/><text x="5.3004%" y="847.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="5.0638%" y="821" width="0.0167%" height="15" fill="rgb(216,135,14)" fg:x="1512" fg:w="5"/><text x="5.3138%" y="831.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="5.0671%" y="805" width="0.0134%" height="15" fill="rgb(241,47,5)" fg:x="1513" fg:w="4"/><text x="5.3171%" y="815.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.01%)</title><rect x="5.0671%" y="789" width="0.0134%" height="15" fill="rgb(233,42,35)" fg:x="1513" fg:w="4"/><text x="5.3171%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="5.0705%" y="773" width="0.0100%" height="15" fill="rgb(231,13,6)" fg:x="1514" fg:w="3"/><text x="5.3205%" y="783.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (27 samples, 0.09%)</title><rect x="4.9935%" y="901" width="0.0904%" height="15" fill="rgb(207,181,40)" fg:x="1491" fg:w="27"/><text x="5.2435%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (27 samples, 0.09%)</title><rect x="4.9935%" y="885" width="0.0904%" height="15" fill="rgb(254,173,49)" fg:x="1491" fg:w="27"/><text x="5.2435%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.01%)</title><rect x="5.0872%" y="885" width="0.0134%" height="15" fill="rgb(221,1,38)" fg:x="1519" fg:w="4"/><text x="5.3372%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.01%)</title><rect x="5.0872%" y="869" width="0.0134%" height="15" fill="rgb(206,124,46)" fg:x="1519" fg:w="4"/><text x="5.3372%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="5.0906%" y="853" width="0.0100%" height="15" fill="rgb(249,21,11)" fg:x="1520" fg:w="3"/><text x="5.3406%" y="863.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="5.0906%" y="837" width="0.0100%" height="15" fill="rgb(222,201,40)" fg:x="1520" fg:w="3"/><text x="5.3406%" y="847.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.01%)</title><rect x="5.0906%" y="821" width="0.0100%" height="15" fill="rgb(235,61,29)" fg:x="1520" fg:w="3"/><text x="5.3406%" y="831.50"></text></g><g><title>core::cmp::max (3 samples, 0.01%)</title><rect x="5.1241%" y="837" width="0.0100%" height="15" fill="rgb(219,207,3)" fg:x="1530" fg:w="3"/><text x="5.3741%" y="847.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.01%)</title><rect x="5.1241%" y="821" width="0.0100%" height="15" fill="rgb(222,56,46)" fg:x="1530" fg:w="3"/><text x="5.3741%" y="831.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.01%)</title><rect x="5.1241%" y="805" width="0.0100%" height="15" fill="rgb(239,76,54)" fg:x="1530" fg:w="3"/><text x="5.3741%" y="815.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (9 samples, 0.03%)</title><rect x="5.1140%" y="869" width="0.0301%" height="15" fill="rgb(231,124,27)" fg:x="1527" fg:w="9"/><text x="5.3640%" y="879.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (9 samples, 0.03%)</title><rect x="5.1140%" y="853" width="0.0301%" height="15" fill="rgb(249,195,6)" fg:x="1527" fg:w="9"/><text x="5.3640%" y="863.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (12 samples, 0.04%)</title><rect x="5.1107%" y="885" width="0.0402%" height="15" fill="rgb(237,174,47)" fg:x="1526" fg:w="12"/><text x="5.3607%" y="895.50"></text></g><g><title>excel_merge::search::SearchFiles::split_thing (24 samples, 0.08%)</title><rect x="5.0839%" y="901" width="0.0804%" height="15" fill="rgb(206,201,31)" fg:x="1518" fg:w="24"/><text x="5.3339%" y="911.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (4 samples, 0.01%)</title><rect x="5.1509%" y="885" width="0.0134%" height="15" fill="rgb(231,57,52)" fg:x="1538" fg:w="4"/><text x="5.4009%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="5.2011%" y="773" width="0.0134%" height="15" fill="rgb(248,177,22)" fg:x="1553" fg:w="4"/><text x="5.4511%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.05%)</title><rect x="5.1911%" y="805" width="0.0536%" height="15" fill="rgb(215,211,37)" fg:x="1550" fg:w="16"/><text x="5.4411%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (16 samples, 0.05%)</title><rect x="5.1911%" y="789" width="0.0536%" height="15" fill="rgb(241,128,51)" fg:x="1550" fg:w="16"/><text x="5.4411%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.03%)</title><rect x="5.2145%" y="773" width="0.0301%" height="15" fill="rgb(227,165,31)" fg:x="1557" fg:w="9"/><text x="5.4645%" y="783.50"></text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer::{{closure}} (9 samples, 0.03%)</title><rect x="5.2145%" y="757" width="0.0301%" height="15" fill="rgb(228,167,24)" fg:x="1557" fg:w="9"/><text x="5.4645%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (9 samples, 0.03%)</title><rect x="5.2145%" y="741" width="0.0301%" height="15" fill="rgb(228,143,12)" fg:x="1557" fg:w="9"/><text x="5.4645%" y="751.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (8 samples, 0.03%)</title><rect x="5.2179%" y="725" width="0.0268%" height="15" fill="rgb(249,149,8)" fg:x="1558" fg:w="8"/><text x="5.4679%" y="735.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (8 samples, 0.03%)</title><rect x="5.2179%" y="709" width="0.0268%" height="15" fill="rgb(243,35,44)" fg:x="1558" fg:w="8"/><text x="5.4679%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.01%)</title><rect x="5.2313%" y="693" width="0.0134%" height="15" fill="rgb(246,89,9)" fg:x="1562" fg:w="4"/><text x="5.4813%" y="703.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.01%)</title><rect x="5.2313%" y="677" width="0.0134%" height="15" fill="rgb(233,213,13)" fg:x="1562" fg:w="4"/><text x="5.4813%" y="687.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.01%)</title><rect x="5.2346%" y="661" width="0.0100%" height="15" fill="rgb(233,141,41)" fg:x="1563" fg:w="3"/><text x="5.4846%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_naive (3 samples, 0.01%)</title><rect x="5.2346%" y="645" width="0.0100%" height="15" fill="rgb(239,167,4)" fg:x="1563" fg:w="3"/><text x="5.4846%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.06%)</title><rect x="5.1844%" y="821" width="0.0636%" height="15" fill="rgb(209,217,16)" fg:x="1548" fg:w="19"/><text x="5.4344%" y="831.50"></text></g><g><title>itertools::Itertools::collect_vec (30 samples, 0.10%)</title><rect x="5.1643%" y="901" width="0.1005%" height="15" fill="rgb(219,88,35)" fg:x="1542" fg:w="30"/><text x="5.4143%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.10%)</title><rect x="5.1643%" y="885" width="0.1005%" height="15" fill="rgb(220,193,23)" fg:x="1542" fg:w="30"/><text x="5.4143%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.10%)</title><rect x="5.1643%" y="869" width="0.1005%" height="15" fill="rgb(230,90,52)" fg:x="1542" fg:w="30"/><text x="5.4143%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.10%)</title><rect x="5.1643%" y="853" width="0.1005%" height="15" fill="rgb(252,106,19)" fg:x="1542" fg:w="30"/><text x="5.4143%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (29 samples, 0.10%)</title><rect x="5.1676%" y="837" width="0.0971%" height="15" fill="rgb(206,74,20)" fg:x="1543" fg:w="29"/><text x="5.4176%" y="847.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="5.2781%" y="853" width="0.0134%" height="15" fill="rgb(230,138,44)" fg:x="1576" fg:w="4"/><text x="5.5281%" y="863.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (4 samples, 0.01%)</title><rect x="5.2781%" y="837" width="0.0134%" height="15" fill="rgb(235,182,43)" fg:x="1576" fg:w="4"/><text x="5.5281%" y="847.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="5.2781%" y="885" width="0.0268%" height="15" fill="rgb(242,16,51)" fg:x="1576" fg:w="8"/><text x="5.5281%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="5.2781%" y="869" width="0.0268%" height="15" fill="rgb(248,9,4)" fg:x="1576" fg:w="8"/><text x="5.5281%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.01%)</title><rect x="5.2915%" y="853" width="0.0134%" height="15" fill="rgb(210,31,22)" fg:x="1580" fg:w="4"/><text x="5.5415%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.01%)</title><rect x="5.2915%" y="837" width="0.0134%" height="15" fill="rgb(239,54,39)" fg:x="1580" fg:w="4"/><text x="5.5415%" y="847.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4 samples, 0.01%)</title><rect x="5.2915%" y="821" width="0.0134%" height="15" fill="rgb(230,99,41)" fg:x="1580" fg:w="4"/><text x="5.5415%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (5 samples, 0.02%)</title><rect x="5.3116%" y="885" width="0.0167%" height="15" fill="rgb(253,106,12)" fg:x="1586" fg:w="5"/><text x="5.5616%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.01%)</title><rect x="5.3183%" y="869" width="0.0100%" height="15" fill="rgb(213,46,41)" fg:x="1588" fg:w="3"/><text x="5.5683%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::lines (5 samples, 0.02%)</title><rect x="5.3317%" y="885" width="0.0167%" height="15" fill="rgb(215,133,35)" fg:x="1592" fg:w="5"/><text x="5.5817%" y="895.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_inclusive (3 samples, 0.01%)</title><rect x="5.3384%" y="869" width="0.0100%" height="15" fill="rgb(213,28,5)" fg:x="1594" fg:w="3"/><text x="5.5884%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.02%)</title><rect x="5.3954%" y="853" width="0.0167%" height="15" fill="rgb(215,77,49)" fg:x="1611" fg:w="5"/><text x="5.6454%" y="863.50"></text></g><g><title>rust_xlsxwriter::utility::pixel_width (36 samples, 0.12%)</title><rect x="5.3485%" y="885" width="0.1206%" height="15" fill="rgb(248,100,22)" fg:x="1597" fg:w="36"/><text x="5.5985%" y="895.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.08%)</title><rect x="5.3887%" y="869" width="0.0804%" height="15" fill="rgb(208,67,9)" fg:x="1609" fg:w="24"/><text x="5.6387%" y="879.50"></text></g><g><title>core::str::validations::next_code_point (17 samples, 0.06%)</title><rect x="5.4121%" y="853" width="0.0569%" height="15" fill="rgb(219,133,21)" fg:x="1616" fg:w="17"/><text x="5.6621%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="5.4489%" y="837" width="0.0201%" height="15" fill="rgb(246,46,29)" fg:x="1627" fg:w="6"/><text x="5.6989%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="5.4724%" y="805" width="0.0368%" height="15" fill="rgb(246,185,52)" fg:x="1634" fg:w="11"/><text x="5.7224%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="5.4724%" y="789" width="0.0368%" height="15" fill="rgb(252,136,11)" fg:x="1634" fg:w="11"/><text x="5.7224%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.04%)</title><rect x="5.4724%" y="773" width="0.0368%" height="15" fill="rgb(219,138,53)" fg:x="1634" fg:w="11"/><text x="5.7224%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.03%)</title><rect x="5.4791%" y="757" width="0.0301%" height="15" fill="rgb(211,51,23)" fg:x="1636" fg:w="9"/><text x="5.7291%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.05%)</title><rect x="5.4724%" y="837" width="0.0502%" height="15" fill="rgb(247,221,28)" fg:x="1634" fg:w="15"/><text x="5.7224%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.05%)</title><rect x="5.4724%" y="821" width="0.0502%" height="15" fill="rgb(251,222,45)" fg:x="1634" fg:w="15"/><text x="5.7224%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="5.5126%" y="805" width="0.0100%" height="15" fill="rgb(217,162,53)" fg:x="1646" fg:w="3"/><text x="5.7626%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.01%)</title><rect x="5.5360%" y="789" width="0.0134%" height="15" fill="rgb(229,93,14)" fg:x="1653" fg:w="4"/><text x="5.7860%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.01%)</title><rect x="5.5360%" y="773" width="0.0134%" height="15" fill="rgb(209,67,49)" fg:x="1653" fg:w="4"/><text x="5.7860%" y="783.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::autofit (88 samples, 0.29%)</title><rect x="5.2647%" y="901" width="0.2947%" height="15" fill="rgb(213,87,29)" fg:x="1572" fg:w="88"/><text x="5.5147%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (27 samples, 0.09%)</title><rect x="5.4690%" y="885" width="0.0904%" height="15" fill="rgb(205,151,52)" fg:x="1633" fg:w="27"/><text x="5.7190%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (27 samples, 0.09%)</title><rect x="5.4690%" y="869" width="0.0904%" height="15" fill="rgb(253,215,39)" fg:x="1633" fg:w="27"/><text x="5.7190%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (26 samples, 0.09%)</title><rect x="5.4724%" y="853" width="0.0871%" height="15" fill="rgb(221,220,41)" fg:x="1634" fg:w="26"/><text x="5.7224%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11 samples, 0.04%)</title><rect x="5.5226%" y="837" width="0.0368%" height="15" fill="rgb(218,133,21)" fg:x="1649" fg:w="11"/><text x="5.7726%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.04%)</title><rect x="5.5226%" y="821" width="0.0368%" height="15" fill="rgb(221,193,43)" fg:x="1649" fg:w="11"/><text x="5.7726%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.03%)</title><rect x="5.5260%" y="805" width="0.0335%" height="15" fill="rgb(240,128,52)" fg:x="1650" fg:w="10"/><text x="5.7760%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="5.5494%" y="789" width="0.0100%" height="15" fill="rgb(253,114,12)" fg:x="1657" fg:w="3"/><text x="5.7994%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.01%)</title><rect x="5.5829%" y="885" width="0.0100%" height="15" fill="rgb(215,223,47)" fg:x="1667" fg:w="3"/><text x="5.8329%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="5.5829%" y="869" width="0.0100%" height="15" fill="rgb(248,225,23)" fg:x="1667" fg:w="3"/><text x="5.8329%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="5.5829%" y="853" width="0.0100%" height="15" fill="rgb(250,108,0)" fg:x="1667" fg:w="3"/><text x="5.8329%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="5.6197%" y="869" width="0.0100%" height="15" fill="rgb(228,208,7)" fg:x="1678" fg:w="3"/><text x="5.8697%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="5.6298%" y="869" width="0.0134%" height="15" fill="rgb(244,45,10)" fg:x="1681" fg:w="4"/><text x="5.8798%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.02%)</title><rect x="5.6532%" y="821" width="0.0234%" height="15" fill="rgb(207,125,25)" fg:x="1688" fg:w="7"/><text x="5.9032%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="5.6666%" y="805" width="0.0100%" height="15" fill="rgb(210,195,18)" fg:x="1692" fg:w="3"/><text x="5.9166%" y="815.50"></text></g><g><title>alloc::string::String::push_str (12 samples, 0.04%)</title><rect x="5.6432%" y="869" width="0.0402%" height="15" fill="rgb(249,80,12)" fg:x="1685" fg:w="12"/><text x="5.8932%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.04%)</title><rect x="5.6432%" y="853" width="0.0402%" height="15" fill="rgb(221,65,9)" fg:x="1685" fg:w="12"/><text x="5.8932%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.04%)</title><rect x="5.6465%" y="837" width="0.0368%" height="15" fill="rgb(235,49,36)" fg:x="1686" fg:w="11"/><text x="5.8965%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="5.6834%" y="869" width="0.0100%" height="15" fill="rgb(225,32,20)" fg:x="1697" fg:w="3"/><text x="5.9334%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(&amp;str,&amp;str)&gt;&gt; (9 samples, 0.03%)</title><rect x="5.6934%" y="869" width="0.0301%" height="15" fill="rgb(215,141,46)" fg:x="1700" fg:w="9"/><text x="5.9434%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(&amp;str,&amp;str)&gt;&gt; (7 samples, 0.02%)</title><rect x="5.7001%" y="853" width="0.0234%" height="15" fill="rgb(250,160,47)" fg:x="1702" fg:w="7"/><text x="5.9501%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="5.7001%" y="837" width="0.0234%" height="15" fill="rgb(216,222,40)" fg:x="1702" fg:w="7"/><text x="5.9501%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.02%)</title><rect x="5.7068%" y="821" width="0.0167%" height="15" fill="rgb(234,217,39)" fg:x="1704" fg:w="5"/><text x="5.9568%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (3 samples, 0.01%)</title><rect x="5.7303%" y="853" width="0.0100%" height="15" fill="rgb(207,178,40)" fg:x="1711" fg:w="3"/><text x="5.9803%" y="863.50"></text></g><g><title>__free (5 samples, 0.02%)</title><rect x="5.7403%" y="741" width="0.0167%" height="15" fill="rgb(221,136,13)" fg:x="1714" fg:w="5"/><text x="5.9903%" y="751.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="5.7437%" y="725" width="0.0134%" height="15" fill="rgb(249,199,10)" fg:x="1715" fg:w="4"/><text x="5.9937%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::styles::Styles&gt; (9 samples, 0.03%)</title><rect x="5.7303%" y="869" width="0.0301%" height="15" fill="rgb(249,222,13)" fg:x="1711" fg:w="9"/><text x="5.9803%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::xmlwriter::XMLWriter&gt; (6 samples, 0.02%)</title><rect x="5.7403%" y="853" width="0.0201%" height="15" fill="rgb(244,185,38)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="5.7403%" y="837" width="0.0201%" height="15" fill="rgb(236,202,9)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.02%)</title><rect x="5.7403%" y="821" width="0.0201%" height="15" fill="rgb(250,229,37)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.02%)</title><rect x="5.7403%" y="805" width="0.0201%" height="15" fill="rgb(206,174,23)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="5.7403%" y="789" width="0.0201%" height="15" fill="rgb(211,33,43)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="5.7403%" y="773" width="0.0201%" height="15" fill="rgb(245,58,50)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="5.7403%" y="757" width="0.0201%" height="15" fill="rgb(244,68,36)" fg:x="1714" fg:w="6"/><text x="5.9903%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (8 samples, 0.03%)</title><rect x="5.7638%" y="869" width="0.0268%" height="15" fill="rgb(232,229,15)" fg:x="1721" fg:w="8"/><text x="6.0138%" y="879.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (7 samples, 0.02%)</title><rect x="5.7671%" y="853" width="0.0234%" height="15" fill="rgb(254,30,23)" fg:x="1722" fg:w="7"/><text x="6.0171%" y="863.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (7 samples, 0.02%)</title><rect x="5.7671%" y="837" width="0.0234%" height="15" fill="rgb(235,160,14)" fg:x="1722" fg:w="7"/><text x="6.0171%" y="847.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (3 samples, 0.01%)</title><rect x="5.7805%" y="821" width="0.0100%" height="15" fill="rgb(212,155,44)" fg:x="1726" fg:w="3"/><text x="6.0305%" y="831.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (8 samples, 0.03%)</title><rect x="5.7905%" y="869" width="0.0268%" height="15" fill="rgb(226,2,50)" fg:x="1729" fg:w="8"/><text x="6.0405%" y="879.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (7 samples, 0.02%)</title><rect x="5.7939%" y="853" width="0.0234%" height="15" fill="rgb(234,177,6)" fg:x="1730" fg:w="7"/><text x="6.0439%" y="863.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (6 samples, 0.02%)</title><rect x="5.7972%" y="837" width="0.0201%" height="15" fill="rgb(217,24,9)" fg:x="1731" fg:w="6"/><text x="6.0472%" y="847.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.01%)</title><rect x="5.8039%" y="821" width="0.0134%" height="15" fill="rgb(220,13,46)" fg:x="1733" fg:w="4"/><text x="6.0539%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="5.8274%" y="805" width="0.0100%" height="15" fill="rgb(239,221,27)" fg:x="1740" fg:w="3"/><text x="6.0774%" y="815.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format::is_default::DEFAULT_STATE as core::ops::deref::Deref&gt;::deref (9 samples, 0.03%)</title><rect x="5.8173%" y="853" width="0.0301%" height="15" fill="rgb(222,198,25)" fg:x="1737" fg:w="9"/><text x="6.0673%" y="863.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format::is_default::DEFAULT_STATE as core::ops::deref::Deref&gt;::deref::__stability (8 samples, 0.03%)</title><rect x="5.8207%" y="837" width="0.0268%" height="15" fill="rgb(211,99,13)" fg:x="1738" fg:w="8"/><text x="6.0707%" y="847.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="5.8207%" y="821" width="0.0268%" height="15" fill="rgb(232,111,31)" fg:x="1738" fg:w="8"/><text x="6.0707%" y="831.50"></text></g><g><title>std::sync::once::Once::call_once (3 samples, 0.01%)</title><rect x="5.8374%" y="805" width="0.0100%" height="15" fill="rgb(245,82,37)" fg:x="1743" fg:w="3"/><text x="6.0874%" y="815.50"></text></g><g><title>std::sys_common::once::futex::Once::is_completed (3 samples, 0.01%)</title><rect x="5.8374%" y="789" width="0.0100%" height="15" fill="rgb(227,149,46)" fg:x="1743" fg:w="3"/><text x="6.0874%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (3 samples, 0.01%)</title><rect x="5.8374%" y="773" width="0.0100%" height="15" fill="rgb(218,36,50)" fg:x="1743" fg:w="3"/><text x="6.0874%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.01%)</title><rect x="5.8374%" y="757" width="0.0100%" height="15" fill="rgb(226,80,48)" fg:x="1743" fg:w="3"/><text x="6.0874%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="5.8575%" y="821" width="0.0100%" height="15" fill="rgb(238,224,15)" fg:x="1749" fg:w="3"/><text x="6.1075%" y="831.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.01%)</title><rect x="5.8575%" y="805" width="0.0100%" height="15" fill="rgb(241,136,10)" fg:x="1749" fg:w="3"/><text x="6.1075%" y="815.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Alignment as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="5.8676%" y="821" width="0.0100%" height="15" fill="rgb(208,32,45)" fg:x="1752" fg:w="3"/><text x="6.1176%" y="831.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Color as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="5.8877%" y="805" width="0.0100%" height="15" fill="rgb(207,135,9)" fg:x="1758" fg:w="3"/><text x="6.1377%" y="815.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Border as core::cmp::PartialEq&gt;::eq (7 samples, 0.02%)</title><rect x="5.8776%" y="821" width="0.0234%" height="15" fill="rgb(206,86,44)" fg:x="1755" fg:w="7"/><text x="6.1276%" y="831.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Fill as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="5.9011%" y="821" width="0.0100%" height="15" fill="rgb(245,177,15)" fg:x="1762" fg:w="3"/><text x="6.1511%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="5.9513%" y="757" width="0.0134%" height="15" fill="rgb(206,64,50)" fg:x="1777" fg:w="4"/><text x="6.2013%" y="767.50"></text></g><g><title>core::slice::raw::from_raw_parts (3 samples, 0.01%)</title><rect x="5.9547%" y="741" width="0.0100%" height="15" fill="rgb(234,36,40)" fg:x="1778" fg:w="3"/><text x="6.2047%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.02%)</title><rect x="5.9480%" y="773" width="0.0234%" height="15" fill="rgb(213,64,8)" fg:x="1776" fg:w="7"/><text x="6.1980%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12 samples, 0.04%)</title><rect x="5.9379%" y="805" width="0.0402%" height="15" fill="rgb(210,75,36)" fg:x="1773" fg:w="12"/><text x="6.1879%" y="815.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (11 samples, 0.04%)</title><rect x="5.9413%" y="789" width="0.0368%" height="15" fill="rgb(229,88,21)" fg:x="1774" fg:w="11"/><text x="6.1913%" y="799.50"></text></g><g><title>rust_xlsxwriter::format::Format::is_default (49 samples, 0.16%)</title><rect x="5.8173%" y="869" width="0.1641%" height="15" fill="rgb(252,204,47)" fg:x="1737" fg:w="49"/><text x="6.0673%" y="879.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (40 samples, 0.13%)</title><rect x="5.8475%" y="853" width="0.1340%" height="15" fill="rgb(208,77,27)" fg:x="1746" fg:w="40"/><text x="6.0975%" y="863.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format as core::cmp::PartialEq&gt;::eq (40 samples, 0.13%)</title><rect x="5.8475%" y="837" width="0.1340%" height="15" fill="rgb(221,76,26)" fg:x="1746" fg:w="40"/><text x="6.0975%" y="847.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Font as core::cmp::PartialEq&gt;::eq (21 samples, 0.07%)</title><rect x="5.9111%" y="821" width="0.0703%" height="15" fill="rgb(225,139,18)" fg:x="1765" fg:w="21"/><text x="6.1611%" y="831.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::new (5 samples, 0.02%)</title><rect x="5.9814%" y="869" width="0.0167%" height="15" fill="rgb(230,137,11)" fg:x="1786" fg:w="5"/><text x="6.2314%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="6.0116%" y="821" width="0.0134%" height="15" fill="rgb(212,28,1)" fg:x="1795" fg:w="4"/><text x="6.2616%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(&amp;str,alloc::string::String)]&gt; (3 samples, 0.01%)</title><rect x="6.0149%" y="805" width="0.0100%" height="15" fill="rgb(248,164,17)" fg:x="1796" fg:w="3"/><text x="6.2649%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(&amp;str,alloc::string::String)&gt;&gt; (7 samples, 0.02%)</title><rect x="6.0082%" y="837" width="0.0234%" height="15" fill="rgb(222,171,42)" fg:x="1794" fg:w="7"/><text x="6.2582%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_color (10 samples, 0.03%)</title><rect x="6.0015%" y="853" width="0.0335%" height="15" fill="rgb(243,84,45)" fg:x="1792" fg:w="10"/><text x="6.2515%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="6.0384%" y="837" width="0.0100%" height="15" fill="rgb(252,49,23)" fg:x="1803" fg:w="3"/><text x="6.2884%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_name (7 samples, 0.02%)</title><rect x="6.0384%" y="853" width="0.0234%" height="15" fill="rgb(215,19,7)" fg:x="1803" fg:w="7"/><text x="6.2884%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(&amp;str,alloc::string::String): 1]&gt; (4 samples, 0.01%)</title><rect x="6.0484%" y="837" width="0.0134%" height="15" fill="rgb(238,81,41)" fg:x="1806" fg:w="4"/><text x="6.2984%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,alloc::string::String)&gt; (4 samples, 0.01%)</title><rect x="6.0484%" y="821" width="0.0134%" height="15" fill="rgb(210,199,37)" fg:x="1806" fg:w="4"/><text x="6.2984%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="6.0484%" y="805" width="0.0134%" height="15" fill="rgb(244,192,49)" fg:x="1806" fg:w="4"/><text x="6.2984%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="6.0484%" y="789" width="0.0134%" height="15" fill="rgb(226,211,11)" fg:x="1806" fg:w="4"/><text x="6.2984%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="6.0518%" y="773" width="0.0100%" height="15" fill="rgb(236,162,54)" fg:x="1807" fg:w="3"/><text x="6.3018%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="6.0518%" y="757" width="0.0100%" height="15" fill="rgb(220,229,9)" fg:x="1807" fg:w="3"/><text x="6.3018%" y="767.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_scheme (7 samples, 0.02%)</title><rect x="6.0618%" y="853" width="0.0234%" height="15" fill="rgb(250,87,22)" fg:x="1810" fg:w="7"/><text x="6.3118%" y="863.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (3 samples, 0.01%)</title><rect x="6.0752%" y="837" width="0.0100%" height="15" fill="rgb(239,43,17)" fg:x="1814" fg:w="3"/><text x="6.3252%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_size (5 samples, 0.02%)</title><rect x="6.0853%" y="853" width="0.0167%" height="15" fill="rgb(231,177,25)" fg:x="1817" fg:w="5"/><text x="6.3353%" y="863.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (4 samples, 0.01%)</title><rect x="6.0886%" y="837" width="0.0134%" height="15" fill="rgb(219,179,1)" fg:x="1818" fg:w="4"/><text x="6.3386%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font (36 samples, 0.12%)</title><rect x="5.9982%" y="869" width="0.1206%" height="15" fill="rgb(238,219,53)" fg:x="1791" fg:w="36"/><text x="6.2482%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (3 samples, 0.01%)</title><rect x="6.1087%" y="853" width="0.0100%" height="15" fill="rgb(232,167,36)" fg:x="1824" fg:w="3"/><text x="6.3587%" y="863.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::read_to_string (3 samples, 0.01%)</title><rect x="6.1188%" y="869" width="0.0100%" height="15" fill="rgb(244,19,51)" fg:x="1827" fg:w="3"/><text x="6.3688%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_data_element (6 samples, 0.02%)</title><rect x="6.1288%" y="869" width="0.0201%" height="15" fill="rgb(224,6,22)" fg:x="1830" fg:w="6"/><text x="6.3788%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (3 samples, 0.01%)</title><rect x="6.1489%" y="869" width="0.0100%" height="15" fill="rgb(224,145,5)" fg:x="1836" fg:w="3"/><text x="6.3989%" y="879.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.01%)</title><rect x="6.1489%" y="853" width="0.0100%" height="15" fill="rgb(234,130,49)" fg:x="1836" fg:w="3"/><text x="6.3989%" y="863.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="6.1489%" y="837" width="0.0100%" height="15" fill="rgb(254,6,2)" fg:x="1836" fg:w="3"/><text x="6.3989%" y="847.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="6.1489%" y="821" width="0.0100%" height="15" fill="rgb(208,96,46)" fg:x="1836" fg:w="3"/><text x="6.3989%" y="831.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (8 samples, 0.03%)</title><rect x="6.1723%" y="821" width="0.0268%" height="15" fill="rgb(239,3,39)" fg:x="1843" fg:w="8"/><text x="6.4223%" y="831.50"></text></g><g><title>core::fmt::Formatter::pad (7 samples, 0.02%)</title><rect x="6.1757%" y="805" width="0.0234%" height="15" fill="rgb(233,210,1)" fg:x="1844" fg:w="7"/><text x="6.4257%" y="815.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_rich_string (182 samples, 0.61%)</title><rect x="5.5930%" y="885" width="0.6095%" height="15" fill="rgb(244,137,37)" fg:x="1670" fg:w="182"/><text x="5.8430%" y="895.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (13 samples, 0.04%)</title><rect x="6.1589%" y="869" width="0.0435%" height="15" fill="rgb(240,136,2)" fg:x="1839" fg:w="13"/><text x="6.4089%" y="879.50"></text></g><g><title>std::io::Write::write_fmt (12 samples, 0.04%)</title><rect x="6.1623%" y="853" width="0.0402%" height="15" fill="rgb(239,18,37)" fg:x="1840" fg:w="12"/><text x="6.4123%" y="863.50"></text></g><g><title>core::fmt::write (11 samples, 0.04%)</title><rect x="6.1656%" y="837" width="0.0368%" height="15" fill="rgb(218,185,22)" fg:x="1841" fg:w="11"/><text x="6.4156%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (6 samples, 0.02%)</title><rect x="6.2226%" y="789" width="0.0201%" height="15" fill="rgb(225,218,4)" fg:x="1858" fg:w="6"/><text x="6.4726%" y="799.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (4 samples, 0.01%)</title><rect x="6.2293%" y="773" width="0.0134%" height="15" fill="rgb(230,182,32)" fg:x="1860" fg:w="4"/><text x="6.4793%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (9 samples, 0.03%)</title><rect x="6.2226%" y="805" width="0.0301%" height="15" fill="rgb(242,56,43)" fg:x="1858" fg:w="9"/><text x="6.4726%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.01%)</title><rect x="6.2427%" y="789" width="0.0100%" height="15" fill="rgb(233,99,24)" fg:x="1864" fg:w="3"/><text x="6.4927%" y="799.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.01%)</title><rect x="6.2427%" y="773" width="0.0100%" height="15" fill="rgb(234,209,42)" fg:x="1864" fg:w="3"/><text x="6.4927%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (12 samples, 0.04%)</title><rect x="6.2192%" y="853" width="0.0402%" height="15" fill="rgb(227,7,12)" fg:x="1857" fg:w="12"/><text x="6.4692%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (12 samples, 0.04%)</title><rect x="6.2192%" y="837" width="0.0402%" height="15" fill="rgb(245,203,43)" fg:x="1857" fg:w="12"/><text x="6.4692%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (12 samples, 0.04%)</title><rect x="6.2192%" y="821" width="0.0402%" height="15" fill="rgb(238,205,33)" fg:x="1857" fg:w="12"/><text x="6.4692%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.06%)</title><rect x="6.2159%" y="869" width="0.0569%" height="15" fill="rgb(231,56,7)" fg:x="1856" fg:w="17"/><text x="6.4659%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.01%)</title><rect x="6.2594%" y="853" width="0.0134%" height="15" fill="rgb(244,186,29)" fg:x="1869" fg:w="4"/><text x="6.5094%" y="863.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (4 samples, 0.01%)</title><rect x="6.2728%" y="869" width="0.0134%" height="15" fill="rgb(234,111,31)" fg:x="1873" fg:w="4"/><text x="6.5228%" y="879.50"></text></g><g><title>core::str::count::count_chars (4 samples, 0.01%)</title><rect x="6.2728%" y="853" width="0.0134%" height="15" fill="rgb(241,149,10)" fg:x="1873" fg:w="4"/><text x="6.5228%" y="863.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::check_dimensions (4 samples, 0.01%)</title><rect x="6.2896%" y="869" width="0.0134%" height="15" fill="rgb(249,206,44)" fg:x="1878" fg:w="4"/><text x="6.5396%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3 samples, 0.01%)</title><rect x="6.3097%" y="853" width="0.0100%" height="15" fill="rgb(251,153,30)" fg:x="1884" fg:w="3"/><text x="6.5597%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.01%)</title><rect x="6.3197%" y="853" width="0.0100%" height="15" fill="rgb(239,152,38)" fg:x="1887" fg:w="3"/><text x="6.5697%" y="863.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_rich_string (231 samples, 0.77%)</title><rect x="5.5595%" y="901" width="0.7736%" height="15" fill="rgb(249,139,47)" fg:x="1660" fg:w="231"/><text x="5.8095%" y="911.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_rich_string (39 samples, 0.13%)</title><rect x="6.2025%" y="885" width="0.1306%" height="15" fill="rgb(244,64,35)" fg:x="1852" fg:w="39"/><text x="6.4525%" y="895.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (9 samples, 0.03%)</title><rect x="6.3030%" y="869" width="0.0301%" height="15" fill="rgb(216,46,15)" fg:x="1882" fg:w="9"/><text x="6.5530%" y="879.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.01%)</title><rect x="6.3398%" y="885" width="0.0134%" height="15" fill="rgb(250,74,19)" fg:x="1893" fg:w="4"/><text x="6.5898%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;alloc::string::String&gt;&gt;::from (3 samples, 0.01%)</title><rect x="6.3431%" y="869" width="0.0100%" height="15" fill="rgb(249,42,33)" fg:x="1894" fg:w="3"/><text x="6.5931%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="6.3431%" y="853" width="0.0100%" height="15" fill="rgb(242,149,17)" fg:x="1894" fg:w="3"/><text x="6.5931%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (4 samples, 0.01%)</title><rect x="6.3632%" y="773" width="0.0134%" height="15" fill="rgb(244,29,21)" fg:x="1900" fg:w="4"/><text x="6.6132%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from (9 samples, 0.03%)</title><rect x="6.3532%" y="869" width="0.0301%" height="15" fill="rgb(220,130,37)" fg:x="1897" fg:w="9"/><text x="6.6032%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (7 samples, 0.02%)</title><rect x="6.3599%" y="853" width="0.0234%" height="15" fill="rgb(211,67,2)" fg:x="1899" fg:w="7"/><text x="6.6099%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (7 samples, 0.02%)</title><rect x="6.3599%" y="837" width="0.0234%" height="15" fill="rgb(235,68,52)" fg:x="1899" fg:w="7"/><text x="6.6099%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (7 samples, 0.02%)</title><rect x="6.3599%" y="821" width="0.0234%" height="15" fill="rgb(246,142,3)" fg:x="1899" fg:w="7"/><text x="6.6099%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (7 samples, 0.02%)</title><rect x="6.3599%" y="805" width="0.0234%" height="15" fill="rgb(241,25,7)" fg:x="1899" fg:w="7"/><text x="6.6099%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (6 samples, 0.02%)</title><rect x="6.3632%" y="789" width="0.0201%" height="15" fill="rgb(242,119,39)" fg:x="1900" fg:w="6"/><text x="6.6132%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (5 samples, 0.02%)</title><rect x="6.3833%" y="869" width="0.0167%" height="15" fill="rgb(241,98,45)" fg:x="1906" fg:w="5"/><text x="6.6333%" y="879.50"></text></g><g><title>core::str::iter::Chars::as_str (3 samples, 0.01%)</title><rect x="6.3900%" y="853" width="0.0100%" height="15" fill="rgb(254,28,30)" fg:x="1908" fg:w="3"/><text x="6.6400%" y="863.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (3 samples, 0.01%)</title><rect x="6.3900%" y="837" width="0.0100%" height="15" fill="rgb(241,142,54)" fg:x="1908" fg:w="3"/><text x="6.6400%" y="847.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (3 samples, 0.01%)</title><rect x="6.3900%" y="821" width="0.0100%" height="15" fill="rgb(222,85,15)" fg:x="1908" fg:w="3"/><text x="6.6400%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (6 samples, 0.02%)</title><rect x="6.4101%" y="853" width="0.0201%" height="15" fill="rgb(210,85,47)" fg:x="1914" fg:w="6"/><text x="6.6601%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (5 samples, 0.02%)</title><rect x="6.4135%" y="837" width="0.0167%" height="15" fill="rgb(224,206,25)" fg:x="1915" fg:w="5"/><text x="6.6635%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.01%)</title><rect x="6.4168%" y="821" width="0.0134%" height="15" fill="rgb(243,201,19)" fg:x="1916" fg:w="4"/><text x="6.6668%" y="831.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::{{closure}} (498 samples, 1.67%)</title><rect x="4.7691%" y="949" width="1.6678%" height="15" fill="rgb(236,59,4)" fg:x="1424" fg:w="498"/><text x="5.0191%" y="959.50"></text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (498 samples, 1.67%)</title><rect x="4.7691%" y="933" width="1.6678%" height="15" fill="rgb(254,179,45)" fg:x="1424" fg:w="498"/><text x="5.0191%" y="943.50"></text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (498 samples, 1.67%)</title><rect x="4.7691%" y="917" width="1.6678%" height="15" fill="rgb(226,14,10)" fg:x="1424" fg:w="498"/><text x="5.0191%" y="927.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string (31 samples, 0.10%)</title><rect x="6.3331%" y="901" width="0.1038%" height="15" fill="rgb(244,27,41)" fg:x="1891" fg:w="31"/><text x="6.5831%" y="911.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_string (25 samples, 0.08%)</title><rect x="6.3532%" y="885" width="0.0837%" height="15" fill="rgb(235,35,32)" fg:x="1897" fg:w="25"/><text x="6.6032%" y="895.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (9 samples, 0.03%)</title><rect x="6.4068%" y="869" width="0.0301%" height="15" fill="rgb(218,68,31)" fg:x="1913" fg:w="9"/><text x="6.6568%" y="879.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (39 samples, 0.13%)</title><rect x="6.4369%" y="949" width="0.1306%" height="15" fill="rgb(207,120,37)" fg:x="1922" fg:w="39"/><text x="6.6869%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.08%)</title><rect x="6.5776%" y="949" width="0.0837%" height="15" fill="rgb(227,98,0)" fg:x="1964" fg:w="25"/><text x="6.8276%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="6.6714%" y="949" width="0.0134%" height="15" fill="rgb(207,7,3)" fg:x="1992" fg:w="4"/><text x="6.9214%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.07%)</title><rect x="6.6848%" y="949" width="0.0703%" height="15" fill="rgb(206,98,19)" fg:x="1996" fg:w="21"/><text x="6.9348%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.04%)</title><rect x="6.7618%" y="949" width="0.0368%" height="15" fill="rgb(217,5,26)" fg:x="2019" fg:w="11"/><text x="7.0118%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="6.7986%" y="949" width="0.0100%" height="15" fill="rgb(235,190,38)" fg:x="2030" fg:w="3"/><text x="7.0486%" y="959.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (7 samples, 0.02%)</title><rect x="6.8120%" y="597" width="0.0234%" height="15" fill="rgb(247,86,24)" fg:x="2034" fg:w="7"/><text x="7.0620%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.01%)</title><rect x="6.8254%" y="581" width="0.0100%" height="15" fill="rgb(205,101,16)" fg:x="2038" fg:w="3"/><text x="7.0754%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (8 samples, 0.03%)</title><rect x="6.8120%" y="693" width="0.0268%" height="15" fill="rgb(246,168,33)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.03%)</title><rect x="6.8120%" y="677" width="0.0268%" height="15" fill="rgb(231,114,1)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="6.8120%" y="661" width="0.0268%" height="15" fill="rgb(207,184,53)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.03%)</title><rect x="6.8120%" y="645" width="0.0268%" height="15" fill="rgb(224,95,51)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (8 samples, 0.03%)</title><rect x="6.8120%" y="629" width="0.0268%" height="15" fill="rgb(212,188,45)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="639.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (8 samples, 0.03%)</title><rect x="6.8120%" y="613" width="0.0268%" height="15" fill="rgb(223,154,38)" fg:x="2034" fg:w="8"/><text x="7.0620%" y="623.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (13 samples, 0.04%)</title><rect x="6.8120%" y="757" width="0.0435%" height="15" fill="rgb(251,22,52)" fg:x="2034" fg:w="13"/><text x="7.0620%" y="767.50"></text></g><g><title>calamine::xlsx::get_attribute (13 samples, 0.04%)</title><rect x="6.8120%" y="741" width="0.0435%" height="15" fill="rgb(229,209,22)" fg:x="2034" fg:w="13"/><text x="7.0620%" y="751.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="6.8120%" y="725" width="0.0435%" height="15" fill="rgb(234,138,34)" fg:x="2034" fg:w="13"/><text x="7.0620%" y="735.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (13 samples, 0.04%)</title><rect x="6.8120%" y="709" width="0.0435%" height="15" fill="rgb(212,95,11)" fg:x="2034" fg:w="13"/><text x="7.0620%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (5 samples, 0.02%)</title><rect x="6.8388%" y="693" width="0.0167%" height="15" fill="rgb(240,179,47)" fg:x="2042" fg:w="5"/><text x="7.0888%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.02%)</title><rect x="6.8388%" y="677" width="0.0167%" height="15" fill="rgb(240,163,11)" fg:x="2042" fg:w="5"/><text x="7.0888%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.02%)</title><rect x="6.8388%" y="661" width="0.0167%" height="15" fill="rgb(236,37,12)" fg:x="2042" fg:w="5"/><text x="7.0888%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="6.8388%" y="645" width="0.0167%" height="15" fill="rgb(232,164,16)" fg:x="2042" fg:w="5"/><text x="7.0888%" y="655.50"></text></g><g><title>quick_xml::events::BytesText::unescape (3 samples, 0.01%)</title><rect x="6.8556%" y="741" width="0.0100%" height="15" fill="rgb(244,205,15)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="751.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (3 samples, 0.01%)</title><rect x="6.8556%" y="725" width="0.0100%" height="15" fill="rgb(223,117,47)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="735.50"></text></g><g><title>quick_xml::escapei::unescape_with (3 samples, 0.01%)</title><rect x="6.8556%" y="709" width="0.0100%" height="15" fill="rgb(244,107,35)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.01%)</title><rect x="6.8556%" y="693" width="0.0100%" height="15" fill="rgb(205,140,8)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.01%)</title><rect x="6.8556%" y="677" width="0.0100%" height="15" fill="rgb(228,84,46)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="687.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="6.8556%" y="661" width="0.0100%" height="15" fill="rgb(254,188,9)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (3 samples, 0.01%)</title><rect x="6.8556%" y="645" width="0.0100%" height="15" fill="rgb(206,112,54)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="655.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="6.8556%" y="629" width="0.0100%" height="15" fill="rgb(216,84,49)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="639.50"></text></g><g><title>memchr::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="6.8556%" y="613" width="0.0100%" height="15" fill="rgb(214,194,35)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="623.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="6.8556%" y="597" width="0.0100%" height="15" fill="rgb(249,28,3)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="607.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (3 samples, 0.01%)</title><rect x="6.8556%" y="581" width="0.0100%" height="15" fill="rgb(222,56,52)" fg:x="2047" fg:w="3"/><text x="7.1056%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 0.07%)</title><rect x="6.8120%" y="949" width="0.0670%" height="15" fill="rgb(245,217,50)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.07%)</title><rect x="6.8120%" y="933" width="0.0670%" height="15" fill="rgb(213,201,24)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (20 samples, 0.07%)</title><rect x="6.8120%" y="917" width="0.0670%" height="15" fill="rgb(248,116,28)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.07%)</title><rect x="6.8120%" y="901" width="0.0670%" height="15" fill="rgb(219,72,43)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (20 samples, 0.07%)</title><rect x="6.8120%" y="885" width="0.0670%" height="15" fill="rgb(209,138,14)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="895.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.07%)</title><rect x="6.8120%" y="869" width="0.0670%" height="15" fill="rgb(222,18,33)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="879.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (20 samples, 0.07%)</title><rect x="6.8120%" y="853" width="0.0670%" height="15" fill="rgb(213,199,7)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="863.50"></text></g><g><title>calamine::xlsx::worksheet (20 samples, 0.07%)</title><rect x="6.8120%" y="837" width="0.0670%" height="15" fill="rgb(250,110,10)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="847.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (20 samples, 0.07%)</title><rect x="6.8120%" y="821" width="0.0670%" height="15" fill="rgb(248,123,6)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="831.50"></text></g><g><title>calamine::xlsx::read_sheet_data (20 samples, 0.07%)</title><rect x="6.8120%" y="805" width="0.0670%" height="15" fill="rgb(206,91,31)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="815.50"></text></g><g><title>calamine::xlsx::read_sheet (20 samples, 0.07%)</title><rect x="6.8120%" y="789" width="0.0670%" height="15" fill="rgb(211,154,13)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (20 samples, 0.07%)</title><rect x="6.8120%" y="773" width="0.0670%" height="15" fill="rgb(225,148,7)" fg:x="2034" fg:w="20"/><text x="7.0620%" y="783.50"></text></g><g><title>calamine::xlsx::read_string (7 samples, 0.02%)</title><rect x="6.8556%" y="757" width="0.0234%" height="15" fill="rgb(220,160,43)" fg:x="2047" fg:w="7"/><text x="7.1056%" y="767.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (5 samples, 0.02%)</title><rect x="6.8790%" y="725" width="0.0167%" height="15" fill="rgb(213,52,39)" fg:x="2054" fg:w="5"/><text x="7.1290%" y="735.50"></text></g><g><title>calamine::xlsx::get_attribute (5 samples, 0.02%)</title><rect x="6.8790%" y="709" width="0.0167%" height="15" fill="rgb(243,137,7)" fg:x="2054" fg:w="5"/><text x="7.1290%" y="719.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="6.8790%" y="693" width="0.0167%" height="15" fill="rgb(230,79,13)" fg:x="2054" fg:w="5"/><text x="7.1290%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (5 samples, 0.02%)</title><rect x="6.8790%" y="677" width="0.0167%" height="15" fill="rgb(247,105,23)" fg:x="2054" fg:w="5"/><text x="7.1290%" y="687.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (4 samples, 0.01%)</title><rect x="6.8823%" y="661" width="0.0134%" height="15" fill="rgb(223,179,41)" fg:x="2055" fg:w="4"/><text x="7.1323%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="6.8790%" y="949" width="0.0234%" height="15" fill="rgb(218,9,34)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="959.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="6.8790%" y="933" width="0.0234%" height="15" fill="rgb(222,106,8)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="6.8790%" y="917" width="0.0234%" height="15" fill="rgb(211,220,0)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="6.8790%" y="901" width="0.0234%" height="15" fill="rgb(229,52,16)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (7 samples, 0.02%)</title><rect x="6.8790%" y="885" width="0.0234%" height="15" fill="rgb(212,155,18)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 0.02%)</title><rect x="6.8790%" y="869" width="0.0234%" height="15" fill="rgb(242,21,14)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (7 samples, 0.02%)</title><rect x="6.8790%" y="853" width="0.0234%" height="15" fill="rgb(222,19,48)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.02%)</title><rect x="6.8790%" y="837" width="0.0234%" height="15" fill="rgb(232,45,27)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="847.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (7 samples, 0.02%)</title><rect x="6.8790%" y="821" width="0.0234%" height="15" fill="rgb(249,103,42)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="831.50"></text></g><g><title>calamine::xlsx::worksheet (7 samples, 0.02%)</title><rect x="6.8790%" y="805" width="0.0234%" height="15" fill="rgb(246,81,33)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="815.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (7 samples, 0.02%)</title><rect x="6.8790%" y="789" width="0.0234%" height="15" fill="rgb(252,33,42)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet_data (7 samples, 0.02%)</title><rect x="6.8790%" y="773" width="0.0234%" height="15" fill="rgb(209,212,41)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="783.50"></text></g><g><title>calamine::xlsx::read_sheet (7 samples, 0.02%)</title><rect x="6.8790%" y="757" width="0.0234%" height="15" fill="rgb(207,154,6)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="767.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (7 samples, 0.02%)</title><rect x="6.8790%" y="741" width="0.0234%" height="15" fill="rgb(223,64,47)" fg:x="2054" fg:w="7"/><text x="7.1290%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="6.9058%" y="661" width="0.0100%" height="15" fill="rgb(211,161,38)" fg:x="2062" fg:w="3"/><text x="7.1558%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (3 samples, 0.01%)</title><rect x="6.9058%" y="645" width="0.0100%" height="15" fill="rgb(219,138,40)" fg:x="2062" fg:w="3"/><text x="7.1558%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (3 samples, 0.01%)</title><rect x="6.9058%" y="629" width="0.0100%" height="15" fill="rgb(241,228,46)" fg:x="2062" fg:w="3"/><text x="7.1558%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="6.9058%" y="613" width="0.0100%" height="15" fill="rgb(223,209,38)" fg:x="2062" fg:w="3"/><text x="7.1558%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (3 samples, 0.01%)</title><rect x="6.9058%" y="597" width="0.0100%" height="15" fill="rgb(236,164,45)" fg:x="2062" fg:w="3"/><text x="7.1558%" y="607.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="949" width="0.0335%" height="15" fill="rgb(231,15,5)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="959.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="933" width="0.0335%" height="15" fill="rgb(252,35,15)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="943.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="917" width="0.0335%" height="15" fill="rgb(248,181,18)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="927.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="901" width="0.0335%" height="15" fill="rgb(233,39,42)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="911.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="885" width="0.0335%" height="15" fill="rgb(238,110,33)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="869" width="0.0335%" height="15" fill="rgb(233,195,10)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="853" width="0.0335%" height="15" fill="rgb(254,105,3)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="863.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="837" width="0.0335%" height="15" fill="rgb(221,225,9)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="847.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (10 samples, 0.03%)</title><rect x="6.9024%" y="821" width="0.0335%" height="15" fill="rgb(224,227,45)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="831.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="805" width="0.0335%" height="15" fill="rgb(229,198,43)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="789" width="0.0335%" height="15" fill="rgb(206,209,35)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="773" width="0.0335%" height="15" fill="rgb(245,195,53)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="6.9024%" y="757" width="0.0335%" height="15" fill="rgb(240,92,26)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="767.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::{{closure}} (10 samples, 0.03%)</title><rect x="6.9024%" y="741" width="0.0335%" height="15" fill="rgb(207,40,23)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="751.50"></text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (10 samples, 0.03%)</title><rect x="6.9024%" y="725" width="0.0335%" height="15" fill="rgb(223,111,35)" fg:x="2061" fg:w="10"/><text x="7.1524%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;excel_merge::search::SearchFiles&gt; (9 samples, 0.03%)</title><rect x="6.9058%" y="709" width="0.0301%" height="15" fill="rgb(229,147,28)" fg:x="2062" fg:w="9"/><text x="7.1558%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;,alloc::vec::Vec&lt;alloc::string::String&gt;)&gt; (9 samples, 0.03%)</title><rect x="6.9058%" y="693" width="0.0301%" height="15" fill="rgb(211,29,28)" fg:x="2062" fg:w="9"/><text x="7.1558%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (9 samples, 0.03%)</title><rect x="6.9058%" y="677" width="0.0301%" height="15" fill="rgb(228,72,33)" fg:x="2062" fg:w="9"/><text x="7.1558%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (6 samples, 0.02%)</title><rect x="6.9158%" y="661" width="0.0201%" height="15" fill="rgb(205,214,31)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="6.9158%" y="645" width="0.0201%" height="15" fill="rgb(224,111,15)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="6.9158%" y="629" width="0.0201%" height="15" fill="rgb(253,21,26)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="6.9158%" y="613" width="0.0201%" height="15" fill="rgb(245,139,43)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="623.50"></text></g><g><title>__free (6 samples, 0.02%)</title><rect x="6.9158%" y="597" width="0.0201%" height="15" fill="rgb(252,170,7)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="607.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="6.9158%" y="581" width="0.0201%" height="15" fill="rgb(231,118,14)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="591.50"></text></g><g><title>malloc_consolidate (6 samples, 0.02%)</title><rect x="6.9158%" y="565" width="0.0201%" height="15" fill="rgb(238,83,0)" fg:x="2065" fg:w="6"/><text x="7.1658%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="6.9259%" y="549" width="0.0100%" height="15" fill="rgb(221,39,39)" fg:x="2068" fg:w="3"/><text x="7.1759%" y="559.50"></text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (4 samples, 0.01%)</title><rect x="6.9426%" y="949" width="0.0134%" height="15" fill="rgb(222,119,46)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (4 samples, 0.01%)</title><rect x="6.9426%" y="933" width="0.0134%" height="15" fill="rgb(222,165,49)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.01%)</title><rect x="6.9426%" y="917" width="0.0134%" height="15" fill="rgb(219,113,52)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="6.9426%" y="901" width="0.0134%" height="15" fill="rgb(214,7,15)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="911.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="6.9426%" y="885" width="0.0134%" height="15" fill="rgb(235,32,4)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="6.9426%" y="869" width="0.0134%" height="15" fill="rgb(238,90,54)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="6.9426%" y="853" width="0.0134%" height="15" fill="rgb(213,208,19)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 0.01%)</title><rect x="6.9426%" y="837" width="0.0134%" height="15" fill="rgb(233,156,4)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.01%)</title><rect x="6.9426%" y="821" width="0.0134%" height="15" fill="rgb(207,194,5)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (4 samples, 0.01%)</title><rect x="6.9426%" y="805" width="0.0134%" height="15" fill="rgb(206,111,30)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.01%)</title><rect x="6.9426%" y="789" width="0.0134%" height="15" fill="rgb(243,70,54)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="799.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (4 samples, 0.01%)</title><rect x="6.9426%" y="773" width="0.0134%" height="15" fill="rgb(242,28,8)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="783.50"></text></g><g><title>calamine::xlsx::worksheet (4 samples, 0.01%)</title><rect x="6.9426%" y="757" width="0.0134%" height="15" fill="rgb(219,106,18)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="767.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (4 samples, 0.01%)</title><rect x="6.9426%" y="741" width="0.0134%" height="15" fill="rgb(244,222,10)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="751.50"></text></g><g><title>calamine::xlsx::read_sheet_data (4 samples, 0.01%)</title><rect x="6.9426%" y="725" width="0.0134%" height="15" fill="rgb(236,179,52)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="735.50"></text></g><g><title>calamine::xlsx::read_sheet (4 samples, 0.01%)</title><rect x="6.9426%" y="709" width="0.0134%" height="15" fill="rgb(213,23,39)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="719.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (4 samples, 0.01%)</title><rect x="6.9426%" y="693" width="0.0134%" height="15" fill="rgb(238,48,10)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="703.50"></text></g><g><title>calamine::xlsx::read_string (4 samples, 0.01%)</title><rect x="6.9426%" y="677" width="0.0134%" height="15" fill="rgb(251,196,23)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (4 samples, 0.01%)</title><rect x="6.9426%" y="661" width="0.0134%" height="15" fill="rgb(250,152,24)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="671.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (4 samples, 0.01%)</title><rect x="6.9426%" y="645" width="0.0134%" height="15" fill="rgb(209,150,17)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="655.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (4 samples, 0.01%)</title><rect x="6.9426%" y="629" width="0.0134%" height="15" fill="rgb(234,202,34)" fg:x="2073" fg:w="4"/><text x="7.1926%" y="639.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (4 samples, 0.01%)</title><rect x="6.9661%" y="613" width="0.0134%" height="15" fill="rgb(253,148,53)" fg:x="2080" fg:w="4"/><text x="7.2161%" y="623.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (5 samples, 0.02%)</title><rect x="7.0063%" y="597" width="0.0167%" height="15" fill="rgb(218,129,16)" fg:x="2092" fg:w="5"/><text x="7.2563%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (4 samples, 0.01%)</title><rect x="7.0096%" y="581" width="0.0134%" height="15" fill="rgb(216,85,19)" fg:x="2093" fg:w="4"/><text x="7.2596%" y="591.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::load_unaligned (6 samples, 0.02%)</title><rect x="7.0230%" y="597" width="0.0201%" height="15" fill="rgb(235,228,7)" fg:x="2097" fg:w="6"/><text x="7.2730%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.02%)</title><rect x="7.0264%" y="581" width="0.0167%" height="15" fill="rgb(245,175,0)" fg:x="2098" fg:w="5"/><text x="7.2764%" y="591.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (26 samples, 0.09%)</title><rect x="7.0431%" y="597" width="0.0871%" height="15" fill="rgb(208,168,36)" fg:x="2103" fg:w="26"/><text x="7.2931%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.07%)</title><rect x="7.0632%" y="581" width="0.0670%" height="15" fill="rgb(246,171,24)" fg:x="2109" fg:w="20"/><text x="7.3132%" y="591.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (4 samples, 0.01%)</title><rect x="7.1168%" y="565" width="0.0134%" height="15" fill="rgb(215,142,24)" fg:x="2125" fg:w="4"/><text x="7.3668%" y="575.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (53 samples, 0.18%)</title><rect x="6.9560%" y="949" width="0.1775%" height="15" fill="rgb(250,187,7)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (53 samples, 0.18%)</title><rect x="6.9560%" y="933" width="0.1775%" height="15" fill="rgb(228,66,33)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (53 samples, 0.18%)</title><rect x="6.9560%" y="917" width="0.1775%" height="15" fill="rgb(234,215,21)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="927.50"></text></g><g><title>calamine::xlsx::worksheet (53 samples, 0.18%)</title><rect x="6.9560%" y="901" width="0.1775%" height="15" fill="rgb(222,191,20)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="911.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (53 samples, 0.18%)</title><rect x="6.9560%" y="885" width="0.1775%" height="15" fill="rgb(245,79,54)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet_data (53 samples, 0.18%)</title><rect x="6.9560%" y="869" width="0.1775%" height="15" fill="rgb(240,10,37)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="879.50"></text></g><g><title>calamine::xlsx::read_sheet (53 samples, 0.18%)</title><rect x="6.9560%" y="853" width="0.1775%" height="15" fill="rgb(214,192,32)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (53 samples, 0.18%)</title><rect x="6.9560%" y="837" width="0.1775%" height="15" fill="rgb(209,36,54)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (53 samples, 0.18%)</title><rect x="6.9560%" y="821" width="0.1775%" height="15" fill="rgb(220,10,11)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (53 samples, 0.18%)</title><rect x="6.9560%" y="805" width="0.1775%" height="15" fill="rgb(221,106,17)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="815.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (53 samples, 0.18%)</title><rect x="6.9560%" y="789" width="0.1775%" height="15" fill="rgb(251,142,44)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="799.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (53 samples, 0.18%)</title><rect x="6.9560%" y="773" width="0.1775%" height="15" fill="rgb(238,13,15)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="783.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.18%)</title><rect x="6.9560%" y="757" width="0.1775%" height="15" fill="rgb(208,107,27)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (53 samples, 0.18%)</title><rect x="6.9560%" y="741" width="0.1775%" height="15" fill="rgb(205,136,37)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="751.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (53 samples, 0.18%)</title><rect x="6.9560%" y="725" width="0.1775%" height="15" fill="rgb(250,205,27)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="735.50"></text></g><g><title>memchr::memchr::memchr3_raw (53 samples, 0.18%)</title><rect x="6.9560%" y="709" width="0.1775%" height="15" fill="rgb(210,80,43)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (53 samples, 0.18%)</title><rect x="6.9560%" y="693" width="0.1775%" height="15" fill="rgb(247,160,36)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (53 samples, 0.18%)</title><rect x="6.9560%" y="677" width="0.1775%" height="15" fill="rgb(234,13,49)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (53 samples, 0.18%)</title><rect x="6.9560%" y="661" width="0.1775%" height="15" fill="rgb(234,122,0)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (53 samples, 0.18%)</title><rect x="6.9560%" y="645" width="0.1775%" height="15" fill="rgb(207,146,38)" fg:x="2077" fg:w="53"/><text x="7.2060%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (52 samples, 0.17%)</title><rect x="6.9594%" y="629" width="0.1742%" height="15" fill="rgb(207,177,25)" fg:x="2078" fg:w="52"/><text x="7.2094%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (46 samples, 0.15%)</title><rect x="6.9795%" y="613" width="0.1541%" height="15" fill="rgb(211,178,42)" fg:x="2084" fg:w="46"/><text x="7.2295%" y="623.50"></text></g><g><title>quick_xml::events::BytesText::unescape (3 samples, 0.01%)</title><rect x="7.1335%" y="837" width="0.0100%" height="15" fill="rgb(230,69,54)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="847.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (3 samples, 0.01%)</title><rect x="7.1335%" y="821" width="0.0100%" height="15" fill="rgb(214,135,41)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="831.50"></text></g><g><title>quick_xml::escapei::unescape_with (3 samples, 0.01%)</title><rect x="7.1335%" y="805" width="0.0100%" height="15" fill="rgb(237,67,25)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.01%)</title><rect x="7.1335%" y="789" width="0.0100%" height="15" fill="rgb(222,189,50)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.01%)</title><rect x="7.1335%" y="773" width="0.0100%" height="15" fill="rgb(245,148,34)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="783.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="7.1335%" y="757" width="0.0100%" height="15" fill="rgb(222,29,6)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (3 samples, 0.01%)</title><rect x="7.1335%" y="741" width="0.0100%" height="15" fill="rgb(221,189,43)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="751.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="7.1335%" y="725" width="0.0100%" height="15" fill="rgb(207,36,27)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="735.50"></text></g><g><title>memchr::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="7.1335%" y="709" width="0.0100%" height="15" fill="rgb(217,90,24)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="7.1335%" y="693" width="0.0100%" height="15" fill="rgb(224,66,35)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (3 samples, 0.01%)</title><rect x="7.1335%" y="677" width="0.0100%" height="15" fill="rgb(221,13,50)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw (3 samples, 0.01%)</title><rect x="7.1335%" y="661" width="0.0100%" height="15" fill="rgb(236,68,49)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw_impl (3 samples, 0.01%)</title><rect x="7.1335%" y="645" width="0.0100%" height="15" fill="rgb(229,146,28)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::Two&lt;V&gt;::find_raw (3 samples, 0.01%)</title><rect x="7.1335%" y="629" width="0.0100%" height="15" fill="rgb(225,31,38)" fg:x="2130" fg:w="3"/><text x="7.3835%" y="639.50"></text></g><g><title>calamine::xlsx::read_string (6 samples, 0.02%)</title><rect x="7.1335%" y="853" width="0.0201%" height="15" fill="rgb(250,208,3)" fg:x="2130" fg:w="6"/><text x="7.3835%" y="863.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (7 samples, 0.02%)</title><rect x="7.1335%" y="869" width="0.0234%" height="15" fill="rgb(246,54,23)" fg:x="2130" fg:w="7"/><text x="7.3835%" y="879.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (3 samples, 0.01%)</title><rect x="7.1670%" y="645" width="0.0100%" height="15" fill="rgb(243,76,11)" fg:x="2140" fg:w="3"/><text x="7.4170%" y="655.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.01%)</title><rect x="7.2206%" y="629" width="0.0100%" height="15" fill="rgb(245,21,50)" fg:x="2156" fg:w="3"/><text x="7.4706%" y="639.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (6 samples, 0.02%)</title><rect x="7.2307%" y="629" width="0.0201%" height="15" fill="rgb(228,9,43)" fg:x="2159" fg:w="6"/><text x="7.4807%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (4 samples, 0.01%)</title><rect x="7.2373%" y="613" width="0.0134%" height="15" fill="rgb(208,100,47)" fg:x="2161" fg:w="4"/><text x="7.4873%" y="623.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (25 samples, 0.08%)</title><rect x="7.2541%" y="629" width="0.0837%" height="15" fill="rgb(232,26,8)" fg:x="2166" fg:w="25"/><text x="7.5041%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.06%)</title><rect x="7.2775%" y="613" width="0.0603%" height="15" fill="rgb(216,166,38)" fg:x="2173" fg:w="18"/><text x="7.5275%" y="623.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (63 samples, 0.21%)</title><rect x="7.1335%" y="949" width="0.2110%" height="15" fill="rgb(251,202,51)" fg:x="2130" fg:w="63"/><text x="7.3835%" y="959.50"></text></g><g><title>calamine::xlsx::worksheet (63 samples, 0.21%)</title><rect x="7.1335%" y="933" width="0.2110%" height="15" fill="rgb(254,216,34)" fg:x="2130" fg:w="63"/><text x="7.3835%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (63 samples, 0.21%)</title><rect x="7.1335%" y="917" width="0.2110%" height="15" fill="rgb(251,32,27)" fg:x="2130" fg:w="63"/><text x="7.3835%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet_data (63 samples, 0.21%)</title><rect x="7.1335%" y="901" width="0.2110%" height="15" fill="rgb(208,127,28)" fg:x="2130" fg:w="63"/><text x="7.3835%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet (63 samples, 0.21%)</title><rect x="7.1335%" y="885" width="0.2110%" height="15" fill="rgb(224,137,22)" fg:x="2130" fg:w="63"/><text x="7.3835%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (56 samples, 0.19%)</title><rect x="7.1570%" y="869" width="0.1875%" height="15" fill="rgb(254,70,32)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (56 samples, 0.19%)</title><rect x="7.1570%" y="853" width="0.1875%" height="15" fill="rgb(229,75,37)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (56 samples, 0.19%)</title><rect x="7.1570%" y="837" width="0.1875%" height="15" fill="rgb(252,64,23)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (56 samples, 0.19%)</title><rect x="7.1570%" y="821" width="0.1875%" height="15" fill="rgb(232,162,48)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="831.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (56 samples, 0.19%)</title><rect x="7.1570%" y="805" width="0.1875%" height="15" fill="rgb(246,160,12)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="815.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.19%)</title><rect x="7.1570%" y="789" width="0.1875%" height="15" fill="rgb(247,166,0)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (56 samples, 0.19%)</title><rect x="7.1570%" y="773" width="0.1875%" height="15" fill="rgb(249,219,21)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="783.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (56 samples, 0.19%)</title><rect x="7.1570%" y="757" width="0.1875%" height="15" fill="rgb(205,209,3)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="767.50"></text></g><g><title>memchr::memchr::memchr3_raw (56 samples, 0.19%)</title><rect x="7.1570%" y="741" width="0.1875%" height="15" fill="rgb(243,44,1)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (56 samples, 0.19%)</title><rect x="7.1570%" y="725" width="0.1875%" height="15" fill="rgb(206,159,16)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (56 samples, 0.19%)</title><rect x="7.1570%" y="709" width="0.1875%" height="15" fill="rgb(244,77,30)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (56 samples, 0.19%)</title><rect x="7.1570%" y="693" width="0.1875%" height="15" fill="rgb(218,69,12)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (56 samples, 0.19%)</title><rect x="7.1570%" y="677" width="0.1875%" height="15" fill="rgb(212,87,7)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (56 samples, 0.19%)</title><rect x="7.1570%" y="661" width="0.1875%" height="15" fill="rgb(245,114,25)" fg:x="2137" fg:w="56"/><text x="7.4070%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (50 samples, 0.17%)</title><rect x="7.1771%" y="645" width="0.1675%" height="15" fill="rgb(210,61,42)" fg:x="2143" fg:w="50"/><text x="7.4271%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.01%)</title><rect x="7.3646%" y="629" width="0.0100%" height="15" fill="rgb(211,52,33)" fg:x="2199" fg:w="3"/><text x="7.6146%" y="639.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (3 samples, 0.01%)</title><rect x="7.3646%" y="613" width="0.0100%" height="15" fill="rgb(234,58,33)" fg:x="2199" fg:w="3"/><text x="7.6146%" y="623.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (4 samples, 0.01%)</title><rect x="7.3847%" y="629" width="0.0134%" height="15" fill="rgb(220,115,36)" fg:x="2205" fg:w="4"/><text x="7.6347%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.01%)</title><rect x="7.3881%" y="613" width="0.0100%" height="15" fill="rgb(243,153,54)" fg:x="2206" fg:w="3"/><text x="7.6381%" y="623.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (18 samples, 0.06%)</title><rect x="7.3445%" y="693" width="0.0603%" height="15" fill="rgb(251,47,18)" fg:x="2193" fg:w="18"/><text x="7.5945%" y="703.50"></text></g><g><title>calamine::xlsx::get_attribute (18 samples, 0.06%)</title><rect x="7.3445%" y="677" width="0.0603%" height="15" fill="rgb(242,102,42)" fg:x="2193" fg:w="18"/><text x="7.5945%" y="687.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.06%)</title><rect x="7.3445%" y="661" width="0.0603%" height="15" fill="rgb(234,31,38)" fg:x="2193" fg:w="18"/><text x="7.5945%" y="671.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (18 samples, 0.06%)</title><rect x="7.3445%" y="645" width="0.0603%" height="15" fill="rgb(221,117,51)" fg:x="2193" fg:w="18"/><text x="7.5945%" y="655.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (20 samples, 0.07%)</title><rect x="7.3445%" y="949" width="0.0670%" height="15" fill="rgb(212,20,18)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.07%)</title><rect x="7.3445%" y="933" width="0.0670%" height="15" fill="rgb(245,133,36)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (20 samples, 0.07%)</title><rect x="7.3445%" y="917" width="0.0670%" height="15" fill="rgb(212,6,19)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="927.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (20 samples, 0.07%)</title><rect x="7.3445%" y="901" width="0.0670%" height="15" fill="rgb(218,1,36)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 0.07%)</title><rect x="7.3445%" y="885" width="0.0670%" height="15" fill="rgb(246,84,54)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.07%)</title><rect x="7.3445%" y="869" width="0.0670%" height="15" fill="rgb(242,110,6)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (20 samples, 0.07%)</title><rect x="7.3445%" y="853" width="0.0670%" height="15" fill="rgb(214,47,5)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.07%)</title><rect x="7.3445%" y="837" width="0.0670%" height="15" fill="rgb(218,159,25)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (20 samples, 0.07%)</title><rect x="7.3445%" y="821" width="0.0670%" height="15" fill="rgb(215,211,28)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.07%)</title><rect x="7.3445%" y="805" width="0.0670%" height="15" fill="rgb(238,59,32)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="815.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (20 samples, 0.07%)</title><rect x="7.3445%" y="789" width="0.0670%" height="15" fill="rgb(226,82,3)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="799.50"></text></g><g><title>calamine::xlsx::worksheet (20 samples, 0.07%)</title><rect x="7.3445%" y="773" width="0.0670%" height="15" fill="rgb(240,164,32)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="783.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (20 samples, 0.07%)</title><rect x="7.3445%" y="757" width="0.0670%" height="15" fill="rgb(232,46,7)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="767.50"></text></g><g><title>calamine::xlsx::read_sheet_data (20 samples, 0.07%)</title><rect x="7.3445%" y="741" width="0.0670%" height="15" fill="rgb(229,129,53)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="751.50"></text></g><g><title>calamine::xlsx::read_sheet (20 samples, 0.07%)</title><rect x="7.3445%" y="725" width="0.0670%" height="15" fill="rgb(234,188,29)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="735.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (20 samples, 0.07%)</title><rect x="7.3445%" y="709" width="0.0670%" height="15" fill="rgb(246,141,4)" fg:x="2193" fg:w="20"/><text x="7.5945%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="7.4182%" y="949" width="0.0100%" height="15" fill="rgb(229,23,39)" fg:x="2215" fg:w="3"/><text x="7.6682%" y="959.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.01%)</title><rect x="7.4751%" y="709" width="0.0100%" height="15" fill="rgb(206,12,3)" fg:x="2232" fg:w="3"/><text x="7.7251%" y="719.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="7.4751%" y="693" width="0.0100%" height="15" fill="rgb(252,226,20)" fg:x="2232" fg:w="3"/><text x="7.7251%" y="703.50"></text></g><g><title>__GI___write (3 samples, 0.01%)</title><rect x="7.4751%" y="677" width="0.0100%" height="15" fill="rgb(216,123,35)" fg:x="2232" fg:w="3"/><text x="7.7251%" y="687.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (15 samples, 0.05%)</title><rect x="7.4751%" y="741" width="0.0502%" height="15" fill="rgb(212,68,40)" fg:x="2232" fg:w="15"/><text x="7.7251%" y="751.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (15 samples, 0.05%)</title><rect x="7.4751%" y="725" width="0.0502%" height="15" fill="rgb(254,125,32)" fg:x="2232" fg:w="15"/><text x="7.7251%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (12 samples, 0.04%)</title><rect x="7.4852%" y="709" width="0.0402%" height="15" fill="rgb(253,97,22)" fg:x="2235" fg:w="12"/><text x="7.7352%" y="719.50"></text></g><g><title>syscall (12 samples, 0.04%)</title><rect x="7.4852%" y="693" width="0.0402%" height="15" fill="rgb(241,101,14)" fg:x="2235" fg:w="12"/><text x="7.7352%" y="703.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse::{{closure}} (18 samples, 0.06%)</title><rect x="7.4751%" y="933" width="0.0603%" height="15" fill="rgb(238,103,29)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="943.50"></text></g><g><title>tracing_core::event::Event::dispatch (18 samples, 0.06%)</title><rect x="7.4751%" y="917" width="0.0603%" height="15" fill="rgb(233,195,47)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="927.50"></text></g><g><title>tracing_core::dispatcher::get_default (18 samples, 0.06%)</title><rect x="7.4751%" y="901" width="0.0603%" height="15" fill="rgb(246,218,30)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="911.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (18 samples, 0.06%)</title><rect x="7.4751%" y="885" width="0.0603%" height="15" fill="rgb(219,145,47)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="895.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (18 samples, 0.06%)</title><rect x="7.4751%" y="869" width="0.0603%" height="15" fill="rgb(243,12,26)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="7.4751%" y="853" width="0.0603%" height="15" fill="rgb(214,87,16)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="7.4751%" y="837" width="0.0603%" height="15" fill="rgb(208,99,42)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="7.4751%" y="821" width="0.0603%" height="15" fill="rgb(253,99,2)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (18 samples, 0.06%)</title><rect x="7.4751%" y="805" width="0.0603%" height="15" fill="rgb(220,168,23)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.06%)</title><rect x="7.4751%" y="789" width="0.0603%" height="15" fill="rgb(242,38,24)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.06%)</title><rect x="7.4751%" y="773" width="0.0603%" height="15" fill="rgb(225,182,9)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="783.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (18 samples, 0.06%)</title><rect x="7.4751%" y="757" width="0.0603%" height="15" fill="rgb(243,178,37)" fg:x="2232" fg:w="18"/><text x="7.7251%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (3 samples, 0.01%)</title><rect x="7.5254%" y="741" width="0.0100%" height="15" fill="rgb(232,139,19)" fg:x="2247" fg:w="3"/><text x="7.7754%" y="751.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (21 samples, 0.07%)</title><rect x="7.4751%" y="949" width="0.0703%" height="15" fill="rgb(225,201,24)" fg:x="2232" fg:w="21"/><text x="7.7251%" y="959.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (12 samples, 0.04%)</title><rect x="7.5488%" y="565" width="0.0402%" height="15" fill="rgb(221,47,46)" fg:x="2254" fg:w="12"/><text x="7.7988%" y="575.50"></text></g><g><title>syscall (12 samples, 0.04%)</title><rect x="7.5488%" y="549" width="0.0402%" height="15" fill="rgb(249,23,13)" fg:x="2254" fg:w="12"/><text x="7.7988%" y="559.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body (13 samples, 0.04%)</title><rect x="7.5488%" y="837" width="0.0435%" height="15" fill="rgb(219,9,5)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="847.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::buffer (13 samples, 0.04%)</title><rect x="7.5488%" y="821" width="0.0435%" height="15" fill="rgb(254,171,16)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="831.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (13 samples, 0.04%)</title><rect x="7.5488%" y="805" width="0.0435%" height="15" fill="rgb(230,171,20)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="815.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer::{{closure}} (13 samples, 0.04%)</title><rect x="7.5488%" y="789" width="0.0435%" height="15" fill="rgb(210,71,41)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="799.50"></text></g><g><title>tracing_core::event::Event::dispatch (13 samples, 0.04%)</title><rect x="7.5488%" y="773" width="0.0435%" height="15" fill="rgb(206,173,20)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="783.50"></text></g><g><title>tracing_core::dispatcher::get_default (13 samples, 0.04%)</title><rect x="7.5488%" y="757" width="0.0435%" height="15" fill="rgb(233,88,34)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="767.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (13 samples, 0.04%)</title><rect x="7.5488%" y="741" width="0.0435%" height="15" fill="rgb(223,209,46)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="751.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (13 samples, 0.04%)</title><rect x="7.5488%" y="725" width="0.0435%" height="15" fill="rgb(250,43,18)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="735.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (13 samples, 0.04%)</title><rect x="7.5488%" y="709" width="0.0435%" height="15" fill="rgb(208,13,10)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="719.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (13 samples, 0.04%)</title><rect x="7.5488%" y="693" width="0.0435%" height="15" fill="rgb(212,200,36)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="703.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (13 samples, 0.04%)</title><rect x="7.5488%" y="677" width="0.0435%" height="15" fill="rgb(225,90,30)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (13 samples, 0.04%)</title><rect x="7.5488%" y="661" width="0.0435%" height="15" fill="rgb(236,182,39)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13 samples, 0.04%)</title><rect x="7.5488%" y="645" width="0.0435%" height="15" fill="rgb(212,144,35)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13 samples, 0.04%)</title><rect x="7.5488%" y="629" width="0.0435%" height="15" fill="rgb(228,63,44)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="639.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (13 samples, 0.04%)</title><rect x="7.5488%" y="613" width="0.0435%" height="15" fill="rgb(228,109,6)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="623.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (13 samples, 0.04%)</title><rect x="7.5488%" y="597" width="0.0435%" height="15" fill="rgb(238,117,24)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="607.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (13 samples, 0.04%)</title><rect x="7.5488%" y="581" width="0.0435%" height="15" fill="rgb(242,26,26)" fg:x="2254" fg:w="13"/><text x="7.7988%" y="591.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (15 samples, 0.05%)</title><rect x="7.5455%" y="949" width="0.0502%" height="15" fill="rgb(221,92,48)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="959.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (15 samples, 0.05%)</title><rect x="7.5455%" y="933" width="0.0502%" height="15" fill="rgb(209,209,32)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="943.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.05%)</title><rect x="7.5455%" y="917" width="0.0502%" height="15" fill="rgb(221,70,22)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="927.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (15 samples, 0.05%)</title><rect x="7.5455%" y="901" width="0.0502%" height="15" fill="rgb(248,145,5)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="911.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (15 samples, 0.05%)</title><rect x="7.5455%" y="885" width="0.0502%" height="15" fill="rgb(226,116,26)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="895.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (15 samples, 0.05%)</title><rect x="7.5455%" y="869" width="0.0502%" height="15" fill="rgb(244,5,17)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="879.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (15 samples, 0.05%)</title><rect x="7.5455%" y="853" width="0.0502%" height="15" fill="rgb(252,159,33)" fg:x="2253" fg:w="15"/><text x="7.7955%" y="863.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (5 samples, 0.02%)</title><rect x="7.5957%" y="837" width="0.0167%" height="15" fill="rgb(206,71,0)" fg:x="2268" fg:w="5"/><text x="7.8457%" y="847.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (5 samples, 0.02%)</title><rect x="7.5957%" y="821" width="0.0167%" height="15" fill="rgb(233,118,54)" fg:x="2268" fg:w="5"/><text x="7.8457%" y="831.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.02%)</title><rect x="7.5957%" y="805" width="0.0167%" height="15" fill="rgb(234,83,48)" fg:x="2268" fg:w="5"/><text x="7.8457%" y="815.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush::{{closure}} (3 samples, 0.01%)</title><rect x="7.6024%" y="789" width="0.0100%" height="15" fill="rgb(228,3,54)" fg:x="2270" fg:w="3"/><text x="7.8524%" y="799.50"></text></g><g><title>tracing_core::event::Event::dispatch (3 samples, 0.01%)</title><rect x="7.6024%" y="773" width="0.0100%" height="15" fill="rgb(226,155,13)" fg:x="2270" fg:w="3"/><text x="7.8524%" y="783.50"></text></g><g><title>tracing_core::dispatcher::get_default (3 samples, 0.01%)</title><rect x="7.6024%" y="757" width="0.0100%" height="15" fill="rgb(241,28,37)" fg:x="2270" fg:w="3"/><text x="7.8524%" y="767.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (3 samples, 0.01%)</title><rect x="7.6024%" y="741" width="0.0100%" height="15" fill="rgb(233,93,10)" fg:x="2270" fg:w="3"/><text x="7.8524%" y="751.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (3 samples, 0.01%)</title><rect x="7.6024%" y="725" width="0.0100%" height="15" fill="rgb(225,113,19)" fg:x="2270" fg:w="3"/><text x="7.8524%" y="735.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="7.5957%" y="949" width="0.0234%" height="15" fill="rgb(241,2,18)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="959.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="7.5957%" y="933" width="0.0234%" height="15" fill="rgb(228,207,21)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="943.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="7.5957%" y="917" width="0.0234%" height="15" fill="rgb(213,211,35)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="927.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="7.5957%" y="901" width="0.0234%" height="15" fill="rgb(209,83,10)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="911.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (7 samples, 0.02%)</title><rect x="7.5957%" y="885" width="0.0234%" height="15" fill="rgb(209,164,1)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="895.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (7 samples, 0.02%)</title><rect x="7.5957%" y="869" width="0.0234%" height="15" fill="rgb(213,184,43)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="879.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (7 samples, 0.02%)</title><rect x="7.5957%" y="853" width="0.0234%" height="15" fill="rgb(231,61,34)" fg:x="2268" fg:w="7"/><text x="7.8457%" y="863.50"></text></g><g><title>&lt;tower_http::services::fs::serve_dir::future::ResponseFuture&lt;ReqBody,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.01%)</title><rect x="7.6392%" y="949" width="0.0100%" height="15" fill="rgb(235,75,3)" fg:x="2281" fg:w="3"/><text x="7.8892%" y="959.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.16%)</title><rect x="7.6560%" y="949" width="0.1574%" height="15" fill="rgb(220,106,47)" fg:x="2286" fg:w="47"/><text x="7.9060%" y="959.50"></text></g><g><title>__free (3 samples, 0.01%)</title><rect x="7.8134%" y="949" width="0.0100%" height="15" fill="rgb(210,196,33)" fg:x="2333" fg:w="3"/><text x="8.0634%" y="959.50"></text></g><g><title>__rdl_alloc (23 samples, 0.08%)</title><rect x="7.8268%" y="949" width="0.0770%" height="15" fill="rgb(229,154,42)" fg:x="2337" fg:w="23"/><text x="8.0768%" y="959.50"></text></g><g><title>_int_free (39 samples, 0.13%)</title><rect x="7.9038%" y="949" width="0.1306%" height="15" fill="rgb(228,114,26)" fg:x="2360" fg:w="39"/><text x="8.1538%" y="959.50"></text></g><g><title>_int_malloc (22 samples, 0.07%)</title><rect x="8.0344%" y="949" width="0.0737%" height="15" fill="rgb(208,144,1)" fg:x="2399" fg:w="22"/><text x="8.2844%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.14%)</title><rect x="8.1115%" y="949" width="0.1440%" height="15" fill="rgb(239,112,37)" fg:x="2422" fg:w="43"/><text x="8.3615%" y="959.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.03%)</title><rect x="8.2856%" y="949" width="0.0301%" height="15" fill="rgb(210,96,50)" fg:x="2474" fg:w="9"/><text x="8.5356%" y="959.50"></text></g><g><title>alloc::fmt::format::{{closure}} (18 samples, 0.06%)</title><rect x="8.3158%" y="949" width="0.0603%" height="15" fill="rgb(222,178,2)" fg:x="2483" fg:w="18"/><text x="8.5658%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (22 samples, 0.07%)</title><rect x="8.3760%" y="949" width="0.0737%" height="15" fill="rgb(226,74,18)" fg:x="2501" fg:w="22"/><text x="8.6260%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.02%)</title><rect x="8.4564%" y="949" width="0.0201%" height="15" fill="rgb(225,67,54)" fg:x="2525" fg:w="6"/><text x="8.7064%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="8.4765%" y="949" width="0.0268%" height="15" fill="rgb(251,92,32)" fg:x="2531" fg:w="8"/><text x="8.7265%" y="959.50"></text></g><g><title>alloc::raw_vec::handle_reserve (10 samples, 0.03%)</title><rect x="8.5033%" y="949" width="0.0335%" height="15" fill="rgb(228,149,22)" fg:x="2539" fg:w="10"/><text x="8.7533%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="8.6473%" y="613" width="0.0435%" height="15" fill="rgb(243,54,13)" fg:x="2582" fg:w="13"/><text x="8.8973%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.01%)</title><rect x="8.6808%" y="597" width="0.0100%" height="15" fill="rgb(243,180,28)" fg:x="2592" fg:w="3"/><text x="8.9308%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.11%)</title><rect x="8.6004%" y="645" width="0.1139%" height="15" fill="rgb(208,167,24)" fg:x="2568" fg:w="34"/><text x="8.8504%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (33 samples, 0.11%)</title><rect x="8.6038%" y="629" width="0.1105%" height="15" fill="rgb(245,73,45)" fg:x="2569" fg:w="33"/><text x="8.8538%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (7 samples, 0.02%)</title><rect x="8.6908%" y="613" width="0.0234%" height="15" fill="rgb(237,203,48)" fg:x="2595" fg:w="7"/><text x="8.9408%" y="623.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.02%)</title><rect x="8.7176%" y="645" width="0.0201%" height="15" fill="rgb(211,197,16)" fg:x="2603" fg:w="6"/><text x="8.9676%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (65 samples, 0.22%)</title><rect x="8.5636%" y="677" width="0.2177%" height="15" fill="rgb(243,99,51)" fg:x="2557" fg:w="65"/><text x="8.8136%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (65 samples, 0.22%)</title><rect x="8.5636%" y="661" width="0.2177%" height="15" fill="rgb(215,123,29)" fg:x="2557" fg:w="65"/><text x="8.8136%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (13 samples, 0.04%)</title><rect x="8.7377%" y="645" width="0.0435%" height="15" fill="rgb(239,186,37)" fg:x="2609" fg:w="13"/><text x="8.9877%" y="655.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (9 samples, 0.03%)</title><rect x="8.7511%" y="629" width="0.0301%" height="15" fill="rgb(252,136,39)" fg:x="2613" fg:w="9"/><text x="9.0011%" y="639.50"></text></g><g><title>quick_xml::reader::is_whitespace (4 samples, 0.01%)</title><rect x="8.7679%" y="613" width="0.0134%" height="15" fill="rgb(223,213,32)" fg:x="2618" fg:w="4"/><text x="9.0179%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="8.7813%" y="645" width="0.0167%" height="15" fill="rgb(233,115,5)" fg:x="2622" fg:w="5"/><text x="9.0313%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (13 samples, 0.04%)</title><rect x="8.7813%" y="661" width="0.0435%" height="15" fill="rgb(207,226,44)" fg:x="2622" fg:w="13"/><text x="9.0313%" y="671.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates::{{closure}} (8 samples, 0.03%)</title><rect x="8.7980%" y="645" width="0.0268%" height="15" fill="rgb(208,126,0)" fg:x="2627" fg:w="8"/><text x="9.0480%" y="655.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (81 samples, 0.27%)</title><rect x="8.5636%" y="741" width="0.2713%" height="15" fill="rgb(244,66,21)" fg:x="2557" fg:w="81"/><text x="8.8136%" y="751.50"></text></g><g><title>calamine::xlsx::get_attribute (81 samples, 0.27%)</title><rect x="8.5636%" y="725" width="0.2713%" height="15" fill="rgb(222,97,12)" fg:x="2557" fg:w="81"/><text x="8.8136%" y="735.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.27%)</title><rect x="8.5636%" y="709" width="0.2713%" height="15" fill="rgb(219,213,19)" fg:x="2557" fg:w="81"/><text x="8.8136%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (81 samples, 0.27%)</title><rect x="8.5636%" y="693" width="0.2713%" height="15" fill="rgb(252,169,30)" fg:x="2557" fg:w="81"/><text x="8.8136%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (16 samples, 0.05%)</title><rect x="8.7813%" y="677" width="0.0536%" height="15" fill="rgb(206,32,51)" fg:x="2622" fg:w="16"/><text x="9.0313%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="8.8248%" y="661" width="0.0100%" height="15" fill="rgb(250,172,42)" fg:x="2635" fg:w="3"/><text x="9.0748%" y="671.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (4 samples, 0.01%)</title><rect x="8.8416%" y="677" width="0.0134%" height="15" fill="rgb(209,34,43)" fg:x="2640" fg:w="4"/><text x="9.0916%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (8 samples, 0.03%)</title><rect x="8.8382%" y="725" width="0.0268%" height="15" fill="rgb(223,11,35)" fg:x="2639" fg:w="8"/><text x="9.0882%" y="735.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (8 samples, 0.03%)</title><rect x="8.8382%" y="709" width="0.0268%" height="15" fill="rgb(251,219,26)" fg:x="2639" fg:w="8"/><text x="9.0882%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (8 samples, 0.03%)</title><rect x="8.8382%" y="693" width="0.0268%" height="15" fill="rgb(231,119,3)" fg:x="2639" fg:w="8"/><text x="9.0882%" y="703.50"></text></g><g><title>calamine::xlsx::read_string (11 samples, 0.04%)</title><rect x="8.8349%" y="741" width="0.0368%" height="15" fill="rgb(216,97,11)" fg:x="2638" fg:w="11"/><text x="9.0849%" y="751.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (96 samples, 0.32%)</title><rect x="8.5636%" y="757" width="0.3215%" height="15" fill="rgb(223,59,9)" fg:x="2557" fg:w="96"/><text x="8.8136%" y="767.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (4 samples, 0.01%)</title><rect x="8.8717%" y="741" width="0.0134%" height="15" fill="rgb(233,93,31)" fg:x="2649" fg:w="4"/><text x="9.1217%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (4 samples, 0.01%)</title><rect x="8.8717%" y="725" width="0.0134%" height="15" fill="rgb(239,81,33)" fg:x="2649" fg:w="4"/><text x="9.1217%" y="735.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (3 samples, 0.01%)</title><rect x="8.8750%" y="709" width="0.0100%" height="15" fill="rgb(213,120,34)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (3 samples, 0.01%)</title><rect x="8.8750%" y="693" width="0.0100%" height="15" fill="rgb(243,49,53)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.01%)</title><rect x="8.8750%" y="677" width="0.0100%" height="15" fill="rgb(247,216,33)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="8.8750%" y="661" width="0.0100%" height="15" fill="rgb(226,26,14)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.01%)</title><rect x="8.8750%" y="645" width="0.0100%" height="15" fill="rgb(215,49,53)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="8.8750%" y="629" width="0.0100%" height="15" fill="rgb(245,162,40)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="8.8750%" y="613" width="0.0100%" height="15" fill="rgb(229,68,17)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="8.8750%" y="597" width="0.0100%" height="15" fill="rgb(213,182,10)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="8.8750%" y="581" width="0.0100%" height="15" fill="rgb(245,125,30)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="8.8750%" y="565" width="0.0100%" height="15" fill="rgb(232,202,2)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="8.8750%" y="549" width="0.0100%" height="15" fill="rgb(237,140,51)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="8.8750%" y="533" width="0.0100%" height="15" fill="rgb(236,157,25)" fg:x="2650" fg:w="3"/><text x="9.1250%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (100 samples, 0.33%)</title><rect x="8.5636%" y="949" width="0.3349%" height="15" fill="rgb(219,209,0)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (100 samples, 0.33%)</title><rect x="8.5636%" y="933" width="0.3349%" height="15" fill="rgb(240,116,54)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.33%)</title><rect x="8.5636%" y="917" width="0.3349%" height="15" fill="rgb(216,10,36)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (100 samples, 0.33%)</title><rect x="8.5636%" y="901" width="0.3349%" height="15" fill="rgb(222,72,44)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (100 samples, 0.33%)</title><rect x="8.5636%" y="885" width="0.3349%" height="15" fill="rgb(232,159,9)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (100 samples, 0.33%)</title><rect x="8.5636%" y="869" width="0.3349%" height="15" fill="rgb(210,39,32)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (100 samples, 0.33%)</title><rect x="8.5636%" y="853" width="0.3349%" height="15" fill="rgb(216,194,45)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="863.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (100 samples, 0.33%)</title><rect x="8.5636%" y="837" width="0.3349%" height="15" fill="rgb(218,18,35)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="847.50"></text></g><g><title>calamine::xlsx::worksheet (100 samples, 0.33%)</title><rect x="8.5636%" y="821" width="0.3349%" height="15" fill="rgb(207,83,51)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="831.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (100 samples, 0.33%)</title><rect x="8.5636%" y="805" width="0.3349%" height="15" fill="rgb(225,63,43)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="815.50"></text></g><g><title>calamine::xlsx::read_sheet_data (100 samples, 0.33%)</title><rect x="8.5636%" y="789" width="0.3349%" height="15" fill="rgb(207,57,36)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet (100 samples, 0.33%)</title><rect x="8.5636%" y="773" width="0.3349%" height="15" fill="rgb(216,99,33)" fg:x="2557" fg:w="100"/><text x="8.8136%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (4 samples, 0.01%)</title><rect x="8.8851%" y="757" width="0.0134%" height="15" fill="rgb(225,42,16)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (4 samples, 0.01%)</title><rect x="8.8851%" y="741" width="0.0134%" height="15" fill="rgb(220,201,45)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (4 samples, 0.01%)</title><rect x="8.8851%" y="725" width="0.0134%" height="15" fill="rgb(225,33,4)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (4 samples, 0.01%)</title><rect x="8.8851%" y="709" width="0.0134%" height="15" fill="rgb(224,33,50)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="719.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.01%)</title><rect x="8.8851%" y="693" width="0.0134%" height="15" fill="rgb(246,198,51)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.01%)</title><rect x="8.8851%" y="677" width="0.0134%" height="15" fill="rgb(205,22,4)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="687.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.01%)</title><rect x="8.8851%" y="661" width="0.0134%" height="15" fill="rgb(206,3,8)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="671.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="8.8851%" y="645" width="0.0134%" height="15" fill="rgb(251,23,15)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="8.8851%" y="629" width="0.0134%" height="15" fill="rgb(252,88,28)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="639.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (4 samples, 0.01%)</title><rect x="8.8851%" y="613" width="0.0134%" height="15" fill="rgb(212,127,14)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="623.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (4 samples, 0.01%)</title><rect x="8.8851%" y="597" width="0.0134%" height="15" fill="rgb(247,145,37)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="607.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (4 samples, 0.01%)</title><rect x="8.8851%" y="581" width="0.0134%" height="15" fill="rgb(209,117,53)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="591.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (4 samples, 0.01%)</title><rect x="8.8851%" y="565" width="0.0134%" height="15" fill="rgb(212,90,42)" fg:x="2653" fg:w="4"/><text x="9.1351%" y="575.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (8 samples, 0.03%)</title><rect x="8.9320%" y="629" width="0.0268%" height="15" fill="rgb(218,164,37)" fg:x="2667" fg:w="8"/><text x="9.1820%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.03%)</title><rect x="8.9320%" y="613" width="0.0268%" height="15" fill="rgb(246,65,34)" fg:x="2667" fg:w="8"/><text x="9.1820%" y="623.50"></text></g><g><title>calamine::auto::open_workbook_auto_from_rs (17 samples, 0.06%)</title><rect x="8.9085%" y="949" width="0.0569%" height="15" fill="rgb(231,100,33)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="959.50"></text></g><g><title>calamine::open_workbook_from_rs (17 samples, 0.06%)</title><rect x="8.9085%" y="933" width="0.0569%" height="15" fill="rgb(228,126,14)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::new (17 samples, 0.06%)</title><rect x="8.9085%" y="917" width="0.0569%" height="15" fill="rgb(215,173,21)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="927.50"></text></g><g><title>calamine::xlsx::Xlsx&lt;RS&gt;::read_shared_strings (17 samples, 0.06%)</title><rect x="8.9085%" y="901" width="0.0569%" height="15" fill="rgb(210,6,40)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="911.50"></text></g><g><title>calamine::xlsx::read_string (17 samples, 0.06%)</title><rect x="8.9085%" y="885" width="0.0569%" height="15" fill="rgb(212,48,18)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (17 samples, 0.06%)</title><rect x="8.9085%" y="869" width="0.0569%" height="15" fill="rgb(230,214,11)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (17 samples, 0.06%)</title><rect x="8.9085%" y="853" width="0.0569%" height="15" fill="rgb(254,105,39)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (17 samples, 0.06%)</title><rect x="8.9085%" y="837" width="0.0569%" height="15" fill="rgb(245,158,5)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (17 samples, 0.06%)</title><rect x="8.9085%" y="821" width="0.0569%" height="15" fill="rgb(249,208,11)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="831.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (17 samples, 0.06%)</title><rect x="8.9085%" y="805" width="0.0569%" height="15" fill="rgb(210,39,28)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="815.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.06%)</title><rect x="8.9085%" y="789" width="0.0569%" height="15" fill="rgb(211,56,53)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (17 samples, 0.06%)</title><rect x="8.9085%" y="773" width="0.0569%" height="15" fill="rgb(226,201,30)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="783.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (17 samples, 0.06%)</title><rect x="8.9085%" y="757" width="0.0569%" height="15" fill="rgb(239,101,34)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="767.50"></text></g><g><title>memchr::memchr::memchr3_raw (17 samples, 0.06%)</title><rect x="8.9085%" y="741" width="0.0569%" height="15" fill="rgb(226,209,5)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (17 samples, 0.06%)</title><rect x="8.9085%" y="725" width="0.0569%" height="15" fill="rgb(250,105,47)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (17 samples, 0.06%)</title><rect x="8.9085%" y="709" width="0.0569%" height="15" fill="rgb(230,72,3)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (17 samples, 0.06%)</title><rect x="8.9085%" y="693" width="0.0569%" height="15" fill="rgb(232,218,39)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (17 samples, 0.06%)</title><rect x="8.9085%" y="677" width="0.0569%" height="15" fill="rgb(248,166,6)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (17 samples, 0.06%)</title><rect x="8.9085%" y="661" width="0.0569%" height="15" fill="rgb(247,89,20)" fg:x="2660" fg:w="17"/><text x="9.1585%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (14 samples, 0.05%)</title><rect x="8.9186%" y="645" width="0.0469%" height="15" fill="rgb(248,130,54)" fg:x="2663" fg:w="14"/><text x="9.1686%" y="655.50"></text></g><g><title>calamine::xlsx::worksheet (3 samples, 0.01%)</title><rect x="8.9655%" y="949" width="0.0100%" height="15" fill="rgb(234,196,4)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (3 samples, 0.01%)</title><rect x="8.9655%" y="933" width="0.0100%" height="15" fill="rgb(250,143,31)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="943.50"></text></g><g><title>calamine::xlsx::read_sheet_data (3 samples, 0.01%)</title><rect x="8.9655%" y="917" width="0.0100%" height="15" fill="rgb(211,110,34)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet (3 samples, 0.01%)</title><rect x="8.9655%" y="901" width="0.0100%" height="15" fill="rgb(215,124,48)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (3 samples, 0.01%)</title><rect x="8.9655%" y="885" width="0.0100%" height="15" fill="rgb(216,46,13)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="895.50"></text></g><g><title>calamine::xlsx::read_string (3 samples, 0.01%)</title><rect x="8.9655%" y="869" width="0.0100%" height="15" fill="rgb(205,184,25)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="879.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (3 samples, 0.01%)</title><rect x="8.9655%" y="853" width="0.0100%" height="15" fill="rgb(228,1,10)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.01%)</title><rect x="8.9655%" y="837" width="0.0100%" height="15" fill="rgb(213,116,27)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.01%)</title><rect x="8.9655%" y="821" width="0.0100%" height="15" fill="rgb(241,95,50)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="831.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (3 samples, 0.01%)</title><rect x="8.9655%" y="805" width="0.0100%" height="15" fill="rgb(238,48,32)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="815.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (3 samples, 0.01%)</title><rect x="8.9655%" y="789" width="0.0100%" height="15" fill="rgb(235,113,49)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="799.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="8.9655%" y="773" width="0.0100%" height="15" fill="rgb(205,127,43)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (3 samples, 0.01%)</title><rect x="8.9655%" y="757" width="0.0100%" height="15" fill="rgb(250,162,2)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="767.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="8.9655%" y="741" width="0.0100%" height="15" fill="rgb(220,13,41)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="751.50"></text></g><g><title>memchr::memchr::memchr3_raw (3 samples, 0.01%)</title><rect x="8.9655%" y="725" width="0.0100%" height="15" fill="rgb(249,221,25)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (3 samples, 0.01%)</title><rect x="8.9655%" y="709" width="0.0100%" height="15" fill="rgb(215,208,19)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (3 samples, 0.01%)</title><rect x="8.9655%" y="693" width="0.0100%" height="15" fill="rgb(236,175,2)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (3 samples, 0.01%)</title><rect x="8.9655%" y="677" width="0.0100%" height="15" fill="rgb(241,52,2)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (3 samples, 0.01%)</title><rect x="8.9655%" y="661" width="0.0100%" height="15" fill="rgb(248,140,14)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (3 samples, 0.01%)</title><rect x="8.9655%" y="645" width="0.0100%" height="15" fill="rgb(253,22,42)" fg:x="2677" fg:w="3"/><text x="9.2155%" y="655.50"></text></g><g><title>core::cmp::max_by (28 samples, 0.09%)</title><rect x="8.9856%" y="949" width="0.0938%" height="15" fill="rgb(234,61,47)" fg:x="2683" fg:w="28"/><text x="9.2356%" y="959.50"></text></g><g><title>core::fmt::Arguments::new_v1 (8 samples, 0.03%)</title><rect x="9.0860%" y="949" width="0.0268%" height="15" fill="rgb(208,226,15)" fg:x="2713" fg:w="8"/><text x="9.3360%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad_integral (17 samples, 0.06%)</title><rect x="9.1162%" y="949" width="0.0569%" height="15" fill="rgb(217,221,4)" fg:x="2722" fg:w="17"/><text x="9.3662%" y="959.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (58 samples, 0.19%)</title><rect x="9.1731%" y="949" width="0.1942%" height="15" fill="rgb(212,174,34)" fg:x="2739" fg:w="58"/><text x="9.4231%" y="959.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.01%)</title><rect x="9.3674%" y="949" width="0.0134%" height="15" fill="rgb(253,83,4)" fg:x="2797" fg:w="4"/><text x="9.6174%" y="959.50"></text></g><g><title>core::fmt::write (22 samples, 0.07%)</title><rect x="9.3875%" y="949" width="0.0737%" height="15" fill="rgb(250,195,49)" fg:x="2803" fg:w="22"/><text x="9.6375%" y="959.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (3 samples, 0.01%)</title><rect x="9.4611%" y="821" width="0.0100%" height="15" fill="rgb(241,192,25)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="831.50"></text></g><g><title>calamine::xlsx::get_attribute (3 samples, 0.01%)</title><rect x="9.4611%" y="805" width="0.0100%" height="15" fill="rgb(208,124,10)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="815.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="9.4611%" y="789" width="0.0100%" height="15" fill="rgb(222,33,0)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="799.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (3 samples, 0.01%)</title><rect x="9.4611%" y="773" width="0.0100%" height="15" fill="rgb(234,209,28)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="783.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (3 samples, 0.01%)</title><rect x="9.4611%" y="757" width="0.0100%" height="15" fill="rgb(224,11,23)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="9.4611%" y="741" width="0.0100%" height="15" fill="rgb(232,99,1)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="9.4611%" y="725" width="0.0100%" height="15" fill="rgb(237,95,45)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="9.4611%" y="709" width="0.0100%" height="15" fill="rgb(208,109,11)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="9.4611%" y="693" width="0.0100%" height="15" fill="rgb(216,190,48)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="9.4611%" y="677" width="0.0100%" height="15" fill="rgb(251,171,36)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="9.4611%" y="661" width="0.0100%" height="15" fill="rgb(230,62,22)" fg:x="2825" fg:w="3"/><text x="9.7111%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (8 samples, 0.03%)</title><rect x="9.4611%" y="949" width="0.0268%" height="15" fill="rgb(225,114,35)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="959.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.03%)</title><rect x="9.4611%" y="933" width="0.0268%" height="15" fill="rgb(215,118,42)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (8 samples, 0.03%)</title><rect x="9.4611%" y="917" width="0.0268%" height="15" fill="rgb(243,119,21)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="927.50"></text></g><g><title>calamine::xlsx::worksheet (8 samples, 0.03%)</title><rect x="9.4611%" y="901" width="0.0268%" height="15" fill="rgb(252,177,53)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="911.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (8 samples, 0.03%)</title><rect x="9.4611%" y="885" width="0.0268%" height="15" fill="rgb(237,209,29)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet_data (8 samples, 0.03%)</title><rect x="9.4611%" y="869" width="0.0268%" height="15" fill="rgb(212,65,23)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="879.50"></text></g><g><title>calamine::xlsx::read_sheet (8 samples, 0.03%)</title><rect x="9.4611%" y="853" width="0.0268%" height="15" fill="rgb(230,222,46)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="863.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (8 samples, 0.03%)</title><rect x="9.4611%" y="837" width="0.0268%" height="15" fill="rgb(215,135,32)" fg:x="2825" fg:w="8"/><text x="9.7111%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (5 samples, 0.02%)</title><rect x="9.4712%" y="821" width="0.0167%" height="15" fill="rgb(246,101,22)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (5 samples, 0.02%)</title><rect x="9.4712%" y="805" width="0.0167%" height="15" fill="rgb(206,107,13)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (5 samples, 0.02%)</title><rect x="9.4712%" y="789" width="0.0167%" height="15" fill="rgb(250,100,44)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="799.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (5 samples, 0.02%)</title><rect x="9.4712%" y="773" width="0.0167%" height="15" fill="rgb(231,147,38)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="783.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.02%)</title><rect x="9.4712%" y="757" width="0.0167%" height="15" fill="rgb(229,8,40)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (5 samples, 0.02%)</title><rect x="9.4712%" y="741" width="0.0167%" height="15" fill="rgb(221,135,30)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="751.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (5 samples, 0.02%)</title><rect x="9.4712%" y="725" width="0.0167%" height="15" fill="rgb(249,193,18)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="735.50"></text></g><g><title>memchr::memchr::memchr_raw (5 samples, 0.02%)</title><rect x="9.4712%" y="709" width="0.0167%" height="15" fill="rgb(209,133,39)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (5 samples, 0.02%)</title><rect x="9.4712%" y="693" width="0.0167%" height="15" fill="rgb(232,100,14)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.02%)</title><rect x="9.4712%" y="677" width="0.0167%" height="15" fill="rgb(224,185,1)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (5 samples, 0.02%)</title><rect x="9.4712%" y="661" width="0.0167%" height="15" fill="rgb(223,139,8)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (5 samples, 0.02%)</title><rect x="9.4712%" y="645" width="0.0167%" height="15" fill="rgb(232,213,38)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5 samples, 0.02%)</title><rect x="9.4712%" y="629" width="0.0167%" height="15" fill="rgb(207,94,22)" fg:x="2828" fg:w="5"/><text x="9.7212%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (3 samples, 0.01%)</title><rect x="9.4779%" y="613" width="0.0100%" height="15" fill="rgb(219,183,54)" fg:x="2830" fg:w="3"/><text x="9.7279%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.01%)</title><rect x="9.5013%" y="949" width="0.0100%" height="15" fill="rgb(216,185,54)" fg:x="2837" fg:w="3"/><text x="9.7513%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.01%)</title><rect x="9.5114%" y="949" width="0.0100%" height="15" fill="rgb(254,217,39)" fg:x="2840" fg:w="3"/><text x="9.7614%" y="959.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.01%)</title><rect x="9.5214%" y="949" width="0.0100%" height="15" fill="rgb(240,178,23)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (3 samples, 0.01%)</title><rect x="9.5214%" y="933" width="0.0100%" height="15" fill="rgb(218,11,47)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="943.50"></text></g><g><title>calamine::xlsx::worksheet (3 samples, 0.01%)</title><rect x="9.5214%" y="917" width="0.0100%" height="15" fill="rgb(218,51,51)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="927.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (3 samples, 0.01%)</title><rect x="9.5214%" y="901" width="0.0100%" height="15" fill="rgb(238,126,27)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet_data (3 samples, 0.01%)</title><rect x="9.5214%" y="885" width="0.0100%" height="15" fill="rgb(249,202,22)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet (3 samples, 0.01%)</title><rect x="9.5214%" y="869" width="0.0100%" height="15" fill="rgb(254,195,49)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="879.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (3 samples, 0.01%)</title><rect x="9.5214%" y="853" width="0.0100%" height="15" fill="rgb(208,123,14)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (3 samples, 0.01%)</title><rect x="9.5214%" y="837" width="0.0100%" height="15" fill="rgb(224,200,8)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.01%)</title><rect x="9.5214%" y="821" width="0.0100%" height="15" fill="rgb(217,61,36)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.01%)</title><rect x="9.5214%" y="805" width="0.0100%" height="15" fill="rgb(206,35,45)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="815.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (3 samples, 0.01%)</title><rect x="9.5214%" y="789" width="0.0100%" height="15" fill="rgb(217,65,33)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="799.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.01%)</title><rect x="9.5214%" y="773" width="0.0100%" height="15" fill="rgb(222,158,48)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.01%)</title><rect x="9.5214%" y="757" width="0.0100%" height="15" fill="rgb(254,2,54)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="767.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.01%)</title><rect x="9.5214%" y="741" width="0.0100%" height="15" fill="rgb(250,143,38)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="751.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="9.5214%" y="725" width="0.0100%" height="15" fill="rgb(248,25,0)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="9.5214%" y="709" width="0.0100%" height="15" fill="rgb(206,152,27)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.01%)</title><rect x="9.5214%" y="693" width="0.0100%" height="15" fill="rgb(240,77,30)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (3 samples, 0.01%)</title><rect x="9.5214%" y="677" width="0.0100%" height="15" fill="rgb(231,5,3)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (3 samples, 0.01%)</title><rect x="9.5214%" y="661" width="0.0100%" height="15" fill="rgb(207,226,32)" fg:x="2843" fg:w="3"/><text x="9.7714%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (10 samples, 0.03%)</title><rect x="9.5415%" y="949" width="0.0335%" height="15" fill="rgb(222,207,47)" fg:x="2849" fg:w="10"/><text x="9.7915%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="9.5984%" y="949" width="0.0100%" height="15" fill="rgb(229,115,45)" fg:x="2866" fg:w="3"/><text x="9.8484%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (20 samples, 0.07%)</title><rect x="9.6252%" y="949" width="0.0670%" height="15" fill="rgb(224,191,6)" fg:x="2874" fg:w="20"/><text x="9.8752%" y="959.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (3 samples, 0.01%)</title><rect x="9.7826%" y="645" width="0.0100%" height="15" fill="rgb(230,227,24)" fg:x="2921" fg:w="3"/><text x="10.0326%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="9.8362%" y="565" width="0.0134%" height="15" fill="rgb(228,80,19)" fg:x="2937" fg:w="4"/><text x="10.0862%" y="575.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (3 samples, 0.01%)</title><rect x="9.8563%" y="549" width="0.0100%" height="15" fill="rgb(247,229,0)" fg:x="2943" fg:w="3"/><text x="10.1063%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.06%)</title><rect x="9.8094%" y="597" width="0.0636%" height="15" fill="rgb(237,194,15)" fg:x="2929" fg:w="19"/><text x="10.0594%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (19 samples, 0.06%)</title><rect x="9.8094%" y="581" width="0.0636%" height="15" fill="rgb(219,203,20)" fg:x="2929" fg:w="19"/><text x="10.0594%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (7 samples, 0.02%)</title><rect x="9.8496%" y="565" width="0.0234%" height="15" fill="rgb(234,128,8)" fg:x="2941" fg:w="7"/><text x="10.0996%" y="575.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="9.8764%" y="597" width="0.0100%" height="15" fill="rgb(248,202,8)" fg:x="2949" fg:w="3"/><text x="10.1264%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 0.11%)</title><rect x="9.7960%" y="613" width="0.1072%" height="15" fill="rgb(206,104,37)" fg:x="2925" fg:w="32"/><text x="10.0460%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (5 samples, 0.02%)</title><rect x="9.8865%" y="597" width="0.0167%" height="15" fill="rgb(223,8,27)" fg:x="2952" fg:w="5"/><text x="10.1365%" y="607.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (4 samples, 0.01%)</title><rect x="9.8898%" y="581" width="0.0134%" height="15" fill="rgb(216,217,28)" fg:x="2953" fg:w="4"/><text x="10.1398%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (33 samples, 0.11%)</title><rect x="9.7960%" y="629" width="0.1105%" height="15" fill="rgb(249,199,1)" fg:x="2925" fg:w="33"/><text x="10.0460%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="9.9467%" y="549" width="0.0100%" height="15" fill="rgb(240,85,17)" fg:x="2970" fg:w="3"/><text x="10.1967%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="9.9467%" y="533" width="0.0100%" height="15" fill="rgb(206,108,45)" fg:x="2970" fg:w="3"/><text x="10.1967%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="9.9467%" y="565" width="0.0167%" height="15" fill="rgb(245,210,41)" fg:x="2970" fg:w="5"/><text x="10.1967%" y="575.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="9.9668%" y="565" width="0.0134%" height="15" fill="rgb(206,13,37)" fg:x="2976" fg:w="4"/><text x="10.2168%" y="575.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="9.9668%" y="549" width="0.0134%" height="15" fill="rgb(250,61,18)" fg:x="2976" fg:w="4"/><text x="10.2168%" y="559.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.01%)</title><rect x="9.9702%" y="533" width="0.0100%" height="15" fill="rgb(235,172,48)" fg:x="2977" fg:w="3"/><text x="10.2202%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.05%)</title><rect x="9.9367%" y="581" width="0.0469%" height="15" fill="rgb(249,201,17)" fg:x="2967" fg:w="14"/><text x="10.1867%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.06%)</title><rect x="9.9267%" y="613" width="0.0636%" height="15" fill="rgb(219,208,6)" fg:x="2964" fg:w="19"/><text x="10.1767%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.05%)</title><rect x="9.9367%" y="597" width="0.0536%" height="15" fill="rgb(248,31,23)" fg:x="2967" fg:w="16"/><text x="10.1867%" y="607.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (25 samples, 0.08%)</title><rect x="9.9099%" y="629" width="0.0837%" height="15" fill="rgb(245,15,42)" fg:x="2959" fg:w="25"/><text x="10.1599%" y="639.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.23%)</title><rect x="9.7726%" y="661" width="0.2311%" height="15" fill="rgb(222,217,39)" fg:x="2918" fg:w="69"/><text x="10.0226%" y="671.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (63 samples, 0.21%)</title><rect x="9.7927%" y="645" width="0.2110%" height="15" fill="rgb(210,219,27)" fg:x="2924" fg:w="63"/><text x="10.0427%" y="655.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (3 samples, 0.01%)</title><rect x="9.9936%" y="629" width="0.0100%" height="15" fill="rgb(252,166,36)" fg:x="2984" fg:w="3"/><text x="10.2436%" y="639.50"></text></g><g><title>calamine::xlsx::get_attribute (85 samples, 0.28%)</title><rect x="9.7592%" y="677" width="0.2847%" height="15" fill="rgb(245,132,34)" fg:x="2914" fg:w="85"/><text x="10.0092%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (5 samples, 0.02%)</title><rect x="10.0271%" y="661" width="0.0167%" height="15" fill="rgb(236,54,3)" fg:x="2994" fg:w="5"/><text x="10.2771%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (3 samples, 0.01%)</title><rect x="10.0338%" y="645" width="0.0100%" height="15" fill="rgb(241,173,43)" fg:x="2996" fg:w="3"/><text x="10.2838%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="10.0338%" y="629" width="0.0100%" height="15" fill="rgb(215,190,9)" fg:x="2996" fg:w="3"/><text x="10.2838%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="10.0338%" y="613" width="0.0100%" height="15" fill="rgb(242,101,16)" fg:x="2996" fg:w="3"/><text x="10.2838%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="10.0338%" y="597" width="0.0100%" height="15" fill="rgb(223,190,21)" fg:x="2996" fg:w="3"/><text x="10.2838%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="10.0606%" y="645" width="0.0100%" height="15" fill="rgb(215,228,25)" fg:x="3004" fg:w="3"/><text x="10.3106%" y="655.50"></text></g><g><title>calamine::xlsx::get_row_and_optional_column (11 samples, 0.04%)</title><rect x="10.0439%" y="661" width="0.0368%" height="15" fill="rgb(225,36,22)" fg:x="2999" fg:w="11"/><text x="10.2939%" y="671.50"></text></g><g><title>calamine::xlsx::get_row_column (13 samples, 0.04%)</title><rect x="10.0439%" y="677" width="0.0435%" height="15" fill="rgb(251,106,46)" fg:x="2999" fg:w="13"/><text x="10.2939%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="10.1209%" y="533" width="0.0134%" height="15" fill="rgb(208,90,1)" fg:x="3022" fg:w="4"/><text x="10.3709%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="10.1243%" y="517" width="0.0100%" height="15" fill="rgb(243,10,4)" fg:x="3023" fg:w="3"/><text x="10.3743%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="10.1243%" y="501" width="0.0100%" height="15" fill="rgb(212,137,27)" fg:x="3023" fg:w="3"/><text x="10.3743%" y="511.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.04%)</title><rect x="10.1075%" y="661" width="0.0368%" height="15" fill="rgb(231,220,49)" fg:x="3018" fg:w="11"/><text x="10.3575%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.03%)</title><rect x="10.1109%" y="645" width="0.0335%" height="15" fill="rgb(237,96,20)" fg:x="3019" fg:w="10"/><text x="10.3609%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.03%)</title><rect x="10.1142%" y="629" width="0.0301%" height="15" fill="rgb(239,229,30)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.03%)</title><rect x="10.1142%" y="613" width="0.0301%" height="15" fill="rgb(219,65,33)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.03%)</title><rect x="10.1142%" y="597" width="0.0301%" height="15" fill="rgb(243,134,7)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.03%)</title><rect x="10.1142%" y="581" width="0.0301%" height="15" fill="rgb(216,177,54)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.03%)</title><rect x="10.1142%" y="565" width="0.0301%" height="15" fill="rgb(211,160,20)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.03%)</title><rect x="10.1142%" y="549" width="0.0301%" height="15" fill="rgb(239,85,39)" fg:x="3020" fg:w="9"/><text x="10.3642%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.01%)</title><rect x="10.1343%" y="533" width="0.0100%" height="15" fill="rgb(232,125,22)" fg:x="3026" fg:w="3"/><text x="10.3843%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.01%)</title><rect x="10.1343%" y="517" width="0.0100%" height="15" fill="rgb(244,57,34)" fg:x="3026" fg:w="3"/><text x="10.3843%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="10.1510%" y="661" width="0.0134%" height="15" fill="rgb(214,203,32)" fg:x="3031" fg:w="4"/><text x="10.4010%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="10.1812%" y="645" width="0.0100%" height="15" fill="rgb(207,58,43)" fg:x="3040" fg:w="3"/><text x="10.4312%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.03%)</title><rect x="10.2113%" y="613" width="0.0335%" height="15" fill="rgb(215,193,15)" fg:x="3049" fg:w="10"/><text x="10.4613%" y="623.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attribute as core::convert::From&lt;quick_xml::events::attributes::Attr&lt;&amp;[u8]&gt;&gt;&gt;::from (8 samples, 0.03%)</title><rect x="10.2180%" y="597" width="0.0268%" height="15" fill="rgb(232,15,44)" fg:x="3051" fg:w="8"/><text x="10.4680%" y="607.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;&amp;[u8]&gt;::key (5 samples, 0.02%)</title><rect x="10.2281%" y="581" width="0.0167%" height="15" fill="rgb(212,3,48)" fg:x="3054" fg:w="5"/><text x="10.4781%" y="591.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.08%)</title><rect x="10.2046%" y="629" width="0.0770%" height="15" fill="rgb(218,128,7)" fg:x="3047" fg:w="23"/><text x="10.4546%" y="639.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (9 samples, 0.03%)</title><rect x="10.2515%" y="613" width="0.0301%" height="15" fill="rgb(226,216,39)" fg:x="3061" fg:w="9"/><text x="10.5015%" y="623.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (6 samples, 0.02%)</title><rect x="10.2616%" y="597" width="0.0201%" height="15" fill="rgb(243,47,51)" fg:x="3064" fg:w="6"/><text x="10.5116%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.02%)</title><rect x="10.2649%" y="581" width="0.0167%" height="15" fill="rgb(241,183,40)" fg:x="3065" fg:w="5"/><text x="10.5149%" y="591.50"></text></g><g><title>calamine::xlsx::get_attribute (35 samples, 0.12%)</title><rect x="10.1946%" y="645" width="0.1172%" height="15" fill="rgb(231,217,32)" fg:x="3044" fg:w="35"/><text x="10.4446%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (4 samples, 0.01%)</title><rect x="10.2984%" y="629" width="0.0134%" height="15" fill="rgb(229,61,38)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (4 samples, 0.01%)</title><rect x="10.2984%" y="613" width="0.0134%" height="15" fill="rgb(225,210,5)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="10.2984%" y="597" width="0.0134%" height="15" fill="rgb(231,79,45)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="10.2984%" y="581" width="0.0134%" height="15" fill="rgb(224,100,7)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="10.2984%" y="565" width="0.0134%" height="15" fill="rgb(241,198,18)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.01%)</title><rect x="10.2984%" y="549" width="0.0134%" height="15" fill="rgb(252,97,53)" fg:x="3075" fg:w="4"/><text x="10.5484%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="10.3118%" y="613" width="0.0134%" height="15" fill="rgb(220,88,7)" fg:x="3079" fg:w="4"/><text x="10.5618%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.03%)</title><rect x="10.3118%" y="645" width="0.0268%" height="15" fill="rgb(213,176,14)" fg:x="3079" fg:w="8"/><text x="10.5618%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.03%)</title><rect x="10.3118%" y="629" width="0.0268%" height="15" fill="rgb(246,73,7)" fg:x="3079" fg:w="8"/><text x="10.5618%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="10.3252%" y="613" width="0.0134%" height="15" fill="rgb(245,64,36)" fg:x="3083" fg:w="4"/><text x="10.5752%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="10.3252%" y="597" width="0.0134%" height="15" fill="rgb(245,80,10)" fg:x="3083" fg:w="4"/><text x="10.5752%" y="607.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (54 samples, 0.18%)</title><rect x="10.1644%" y="661" width="0.1808%" height="15" fill="rgb(232,107,50)" fg:x="3035" fg:w="54"/><text x="10.4144%" y="671.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.01%)</title><rect x="10.3520%" y="645" width="0.0100%" height="15" fill="rgb(253,3,0)" fg:x="3091" fg:w="3"/><text x="10.6020%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.01%)</title><rect x="10.3520%" y="629" width="0.0100%" height="15" fill="rgb(212,99,53)" fg:x="3091" fg:w="3"/><text x="10.6020%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="10.3520%" y="613" width="0.0100%" height="15" fill="rgb(249,111,54)" fg:x="3091" fg:w="3"/><text x="10.6020%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.01%)</title><rect x="10.3520%" y="597" width="0.0100%" height="15" fill="rgb(249,55,30)" fg:x="3091" fg:w="3"/><text x="10.6020%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="10.3520%" y="581" width="0.0100%" height="15" fill="rgb(237,47,42)" fg:x="3091" fg:w="3"/><text x="10.6020%" y="591.50"></text></g><g><title>calamine::xlsx::read_string (11 samples, 0.04%)</title><rect x="10.3453%" y="661" width="0.0368%" height="15" fill="rgb(211,20,18)" fg:x="3089" fg:w="11"/><text x="10.5953%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (3 samples, 0.01%)</title><rect x="10.4056%" y="501" width="0.0100%" height="15" fill="rgb(231,203,46)" fg:x="3107" fg:w="3"/><text x="10.6556%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (8 samples, 0.03%)</title><rect x="10.3922%" y="645" width="0.0268%" height="15" fill="rgb(237,142,3)" fg:x="3103" fg:w="8"/><text x="10.6422%" y="655.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (8 samples, 0.03%)</title><rect x="10.3922%" y="629" width="0.0268%" height="15" fill="rgb(241,107,1)" fg:x="3103" fg:w="8"/><text x="10.6422%" y="639.50"></text></g><g><title>quick_xml::name::QName::index (6 samples, 0.02%)</title><rect x="10.3989%" y="613" width="0.0201%" height="15" fill="rgb(229,83,13)" fg:x="3105" fg:w="6"/><text x="10.6489%" y="623.50"></text></g><g><title>memchr::memchr::memchr (6 samples, 0.02%)</title><rect x="10.3989%" y="597" width="0.0201%" height="15" fill="rgb(241,91,40)" fg:x="3105" fg:w="6"/><text x="10.6489%" y="607.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (6 samples, 0.02%)</title><rect x="10.3989%" y="581" width="0.0201%" height="15" fill="rgb(225,3,45)" fg:x="3105" fg:w="6"/><text x="10.6489%" y="591.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (5 samples, 0.02%)</title><rect x="10.4022%" y="565" width="0.0167%" height="15" fill="rgb(244,223,14)" fg:x="3106" fg:w="5"/><text x="10.6522%" y="575.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="10.4056%" y="549" width="0.0134%" height="15" fill="rgb(224,124,37)" fg:x="3107" fg:w="4"/><text x="10.6556%" y="559.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="10.4056%" y="533" width="0.0134%" height="15" fill="rgb(251,171,30)" fg:x="3107" fg:w="4"/><text x="10.6556%" y="543.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (4 samples, 0.01%)</title><rect x="10.4056%" y="517" width="0.0134%" height="15" fill="rgb(236,46,54)" fg:x="3107" fg:w="4"/><text x="10.6556%" y="527.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (10 samples, 0.03%)</title><rect x="10.3922%" y="661" width="0.0335%" height="15" fill="rgb(245,213,5)" fg:x="3103" fg:w="10"/><text x="10.6422%" y="671.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (11 samples, 0.04%)</title><rect x="10.4391%" y="629" width="0.0368%" height="15" fill="rgb(230,144,27)" fg:x="3117" fg:w="11"/><text x="10.6891%" y="639.50"></text></g><g><title>quick_xml::encoding::decode (7 samples, 0.02%)</title><rect x="10.4525%" y="613" width="0.0234%" height="15" fill="rgb(220,86,6)" fg:x="3121" fg:w="7"/><text x="10.7025%" y="623.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling_and_without_replacement (6 samples, 0.02%)</title><rect x="10.4558%" y="597" width="0.0201%" height="15" fill="rgb(240,20,13)" fg:x="3122" fg:w="6"/><text x="10.7058%" y="607.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (3 samples, 0.01%)</title><rect x="10.4659%" y="581" width="0.0100%" height="15" fill="rgb(217,89,34)" fg:x="3125" fg:w="3"/><text x="10.7159%" y="591.50"></text></g><g><title>encoding_rs::ascii::validate_ascii (3 samples, 0.01%)</title><rect x="10.4659%" y="565" width="0.0100%" height="15" fill="rgb(229,13,5)" fg:x="3125" fg:w="3"/><text x="10.7159%" y="575.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw (3 samples, 0.01%)</title><rect x="10.4926%" y="485" width="0.0100%" height="15" fill="rgb(244,67,35)" fg:x="3133" fg:w="3"/><text x="10.7426%" y="495.50"></text></g><g><title>quick_xml::events::BytesText::unescape (23 samples, 0.08%)</title><rect x="10.4290%" y="661" width="0.0770%" height="15" fill="rgb(221,40,2)" fg:x="3114" fg:w="23"/><text x="10.6790%" y="671.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (23 samples, 0.08%)</title><rect x="10.4290%" y="645" width="0.0770%" height="15" fill="rgb(237,157,21)" fg:x="3114" fg:w="23"/><text x="10.6790%" y="655.50"></text></g><g><title>quick_xml::escapei::unescape_with (9 samples, 0.03%)</title><rect x="10.4759%" y="629" width="0.0301%" height="15" fill="rgb(222,94,11)" fg:x="3128" fg:w="9"/><text x="10.7259%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (8 samples, 0.03%)</title><rect x="10.4793%" y="613" width="0.0268%" height="15" fill="rgb(249,113,6)" fg:x="3129" fg:w="8"/><text x="10.7293%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.03%)</title><rect x="10.4793%" y="597" width="0.0268%" height="15" fill="rgb(238,137,36)" fg:x="3129" fg:w="8"/><text x="10.7293%" y="607.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="10.4793%" y="581" width="0.0268%" height="15" fill="rgb(210,102,26)" fg:x="3129" fg:w="8"/><text x="10.7293%" y="591.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (7 samples, 0.02%)</title><rect x="10.4826%" y="565" width="0.0234%" height="15" fill="rgb(218,30,30)" fg:x="3130" fg:w="7"/><text x="10.7326%" y="575.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (5 samples, 0.02%)</title><rect x="10.4893%" y="549" width="0.0167%" height="15" fill="rgb(214,67,26)" fg:x="3132" fg:w="5"/><text x="10.7393%" y="559.50"></text></g><g><title>memchr::memchr::memchr2_raw (5 samples, 0.02%)</title><rect x="10.4893%" y="533" width="0.0167%" height="15" fill="rgb(251,9,53)" fg:x="3132" fg:w="5"/><text x="10.7393%" y="543.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (4 samples, 0.01%)</title><rect x="10.4926%" y="517" width="0.0134%" height="15" fill="rgb(228,204,25)" fg:x="3133" fg:w="4"/><text x="10.7426%" y="527.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (4 samples, 0.01%)</title><rect x="10.4926%" y="501" width="0.0134%" height="15" fill="rgb(207,153,8)" fg:x="3133" fg:w="4"/><text x="10.7426%" y="511.50"></text></g><g><title>__memmove_sse2_unaligned_erms (4 samples, 0.01%)</title><rect x="10.5194%" y="629" width="0.0134%" height="15" fill="rgb(242,9,16)" fg:x="3141" fg:w="4"/><text x="10.7694%" y="639.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (14 samples, 0.05%)</title><rect x="10.5362%" y="613" width="0.0469%" height="15" fill="rgb(217,211,10)" fg:x="3146" fg:w="14"/><text x="10.7862%" y="623.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (23 samples, 0.08%)</title><rect x="10.5328%" y="629" width="0.0770%" height="15" fill="rgb(219,228,52)" fg:x="3145" fg:w="23"/><text x="10.7828%" y="639.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (8 samples, 0.03%)</title><rect x="10.5831%" y="613" width="0.0268%" height="15" fill="rgb(231,92,29)" fg:x="3160" fg:w="8"/><text x="10.8331%" y="623.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.01%)</title><rect x="10.6233%" y="597" width="0.0134%" height="15" fill="rgb(232,8,23)" fg:x="3172" fg:w="4"/><text x="10.8733%" y="607.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.01%)</title><rect x="10.6233%" y="581" width="0.0134%" height="15" fill="rgb(216,211,34)" fg:x="3172" fg:w="4"/><text x="10.8733%" y="591.50"></text></g><g><title>core::cmp::min (4 samples, 0.01%)</title><rect x="10.6233%" y="565" width="0.0134%" height="15" fill="rgb(236,151,0)" fg:x="3172" fg:w="4"/><text x="10.8733%" y="575.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.01%)</title><rect x="10.6233%" y="549" width="0.0134%" height="15" fill="rgb(209,168,3)" fg:x="3172" fg:w="4"/><text x="10.8733%" y="559.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.01%)</title><rect x="10.6233%" y="533" width="0.0134%" height="15" fill="rgb(208,129,28)" fg:x="3172" fg:w="4"/><text x="10.8733%" y="543.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (14 samples, 0.05%)</title><rect x="10.6166%" y="613" width="0.0469%" height="15" fill="rgb(229,78,22)" fg:x="3170" fg:w="14"/><text x="10.8666%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.02%)</title><rect x="10.6434%" y="597" width="0.0201%" height="15" fill="rgb(228,187,13)" fg:x="3178" fg:w="6"/><text x="10.8934%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.02%)</title><rect x="10.6434%" y="581" width="0.0201%" height="15" fill="rgb(240,119,24)" fg:x="3178" fg:w="6"/><text x="10.8934%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.02%)</title><rect x="10.6434%" y="565" width="0.0201%" height="15" fill="rgb(209,194,42)" fg:x="3178" fg:w="6"/><text x="10.8934%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.02%)</title><rect x="10.6434%" y="549" width="0.0201%" height="15" fill="rgb(247,200,46)" fg:x="3178" fg:w="6"/><text x="10.8934%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="10.6467%" y="533" width="0.0167%" height="15" fill="rgb(218,76,16)" fg:x="3179" fg:w="5"/><text x="10.8967%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="10.6467%" y="517" width="0.0167%" height="15" fill="rgb(225,21,48)" fg:x="3179" fg:w="5"/><text x="10.8967%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="10.6467%" y="501" width="0.0167%" height="15" fill="rgb(239,223,50)" fg:x="3179" fg:w="5"/><text x="10.8967%" y="511.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (179 samples, 0.60%)</title><rect x="10.0874%" y="677" width="0.5995%" height="15" fill="rgb(244,45,21)" fg:x="3012" fg:w="179"/><text x="10.3374%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (54 samples, 0.18%)</title><rect x="10.5060%" y="661" width="0.1808%" height="15" fill="rgb(232,33,43)" fg:x="3137" fg:w="54"/><text x="10.7560%" y="671.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (53 samples, 0.18%)</title><rect x="10.5094%" y="645" width="0.1775%" height="15" fill="rgb(209,8,3)" fg:x="3138" fg:w="53"/><text x="10.7594%" y="655.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (23 samples, 0.08%)</title><rect x="10.6099%" y="629" width="0.0770%" height="15" fill="rgb(214,25,53)" fg:x="3168" fg:w="23"/><text x="10.8599%" y="639.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (7 samples, 0.02%)</title><rect x="10.6635%" y="613" width="0.0234%" height="15" fill="rgb(254,186,54)" fg:x="3184" fg:w="7"/><text x="10.9135%" y="623.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (4 samples, 0.01%)</title><rect x="10.6735%" y="597" width="0.0134%" height="15" fill="rgb(208,174,49)" fg:x="3187" fg:w="4"/><text x="10.9235%" y="607.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="10.6768%" y="581" width="0.0100%" height="15" fill="rgb(233,191,51)" fg:x="3188" fg:w="3"/><text x="10.9268%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.02%)</title><rect x="10.6869%" y="677" width="0.0167%" height="15" fill="rgb(222,134,10)" fg:x="3191" fg:w="5"/><text x="10.9369%" y="687.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[A: N]&gt; for [B]&gt;::eq (4 samples, 0.01%)</title><rect x="10.6902%" y="661" width="0.0134%" height="15" fill="rgb(230,226,20)" fg:x="3192" fg:w="4"/><text x="10.9402%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;quick_xml::events::Event,quick_xml::errors::Error&gt;&gt; (4 samples, 0.01%)</title><rect x="10.7036%" y="677" width="0.0134%" height="15" fill="rgb(251,111,25)" fg:x="3196" fg:w="4"/><text x="10.9536%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (4 samples, 0.01%)</title><rect x="10.7371%" y="517" width="0.0134%" height="15" fill="rgb(224,40,46)" fg:x="3206" fg:w="4"/><text x="10.9871%" y="527.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (3 samples, 0.01%)</title><rect x="10.7405%" y="501" width="0.0100%" height="15" fill="rgb(236,108,47)" fg:x="3207" fg:w="3"/><text x="10.9905%" y="511.50"></text></g><g><title>quick_xml::events::BytesEnd::local_name (11 samples, 0.04%)</title><rect x="10.7170%" y="677" width="0.0368%" height="15" fill="rgb(234,93,0)" fg:x="3200" fg:w="11"/><text x="10.9670%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.03%)</title><rect x="10.7204%" y="661" width="0.0335%" height="15" fill="rgb(224,213,32)" fg:x="3201" fg:w="10"/><text x="10.9704%" y="671.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (10 samples, 0.03%)</title><rect x="10.7204%" y="645" width="0.0335%" height="15" fill="rgb(251,11,48)" fg:x="3201" fg:w="10"/><text x="10.9704%" y="655.50"></text></g><g><title>quick_xml::name::QName::index (9 samples, 0.03%)</title><rect x="10.7237%" y="629" width="0.0301%" height="15" fill="rgb(236,173,5)" fg:x="3202" fg:w="9"/><text x="10.9737%" y="639.50"></text></g><g><title>memchr::memchr::memchr (9 samples, 0.03%)</title><rect x="10.7237%" y="613" width="0.0301%" height="15" fill="rgb(230,95,12)" fg:x="3202" fg:w="9"/><text x="10.9737%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (9 samples, 0.03%)</title><rect x="10.7237%" y="597" width="0.0301%" height="15" fill="rgb(232,209,1)" fg:x="3202" fg:w="9"/><text x="10.9737%" y="607.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (9 samples, 0.03%)</title><rect x="10.7237%" y="581" width="0.0301%" height="15" fill="rgb(232,6,1)" fg:x="3202" fg:w="9"/><text x="10.9737%" y="591.50"></text></g><g><title>memchr::memchr::memchr_raw (9 samples, 0.03%)</title><rect x="10.7237%" y="565" width="0.0301%" height="15" fill="rgb(210,224,50)" fg:x="3202" fg:w="9"/><text x="10.9737%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (8 samples, 0.03%)</title><rect x="10.7271%" y="549" width="0.0268%" height="15" fill="rgb(228,127,35)" fg:x="3203" fg:w="8"/><text x="10.9771%" y="559.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (6 samples, 0.02%)</title><rect x="10.7338%" y="533" width="0.0201%" height="15" fill="rgb(245,102,45)" fg:x="3205" fg:w="6"/><text x="10.9838%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.03%)</title><rect x="10.7606%" y="661" width="0.0335%" height="15" fill="rgb(214,1,49)" fg:x="3213" fg:w="10"/><text x="11.0106%" y="671.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (9 samples, 0.03%)</title><rect x="10.7639%" y="645" width="0.0301%" height="15" fill="rgb(226,163,40)" fg:x="3214" fg:w="9"/><text x="11.0139%" y="655.50"></text></g><g><title>quick_xml::name::QName::index (6 samples, 0.02%)</title><rect x="10.7740%" y="629" width="0.0201%" height="15" fill="rgb(239,212,28)" fg:x="3217" fg:w="6"/><text x="11.0240%" y="639.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.02%)</title><rect x="10.7773%" y="613" width="0.0167%" height="15" fill="rgb(220,20,13)" fg:x="3218" fg:w="5"/><text x="11.0273%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (5 samples, 0.02%)</title><rect x="10.7773%" y="597" width="0.0167%" height="15" fill="rgb(210,164,35)" fg:x="3218" fg:w="5"/><text x="11.0273%" y="607.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.01%)</title><rect x="10.7807%" y="581" width="0.0134%" height="15" fill="rgb(248,109,41)" fg:x="3219" fg:w="4"/><text x="11.0307%" y="591.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="10.7807%" y="565" width="0.0134%" height="15" fill="rgb(238,23,50)" fg:x="3219" fg:w="4"/><text x="11.0307%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="10.7807%" y="549" width="0.0134%" height="15" fill="rgb(211,48,49)" fg:x="3219" fg:w="4"/><text x="11.0307%" y="559.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.01%)</title><rect x="10.7840%" y="533" width="0.0100%" height="15" fill="rgb(223,36,21)" fg:x="3220" fg:w="3"/><text x="11.0340%" y="543.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (13 samples, 0.04%)</title><rect x="10.7572%" y="677" width="0.0435%" height="15" fill="rgb(207,123,46)" fg:x="3212" fg:w="13"/><text x="11.0072%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (5 samples, 0.02%)</title><rect x="10.8343%" y="629" width="0.0167%" height="15" fill="rgb(240,218,32)" fg:x="3235" fg:w="5"/><text x="11.0843%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="10.8410%" y="613" width="0.0100%" height="15" fill="rgb(252,5,43)" fg:x="3237" fg:w="3"/><text x="11.0910%" y="623.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.01%)</title><rect x="10.8410%" y="597" width="0.0100%" height="15" fill="rgb(252,84,19)" fg:x="3237" fg:w="3"/><text x="11.0910%" y="607.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (10 samples, 0.03%)</title><rect x="10.8510%" y="629" width="0.0335%" height="15" fill="rgb(243,152,39)" fg:x="3240" fg:w="10"/><text x="11.1010%" y="639.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.01%)</title><rect x="10.8744%" y="613" width="0.0100%" height="15" fill="rgb(234,160,15)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.01%)</title><rect x="10.8744%" y="597" width="0.0100%" height="15" fill="rgb(237,34,20)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="607.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.01%)</title><rect x="10.8744%" y="581" width="0.0100%" height="15" fill="rgb(229,97,13)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="591.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="10.8744%" y="565" width="0.0100%" height="15" fill="rgb(234,71,50)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="10.8744%" y="549" width="0.0100%" height="15" fill="rgb(253,155,4)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="559.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.01%)</title><rect x="10.8744%" y="533" width="0.0100%" height="15" fill="rgb(222,185,37)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="543.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (3 samples, 0.01%)</title><rect x="10.8744%" y="517" width="0.0100%" height="15" fill="rgb(251,177,13)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="527.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (3 samples, 0.01%)</title><rect x="10.8744%" y="501" width="0.0100%" height="15" fill="rgb(250,179,40)" fg:x="3247" fg:w="3"/><text x="11.1244%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.01%)</title><rect x="10.9012%" y="613" width="0.0134%" height="15" fill="rgb(242,44,2)" fg:x="3255" fg:w="4"/><text x="11.1512%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.01%)</title><rect x="10.9012%" y="597" width="0.0134%" height="15" fill="rgb(216,177,13)" fg:x="3255" fg:w="4"/><text x="11.1512%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="10.9012%" y="581" width="0.0134%" height="15" fill="rgb(216,106,43)" fg:x="3255" fg:w="4"/><text x="11.1512%" y="591.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.01%)</title><rect x="10.9146%" y="613" width="0.0100%" height="15" fill="rgb(216,183,2)" fg:x="3259" fg:w="3"/><text x="11.1646%" y="623.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (3 samples, 0.01%)</title><rect x="10.9146%" y="597" width="0.0100%" height="15" fill="rgb(249,75,3)" fg:x="3259" fg:w="3"/><text x="11.1646%" y="607.50"></text></g><g><title>core::cmp::min (3 samples, 0.01%)</title><rect x="10.9146%" y="581" width="0.0100%" height="15" fill="rgb(219,67,39)" fg:x="3259" fg:w="3"/><text x="11.1646%" y="591.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.01%)</title><rect x="10.9146%" y="565" width="0.0100%" height="15" fill="rgb(253,228,2)" fg:x="3259" fg:w="3"/><text x="11.1646%" y="575.50"></text></g><g><title>inflate_fast (3 samples, 0.01%)</title><rect x="10.9347%" y="357" width="0.0100%" height="15" fill="rgb(235,138,27)" fg:x="3265" fg:w="3"/><text x="11.1847%" y="367.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="10.9314%" y="469" width="0.0167%" height="15" fill="rgb(236,97,51)" fg:x="3264" fg:w="5"/><text x="11.1814%" y="479.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="10.9314%" y="453" width="0.0167%" height="15" fill="rgb(240,80,30)" fg:x="3264" fg:w="5"/><text x="11.1814%" y="463.50"></text></g><g><title>flate2::zio::read (5 samples, 0.02%)</title><rect x="10.9314%" y="437" width="0.0167%" height="15" fill="rgb(230,178,19)" fg:x="3264" fg:w="5"/><text x="11.1814%" y="447.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4 samples, 0.01%)</title><rect x="10.9347%" y="421" width="0.0134%" height="15" fill="rgb(210,190,27)" fg:x="3265" fg:w="4"/><text x="11.1847%" y="431.50"></text></g><g><title>flate2::mem::Decompress::decompress (4 samples, 0.01%)</title><rect x="10.9347%" y="405" width="0.0134%" height="15" fill="rgb(222,107,31)" fg:x="3265" fg:w="4"/><text x="11.1847%" y="415.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 0.01%)</title><rect x="10.9347%" y="389" width="0.0134%" height="15" fill="rgb(216,127,34)" fg:x="3265" fg:w="4"/><text x="11.1847%" y="399.50"></text></g><g><title>inflate (4 samples, 0.01%)</title><rect x="10.9347%" y="373" width="0.0134%" height="15" fill="rgb(234,116,52)" fg:x="3265" fg:w="4"/><text x="11.1847%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (13 samples, 0.04%)</title><rect x="10.9247%" y="613" width="0.0435%" height="15" fill="rgb(222,124,15)" fg:x="3262" fg:w="13"/><text x="11.1747%" y="623.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (13 samples, 0.04%)</title><rect x="10.9247%" y="597" width="0.0435%" height="15" fill="rgb(231,179,28)" fg:x="3262" fg:w="13"/><text x="11.1747%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (11 samples, 0.04%)</title><rect x="10.9314%" y="581" width="0.0368%" height="15" fill="rgb(226,93,45)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="591.50"></text></g><g><title>std::io::Read::read_buf (11 samples, 0.04%)</title><rect x="10.9314%" y="565" width="0.0368%" height="15" fill="rgb(215,8,51)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="575.50"></text></g><g><title>std::io::default_read_buf (11 samples, 0.04%)</title><rect x="10.9314%" y="549" width="0.0368%" height="15" fill="rgb(223,106,5)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="559.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (11 samples, 0.04%)</title><rect x="10.9314%" y="533" width="0.0368%" height="15" fill="rgb(250,191,5)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="543.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (11 samples, 0.04%)</title><rect x="10.9314%" y="517" width="0.0368%" height="15" fill="rgb(242,132,44)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="527.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (11 samples, 0.04%)</title><rect x="10.9314%" y="501" width="0.0368%" height="15" fill="rgb(251,152,29)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="511.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.04%)</title><rect x="10.9314%" y="485" width="0.0368%" height="15" fill="rgb(218,179,5)" fg:x="3264" fg:w="11"/><text x="11.1814%" y="495.50"></text></g><g><title>crc32fast::Hasher::update (6 samples, 0.02%)</title><rect x="10.9481%" y="469" width="0.0201%" height="15" fill="rgb(227,67,19)" fg:x="3269" fg:w="6"/><text x="11.1981%" y="479.50"></text></g><g><title>crc32fast::baseline::State::update (6 samples, 0.02%)</title><rect x="10.9481%" y="453" width="0.0201%" height="15" fill="rgb(233,119,31)" fg:x="3269" fg:w="6"/><text x="11.1981%" y="463.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (6 samples, 0.02%)</title><rect x="10.9481%" y="437" width="0.0201%" height="15" fill="rgb(241,120,22)" fg:x="3269" fg:w="6"/><text x="11.1981%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.01%)</title><rect x="10.9682%" y="613" width="0.0100%" height="15" fill="rgb(224,102,30)" fg:x="3275" fg:w="3"/><text x="11.2182%" y="623.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.11%)</title><rect x="11.0051%" y="597" width="0.1072%" height="15" fill="rgb(210,164,37)" fg:x="3286" fg:w="32"/><text x="11.2551%" y="607.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (31 samples, 0.10%)</title><rect x="11.0084%" y="581" width="0.1038%" height="15" fill="rgb(226,191,16)" fg:x="3287" fg:w="31"/><text x="11.2584%" y="591.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (25 samples, 0.08%)</title><rect x="11.0285%" y="565" width="0.0837%" height="15" fill="rgb(214,40,45)" fg:x="3293" fg:w="25"/><text x="11.2785%" y="575.50"></text></g><g><title>memchr::memchr::memchr3_raw (25 samples, 0.08%)</title><rect x="11.0285%" y="549" width="0.0837%" height="15" fill="rgb(244,29,26)" fg:x="3293" fg:w="25"/><text x="11.2785%" y="559.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (25 samples, 0.08%)</title><rect x="11.0285%" y="533" width="0.0837%" height="15" fill="rgb(216,16,5)" fg:x="3293" fg:w="25"/><text x="11.2785%" y="543.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (23 samples, 0.08%)</title><rect x="11.0352%" y="517" width="0.0770%" height="15" fill="rgb(249,76,35)" fg:x="3295" fg:w="23"/><text x="11.2852%" y="527.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (17 samples, 0.06%)</title><rect x="11.0553%" y="501" width="0.0569%" height="15" fill="rgb(207,11,44)" fg:x="3301" fg:w="17"/><text x="11.3053%" y="511.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (15 samples, 0.05%)</title><rect x="11.0620%" y="485" width="0.0502%" height="15" fill="rgb(228,190,49)" fg:x="3303" fg:w="15"/><text x="11.3120%" y="495.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (15 samples, 0.05%)</title><rect x="11.0620%" y="469" width="0.0502%" height="15" fill="rgb(214,173,12)" fg:x="3303" fg:w="15"/><text x="11.3120%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (15 samples, 0.05%)</title><rect x="11.0620%" y="453" width="0.0502%" height="15" fill="rgb(218,26,35)" fg:x="3303" fg:w="15"/><text x="11.3120%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (14 samples, 0.05%)</title><rect x="11.0653%" y="437" width="0.0469%" height="15" fill="rgb(220,200,19)" fg:x="3304" fg:w="14"/><text x="11.3153%" y="447.50"></text></g><g><title>core::core_arch::simd::i8x16::new (5 samples, 0.02%)</title><rect x="11.0955%" y="421" width="0.0167%" height="15" fill="rgb(239,95,49)" fg:x="3313" fg:w="5"/><text x="11.3455%" y="431.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (73 samples, 0.24%)</title><rect x="10.8845%" y="629" width="0.2445%" height="15" fill="rgb(235,85,53)" fg:x="3250" fg:w="73"/><text x="11.1345%" y="639.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (45 samples, 0.15%)</title><rect x="10.9783%" y="613" width="0.1507%" height="15" fill="rgb(233,133,31)" fg:x="3278" fg:w="45"/><text x="11.2283%" y="623.50"></text></g><g><title>memchr::memchr::memchr3_iter (3 samples, 0.01%)</title><rect x="11.1189%" y="597" width="0.0100%" height="15" fill="rgb(218,25,20)" fg:x="3320" fg:w="3"/><text x="11.3689%" y="607.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (4 samples, 0.01%)</title><rect x="11.1290%" y="629" width="0.0134%" height="15" fill="rgb(252,210,38)" fg:x="3323" fg:w="4"/><text x="11.3790%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (4 samples, 0.01%)</title><rect x="11.1558%" y="613" width="0.0134%" height="15" fill="rgb(242,134,21)" fg:x="3331" fg:w="4"/><text x="11.4058%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.01%)</title><rect x="11.1558%" y="597" width="0.0134%" height="15" fill="rgb(213,28,48)" fg:x="3331" fg:w="4"/><text x="11.4058%" y="607.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (3 samples, 0.01%)</title><rect x="11.1591%" y="581" width="0.0100%" height="15" fill="rgb(250,196,2)" fg:x="3332" fg:w="3"/><text x="11.4091%" y="591.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (3 samples, 0.01%)</title><rect x="11.1591%" y="565" width="0.0100%" height="15" fill="rgb(227,5,17)" fg:x="3332" fg:w="3"/><text x="11.4091%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (12 samples, 0.04%)</title><rect x="11.1692%" y="613" width="0.0402%" height="15" fill="rgb(221,226,24)" fg:x="3335" fg:w="12"/><text x="11.4192%" y="623.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start::{{closure}} (4 samples, 0.01%)</title><rect x="11.1960%" y="597" width="0.0134%" height="15" fill="rgb(211,5,48)" fg:x="3343" fg:w="4"/><text x="11.4460%" y="607.50"></text></g><g><title>quick_xml::reader::is_whitespace (3 samples, 0.01%)</title><rect x="11.1993%" y="581" width="0.0100%" height="15" fill="rgb(219,150,6)" fg:x="3344" fg:w="3"/><text x="11.4493%" y="591.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (120 samples, 0.40%)</title><rect x="10.8242%" y="645" width="0.4019%" height="15" fill="rgb(251,46,16)" fg:x="3232" fg:w="120"/><text x="11.0742%" y="655.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (25 samples, 0.08%)</title><rect x="11.1424%" y="629" width="0.0837%" height="15" fill="rgb(220,204,40)" fg:x="3327" fg:w="25"/><text x="11.3924%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (5 samples, 0.02%)</title><rect x="11.2663%" y="613" width="0.0167%" height="15" fill="rgb(211,85,2)" fg:x="3364" fg:w="5"/><text x="11.5163%" y="623.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.01%)</title><rect x="11.2696%" y="597" width="0.0134%" height="15" fill="rgb(229,17,7)" fg:x="3365" fg:w="4"/><text x="11.5196%" y="607.50"></text></g><g><title>core::cmp::min (3 samples, 0.01%)</title><rect x="11.2730%" y="581" width="0.0100%" height="15" fill="rgb(239,72,28)" fg:x="3366" fg:w="3"/><text x="11.5230%" y="591.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.01%)</title><rect x="11.2730%" y="565" width="0.0100%" height="15" fill="rgb(230,47,54)" fg:x="3366" fg:w="3"/><text x="11.5230%" y="575.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.01%)</title><rect x="11.2730%" y="549" width="0.0100%" height="15" fill="rgb(214,50,8)" fg:x="3366" fg:w="3"/><text x="11.5230%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (7 samples, 0.02%)</title><rect x="11.3065%" y="597" width="0.0234%" height="15" fill="rgb(216,198,43)" fg:x="3376" fg:w="7"/><text x="11.5565%" y="607.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.02%)</title><rect x="11.3132%" y="581" width="0.0167%" height="15" fill="rgb(234,20,35)" fg:x="3378" fg:w="5"/><text x="11.5632%" y="591.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (479 samples, 1.60%)</title><rect x="9.7291%" y="725" width="1.6042%" height="15" fill="rgb(254,45,19)" fg:x="2905" fg:w="479"/><text x="9.9791%" y="735.50"></text></g><g><title>calamine::xlsx::read_sheet_data (479 samples, 1.60%)</title><rect x="9.7291%" y="709" width="1.6042%" height="15" fill="rgb(219,14,44)" fg:x="2905" fg:w="479"/><text x="9.9791%" y="719.50"></text></g><g><title>calamine::xlsx::read_sheet (479 samples, 1.60%)</title><rect x="9.7291%" y="693" width="1.6042%" height="15" fill="rgb(217,220,26)" fg:x="2905" fg:w="479"/><text x="9.9791%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (159 samples, 0.53%)</title><rect x="10.8008%" y="677" width="0.5325%" height="15" fill="rgb(213,158,28)" fg:x="3225" fg:w="159"/><text x="11.0508%" y="687.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (158 samples, 0.53%)</title><rect x="10.8041%" y="661" width="0.5292%" height="15" fill="rgb(252,51,52)" fg:x="3226" fg:w="158"/><text x="11.0541%" y="671.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (32 samples, 0.11%)</title><rect x="11.2261%" y="645" width="0.1072%" height="15" fill="rgb(246,89,16)" fg:x="3352" fg:w="32"/><text x="11.4761%" y="655.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (25 samples, 0.08%)</title><rect x="11.2495%" y="629" width="0.0837%" height="15" fill="rgb(216,158,49)" fg:x="3359" fg:w="25"/><text x="11.4995%" y="639.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (13 samples, 0.04%)</title><rect x="11.2897%" y="613" width="0.0435%" height="15" fill="rgb(236,107,19)" fg:x="3371" fg:w="13"/><text x="11.5397%" y="623.50"></text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (484 samples, 1.62%)</title><rect x="9.7291%" y="933" width="1.6210%" height="15" fill="rgb(228,185,30)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (484 samples, 1.62%)</title><rect x="9.7291%" y="917" width="1.6210%" height="15" fill="rgb(246,134,8)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (484 samples, 1.62%)</title><rect x="9.7291%" y="901" width="1.6210%" height="15" fill="rgb(214,143,50)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (484 samples, 1.62%)</title><rect x="9.7291%" y="885" width="1.6210%" height="15" fill="rgb(228,75,8)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="895.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (484 samples, 1.62%)</title><rect x="9.7291%" y="869" width="1.6210%" height="15" fill="rgb(207,175,4)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (484 samples, 1.62%)</title><rect x="9.7291%" y="853" width="1.6210%" height="15" fill="rgb(205,108,24)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (484 samples, 1.62%)</title><rect x="9.7291%" y="837" width="1.6210%" height="15" fill="rgb(244,120,49)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (484 samples, 1.62%)</title><rect x="9.7291%" y="821" width="1.6210%" height="15" fill="rgb(223,47,38)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (484 samples, 1.62%)</title><rect x="9.7291%" y="805" width="1.6210%" height="15" fill="rgb(229,179,11)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (484 samples, 1.62%)</title><rect x="9.7291%" y="789" width="1.6210%" height="15" fill="rgb(231,122,1)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (484 samples, 1.62%)</title><rect x="9.7291%" y="773" width="1.6210%" height="15" fill="rgb(245,119,9)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="783.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (484 samples, 1.62%)</title><rect x="9.7291%" y="757" width="1.6210%" height="15" fill="rgb(241,163,25)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="767.50"></text></g><g><title>calamine::xlsx::worksheet (484 samples, 1.62%)</title><rect x="9.7291%" y="741" width="1.6210%" height="15" fill="rgb(217,214,3)" fg:x="2905" fg:w="484"/><text x="9.9791%" y="751.50"></text></g><g><title>calamine::Range&lt;T&gt;::from_sparse (5 samples, 0.02%)</title><rect x="11.3333%" y="725" width="0.0167%" height="15" fill="rgb(240,86,28)" fg:x="3384" fg:w="5"/><text x="11.5833%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="11.4069%" y="789" width="0.0100%" height="15" fill="rgb(215,47,9)" fg:x="3406" fg:w="3"/><text x="11.6569%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (3 samples, 0.01%)</title><rect x="11.4170%" y="789" width="0.0100%" height="15" fill="rgb(252,25,45)" fg:x="3409" fg:w="3"/><text x="11.6670%" y="799.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (6 samples, 0.02%)</title><rect x="11.4404%" y="757" width="0.0201%" height="15" fill="rgb(251,164,9)" fg:x="3416" fg:w="6"/><text x="11.6904%" y="767.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="11.4505%" y="741" width="0.0100%" height="15" fill="rgb(233,194,0)" fg:x="3419" fg:w="3"/><text x="11.7005%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="11.5175%" y="677" width="0.0100%" height="15" fill="rgb(249,111,24)" fg:x="3439" fg:w="3"/><text x="11.7675%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.05%)</title><rect x="11.5007%" y="709" width="0.0469%" height="15" fill="rgb(250,223,3)" fg:x="3434" fg:w="14"/><text x="11.7507%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (14 samples, 0.05%)</title><rect x="11.5007%" y="693" width="0.0469%" height="15" fill="rgb(236,178,37)" fg:x="3434" fg:w="14"/><text x="11.7507%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (4 samples, 0.01%)</title><rect x="11.5342%" y="677" width="0.0134%" height="15" fill="rgb(241,158,50)" fg:x="3444" fg:w="4"/><text x="11.7842%" y="687.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (4 samples, 0.01%)</title><rect x="11.5342%" y="661" width="0.0134%" height="15" fill="rgb(213,121,41)" fg:x="3444" fg:w="4"/><text x="11.7842%" y="671.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (3 samples, 0.01%)</title><rect x="11.5376%" y="645" width="0.0100%" height="15" fill="rgb(240,92,3)" fg:x="3445" fg:w="3"/><text x="11.7876%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (31 samples, 0.10%)</title><rect x="11.4672%" y="725" width="0.1038%" height="15" fill="rgb(205,123,3)" fg:x="3424" fg:w="31"/><text x="11.7172%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (4 samples, 0.01%)</title><rect x="11.5577%" y="709" width="0.0134%" height="15" fill="rgb(205,97,47)" fg:x="3451" fg:w="4"/><text x="11.8077%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (33 samples, 0.11%)</title><rect x="11.4672%" y="741" width="0.1105%" height="15" fill="rgb(247,152,14)" fg:x="3424" fg:w="33"/><text x="11.7172%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.01%)</title><rect x="11.5945%" y="677" width="0.0134%" height="15" fill="rgb(248,195,53)" fg:x="3462" fg:w="4"/><text x="11.8445%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="11.6079%" y="677" width="0.0134%" height="15" fill="rgb(226,201,16)" fg:x="3466" fg:w="4"/><text x="11.8579%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.05%)</title><rect x="11.5911%" y="693" width="0.0502%" height="15" fill="rgb(205,98,0)" fg:x="3461" fg:w="15"/><text x="11.8411%" y="703.50"></text></g><g><title>core::cmp::max (5 samples, 0.02%)</title><rect x="11.6246%" y="677" width="0.0167%" height="15" fill="rgb(214,191,48)" fg:x="3471" fg:w="5"/><text x="11.8746%" y="687.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.02%)</title><rect x="11.6246%" y="661" width="0.0167%" height="15" fill="rgb(237,112,39)" fg:x="3471" fg:w="5"/><text x="11.8746%" y="671.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (18 samples, 0.06%)</title><rect x="11.5844%" y="741" width="0.0603%" height="15" fill="rgb(247,203,27)" fg:x="3459" fg:w="18"/><text x="11.8344%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.05%)</title><rect x="11.5911%" y="725" width="0.0536%" height="15" fill="rgb(235,124,28)" fg:x="3461" fg:w="16"/><text x="11.8411%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.05%)</title><rect x="11.5911%" y="709" width="0.0536%" height="15" fill="rgb(208,207,46)" fg:x="3461" fg:w="16"/><text x="11.8411%" y="719.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.21%)</title><rect x="11.4404%" y="773" width="0.2076%" height="15" fill="rgb(234,176,4)" fg:x="3416" fg:w="62"/><text x="11.6904%" y="783.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (56 samples, 0.19%)</title><rect x="11.4605%" y="757" width="0.1875%" height="15" fill="rgb(230,133,28)" fg:x="3422" fg:w="56"/><text x="11.7105%" y="767.50"></text></g><g><title>calamine::xlsx::get_attribute (70 samples, 0.23%)</title><rect x="11.4270%" y="789" width="0.2344%" height="15" fill="rgb(211,137,40)" fg:x="3412" fg:w="70"/><text x="11.6770%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (4 samples, 0.01%)</title><rect x="11.6481%" y="773" width="0.0134%" height="15" fill="rgb(254,35,13)" fg:x="3478" fg:w="4"/><text x="11.8981%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (4 samples, 0.01%)</title><rect x="11.6481%" y="757" width="0.0134%" height="15" fill="rgb(225,49,51)" fg:x="3478" fg:w="4"/><text x="11.8981%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="11.6481%" y="741" width="0.0134%" height="15" fill="rgb(251,10,15)" fg:x="3478" fg:w="4"/><text x="11.8981%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="11.6481%" y="725" width="0.0134%" height="15" fill="rgb(228,207,15)" fg:x="3478" fg:w="4"/><text x="11.8981%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="11.6481%" y="709" width="0.0134%" height="15" fill="rgb(241,99,19)" fg:x="3478" fg:w="4"/><text x="11.8981%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="11.6849%" y="757" width="0.0167%" height="15" fill="rgb(207,104,49)" fg:x="3489" fg:w="5"/><text x="11.9349%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.01%)</title><rect x="11.6883%" y="741" width="0.0134%" height="15" fill="rgb(234,99,18)" fg:x="3490" fg:w="4"/><text x="11.9383%" y="751.50"></text></g><g><title>calamine::xlsx::get_row_column (14 samples, 0.05%)</title><rect x="11.6615%" y="789" width="0.0469%" height="15" fill="rgb(213,191,49)" fg:x="3482" fg:w="14"/><text x="11.9115%" y="799.50"></text></g><g><title>calamine::xlsx::get_row_and_optional_column (14 samples, 0.05%)</title><rect x="11.6615%" y="773" width="0.0469%" height="15" fill="rgb(210,226,19)" fg:x="3482" fg:w="14"/><text x="11.9115%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.02%)</title><rect x="11.7385%" y="773" width="0.0201%" height="15" fill="rgb(229,97,18)" fg:x="3505" fg:w="6"/><text x="11.9885%" y="783.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="11.7854%" y="645" width="0.0167%" height="15" fill="rgb(211,167,15)" fg:x="3519" fg:w="5"/><text x="12.0354%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.01%)</title><rect x="11.7921%" y="629" width="0.0100%" height="15" fill="rgb(210,169,34)" fg:x="3521" fg:w="3"/><text x="12.0421%" y="639.50"></text></g><g><title>alloc::string::String::push_str (11 samples, 0.04%)</title><rect x="11.7720%" y="773" width="0.0368%" height="15" fill="rgb(241,121,31)" fg:x="3515" fg:w="11"/><text x="12.0220%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.04%)</title><rect x="11.7720%" y="757" width="0.0368%" height="15" fill="rgb(232,40,11)" fg:x="3515" fg:w="11"/><text x="12.0220%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.04%)</title><rect x="11.7720%" y="741" width="0.0368%" height="15" fill="rgb(205,86,26)" fg:x="3515" fg:w="11"/><text x="12.0220%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.04%)</title><rect x="11.7720%" y="725" width="0.0368%" height="15" fill="rgb(231,126,28)" fg:x="3515" fg:w="11"/><text x="12.0220%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.03%)</title><rect x="11.7753%" y="709" width="0.0335%" height="15" fill="rgb(219,221,18)" fg:x="3516" fg:w="10"/><text x="12.0253%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.03%)</title><rect x="11.7753%" y="693" width="0.0335%" height="15" fill="rgb(211,40,0)" fg:x="3516" fg:w="10"/><text x="12.0253%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.03%)</title><rect x="11.7753%" y="677" width="0.0335%" height="15" fill="rgb(239,85,43)" fg:x="3516" fg:w="10"/><text x="12.0253%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.03%)</title><rect x="11.7753%" y="661" width="0.0335%" height="15" fill="rgb(231,55,21)" fg:x="3516" fg:w="10"/><text x="12.0253%" y="671.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.02%)</title><rect x="11.8390%" y="741" width="0.0234%" height="15" fill="rgb(225,184,43)" fg:x="3535" fg:w="7"/><text x="12.0890%" y="751.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="11.8457%" y="725" width="0.0167%" height="15" fill="rgb(251,158,41)" fg:x="3537" fg:w="5"/><text x="12.0957%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="11.8390%" y="757" width="0.0268%" height="15" fill="rgb(234,159,37)" fg:x="3535" fg:w="8"/><text x="12.0890%" y="767.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;&amp;[u8]&gt;::key (3 samples, 0.01%)</title><rect x="11.8792%" y="693" width="0.0100%" height="15" fill="rgb(216,204,22)" fg:x="3547" fg:w="3"/><text x="12.1292%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (7 samples, 0.02%)</title><rect x="11.8725%" y="725" width="0.0234%" height="15" fill="rgb(214,17,3)" fg:x="3545" fg:w="7"/><text x="12.1225%" y="735.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attribute as core::convert::From&lt;quick_xml::events::attributes::Attr&lt;&amp;[u8]&gt;&gt;&gt;::from (6 samples, 0.02%)</title><rect x="11.8758%" y="709" width="0.0201%" height="15" fill="rgb(212,111,17)" fg:x="3546" fg:w="6"/><text x="12.1258%" y="719.50"></text></g><g><title>__memcpy_sse2_unaligned (3 samples, 0.01%)</title><rect x="11.8959%" y="725" width="0.0100%" height="15" fill="rgb(221,157,24)" fg:x="3552" fg:w="3"/><text x="12.1459%" y="735.50"></text></g><g><title>__memmove_sse2_unaligned_erms (4 samples, 0.01%)</title><rect x="11.9060%" y="725" width="0.0134%" height="15" fill="rgb(252,16,13)" fg:x="3555" fg:w="4"/><text x="12.1560%" y="735.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (10 samples, 0.03%)</title><rect x="11.9194%" y="725" width="0.0335%" height="15" fill="rgb(221,62,2)" fg:x="3559" fg:w="10"/><text x="12.1694%" y="735.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (7 samples, 0.02%)</title><rect x="11.9294%" y="709" width="0.0234%" height="15" fill="rgb(247,87,22)" fg:x="3562" fg:w="7"/><text x="12.1794%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.02%)</title><rect x="11.9328%" y="693" width="0.0201%" height="15" fill="rgb(215,73,9)" fg:x="3563" fg:w="6"/><text x="12.1828%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.02%)</title><rect x="11.9361%" y="677" width="0.0167%" height="15" fill="rgb(207,175,33)" fg:x="3564" fg:w="5"/><text x="12.1861%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="12.0734%" y="645" width="0.0167%" height="15" fill="rgb(243,129,54)" fg:x="3605" fg:w="5"/><text x="12.3234%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (3 samples, 0.01%)</title><rect x="12.1069%" y="629" width="0.0100%" height="15" fill="rgb(227,119,45)" fg:x="3615" fg:w="3"/><text x="12.3569%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="12.0902%" y="645" width="0.0335%" height="15" fill="rgb(205,109,36)" fg:x="3610" fg:w="10"/><text x="12.3402%" y="655.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (9 samples, 0.03%)</title><rect x="12.1471%" y="613" width="0.0301%" height="15" fill="rgb(205,6,39)" fg:x="3627" fg:w="9"/><text x="12.3971%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.03%)</title><rect x="12.1504%" y="597" width="0.0268%" height="15" fill="rgb(221,32,16)" fg:x="3628" fg:w="8"/><text x="12.4004%" y="607.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (14 samples, 0.05%)</title><rect x="12.1337%" y="629" width="0.0469%" height="15" fill="rgb(228,144,50)" fg:x="3623" fg:w="14"/><text x="12.3837%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.15%)</title><rect x="12.0299%" y="677" width="0.1541%" height="15" fill="rgb(229,201,53)" fg:x="3592" fg:w="46"/><text x="12.2799%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (44 samples, 0.15%)</title><rect x="12.0366%" y="661" width="0.1474%" height="15" fill="rgb(249,153,27)" fg:x="3594" fg:w="44"/><text x="12.2866%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (18 samples, 0.06%)</title><rect x="12.1236%" y="645" width="0.0603%" height="15" fill="rgb(227,106,25)" fg:x="3620" fg:w="18"/><text x="12.3736%" y="655.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.02%)</title><rect x="12.1839%" y="677" width="0.0201%" height="15" fill="rgb(230,65,29)" fg:x="3638" fg:w="6"/><text x="12.4339%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (79 samples, 0.26%)</title><rect x="11.9763%" y="693" width="0.2646%" height="15" fill="rgb(221,57,46)" fg:x="3576" fg:w="79"/><text x="12.2263%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (10 samples, 0.03%)</title><rect x="12.2074%" y="677" width="0.0335%" height="15" fill="rgb(229,161,17)" fg:x="3645" fg:w="10"/><text x="12.4574%" y="687.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (4 samples, 0.01%)</title><rect x="12.2275%" y="661" width="0.0134%" height="15" fill="rgb(222,213,11)" fg:x="3651" fg:w="4"/><text x="12.4775%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (83 samples, 0.28%)</title><rect x="11.9729%" y="709" width="0.2780%" height="15" fill="rgb(235,35,13)" fg:x="3575" fg:w="83"/><text x="12.2229%" y="719.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (3 samples, 0.01%)</title><rect x="12.2409%" y="693" width="0.0100%" height="15" fill="rgb(233,158,34)" fg:x="3655" fg:w="3"/><text x="12.4909%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (7 samples, 0.02%)</title><rect x="12.2911%" y="693" width="0.0234%" height="15" fill="rgb(215,151,48)" fg:x="3670" fg:w="7"/><text x="12.5411%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates::{{closure}} (5 samples, 0.02%)</title><rect x="12.2978%" y="677" width="0.0167%" height="15" fill="rgb(229,84,14)" fg:x="3672" fg:w="5"/><text x="12.5478%" y="687.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.01%)</title><rect x="12.3447%" y="581" width="0.0100%" height="15" fill="rgb(229,68,14)" fg:x="3686" fg:w="3"/><text x="12.5947%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="12.3279%" y="645" width="0.0301%" height="15" fill="rgb(243,106,26)" fg:x="3681" fg:w="9"/><text x="12.5779%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.02%)</title><rect x="12.3346%" y="629" width="0.0234%" height="15" fill="rgb(206,45,38)" fg:x="3683" fg:w="7"/><text x="12.5846%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="12.3380%" y="613" width="0.0201%" height="15" fill="rgb(226,6,15)" fg:x="3684" fg:w="6"/><text x="12.5880%" y="623.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.01%)</title><rect x="12.3447%" y="597" width="0.0134%" height="15" fill="rgb(232,22,54)" fg:x="3686" fg:w="4"/><text x="12.5947%" y="607.50"></text></g><g><title>core::cmp::max (3 samples, 0.01%)</title><rect x="12.3648%" y="645" width="0.0100%" height="15" fill="rgb(229,222,32)" fg:x="3692" fg:w="3"/><text x="12.6148%" y="655.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.01%)</title><rect x="12.3648%" y="629" width="0.0100%" height="15" fill="rgb(228,62,29)" fg:x="3692" fg:w="3"/><text x="12.6148%" y="639.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.01%)</title><rect x="12.3648%" y="613" width="0.0100%" height="15" fill="rgb(251,103,34)" fg:x="3692" fg:w="3"/><text x="12.6148%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.06%)</title><rect x="12.3212%" y="661" width="0.0569%" height="15" fill="rgb(233,12,30)" fg:x="3679" fg:w="17"/><text x="12.5712%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.06%)</title><rect x="12.3212%" y="677" width="0.0636%" height="15" fill="rgb(238,52,0)" fg:x="3679" fg:w="19"/><text x="12.5712%" y="687.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (36 samples, 0.12%)</title><rect x="12.2677%" y="709" width="0.1206%" height="15" fill="rgb(223,98,5)" fg:x="3663" fg:w="36"/><text x="12.5177%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.07%)</title><rect x="12.3145%" y="693" width="0.0737%" height="15" fill="rgb(228,75,37)" fg:x="3677" fg:w="22"/><text x="12.5645%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (3 samples, 0.01%)</title><rect x="12.3882%" y="709" width="0.0100%" height="15" fill="rgb(205,115,49)" fg:x="3699" fg:w="3"/><text x="12.6382%" y="719.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 0.54%)</title><rect x="11.8691%" y="741" width="0.5392%" height="15" fill="rgb(250,154,43)" fg:x="3544" fg:w="161"/><text x="12.1191%" y="751.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (136 samples, 0.46%)</title><rect x="11.9528%" y="725" width="0.4555%" height="15" fill="rgb(226,43,29)" fg:x="3569" fg:w="136"/><text x="12.2028%" y="735.50"></text></g><g><title>quick_xml::events::attributes::IterState::recover (3 samples, 0.01%)</title><rect x="12.3983%" y="709" width="0.0100%" height="15" fill="rgb(249,228,39)" fg:x="3702" fg:w="3"/><text x="12.6483%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.02%)</title><rect x="12.4251%" y="661" width="0.0234%" height="15" fill="rgb(216,79,43)" fg:x="3710" fg:w="7"/><text x="12.6751%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="12.4318%" y="645" width="0.0167%" height="15" fill="rgb(228,95,12)" fg:x="3712" fg:w="5"/><text x="12.6818%" y="655.50"></text></g><g><title>__free (4 samples, 0.01%)</title><rect x="12.4351%" y="629" width="0.0134%" height="15" fill="rgb(249,221,15)" fg:x="3713" fg:w="4"/><text x="12.6851%" y="639.50"></text></g><g><title>calamine::xlsx::get_attribute (177 samples, 0.59%)</title><rect x="11.8658%" y="757" width="0.5928%" height="15" fill="rgb(233,34,13)" fg:x="3543" fg:w="177"/><text x="12.1158%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (11 samples, 0.04%)</title><rect x="12.4217%" y="741" width="0.0368%" height="15" fill="rgb(214,103,39)" fg:x="3709" fg:w="11"/><text x="12.6717%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (11 samples, 0.04%)</title><rect x="12.4217%" y="725" width="0.0368%" height="15" fill="rgb(251,126,39)" fg:x="3709" fg:w="11"/><text x="12.6717%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (11 samples, 0.04%)</title><rect x="12.4217%" y="709" width="0.0368%" height="15" fill="rgb(214,216,36)" fg:x="3709" fg:w="11"/><text x="12.6717%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (10 samples, 0.03%)</title><rect x="12.4251%" y="693" width="0.0335%" height="15" fill="rgb(220,221,8)" fg:x="3710" fg:w="10"/><text x="12.6751%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="12.4251%" y="677" width="0.0335%" height="15" fill="rgb(240,216,3)" fg:x="3710" fg:w="10"/><text x="12.6751%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="12.4485%" y="661" width="0.0100%" height="15" fill="rgb(232,218,17)" fg:x="3717" fg:w="3"/><text x="12.6985%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="12.4586%" y="725" width="0.0100%" height="15" fill="rgb(229,163,45)" fg:x="3720" fg:w="3"/><text x="12.7086%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="12.4586%" y="757" width="0.0134%" height="15" fill="rgb(231,110,42)" fg:x="3720" fg:w="4"/><text x="12.7086%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="12.4586%" y="741" width="0.0134%" height="15" fill="rgb(208,170,48)" fg:x="3720" fg:w="4"/><text x="12.7086%" y="751.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.01%)</title><rect x="12.4753%" y="757" width="0.0100%" height="15" fill="rgb(239,116,25)" fg:x="3725" fg:w="3"/><text x="12.7253%" y="767.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (202 samples, 0.68%)</title><rect x="11.8189%" y="773" width="0.6765%" height="15" fill="rgb(219,200,50)" fg:x="3529" fg:w="202"/><text x="12.0689%" y="783.50"></text></g><g><title>quick_xml::events::BytesStart::attributes (3 samples, 0.01%)</title><rect x="12.4853%" y="757" width="0.0100%" height="15" fill="rgb(245,200,0)" fg:x="3728" fg:w="3"/><text x="12.7353%" y="767.50"></text></g><g><title>quick_xml::events::attributes::Attributes::wrap (3 samples, 0.01%)</title><rect x="12.4853%" y="741" width="0.0100%" height="15" fill="rgb(245,119,33)" fg:x="3728" fg:w="3"/><text x="12.7353%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="12.5121%" y="645" width="0.0134%" height="15" fill="rgb(231,125,12)" fg:x="3736" fg:w="4"/><text x="12.7621%" y="655.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.02%)</title><rect x="12.5121%" y="757" width="0.0167%" height="15" fill="rgb(216,96,41)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.02%)</title><rect x="12.5121%" y="741" width="0.0167%" height="15" fill="rgb(248,43,45)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="12.5121%" y="725" width="0.0167%" height="15" fill="rgb(217,222,7)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.02%)</title><rect x="12.5121%" y="709" width="0.0167%" height="15" fill="rgb(233,28,6)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="12.5121%" y="693" width="0.0167%" height="15" fill="rgb(231,218,15)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="12.5121%" y="677" width="0.0167%" height="15" fill="rgb(226,171,48)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="12.5121%" y="661" width="0.0167%" height="15" fill="rgb(235,201,9)" fg:x="3736" fg:w="5"/><text x="12.7621%" y="671.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (4 samples, 0.01%)</title><rect x="12.5523%" y="725" width="0.0134%" height="15" fill="rgb(217,80,15)" fg:x="3748" fg:w="4"/><text x="12.8023%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (11 samples, 0.04%)</title><rect x="12.5490%" y="757" width="0.0368%" height="15" fill="rgb(219,152,8)" fg:x="3747" fg:w="11"/><text x="12.7990%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (10 samples, 0.03%)</title><rect x="12.5523%" y="741" width="0.0335%" height="15" fill="rgb(243,107,38)" fg:x="3748" fg:w="10"/><text x="12.8023%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (6 samples, 0.02%)</title><rect x="12.5657%" y="725" width="0.0201%" height="15" fill="rgb(231,17,5)" fg:x="3752" fg:w="6"/><text x="12.8157%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (6 samples, 0.02%)</title><rect x="12.5657%" y="709" width="0.0201%" height="15" fill="rgb(209,25,54)" fg:x="3752" fg:w="6"/><text x="12.8157%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (3 samples, 0.01%)</title><rect x="12.5758%" y="693" width="0.0100%" height="15" fill="rgb(219,0,2)" fg:x="3755" fg:w="3"/><text x="12.8258%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.01%)</title><rect x="12.5858%" y="725" width="0.0100%" height="15" fill="rgb(246,9,5)" fg:x="3758" fg:w="3"/><text x="12.8358%" y="735.50"></text></g><g><title>calamine::xlsx::read_string (33 samples, 0.11%)</title><rect x="12.4954%" y="773" width="0.1105%" height="15" fill="rgb(226,159,4)" fg:x="3731" fg:w="33"/><text x="12.7454%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (6 samples, 0.02%)</title><rect x="12.5858%" y="757" width="0.0201%" height="15" fill="rgb(219,175,34)" fg:x="3758" fg:w="6"/><text x="12.8358%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (6 samples, 0.02%)</title><rect x="12.5858%" y="741" width="0.0201%" height="15" fill="rgb(236,10,46)" fg:x="3758" fg:w="6"/><text x="12.8358%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (3 samples, 0.01%)</title><rect x="12.5959%" y="725" width="0.0100%" height="15" fill="rgb(240,211,16)" fg:x="3761" fg:w="3"/><text x="12.8459%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (3 samples, 0.01%)</title><rect x="12.5959%" y="709" width="0.0100%" height="15" fill="rgb(205,3,43)" fg:x="3761" fg:w="3"/><text x="12.8459%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (8 samples, 0.03%)</title><rect x="12.6093%" y="757" width="0.0268%" height="15" fill="rgb(245,7,22)" fg:x="3765" fg:w="8"/><text x="12.8593%" y="767.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (8 samples, 0.03%)</title><rect x="12.6093%" y="741" width="0.0268%" height="15" fill="rgb(239,132,32)" fg:x="3765" fg:w="8"/><text x="12.8593%" y="751.50"></text></g><g><title>quick_xml::name::QName::index (6 samples, 0.02%)</title><rect x="12.6160%" y="725" width="0.0201%" height="15" fill="rgb(228,202,34)" fg:x="3767" fg:w="6"/><text x="12.8660%" y="735.50"></text></g><g><title>memchr::memchr::memchr (6 samples, 0.02%)</title><rect x="12.6160%" y="709" width="0.0201%" height="15" fill="rgb(254,200,22)" fg:x="3767" fg:w="6"/><text x="12.8660%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (6 samples, 0.02%)</title><rect x="12.6160%" y="693" width="0.0201%" height="15" fill="rgb(219,10,39)" fg:x="3767" fg:w="6"/><text x="12.8660%" y="703.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (5 samples, 0.02%)</title><rect x="12.6193%" y="677" width="0.0167%" height="15" fill="rgb(226,210,39)" fg:x="3768" fg:w="5"/><text x="12.8693%" y="687.50"></text></g><g><title>memchr::memchr::memchr_raw (5 samples, 0.02%)</title><rect x="12.6193%" y="661" width="0.0167%" height="15" fill="rgb(208,219,16)" fg:x="3768" fg:w="5"/><text x="12.8693%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (5 samples, 0.02%)</title><rect x="12.6193%" y="645" width="0.0167%" height="15" fill="rgb(216,158,51)" fg:x="3768" fg:w="5"/><text x="12.8693%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.02%)</title><rect x="12.6193%" y="629" width="0.0167%" height="15" fill="rgb(233,14,44)" fg:x="3768" fg:w="5"/><text x="12.8693%" y="639.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (4 samples, 0.01%)</title><rect x="12.6227%" y="613" width="0.0134%" height="15" fill="rgb(237,97,39)" fg:x="3769" fg:w="4"/><text x="12.8727%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (3 samples, 0.01%)</title><rect x="12.6260%" y="597" width="0.0100%" height="15" fill="rgb(218,198,43)" fg:x="3770" fg:w="3"/><text x="12.8760%" y="607.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (3 samples, 0.01%)</title><rect x="12.6260%" y="581" width="0.0100%" height="15" fill="rgb(231,104,20)" fg:x="3770" fg:w="3"/><text x="12.8760%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.01%)</title><rect x="12.6260%" y="565" width="0.0100%" height="15" fill="rgb(254,36,13)" fg:x="3770" fg:w="3"/><text x="12.8760%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.01%)</title><rect x="12.6260%" y="549" width="0.0100%" height="15" fill="rgb(248,14,50)" fg:x="3770" fg:w="3"/><text x="12.8760%" y="559.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (9 samples, 0.03%)</title><rect x="12.6093%" y="773" width="0.0301%" height="15" fill="rgb(217,107,29)" fg:x="3765" fg:w="9"/><text x="12.8593%" y="783.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (4 samples, 0.01%)</title><rect x="12.6562%" y="741" width="0.0134%" height="15" fill="rgb(251,169,33)" fg:x="3779" fg:w="4"/><text x="12.9062%" y="751.50"></text></g><g><title>quick_xml::encoding::decode (4 samples, 0.01%)</title><rect x="12.6562%" y="725" width="0.0134%" height="15" fill="rgb(217,108,32)" fg:x="3779" fg:w="4"/><text x="12.9062%" y="735.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling_and_without_replacement (4 samples, 0.01%)</title><rect x="12.6562%" y="709" width="0.0134%" height="15" fill="rgb(219,66,42)" fg:x="3779" fg:w="4"/><text x="12.9062%" y="719.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (3 samples, 0.01%)</title><rect x="12.6595%" y="693" width="0.0100%" height="15" fill="rgb(206,180,7)" fg:x="3780" fg:w="3"/><text x="12.9095%" y="703.50"></text></g><g><title>encoding_rs::ascii::validate_ascii (3 samples, 0.01%)</title><rect x="12.6595%" y="677" width="0.0100%" height="15" fill="rgb(208,226,31)" fg:x="3780" fg:w="3"/><text x="12.9095%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (5 samples, 0.02%)</title><rect x="12.6729%" y="725" width="0.0167%" height="15" fill="rgb(218,26,49)" fg:x="3784" fg:w="5"/><text x="12.9229%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.01%)</title><rect x="12.6762%" y="709" width="0.0134%" height="15" fill="rgb(233,197,48)" fg:x="3785" fg:w="4"/><text x="12.9262%" y="719.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="12.6796%" y="693" width="0.0100%" height="15" fill="rgb(252,181,51)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (3 samples, 0.01%)</title><rect x="12.6796%" y="677" width="0.0100%" height="15" fill="rgb(253,90,19)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="687.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="12.6796%" y="661" width="0.0100%" height="15" fill="rgb(215,171,30)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="671.50"></text></g><g><title>memchr::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="12.6796%" y="645" width="0.0100%" height="15" fill="rgb(214,222,9)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (3 samples, 0.01%)</title><rect x="12.6796%" y="629" width="0.0100%" height="15" fill="rgb(223,3,22)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="639.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (3 samples, 0.01%)</title><rect x="12.6796%" y="613" width="0.0100%" height="15" fill="rgb(225,196,46)" fg:x="3786" fg:w="3"/><text x="12.9296%" y="623.50"></text></g><g><title>quick_xml::events::BytesText::unescape (15 samples, 0.05%)</title><rect x="12.6428%" y="773" width="0.0502%" height="15" fill="rgb(209,110,37)" fg:x="3775" fg:w="15"/><text x="12.8928%" y="783.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (15 samples, 0.05%)</title><rect x="12.6428%" y="757" width="0.0502%" height="15" fill="rgb(249,89,12)" fg:x="3775" fg:w="15"/><text x="12.8928%" y="767.50"></text></g><g><title>quick_xml::escapei::unescape_with (7 samples, 0.02%)</title><rect x="12.6695%" y="741" width="0.0234%" height="15" fill="rgb(226,27,33)" fg:x="3783" fg:w="7"/><text x="12.9195%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (3 samples, 0.01%)</title><rect x="12.7131%" y="725" width="0.0100%" height="15" fill="rgb(213,82,22)" fg:x="3796" fg:w="3"/><text x="12.9631%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="12.7298%" y="709" width="0.0100%" height="15" fill="rgb(248,140,0)" fg:x="3801" fg:w="3"/><text x="12.9798%" y="719.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.01%)</title><rect x="12.7298%" y="693" width="0.0100%" height="15" fill="rgb(228,106,3)" fg:x="3801" fg:w="3"/><text x="12.9798%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (11 samples, 0.04%)</title><rect x="12.7231%" y="725" width="0.0368%" height="15" fill="rgb(209,23,37)" fg:x="3799" fg:w="11"/><text x="12.9731%" y="735.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.01%)</title><rect x="12.7499%" y="709" width="0.0100%" height="15" fill="rgb(241,93,50)" fg:x="3807" fg:w="3"/><text x="12.9999%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.01%)</title><rect x="12.7499%" y="693" width="0.0100%" height="15" fill="rgb(253,46,43)" fg:x="3807" fg:w="3"/><text x="12.9999%" y="703.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.01%)</title><rect x="12.7499%" y="677" width="0.0100%" height="15" fill="rgb(226,206,43)" fg:x="3807" fg:w="3"/><text x="12.9999%" y="687.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (27 samples, 0.09%)</title><rect x="12.7030%" y="741" width="0.0904%" height="15" fill="rgb(217,54,7)" fg:x="3793" fg:w="27"/><text x="12.9530%" y="751.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (10 samples, 0.03%)</title><rect x="12.7600%" y="725" width="0.0335%" height="15" fill="rgb(223,5,52)" fg:x="3810" fg:w="10"/><text x="13.0100%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.01%)</title><rect x="12.7834%" y="709" width="0.0100%" height="15" fill="rgb(206,52,46)" fg:x="3817" fg:w="3"/><text x="13.0334%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.01%)</title><rect x="12.8002%" y="725" width="0.0100%" height="15" fill="rgb(253,136,11)" fg:x="3822" fg:w="3"/><text x="13.0502%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.01%)</title><rect x="12.8136%" y="709" width="0.0134%" height="15" fill="rgb(208,106,33)" fg:x="3826" fg:w="4"/><text x="13.0636%" y="719.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (4 samples, 0.01%)</title><rect x="12.8136%" y="693" width="0.0134%" height="15" fill="rgb(206,54,4)" fg:x="3826" fg:w="4"/><text x="13.0636%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="12.8437%" y="597" width="0.0134%" height="15" fill="rgb(213,3,15)" fg:x="3835" fg:w="4"/><text x="13.0937%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.03%)</title><rect x="12.8337%" y="613" width="0.0335%" height="15" fill="rgb(252,211,39)" fg:x="3832" fg:w="10"/><text x="13.0837%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.05%)</title><rect x="12.8270%" y="677" width="0.0469%" height="15" fill="rgb(223,6,36)" fg:x="3830" fg:w="14"/><text x="13.0770%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.05%)</title><rect x="12.8270%" y="661" width="0.0469%" height="15" fill="rgb(252,169,45)" fg:x="3830" fg:w="14"/><text x="13.0770%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.04%)</title><rect x="12.8303%" y="645" width="0.0435%" height="15" fill="rgb(212,48,26)" fg:x="3831" fg:w="13"/><text x="13.0803%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.04%)</title><rect x="12.8303%" y="629" width="0.0435%" height="15" fill="rgb(251,102,48)" fg:x="3831" fg:w="13"/><text x="13.0803%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.05%)</title><rect x="12.8270%" y="693" width="0.0536%" height="15" fill="rgb(243,208,16)" fg:x="3830" fg:w="16"/><text x="13.0770%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 0.06%)</title><rect x="12.8270%" y="709" width="0.0569%" height="15" fill="rgb(219,96,24)" fg:x="3830" fg:w="17"/><text x="13.0770%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (29 samples, 0.10%)</title><rect x="12.8102%" y="725" width="0.0971%" height="15" fill="rgb(219,33,29)" fg:x="3825" fg:w="29"/><text x="13.0602%" y="735.50"></text></g><g><title>memchr::memchr::memchr (7 samples, 0.02%)</title><rect x="12.8839%" y="709" width="0.0234%" height="15" fill="rgb(223,176,5)" fg:x="3847" fg:w="7"/><text x="13.1339%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (7 samples, 0.02%)</title><rect x="12.8839%" y="693" width="0.0234%" height="15" fill="rgb(228,140,14)" fg:x="3847" fg:w="7"/><text x="13.1339%" y="703.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (6 samples, 0.02%)</title><rect x="12.8872%" y="677" width="0.0201%" height="15" fill="rgb(217,179,31)" fg:x="3848" fg:w="6"/><text x="13.1372%" y="687.50"></text></g><g><title>memchr::memchr::memchr_raw (6 samples, 0.02%)</title><rect x="12.8872%" y="661" width="0.0201%" height="15" fill="rgb(230,9,30)" fg:x="3848" fg:w="6"/><text x="13.1372%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (6 samples, 0.02%)</title><rect x="12.8872%" y="645" width="0.0201%" height="15" fill="rgb(230,136,20)" fg:x="3848" fg:w="6"/><text x="13.1372%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.02%)</title><rect x="12.8906%" y="629" width="0.0167%" height="15" fill="rgb(215,210,22)" fg:x="3849" fg:w="5"/><text x="13.1406%" y="639.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (5 samples, 0.02%)</title><rect x="12.8906%" y="613" width="0.0167%" height="15" fill="rgb(218,43,5)" fg:x="3849" fg:w="5"/><text x="13.1406%" y="623.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (5 samples, 0.02%)</title><rect x="12.8906%" y="597" width="0.0167%" height="15" fill="rgb(216,11,5)" fg:x="3849" fg:w="5"/><text x="13.1406%" y="607.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5 samples, 0.02%)</title><rect x="12.8906%" y="581" width="0.0167%" height="15" fill="rgb(209,82,29)" fg:x="3849" fg:w="5"/><text x="13.1406%" y="591.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (3 samples, 0.01%)</title><rect x="12.8973%" y="565" width="0.0100%" height="15" fill="rgb(244,115,12)" fg:x="3851" fg:w="3"/><text x="13.1473%" y="575.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (3 samples, 0.01%)</title><rect x="12.9073%" y="725" width="0.0100%" height="15" fill="rgb(222,82,18)" fg:x="3854" fg:w="3"/><text x="13.1573%" y="735.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (362 samples, 1.21%)</title><rect x="11.7084%" y="789" width="1.2124%" height="15" fill="rgb(249,227,8)" fg:x="3496" fg:w="362"/><text x="11.9584%" y="799.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (68 samples, 0.23%)</title><rect x="12.6930%" y="773" width="0.2277%" height="15" fill="rgb(253,141,45)" fg:x="3790" fg:w="68"/><text x="12.9430%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (68 samples, 0.23%)</title><rect x="12.6930%" y="757" width="0.2277%" height="15" fill="rgb(234,184,4)" fg:x="3790" fg:w="68"/><text x="12.9430%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (38 samples, 0.13%)</title><rect x="12.7935%" y="741" width="0.1273%" height="15" fill="rgb(218,194,23)" fg:x="3820" fg:w="38"/><text x="13.0435%" y="751.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.02%)</title><rect x="12.9308%" y="773" width="0.0167%" height="15" fill="rgb(235,66,41)" fg:x="3861" fg:w="5"/><text x="13.1808%" y="783.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (5 samples, 0.02%)</title><rect x="12.9308%" y="757" width="0.0167%" height="15" fill="rgb(245,217,1)" fg:x="3861" fg:w="5"/><text x="13.1808%" y="767.50"></text></g><g><title>quick_xml::name::QName::index (5 samples, 0.02%)</title><rect x="12.9308%" y="741" width="0.0167%" height="15" fill="rgb(229,91,1)" fg:x="3861" fg:w="5"/><text x="13.1808%" y="751.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.02%)</title><rect x="12.9308%" y="725" width="0.0167%" height="15" fill="rgb(207,101,30)" fg:x="3861" fg:w="5"/><text x="13.1808%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.01%)</title><rect x="12.9341%" y="709" width="0.0134%" height="15" fill="rgb(223,82,49)" fg:x="3862" fg:w="4"/><text x="13.1841%" y="719.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.01%)</title><rect x="12.9341%" y="693" width="0.0134%" height="15" fill="rgb(218,167,17)" fg:x="3862" fg:w="4"/><text x="13.1841%" y="703.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="12.9341%" y="677" width="0.0134%" height="15" fill="rgb(208,103,14)" fg:x="3862" fg:w="4"/><text x="13.1841%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="12.9375%" y="661" width="0.0100%" height="15" fill="rgb(238,20,8)" fg:x="3863" fg:w="3"/><text x="13.1875%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.01%)</title><rect x="12.9375%" y="645" width="0.0100%" height="15" fill="rgb(218,80,54)" fg:x="3863" fg:w="3"/><text x="13.1875%" y="655.50"></text></g><g><title>quick_xml::events::BytesEnd::local_name (8 samples, 0.03%)</title><rect x="12.9274%" y="789" width="0.0268%" height="15" fill="rgb(240,144,17)" fg:x="3860" fg:w="8"/><text x="13.1774%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.03%)</title><rect x="12.9576%" y="773" width="0.0335%" height="15" fill="rgb(245,27,50)" fg:x="3869" fg:w="10"/><text x="13.2076%" y="783.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (10 samples, 0.03%)</title><rect x="12.9576%" y="757" width="0.0335%" height="15" fill="rgb(251,51,7)" fg:x="3869" fg:w="10"/><text x="13.2076%" y="767.50"></text></g><g><title>quick_xml::name::QName::index (8 samples, 0.03%)</title><rect x="12.9643%" y="741" width="0.0268%" height="15" fill="rgb(245,217,29)" fg:x="3871" fg:w="8"/><text x="13.2143%" y="751.50"></text></g><g><title>memchr::memchr::memchr (8 samples, 0.03%)</title><rect x="12.9643%" y="725" width="0.0268%" height="15" fill="rgb(221,176,29)" fg:x="3871" fg:w="8"/><text x="13.2143%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (8 samples, 0.03%)</title><rect x="12.9643%" y="709" width="0.0268%" height="15" fill="rgb(212,180,24)" fg:x="3871" fg:w="8"/><text x="13.2143%" y="719.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (6 samples, 0.02%)</title><rect x="12.9710%" y="693" width="0.0201%" height="15" fill="rgb(254,24,2)" fg:x="3873" fg:w="6"/><text x="13.2210%" y="703.50"></text></g><g><title>memchr::memchr::memchr_raw (6 samples, 0.02%)</title><rect x="12.9710%" y="677" width="0.0201%" height="15" fill="rgb(230,100,2)" fg:x="3873" fg:w="6"/><text x="13.2210%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (5 samples, 0.02%)</title><rect x="12.9743%" y="661" width="0.0167%" height="15" fill="rgb(219,142,25)" fg:x="3874" fg:w="5"/><text x="13.2243%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.02%)</title><rect x="12.9743%" y="645" width="0.0167%" height="15" fill="rgb(240,73,43)" fg:x="3874" fg:w="5"/><text x="13.2243%" y="655.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (13 samples, 0.04%)</title><rect x="12.9576%" y="789" width="0.0435%" height="15" fill="rgb(214,114,15)" fg:x="3869" fg:w="13"/><text x="13.2076%" y="799.50"></text></g><g><title>quick_xml::events::BytesStart::name (3 samples, 0.01%)</title><rect x="12.9911%" y="773" width="0.0100%" height="15" fill="rgb(207,130,4)" fg:x="3879" fg:w="3"/><text x="13.2411%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (7 samples, 0.02%)</title><rect x="13.0480%" y="741" width="0.0234%" height="15" fill="rgb(221,25,40)" fg:x="3896" fg:w="7"/><text x="13.2980%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (6 samples, 0.02%)</title><rect x="13.0513%" y="725" width="0.0201%" height="15" fill="rgb(241,184,7)" fg:x="3897" fg:w="6"/><text x="13.3013%" y="735.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (6 samples, 0.02%)</title><rect x="13.0513%" y="709" width="0.0201%" height="15" fill="rgb(235,159,4)" fg:x="3897" fg:w="6"/><text x="13.3013%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (5 samples, 0.02%)</title><rect x="13.0547%" y="693" width="0.0167%" height="15" fill="rgb(214,87,48)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="703.50"></text></g><g><title>std::io::Read::read_buf (5 samples, 0.02%)</title><rect x="13.0547%" y="677" width="0.0167%" height="15" fill="rgb(246,198,24)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="687.50"></text></g><g><title>std::io::default_read_buf (5 samples, 0.02%)</title><rect x="13.0547%" y="661" width="0.0167%" height="15" fill="rgb(209,66,40)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="671.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (5 samples, 0.02%)</title><rect x="13.0547%" y="645" width="0.0167%" height="15" fill="rgb(233,147,39)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="655.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.0547%" y="629" width="0.0167%" height="15" fill="rgb(231,145,52)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="639.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.0547%" y="613" width="0.0167%" height="15" fill="rgb(206,20,26)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="623.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.0547%" y="597" width="0.0167%" height="15" fill="rgb(238,220,4)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="607.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.0547%" y="581" width="0.0167%" height="15" fill="rgb(252,195,42)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="591.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.0547%" y="565" width="0.0167%" height="15" fill="rgb(209,10,6)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="575.50"></text></g><g><title>flate2::zio::read (5 samples, 0.02%)</title><rect x="13.0547%" y="549" width="0.0167%" height="15" fill="rgb(229,3,52)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="559.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (5 samples, 0.02%)</title><rect x="13.0547%" y="533" width="0.0167%" height="15" fill="rgb(253,49,37)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="543.50"></text></g><g><title>flate2::mem::Decompress::decompress (5 samples, 0.02%)</title><rect x="13.0547%" y="517" width="0.0167%" height="15" fill="rgb(240,103,49)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="527.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (5 samples, 0.02%)</title><rect x="13.0547%" y="501" width="0.0167%" height="15" fill="rgb(250,182,30)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="511.50"></text></g><g><title>inflate (5 samples, 0.02%)</title><rect x="13.0547%" y="485" width="0.0167%" height="15" fill="rgb(248,8,30)" fg:x="3898" fg:w="5"/><text x="13.3047%" y="495.50"></text></g><g><title>updatewindow (3 samples, 0.01%)</title><rect x="13.0614%" y="469" width="0.0100%" height="15" fill="rgb(237,120,30)" fg:x="3900" fg:w="3"/><text x="13.3114%" y="479.50"></text></g><g><title>zmemcpy (3 samples, 0.01%)</title><rect x="13.0614%" y="453" width="0.0100%" height="15" fill="rgb(221,146,34)" fg:x="3900" fg:w="3"/><text x="13.3114%" y="463.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="13.0781%" y="725" width="0.0100%" height="15" fill="rgb(242,55,13)" fg:x="3905" fg:w="3"/><text x="13.3281%" y="735.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.01%)</title><rect x="13.0781%" y="709" width="0.0100%" height="15" fill="rgb(242,112,31)" fg:x="3905" fg:w="3"/><text x="13.3281%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.01%)</title><rect x="13.0882%" y="725" width="0.0100%" height="15" fill="rgb(249,192,27)" fg:x="3908" fg:w="3"/><text x="13.3382%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (15 samples, 0.05%)</title><rect x="13.0714%" y="741" width="0.0502%" height="15" fill="rgb(208,204,44)" fg:x="3903" fg:w="15"/><text x="13.3214%" y="751.50"></text></g><g><title>memchr::memchr::memchr (6 samples, 0.02%)</title><rect x="13.1016%" y="725" width="0.0201%" height="15" fill="rgb(208,93,54)" fg:x="3912" fg:w="6"/><text x="13.3516%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (6 samples, 0.02%)</title><rect x="13.1016%" y="709" width="0.0201%" height="15" fill="rgb(242,1,31)" fg:x="3912" fg:w="6"/><text x="13.3516%" y="719.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.01%)</title><rect x="13.1083%" y="693" width="0.0134%" height="15" fill="rgb(241,83,25)" fg:x="3914" fg:w="4"/><text x="13.3583%" y="703.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="13.1083%" y="677" width="0.0134%" height="15" fill="rgb(205,169,50)" fg:x="3914" fg:w="4"/><text x="13.3583%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="13.1116%" y="661" width="0.0100%" height="15" fill="rgb(239,186,37)" fg:x="3915" fg:w="3"/><text x="13.3616%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.01%)</title><rect x="13.1384%" y="725" width="0.0134%" height="15" fill="rgb(205,221,10)" fg:x="3923" fg:w="4"/><text x="13.3884%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="13.1418%" y="709" width="0.0100%" height="15" fill="rgb(218,196,15)" fg:x="3924" fg:w="3"/><text x="13.3918%" y="719.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.1652%" y="581" width="0.0167%" height="15" fill="rgb(218,196,35)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="591.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.1652%" y="565" width="0.0167%" height="15" fill="rgb(233,63,24)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="575.50"></text></g><g><title>flate2::zio::read (5 samples, 0.02%)</title><rect x="13.1652%" y="549" width="0.0167%" height="15" fill="rgb(225,8,4)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="559.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (5 samples, 0.02%)</title><rect x="13.1652%" y="533" width="0.0167%" height="15" fill="rgb(234,105,35)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="543.50"></text></g><g><title>flate2::mem::Decompress::decompress (5 samples, 0.02%)</title><rect x="13.1652%" y="517" width="0.0167%" height="15" fill="rgb(236,21,32)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="527.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (5 samples, 0.02%)</title><rect x="13.1652%" y="501" width="0.0167%" height="15" fill="rgb(228,109,6)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="511.50"></text></g><g><title>inflate (5 samples, 0.02%)</title><rect x="13.1652%" y="485" width="0.0167%" height="15" fill="rgb(229,215,31)" fg:x="3931" fg:w="5"/><text x="13.4152%" y="495.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (9 samples, 0.03%)</title><rect x="13.1585%" y="725" width="0.0301%" height="15" fill="rgb(221,52,54)" fg:x="3929" fg:w="9"/><text x="13.4085%" y="735.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (9 samples, 0.03%)</title><rect x="13.1585%" y="709" width="0.0301%" height="15" fill="rgb(252,129,43)" fg:x="3929" fg:w="9"/><text x="13.4085%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (7 samples, 0.02%)</title><rect x="13.1652%" y="693" width="0.0234%" height="15" fill="rgb(248,183,27)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="703.50"></text></g><g><title>std::io::Read::read_buf (7 samples, 0.02%)</title><rect x="13.1652%" y="677" width="0.0234%" height="15" fill="rgb(250,0,22)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="687.50"></text></g><g><title>std::io::default_read_buf (7 samples, 0.02%)</title><rect x="13.1652%" y="661" width="0.0234%" height="15" fill="rgb(213,166,10)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="671.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (7 samples, 0.02%)</title><rect x="13.1652%" y="645" width="0.0234%" height="15" fill="rgb(207,163,36)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="655.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (7 samples, 0.02%)</title><rect x="13.1652%" y="629" width="0.0234%" height="15" fill="rgb(208,122,22)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="639.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (7 samples, 0.02%)</title><rect x="13.1652%" y="613" width="0.0234%" height="15" fill="rgb(207,104,49)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="623.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.02%)</title><rect x="13.1652%" y="597" width="0.0234%" height="15" fill="rgb(248,211,50)" fg:x="3931" fg:w="7"/><text x="13.4152%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.01%)</title><rect x="13.1920%" y="693" width="0.0100%" height="15" fill="rgb(217,13,45)" fg:x="3939" fg:w="3"/><text x="13.4420%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.02%)</title><rect x="13.1887%" y="725" width="0.0167%" height="15" fill="rgb(211,216,49)" fg:x="3938" fg:w="5"/><text x="13.4387%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.01%)</title><rect x="13.1920%" y="709" width="0.0134%" height="15" fill="rgb(221,58,53)" fg:x="3939" fg:w="4"/><text x="13.4420%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (3 samples, 0.01%)</title><rect x="13.2623%" y="613" width="0.0100%" height="15" fill="rgb(220,112,41)" fg:x="3960" fg:w="3"/><text x="13.5123%" y="623.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (3 samples, 0.01%)</title><rect x="13.2623%" y="597" width="0.0100%" height="15" fill="rgb(236,38,28)" fg:x="3960" fg:w="3"/><text x="13.5123%" y="607.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.09%)</title><rect x="13.2188%" y="709" width="0.0938%" height="15" fill="rgb(227,195,22)" fg:x="3947" fg:w="28"/><text x="13.4688%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (27 samples, 0.09%)</title><rect x="13.2221%" y="693" width="0.0904%" height="15" fill="rgb(214,55,33)" fg:x="3948" fg:w="27"/><text x="13.4721%" y="703.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (22 samples, 0.07%)</title><rect x="13.2389%" y="677" width="0.0737%" height="15" fill="rgb(248,80,13)" fg:x="3953" fg:w="22"/><text x="13.4889%" y="687.50"></text></g><g><title>memchr::memchr::memchr3_raw (21 samples, 0.07%)</title><rect x="13.2422%" y="661" width="0.0703%" height="15" fill="rgb(238,52,6)" fg:x="3954" fg:w="21"/><text x="13.4922%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (17 samples, 0.06%)</title><rect x="13.2556%" y="645" width="0.0569%" height="15" fill="rgb(224,198,47)" fg:x="3958" fg:w="17"/><text x="13.5056%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (16 samples, 0.05%)</title><rect x="13.2590%" y="629" width="0.0536%" height="15" fill="rgb(233,171,20)" fg:x="3959" fg:w="16"/><text x="13.5090%" y="639.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (12 samples, 0.04%)</title><rect x="13.2724%" y="613" width="0.0402%" height="15" fill="rgb(241,30,25)" fg:x="3963" fg:w="12"/><text x="13.5224%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (7 samples, 0.02%)</title><rect x="13.2891%" y="597" width="0.0234%" height="15" fill="rgb(207,171,38)" fg:x="3968" fg:w="7"/><text x="13.5391%" y="607.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (6 samples, 0.02%)</title><rect x="13.2925%" y="581" width="0.0201%" height="15" fill="rgb(234,70,1)" fg:x="3969" fg:w="6"/><text x="13.5425%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (6 samples, 0.02%)</title><rect x="13.2925%" y="565" width="0.0201%" height="15" fill="rgb(232,178,18)" fg:x="3969" fg:w="6"/><text x="13.5425%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (6 samples, 0.02%)</title><rect x="13.2925%" y="549" width="0.0201%" height="15" fill="rgb(241,78,40)" fg:x="3969" fg:w="6"/><text x="13.5425%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.01%)</title><rect x="13.3126%" y="709" width="0.0134%" height="15" fill="rgb(222,35,25)" fg:x="3975" fg:w="4"/><text x="13.5626%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (63 samples, 0.21%)</title><rect x="13.1217%" y="741" width="0.2110%" height="15" fill="rgb(207,92,16)" fg:x="3918" fg:w="63"/><text x="13.3717%" y="751.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (38 samples, 0.13%)</title><rect x="13.2054%" y="725" width="0.1273%" height="15" fill="rgb(216,59,51)" fg:x="3943" fg:w="38"/><text x="13.4554%" y="735.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (9 samples, 0.03%)</title><rect x="13.3327%" y="741" width="0.0301%" height="15" fill="rgb(213,80,28)" fg:x="3981" fg:w="9"/><text x="13.5827%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.01%)</title><rect x="13.3528%" y="725" width="0.0100%" height="15" fill="rgb(220,93,7)" fg:x="3987" fg:w="3"/><text x="13.6028%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (8 samples, 0.03%)</title><rect x="13.3829%" y="725" width="0.0268%" height="15" fill="rgb(225,24,44)" fg:x="3996" fg:w="8"/><text x="13.6329%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.01%)</title><rect x="13.4197%" y="725" width="0.0100%" height="15" fill="rgb(243,74,40)" fg:x="4007" fg:w="3"/><text x="13.6697%" y="735.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.01%)</title><rect x="13.4365%" y="725" width="0.0134%" height="15" fill="rgb(228,39,7)" fg:x="4012" fg:w="4"/><text x="13.6865%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="13.4365%" y="709" width="0.0134%" height="15" fill="rgb(227,79,8)" fg:x="4012" fg:w="4"/><text x="13.6865%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="13.4365%" y="693" width="0.0134%" height="15" fill="rgb(236,58,11)" fg:x="4012" fg:w="4"/><text x="13.6865%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (127 samples, 0.43%)</title><rect x="13.0346%" y="757" width="0.4253%" height="15" fill="rgb(249,63,35)" fg:x="3892" fg:w="127"/><text x="13.2846%" y="767.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (29 samples, 0.10%)</title><rect x="13.3628%" y="741" width="0.0971%" height="15" fill="rgb(252,114,16)" fg:x="3990" fg:w="29"/><text x="13.6128%" y="751.50"></text></g><g><title>quick_xml::events::BytesStart::wrap (3 samples, 0.01%)</title><rect x="13.4499%" y="725" width="0.0100%" height="15" fill="rgb(254,151,24)" fg:x="4016" fg:w="3"/><text x="13.6999%" y="735.50"></text></g><g><title>__memcpy_sse2_unaligned (3 samples, 0.01%)</title><rect x="13.4700%" y="741" width="0.0100%" height="15" fill="rgb(253,54,39)" fg:x="4022" fg:w="3"/><text x="13.7200%" y="751.50"></text></g><g><title>__memmove_sse2_unaligned_erms (3 samples, 0.01%)</title><rect x="13.4800%" y="741" width="0.0100%" height="15" fill="rgb(243,25,45)" fg:x="4025" fg:w="3"/><text x="13.7300%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="13.5001%" y="725" width="0.0100%" height="15" fill="rgb(234,134,9)" fg:x="4031" fg:w="3"/><text x="13.7501%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (5 samples, 0.02%)</title><rect x="13.5102%" y="725" width="0.0167%" height="15" fill="rgb(227,166,31)" fg:x="4034" fg:w="5"/><text x="13.7602%" y="735.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.01%)</title><rect x="13.5135%" y="709" width="0.0134%" height="15" fill="rgb(245,143,41)" fg:x="4035" fg:w="4"/><text x="13.7635%" y="719.50"></text></g><g><title>core::cmp::min (4 samples, 0.01%)</title><rect x="13.5135%" y="693" width="0.0134%" height="15" fill="rgb(238,181,32)" fg:x="4035" fg:w="4"/><text x="13.7635%" y="703.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.01%)</title><rect x="13.5135%" y="677" width="0.0134%" height="15" fill="rgb(224,113,18)" fg:x="4035" fg:w="4"/><text x="13.7635%" y="687.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.01%)</title><rect x="13.5135%" y="661" width="0.0134%" height="15" fill="rgb(240,229,28)" fg:x="4035" fg:w="4"/><text x="13.7635%" y="671.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (658 samples, 2.20%)</title><rect x="11.3534%" y="837" width="2.2037%" height="15" fill="rgb(250,185,3)" fg:x="3390" fg:w="658"/><text x="11.6034%" y="847.50">&lt;..</text></g><g><title>calamine::xlsx::read_sheet_data (658 samples, 2.20%)</title><rect x="11.3534%" y="821" width="2.2037%" height="15" fill="rgb(212,59,25)" fg:x="3390" fg:w="658"/><text x="11.6034%" y="831.50">c..</text></g><g><title>calamine::xlsx::read_sheet (658 samples, 2.20%)</title><rect x="11.3534%" y="805" width="2.2037%" height="15" fill="rgb(221,87,20)" fg:x="3390" fg:w="658"/><text x="11.6034%" y="815.50">c..</text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (166 samples, 0.56%)</title><rect x="13.0011%" y="789" width="0.5559%" height="15" fill="rgb(213,74,28)" fg:x="3882" fg:w="166"/><text x="13.2511%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (164 samples, 0.55%)</title><rect x="13.0078%" y="773" width="0.5492%" height="15" fill="rgb(224,132,34)" fg:x="3884" fg:w="164"/><text x="13.2578%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (29 samples, 0.10%)</title><rect x="13.4599%" y="757" width="0.0971%" height="15" fill="rgb(222,101,24)" fg:x="4019" fg:w="29"/><text x="13.7099%" y="767.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (20 samples, 0.07%)</title><rect x="13.4901%" y="741" width="0.0670%" height="15" fill="rgb(254,142,4)" fg:x="4028" fg:w="20"/><text x="13.7401%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (8 samples, 0.03%)</title><rect x="13.5303%" y="725" width="0.0268%" height="15" fill="rgb(230,229,49)" fg:x="4040" fg:w="8"/><text x="13.7803%" y="735.50"></text></g><g><title>calamine::Reader::worksheet_range_at (664 samples, 2.22%)</title><rect x="11.3500%" y="933" width="2.2238%" height="15" fill="rgb(238,70,47)" fg:x="3389" fg:w="664"/><text x="11.6000%" y="943.50">c..</text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (664 samples, 2.22%)</title><rect x="11.3500%" y="917" width="2.2238%" height="15" fill="rgb(231,160,17)" fg:x="3389" fg:w="664"/><text x="11.6000%" y="927.50">&lt;..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (664 samples, 2.22%)</title><rect x="11.3500%" y="901" width="2.2238%" height="15" fill="rgb(218,68,53)" fg:x="3389" fg:w="664"/><text x="11.6000%" y="911.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (663 samples, 2.22%)</title><rect x="11.3534%" y="885" width="2.2204%" height="15" fill="rgb(236,111,10)" fg:x="3390" fg:w="663"/><text x="11.6034%" y="895.50">c..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (663 samples, 2.22%)</title><rect x="11.3534%" y="869" width="2.2204%" height="15" fill="rgb(224,34,41)" fg:x="3390" fg:w="663"/><text x="11.6034%" y="879.50">&lt;..</text></g><g><title>calamine::xlsx::worksheet (663 samples, 2.22%)</title><rect x="11.3534%" y="853" width="2.2204%" height="15" fill="rgb(241,118,19)" fg:x="3390" fg:w="663"/><text x="11.6034%" y="863.50">c..</text></g><g><title>calamine::Range&lt;T&gt;::from_sparse (5 samples, 0.02%)</title><rect x="13.5571%" y="837" width="0.0167%" height="15" fill="rgb(238,129,25)" fg:x="4048" fg:w="5"/><text x="13.8071%" y="847.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.01%)</title><rect x="13.6173%" y="677" width="0.0134%" height="15" fill="rgb(238,22,31)" fg:x="4066" fg:w="4"/><text x="13.8673%" y="687.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.01%)</title><rect x="13.6173%" y="661" width="0.0134%" height="15" fill="rgb(222,174,48)" fg:x="4066" fg:w="4"/><text x="13.8673%" y="671.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="13.6207%" y="645" width="0.0100%" height="15" fill="rgb(206,152,40)" fg:x="4067" fg:w="3"/><text x="13.8707%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="13.6140%" y="725" width="0.0201%" height="15" fill="rgb(218,99,54)" fg:x="4065" fg:w="6"/><text x="13.8640%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="13.6140%" y="709" width="0.0201%" height="15" fill="rgb(220,174,26)" fg:x="4065" fg:w="6"/><text x="13.8640%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="13.6140%" y="693" width="0.0201%" height="15" fill="rgb(245,116,9)" fg:x="4065" fg:w="6"/><text x="13.8640%" y="703.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.01%)</title><rect x="13.6341%" y="725" width="0.0134%" height="15" fill="rgb(209,72,35)" fg:x="4071" fg:w="4"/><text x="13.8841%" y="735.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.01%)</title><rect x="13.6374%" y="709" width="0.0100%" height="15" fill="rgb(226,126,21)" fg:x="4072" fg:w="3"/><text x="13.8874%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 0.05%)</title><rect x="13.6073%" y="789" width="0.0536%" height="15" fill="rgb(227,192,1)" fg:x="4063" fg:w="16"/><text x="13.8573%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.05%)</title><rect x="13.6073%" y="773" width="0.0536%" height="15" fill="rgb(237,180,29)" fg:x="4063" fg:w="16"/><text x="13.8573%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.05%)</title><rect x="13.6106%" y="757" width="0.0502%" height="15" fill="rgb(230,197,35)" fg:x="4064" fg:w="15"/><text x="13.8606%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.05%)</title><rect x="13.6106%" y="741" width="0.0502%" height="15" fill="rgb(246,193,31)" fg:x="4064" fg:w="15"/><text x="13.8606%" y="751.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="13.6475%" y="725" width="0.0134%" height="15" fill="rgb(241,36,4)" fg:x="4075" fg:w="4"/><text x="13.8975%" y="735.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="13.6475%" y="709" width="0.0134%" height="15" fill="rgb(241,130,17)" fg:x="4075" fg:w="4"/><text x="13.8975%" y="719.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.01%)</title><rect x="13.6508%" y="693" width="0.0100%" height="15" fill="rgb(206,137,32)" fg:x="4076" fg:w="3"/><text x="13.9008%" y="703.50"></text></g><g><title>alloc::string::String::push_str (17 samples, 0.06%)</title><rect x="13.6073%" y="853" width="0.0569%" height="15" fill="rgb(237,228,51)" fg:x="4063" fg:w="17"/><text x="13.8573%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 0.06%)</title><rect x="13.6073%" y="837" width="0.0569%" height="15" fill="rgb(243,6,42)" fg:x="4063" fg:w="17"/><text x="13.8573%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 0.06%)</title><rect x="13.6073%" y="821" width="0.0569%" height="15" fill="rgb(251,74,28)" fg:x="4063" fg:w="17"/><text x="13.8573%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 0.06%)</title><rect x="13.6073%" y="805" width="0.0569%" height="15" fill="rgb(218,20,49)" fg:x="4063" fg:w="17"/><text x="13.8573%" y="815.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[A: N]&gt; for [B]&gt;::eq (4 samples, 0.01%)</title><rect x="13.6709%" y="837" width="0.0134%" height="15" fill="rgb(238,28,14)" fg:x="4082" fg:w="4"/><text x="13.9209%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.02%)</title><rect x="13.6709%" y="853" width="0.0167%" height="15" fill="rgb(229,40,46)" fg:x="4082" fg:w="5"/><text x="13.9209%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="13.6910%" y="853" width="0.0100%" height="15" fill="rgb(244,195,20)" fg:x="4088" fg:w="3"/><text x="13.9410%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="13.6910%" y="837" width="0.0100%" height="15" fill="rgb(253,56,35)" fg:x="4088" fg:w="3"/><text x="13.9410%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="13.6910%" y="821" width="0.0100%" height="15" fill="rgb(210,149,44)" fg:x="4088" fg:w="3"/><text x="13.9410%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="13.6910%" y="805" width="0.0100%" height="15" fill="rgb(240,135,12)" fg:x="4088" fg:w="3"/><text x="13.9410%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;quick_xml::events::Event,quick_xml::errors::Error&gt;&gt; (3 samples, 0.01%)</title><rect x="13.7011%" y="853" width="0.0100%" height="15" fill="rgb(251,24,50)" fg:x="4091" fg:w="3"/><text x="13.9511%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::Event&gt; (3 samples, 0.01%)</title><rect x="13.7011%" y="837" width="0.0100%" height="15" fill="rgb(243,200,47)" fg:x="4091" fg:w="3"/><text x="13.9511%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.05%)</title><rect x="13.7212%" y="837" width="0.0536%" height="15" fill="rgb(224,166,26)" fg:x="4097" fg:w="16"/><text x="13.9712%" y="847.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (16 samples, 0.05%)</title><rect x="13.7212%" y="821" width="0.0536%" height="15" fill="rgb(233,0,47)" fg:x="4097" fg:w="16"/><text x="13.9712%" y="831.50"></text></g><g><title>quick_xml::name::QName::index (13 samples, 0.04%)</title><rect x="13.7312%" y="805" width="0.0435%" height="15" fill="rgb(253,80,5)" fg:x="4100" fg:w="13"/><text x="13.9812%" y="815.50"></text></g><g><title>memchr::memchr::memchr (13 samples, 0.04%)</title><rect x="13.7312%" y="789" width="0.0435%" height="15" fill="rgb(214,133,25)" fg:x="4100" fg:w="13"/><text x="13.9812%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (13 samples, 0.04%)</title><rect x="13.7312%" y="773" width="0.0435%" height="15" fill="rgb(209,27,14)" fg:x="4100" fg:w="13"/><text x="13.9812%" y="783.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (13 samples, 0.04%)</title><rect x="13.7312%" y="757" width="0.0435%" height="15" fill="rgb(219,102,51)" fg:x="4100" fg:w="13"/><text x="13.9812%" y="767.50"></text></g><g><title>memchr::memchr::memchr_raw (12 samples, 0.04%)</title><rect x="13.7346%" y="741" width="0.0402%" height="15" fill="rgb(237,18,16)" fg:x="4101" fg:w="12"/><text x="13.9846%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (10 samples, 0.03%)</title><rect x="13.7413%" y="725" width="0.0335%" height="15" fill="rgb(241,85,17)" fg:x="4103" fg:w="10"/><text x="13.9913%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (8 samples, 0.03%)</title><rect x="13.7479%" y="709" width="0.0268%" height="15" fill="rgb(236,90,42)" fg:x="4105" fg:w="8"/><text x="13.9979%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (7 samples, 0.02%)</title><rect x="13.7513%" y="693" width="0.0234%" height="15" fill="rgb(249,57,21)" fg:x="4106" fg:w="7"/><text x="14.0013%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (4 samples, 0.01%)</title><rect x="13.7613%" y="677" width="0.0134%" height="15" fill="rgb(243,12,36)" fg:x="4109" fg:w="4"/><text x="14.0113%" y="687.50"></text></g><g><title>quick_xml::events::BytesEnd::local_name (21 samples, 0.07%)</title><rect x="13.7145%" y="853" width="0.0703%" height="15" fill="rgb(253,128,47)" fg:x="4095" fg:w="21"/><text x="13.9645%" y="863.50"></text></g><g><title>quick_xml::events::BytesEnd::name (3 samples, 0.01%)</title><rect x="13.7747%" y="837" width="0.0100%" height="15" fill="rgb(207,33,20)" fg:x="4113" fg:w="3"/><text x="14.0247%" y="847.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="13.7747%" y="821" width="0.0100%" height="15" fill="rgb(233,215,35)" fg:x="4113" fg:w="3"/><text x="14.0247%" y="831.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (3 samples, 0.01%)</title><rect x="13.8183%" y="693" width="0.0100%" height="15" fill="rgb(249,188,52)" fg:x="4126" fg:w="3"/><text x="14.0683%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (3 samples, 0.01%)</title><rect x="13.8183%" y="677" width="0.0100%" height="15" fill="rgb(225,12,32)" fg:x="4126" fg:w="3"/><text x="14.0683%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.07%)</title><rect x="13.7848%" y="837" width="0.0737%" height="15" fill="rgb(247,98,14)" fg:x="4116" fg:w="22"/><text x="14.0348%" y="847.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (22 samples, 0.07%)</title><rect x="13.7848%" y="821" width="0.0737%" height="15" fill="rgb(247,219,48)" fg:x="4116" fg:w="22"/><text x="14.0348%" y="831.50"></text></g><g><title>quick_xml::name::QName::index (17 samples, 0.06%)</title><rect x="13.8015%" y="805" width="0.0569%" height="15" fill="rgb(253,60,48)" fg:x="4121" fg:w="17"/><text x="14.0515%" y="815.50"></text></g><g><title>memchr::memchr::memchr (17 samples, 0.06%)</title><rect x="13.8015%" y="789" width="0.0569%" height="15" fill="rgb(245,15,52)" fg:x="4121" fg:w="17"/><text x="14.0515%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (17 samples, 0.06%)</title><rect x="13.8015%" y="773" width="0.0569%" height="15" fill="rgb(220,133,28)" fg:x="4121" fg:w="17"/><text x="14.0515%" y="783.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (13 samples, 0.04%)</title><rect x="13.8149%" y="757" width="0.0435%" height="15" fill="rgb(217,180,4)" fg:x="4125" fg:w="13"/><text x="14.0649%" y="767.50"></text></g><g><title>memchr::memchr::memchr_raw (13 samples, 0.04%)</title><rect x="13.8149%" y="741" width="0.0435%" height="15" fill="rgb(251,24,1)" fg:x="4125" fg:w="13"/><text x="14.0649%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (13 samples, 0.04%)</title><rect x="13.8149%" y="725" width="0.0435%" height="15" fill="rgb(212,185,49)" fg:x="4125" fg:w="13"/><text x="14.0649%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (12 samples, 0.04%)</title><rect x="13.8183%" y="709" width="0.0402%" height="15" fill="rgb(215,175,22)" fg:x="4126" fg:w="12"/><text x="14.0683%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (9 samples, 0.03%)</title><rect x="13.8283%" y="693" width="0.0301%" height="15" fill="rgb(250,205,14)" fg:x="4129" fg:w="9"/><text x="14.0783%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (6 samples, 0.02%)</title><rect x="13.8384%" y="677" width="0.0201%" height="15" fill="rgb(225,211,22)" fg:x="4132" fg:w="6"/><text x="14.0884%" y="687.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (6 samples, 0.02%)</title><rect x="13.8384%" y="661" width="0.0201%" height="15" fill="rgb(251,179,42)" fg:x="4132" fg:w="6"/><text x="14.0884%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (5 samples, 0.02%)</title><rect x="13.8417%" y="645" width="0.0167%" height="15" fill="rgb(208,216,51)" fg:x="4133" fg:w="5"/><text x="14.0917%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (5 samples, 0.02%)</title><rect x="13.8417%" y="629" width="0.0167%" height="15" fill="rgb(235,36,11)" fg:x="4133" fg:w="5"/><text x="14.0917%" y="639.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (31 samples, 0.10%)</title><rect x="13.7848%" y="853" width="0.1038%" height="15" fill="rgb(213,189,28)" fg:x="4116" fg:w="31"/><text x="14.0348%" y="863.50"></text></g><g><title>quick_xml::events::BytesStart::name (9 samples, 0.03%)</title><rect x="13.8585%" y="837" width="0.0301%" height="15" fill="rgb(227,203,42)" fg:x="4138" fg:w="9"/><text x="14.1085%" y="847.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.01%)</title><rect x="13.8786%" y="821" width="0.0100%" height="15" fill="rgb(244,72,36)" fg:x="4144" fg:w="3"/><text x="14.1286%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.01%)</title><rect x="13.8786%" y="805" width="0.0100%" height="15" fill="rgb(213,53,17)" fg:x="4144" fg:w="3"/><text x="14.1286%" y="815.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (3 samples, 0.01%)</title><rect x="13.8987%" y="821" width="0.0100%" height="15" fill="rgb(207,167,3)" fg:x="4150" fg:w="3"/><text x="14.1487%" y="831.50"></text></g><g><title>quick_xml::encoding::decode (3 samples, 0.01%)</title><rect x="13.8987%" y="805" width="0.0100%" height="15" fill="rgb(216,98,30)" fg:x="4150" fg:w="3"/><text x="14.1487%" y="815.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling_and_without_replacement (3 samples, 0.01%)</title><rect x="13.8987%" y="789" width="0.0100%" height="15" fill="rgb(236,123,15)" fg:x="4150" fg:w="3"/><text x="14.1487%" y="799.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (3 samples, 0.01%)</title><rect x="13.8987%" y="773" width="0.0100%" height="15" fill="rgb(248,81,50)" fg:x="4150" fg:w="3"/><text x="14.1487%" y="783.50"></text></g><g><title>quick_xml::events::BytesText::unescape (7 samples, 0.02%)</title><rect x="13.8920%" y="853" width="0.0234%" height="15" fill="rgb(214,120,4)" fg:x="4148" fg:w="7"/><text x="14.1420%" y="863.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (7 samples, 0.02%)</title><rect x="13.8920%" y="837" width="0.0234%" height="15" fill="rgb(208,179,34)" fg:x="4148" fg:w="7"/><text x="14.1420%" y="847.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.01%)</title><rect x="13.9489%" y="645" width="0.0100%" height="15" fill="rgb(227,140,7)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="655.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.01%)</title><rect x="13.9489%" y="629" width="0.0100%" height="15" fill="rgb(214,22,6)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="639.50"></text></g><g><title>flate2::zio::read (3 samples, 0.01%)</title><rect x="13.9489%" y="613" width="0.0100%" height="15" fill="rgb(207,137,27)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="623.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (3 samples, 0.01%)</title><rect x="13.9489%" y="597" width="0.0100%" height="15" fill="rgb(210,8,46)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="607.50"></text></g><g><title>flate2::mem::Decompress::decompress (3 samples, 0.01%)</title><rect x="13.9489%" y="581" width="0.0100%" height="15" fill="rgb(240,16,54)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="591.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3 samples, 0.01%)</title><rect x="13.9489%" y="565" width="0.0100%" height="15" fill="rgb(211,209,29)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="575.50"></text></g><g><title>inflate (3 samples, 0.01%)</title><rect x="13.9489%" y="549" width="0.0100%" height="15" fill="rgb(226,228,24)" fg:x="4165" fg:w="3"/><text x="14.1989%" y="559.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (6 samples, 0.02%)</title><rect x="13.9422%" y="805" width="0.0201%" height="15" fill="rgb(222,84,9)" fg:x="4163" fg:w="6"/><text x="14.1922%" y="815.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.02%)</title><rect x="13.9455%" y="789" width="0.0167%" height="15" fill="rgb(234,203,30)" fg:x="4164" fg:w="5"/><text x="14.1955%" y="799.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.02%)</title><rect x="13.9455%" y="773" width="0.0167%" height="15" fill="rgb(238,109,14)" fg:x="4164" fg:w="5"/><text x="14.1955%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (4 samples, 0.01%)</title><rect x="13.9489%" y="757" width="0.0134%" height="15" fill="rgb(233,206,34)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="767.50"></text></g><g><title>std::io::Read::read_buf (4 samples, 0.01%)</title><rect x="13.9489%" y="741" width="0.0134%" height="15" fill="rgb(220,167,47)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="751.50"></text></g><g><title>std::io::default_read_buf (4 samples, 0.01%)</title><rect x="13.9489%" y="725" width="0.0134%" height="15" fill="rgb(238,105,10)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="735.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (4 samples, 0.01%)</title><rect x="13.9489%" y="709" width="0.0134%" height="15" fill="rgb(213,227,17)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="719.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="13.9489%" y="693" width="0.0134%" height="15" fill="rgb(217,132,38)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="13.9489%" y="677" width="0.0134%" height="15" fill="rgb(242,146,4)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="687.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="13.9489%" y="661" width="0.0134%" height="15" fill="rgb(212,61,9)" fg:x="4165" fg:w="4"/><text x="14.1989%" y="671.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.01%)</title><rect x="13.9723%" y="789" width="0.0134%" height="15" fill="rgb(247,126,22)" fg:x="4172" fg:w="4"/><text x="14.2223%" y="799.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (4 samples, 0.01%)</title><rect x="13.9723%" y="773" width="0.0134%" height="15" fill="rgb(220,196,2)" fg:x="4172" fg:w="4"/><text x="14.2223%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (22 samples, 0.07%)</title><rect x="13.9623%" y="805" width="0.0737%" height="15" fill="rgb(208,46,4)" fg:x="4169" fg:w="22"/><text x="14.2123%" y="815.50"></text></g><g><title>memchr::memchr::memchr (12 samples, 0.04%)</title><rect x="13.9958%" y="789" width="0.0402%" height="15" fill="rgb(252,104,46)" fg:x="4179" fg:w="12"/><text x="14.2458%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (12 samples, 0.04%)</title><rect x="13.9958%" y="773" width="0.0402%" height="15" fill="rgb(237,152,48)" fg:x="4179" fg:w="12"/><text x="14.2458%" y="783.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (9 samples, 0.03%)</title><rect x="14.0058%" y="757" width="0.0301%" height="15" fill="rgb(221,59,37)" fg:x="4182" fg:w="9"/><text x="14.2558%" y="767.50"></text></g><g><title>memchr::memchr::memchr_raw (9 samples, 0.03%)</title><rect x="14.0058%" y="741" width="0.0301%" height="15" fill="rgb(209,202,51)" fg:x="4182" fg:w="9"/><text x="14.2558%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (8 samples, 0.03%)</title><rect x="14.0092%" y="725" width="0.0268%" height="15" fill="rgb(228,81,30)" fg:x="4183" fg:w="8"/><text x="14.2592%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (8 samples, 0.03%)</title><rect x="14.0092%" y="709" width="0.0268%" height="15" fill="rgb(227,42,39)" fg:x="4183" fg:w="8"/><text x="14.2592%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (7 samples, 0.02%)</title><rect x="14.0125%" y="693" width="0.0234%" height="15" fill="rgb(221,26,2)" fg:x="4184" fg:w="7"/><text x="14.2625%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (5 samples, 0.02%)</title><rect x="14.0192%" y="677" width="0.0167%" height="15" fill="rgb(254,61,31)" fg:x="4186" fg:w="5"/><text x="14.2692%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5 samples, 0.02%)</title><rect x="14.0192%" y="661" width="0.0167%" height="15" fill="rgb(222,173,38)" fg:x="4186" fg:w="5"/><text x="14.2692%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (5 samples, 0.02%)</title><rect x="14.0192%" y="645" width="0.0167%" height="15" fill="rgb(218,50,12)" fg:x="4186" fg:w="5"/><text x="14.2692%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (3 samples, 0.01%)</title><rect x="14.0259%" y="629" width="0.0100%" height="15" fill="rgb(223,88,40)" fg:x="4188" fg:w="3"/><text x="14.2759%" y="639.50"></text></g><g><title>inflate_fast (3 samples, 0.01%)</title><rect x="14.0594%" y="533" width="0.0100%" height="15" fill="rgb(237,54,19)" fg:x="4198" fg:w="3"/><text x="14.3094%" y="543.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="14.0594%" y="645" width="0.0134%" height="15" fill="rgb(251,129,25)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="655.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="14.0594%" y="629" width="0.0134%" height="15" fill="rgb(238,97,19)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="639.50"></text></g><g><title>flate2::zio::read (4 samples, 0.01%)</title><rect x="14.0594%" y="613" width="0.0134%" height="15" fill="rgb(240,169,18)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="623.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4 samples, 0.01%)</title><rect x="14.0594%" y="597" width="0.0134%" height="15" fill="rgb(230,187,49)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="607.50"></text></g><g><title>flate2::mem::Decompress::decompress (4 samples, 0.01%)</title><rect x="14.0594%" y="581" width="0.0134%" height="15" fill="rgb(209,44,26)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="591.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 0.01%)</title><rect x="14.0594%" y="565" width="0.0134%" height="15" fill="rgb(244,0,6)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="575.50"></text></g><g><title>inflate (4 samples, 0.01%)</title><rect x="14.0594%" y="549" width="0.0134%" height="15" fill="rgb(248,18,21)" fg:x="4198" fg:w="4"/><text x="14.3094%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (9 samples, 0.03%)</title><rect x="14.0594%" y="789" width="0.0301%" height="15" fill="rgb(245,180,19)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="799.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (9 samples, 0.03%)</title><rect x="14.0594%" y="773" width="0.0301%" height="15" fill="rgb(252,118,36)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (9 samples, 0.03%)</title><rect x="14.0594%" y="757" width="0.0301%" height="15" fill="rgb(210,224,19)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="767.50"></text></g><g><title>std::io::Read::read_buf (9 samples, 0.03%)</title><rect x="14.0594%" y="741" width="0.0301%" height="15" fill="rgb(218,30,24)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="751.50"></text></g><g><title>std::io::default_read_buf (9 samples, 0.03%)</title><rect x="14.0594%" y="725" width="0.0301%" height="15" fill="rgb(219,75,50)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="735.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (9 samples, 0.03%)</title><rect x="14.0594%" y="709" width="0.0301%" height="15" fill="rgb(234,72,50)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="719.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (9 samples, 0.03%)</title><rect x="14.0594%" y="693" width="0.0301%" height="15" fill="rgb(219,100,48)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (9 samples, 0.03%)</title><rect x="14.0594%" y="677" width="0.0301%" height="15" fill="rgb(253,5,41)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="687.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.03%)</title><rect x="14.0594%" y="661" width="0.0301%" height="15" fill="rgb(247,181,11)" fg:x="4198" fg:w="9"/><text x="14.3094%" y="671.50"></text></g><g><title>crc32fast::Hasher::update (5 samples, 0.02%)</title><rect x="14.0728%" y="645" width="0.0167%" height="15" fill="rgb(222,223,25)" fg:x="4202" fg:w="5"/><text x="14.3228%" y="655.50"></text></g><g><title>crc32fast::baseline::State::update (5 samples, 0.02%)</title><rect x="14.0728%" y="629" width="0.0167%" height="15" fill="rgb(214,198,28)" fg:x="4202" fg:w="5"/><text x="14.3228%" y="639.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (5 samples, 0.02%)</title><rect x="14.0728%" y="613" width="0.0167%" height="15" fill="rgb(230,46,43)" fg:x="4202" fg:w="5"/><text x="14.3228%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.01%)</title><rect x="14.0896%" y="789" width="0.0100%" height="15" fill="rgb(233,65,53)" fg:x="4207" fg:w="3"/><text x="14.3396%" y="799.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (7 samples, 0.02%)</title><rect x="14.1364%" y="677" width="0.0234%" height="15" fill="rgb(221,121,27)" fg:x="4221" fg:w="7"/><text x="14.3864%" y="687.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (5 samples, 0.02%)</title><rect x="14.1431%" y="661" width="0.0167%" height="15" fill="rgb(247,70,47)" fg:x="4223" fg:w="5"/><text x="14.3931%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (3 samples, 0.01%)</title><rect x="14.1498%" y="645" width="0.0100%" height="15" fill="rgb(228,85,35)" fg:x="4225" fg:w="3"/><text x="14.3998%" y="655.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.08%)</title><rect x="14.1096%" y="773" width="0.0837%" height="15" fill="rgb(209,50,18)" fg:x="4213" fg:w="25"/><text x="14.3596%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (24 samples, 0.08%)</title><rect x="14.1130%" y="757" width="0.0804%" height="15" fill="rgb(250,19,35)" fg:x="4214" fg:w="24"/><text x="14.3630%" y="767.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (19 samples, 0.06%)</title><rect x="14.1297%" y="741" width="0.0636%" height="15" fill="rgb(253,107,29)" fg:x="4219" fg:w="19"/><text x="14.3797%" y="751.50"></text></g><g><title>memchr::memchr::memchr3_raw (19 samples, 0.06%)</title><rect x="14.1297%" y="725" width="0.0636%" height="15" fill="rgb(252,179,29)" fg:x="4219" fg:w="19"/><text x="14.3797%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (19 samples, 0.06%)</title><rect x="14.1297%" y="709" width="0.0636%" height="15" fill="rgb(238,194,6)" fg:x="4219" fg:w="19"/><text x="14.3797%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (17 samples, 0.06%)</title><rect x="14.1364%" y="693" width="0.0569%" height="15" fill="rgb(238,164,29)" fg:x="4221" fg:w="17"/><text x="14.3864%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (10 samples, 0.03%)</title><rect x="14.1599%" y="677" width="0.0335%" height="15" fill="rgb(224,25,9)" fg:x="4228" fg:w="10"/><text x="14.4099%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (6 samples, 0.02%)</title><rect x="14.1733%" y="661" width="0.0201%" height="15" fill="rgb(244,153,23)" fg:x="4232" fg:w="6"/><text x="14.4233%" y="671.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (6 samples, 0.02%)</title><rect x="14.1733%" y="645" width="0.0201%" height="15" fill="rgb(212,203,14)" fg:x="4232" fg:w="6"/><text x="14.4233%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (6 samples, 0.02%)</title><rect x="14.1733%" y="629" width="0.0201%" height="15" fill="rgb(220,164,20)" fg:x="4232" fg:w="6"/><text x="14.4233%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (6 samples, 0.02%)</title><rect x="14.1733%" y="613" width="0.0201%" height="15" fill="rgb(222,203,48)" fg:x="4232" fg:w="6"/><text x="14.4233%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.01%)</title><rect x="14.1833%" y="597" width="0.0100%" height="15" fill="rgb(215,159,22)" fg:x="4235" fg:w="3"/><text x="14.4333%" y="607.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (50 samples, 0.17%)</title><rect x="14.0360%" y="805" width="0.1675%" height="15" fill="rgb(216,183,47)" fg:x="4191" fg:w="50"/><text x="14.2860%" y="815.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (31 samples, 0.10%)</title><rect x="14.0996%" y="789" width="0.1038%" height="15" fill="rgb(229,195,25)" fg:x="4210" fg:w="31"/><text x="14.3496%" y="799.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.01%)</title><rect x="14.1934%" y="773" width="0.0100%" height="15" fill="rgb(224,132,51)" fg:x="4238" fg:w="3"/><text x="14.4434%" y="783.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (11 samples, 0.04%)</title><rect x="14.2034%" y="805" width="0.0368%" height="15" fill="rgb(240,63,7)" fg:x="4241" fg:w="11"/><text x="14.4534%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (4 samples, 0.01%)</title><rect x="14.2503%" y="789" width="0.0134%" height="15" fill="rgb(249,182,41)" fg:x="4255" fg:w="4"/><text x="14.5003%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="14.2537%" y="773" width="0.0100%" height="15" fill="rgb(243,47,26)" fg:x="4256" fg:w="3"/><text x="14.5037%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="14.2738%" y="773" width="0.0134%" height="15" fill="rgb(233,48,2)" fg:x="4262" fg:w="4"/><text x="14.5238%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (9 samples, 0.03%)</title><rect x="14.2637%" y="789" width="0.0301%" height="15" fill="rgb(244,165,34)" fg:x="4259" fg:w="9"/><text x="14.5137%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (111 samples, 0.37%)</title><rect x="13.9422%" y="821" width="0.3717%" height="15" fill="rgb(207,89,7)" fg:x="4163" fg:w="111"/><text x="14.1922%" y="831.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (22 samples, 0.07%)</title><rect x="14.2403%" y="805" width="0.0737%" height="15" fill="rgb(244,117,36)" fg:x="4252" fg:w="22"/><text x="14.4903%" y="815.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.01%)</title><rect x="14.3173%" y="645" width="0.0100%" height="15" fill="rgb(226,144,34)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="655.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.01%)</title><rect x="14.3173%" y="629" width="0.0100%" height="15" fill="rgb(213,23,19)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="639.50"></text></g><g><title>flate2::zio::read (3 samples, 0.01%)</title><rect x="14.3173%" y="613" width="0.0100%" height="15" fill="rgb(217,75,12)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="623.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (3 samples, 0.01%)</title><rect x="14.3173%" y="597" width="0.0100%" height="15" fill="rgb(224,159,17)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="607.50"></text></g><g><title>flate2::mem::Decompress::decompress (3 samples, 0.01%)</title><rect x="14.3173%" y="581" width="0.0100%" height="15" fill="rgb(217,118,1)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="591.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3 samples, 0.01%)</title><rect x="14.3173%" y="565" width="0.0100%" height="15" fill="rgb(232,180,48)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="575.50"></text></g><g><title>inflate (3 samples, 0.01%)</title><rect x="14.3173%" y="549" width="0.0100%" height="15" fill="rgb(230,27,33)" fg:x="4275" fg:w="3"/><text x="14.5673%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5 samples, 0.02%)</title><rect x="14.3173%" y="789" width="0.0167%" height="15" fill="rgb(205,31,21)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="799.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5 samples, 0.02%)</title><rect x="14.3173%" y="773" width="0.0167%" height="15" fill="rgb(253,59,4)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (5 samples, 0.02%)</title><rect x="14.3173%" y="757" width="0.0167%" height="15" fill="rgb(224,201,9)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="767.50"></text></g><g><title>std::io::Read::read_buf (5 samples, 0.02%)</title><rect x="14.3173%" y="741" width="0.0167%" height="15" fill="rgb(229,206,30)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="751.50"></text></g><g><title>std::io::default_read_buf (5 samples, 0.02%)</title><rect x="14.3173%" y="725" width="0.0167%" height="15" fill="rgb(212,67,47)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="735.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (5 samples, 0.02%)</title><rect x="14.3173%" y="709" width="0.0167%" height="15" fill="rgb(211,96,50)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="719.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="14.3173%" y="693" width="0.0167%" height="15" fill="rgb(252,114,18)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="14.3173%" y="677" width="0.0167%" height="15" fill="rgb(223,58,37)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="687.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="14.3173%" y="661" width="0.0167%" height="15" fill="rgb(237,70,4)" fg:x="4275" fg:w="5"/><text x="14.5673%" y="671.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (9 samples, 0.03%)</title><rect x="14.3139%" y="805" width="0.0301%" height="15" fill="rgb(244,85,46)" fg:x="4274" fg:w="9"/><text x="14.5639%" y="815.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.01%)</title><rect x="14.3441%" y="789" width="0.0134%" height="15" fill="rgb(223,39,52)" fg:x="4283" fg:w="4"/><text x="14.5941%" y="799.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.01%)</title><rect x="14.3441%" y="773" width="0.0134%" height="15" fill="rgb(218,200,14)" fg:x="4283" fg:w="4"/><text x="14.5941%" y="783.50"></text></g><g><title>core::cmp::min (4 samples, 0.01%)</title><rect x="14.3441%" y="757" width="0.0134%" height="15" fill="rgb(208,171,16)" fg:x="4283" fg:w="4"/><text x="14.5941%" y="767.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.01%)</title><rect x="14.3441%" y="741" width="0.0134%" height="15" fill="rgb(234,200,18)" fg:x="4283" fg:w="4"/><text x="14.5941%" y="751.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.01%)</title><rect x="14.3441%" y="725" width="0.0134%" height="15" fill="rgb(228,45,11)" fg:x="4283" fg:w="4"/><text x="14.5941%" y="735.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.01%)</title><rect x="14.3642%" y="773" width="0.0100%" height="15" fill="rgb(237,182,11)" fg:x="4289" fg:w="3"/><text x="14.6142%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3 samples, 0.01%)</title><rect x="14.3642%" y="757" width="0.0100%" height="15" fill="rgb(241,175,49)" fg:x="4289" fg:w="3"/><text x="14.6142%" y="767.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (3 samples, 0.01%)</title><rect x="14.3642%" y="741" width="0.0100%" height="15" fill="rgb(247,38,35)" fg:x="4289" fg:w="3"/><text x="14.6142%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (20 samples, 0.07%)</title><rect x="14.3139%" y="821" width="0.0670%" height="15" fill="rgb(228,39,49)" fg:x="4274" fg:w="20"/><text x="14.5639%" y="831.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (11 samples, 0.04%)</title><rect x="14.3441%" y="805" width="0.0368%" height="15" fill="rgb(226,101,26)" fg:x="4283" fg:w="11"/><text x="14.5941%" y="815.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (7 samples, 0.02%)</title><rect x="14.3575%" y="789" width="0.0234%" height="15" fill="rgb(206,141,19)" fg:x="4287" fg:w="7"/><text x="14.6075%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::split_off (9 samples, 0.03%)</title><rect x="14.3910%" y="805" width="0.0301%" height="15" fill="rgb(211,200,13)" fg:x="4297" fg:w="9"/><text x="14.6410%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="14.3977%" y="789" width="0.0234%" height="15" fill="rgb(241,121,6)" fg:x="4299" fg:w="7"/><text x="14.6477%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.02%)</title><rect x="14.3977%" y="773" width="0.0234%" height="15" fill="rgb(234,221,29)" fg:x="4299" fg:w="7"/><text x="14.6477%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.02%)</title><rect x="14.3977%" y="757" width="0.0234%" height="15" fill="rgb(229,136,5)" fg:x="4299" fg:w="7"/><text x="14.6477%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="14.4010%" y="741" width="0.0201%" height="15" fill="rgb(238,36,11)" fg:x="4300" fg:w="6"/><text x="14.6510%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="14.4010%" y="725" width="0.0201%" height="15" fill="rgb(251,55,41)" fg:x="4300" fg:w="6"/><text x="14.6510%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (152 samples, 0.51%)</title><rect x="13.9154%" y="853" width="0.5091%" height="15" fill="rgb(242,34,40)" fg:x="4155" fg:w="152"/><text x="14.1654%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (151 samples, 0.51%)</title><rect x="13.9188%" y="837" width="0.5057%" height="15" fill="rgb(215,42,17)" fg:x="4156" fg:w="151"/><text x="14.1688%" y="847.50"></text></g><g><title>quick_xml::reader::parser::Parser::close_expanded_empty (13 samples, 0.04%)</title><rect x="14.3809%" y="821" width="0.0435%" height="15" fill="rgb(207,44,46)" fg:x="4294" fg:w="13"/><text x="14.6309%" y="831.50"></text></g><g><title>calamine::xlsx::read_string (253 samples, 0.85%)</title><rect x="13.5805%" y="869" width="0.8473%" height="15" fill="rgb(211,206,28)" fg:x="4055" fg:w="253"/><text x="13.8305%" y="879.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.02%)</title><rect x="14.4312%" y="853" width="0.0167%" height="15" fill="rgb(237,167,16)" fg:x="4309" fg:w="5"/><text x="14.6812%" y="863.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (5 samples, 0.02%)</title><rect x="14.4312%" y="837" width="0.0167%" height="15" fill="rgb(233,66,6)" fg:x="4309" fg:w="5"/><text x="14.6812%" y="847.50"></text></g><g><title>quick_xml::name::QName::index (5 samples, 0.02%)</title><rect x="14.4312%" y="821" width="0.0167%" height="15" fill="rgb(246,123,29)" fg:x="4309" fg:w="5"/><text x="14.6812%" y="831.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.02%)</title><rect x="14.4312%" y="805" width="0.0167%" height="15" fill="rgb(209,62,40)" fg:x="4309" fg:w="5"/><text x="14.6812%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (5 samples, 0.02%)</title><rect x="14.4312%" y="789" width="0.0167%" height="15" fill="rgb(218,4,25)" fg:x="4309" fg:w="5"/><text x="14.6812%" y="799.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.01%)</title><rect x="14.4345%" y="773" width="0.0134%" height="15" fill="rgb(253,91,49)" fg:x="4310" fg:w="4"/><text x="14.6845%" y="783.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="14.4345%" y="757" width="0.0134%" height="15" fill="rgb(228,155,29)" fg:x="4310" fg:w="4"/><text x="14.6845%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (4 samples, 0.01%)</title><rect x="14.4345%" y="741" width="0.0134%" height="15" fill="rgb(243,57,37)" fg:x="4310" fg:w="4"/><text x="14.6845%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (4 samples, 0.01%)</title><rect x="14.4345%" y="725" width="0.0134%" height="15" fill="rgb(244,167,17)" fg:x="4310" fg:w="4"/><text x="14.6845%" y="735.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (7 samples, 0.02%)</title><rect x="14.4278%" y="869" width="0.0234%" height="15" fill="rgb(207,181,38)" fg:x="4308" fg:w="7"/><text x="14.6778%" y="879.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (10 samples, 0.03%)</title><rect x="14.4580%" y="821" width="0.0335%" height="15" fill="rgb(211,8,23)" fg:x="4317" fg:w="10"/><text x="14.7080%" y="831.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (6 samples, 0.02%)</title><rect x="14.4713%" y="805" width="0.0201%" height="15" fill="rgb(235,11,44)" fg:x="4321" fg:w="6"/><text x="14.7213%" y="815.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="14.4780%" y="789" width="0.0134%" height="15" fill="rgb(248,18,52)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="799.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (4 samples, 0.01%)</title><rect x="14.4780%" y="773" width="0.0134%" height="15" fill="rgb(208,4,7)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="783.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.01%)</title><rect x="14.4780%" y="757" width="0.0134%" height="15" fill="rgb(240,17,39)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="767.50"></text></g><g><title>memchr::memchr::memchr3_raw (4 samples, 0.01%)</title><rect x="14.4780%" y="741" width="0.0134%" height="15" fill="rgb(207,170,3)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (4 samples, 0.01%)</title><rect x="14.4780%" y="725" width="0.0134%" height="15" fill="rgb(236,100,52)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (4 samples, 0.01%)</title><rect x="14.4780%" y="709" width="0.0134%" height="15" fill="rgb(246,78,51)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (4 samples, 0.01%)</title><rect x="14.4780%" y="693" width="0.0134%" height="15" fill="rgb(211,17,15)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (4 samples, 0.01%)</title><rect x="14.4780%" y="677" width="0.0134%" height="15" fill="rgb(209,59,46)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (4 samples, 0.01%)</title><rect x="14.4780%" y="661" width="0.0134%" height="15" fill="rgb(210,92,25)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (4 samples, 0.01%)</title><rect x="14.4780%" y="645" width="0.0134%" height="15" fill="rgb(238,174,52)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (4 samples, 0.01%)</title><rect x="14.4780%" y="629" width="0.0134%" height="15" fill="rgb(230,73,7)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.01%)</title><rect x="14.4780%" y="613" width="0.0134%" height="15" fill="rgb(243,124,40)" fg:x="4323" fg:w="4"/><text x="14.7280%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.01%)</title><rect x="14.4948%" y="805" width="0.0100%" height="15" fill="rgb(244,170,11)" fg:x="4328" fg:w="3"/><text x="14.7448%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (16 samples, 0.05%)</title><rect x="14.4546%" y="837" width="0.0536%" height="15" fill="rgb(207,114,54)" fg:x="4316" fg:w="16"/><text x="14.7046%" y="847.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (5 samples, 0.02%)</title><rect x="14.4914%" y="821" width="0.0167%" height="15" fill="rgb(205,42,20)" fg:x="4327" fg:w="5"/><text x="14.7414%" y="831.50"></text></g><g><title>calamine::xlsx::Xlsx&lt;RS&gt;::read_shared_strings (279 samples, 0.93%)</title><rect x="13.5771%" y="885" width="0.9344%" height="15" fill="rgb(230,30,28)" fg:x="4054" fg:w="279"/><text x="13.8271%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (18 samples, 0.06%)</title><rect x="14.4513%" y="869" width="0.0603%" height="15" fill="rgb(205,73,54)" fg:x="4315" fg:w="18"/><text x="14.7013%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (18 samples, 0.06%)</title><rect x="14.4513%" y="853" width="0.0603%" height="15" fill="rgb(254,227,23)" fg:x="4315" fg:w="18"/><text x="14.7013%" y="863.50"></text></g><g><title>calamine::auto::open_workbook_auto_from_rs (281 samples, 0.94%)</title><rect x="13.5738%" y="933" width="0.9411%" height="15" fill="rgb(228,202,34)" fg:x="4053" fg:w="281"/><text x="13.8238%" y="943.50"></text></g><g><title>calamine::open_workbook_from_rs (281 samples, 0.94%)</title><rect x="13.5738%" y="917" width="0.9411%" height="15" fill="rgb(222,225,37)" fg:x="4053" fg:w="281"/><text x="13.8238%" y="927.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::new (281 samples, 0.94%)</title><rect x="13.5738%" y="901" width="0.9411%" height="15" fill="rgb(221,14,54)" fg:x="4053" fg:w="281"/><text x="13.8238%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.01%)</title><rect x="14.5182%" y="693" width="0.0134%" height="15" fill="rgb(254,102,2)" fg:x="4335" fg:w="4"/><text x="14.7682%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.01%)</title><rect x="14.5182%" y="677" width="0.0134%" height="15" fill="rgb(232,104,17)" fg:x="4335" fg:w="4"/><text x="14.7682%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.01%)</title><rect x="14.5182%" y="661" width="0.0134%" height="15" fill="rgb(250,220,14)" fg:x="4335" fg:w="4"/><text x="14.7682%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="14.5182%" y="645" width="0.0134%" height="15" fill="rgb(241,158,9)" fg:x="4335" fg:w="4"/><text x="14.7682%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="14.5182%" y="629" width="0.0134%" height="15" fill="rgb(246,9,43)" fg:x="4335" fg:w="4"/><text x="14.7682%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.01%)</title><rect x="14.5216%" y="613" width="0.0100%" height="15" fill="rgb(206,73,33)" fg:x="4336" fg:w="3"/><text x="14.7716%" y="623.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.01%)</title><rect x="14.5216%" y="597" width="0.0100%" height="15" fill="rgb(222,79,8)" fg:x="4336" fg:w="3"/><text x="14.7716%" y="607.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (3 samples, 0.01%)</title><rect x="14.5216%" y="581" width="0.0100%" height="15" fill="rgb(234,8,54)" fg:x="4336" fg:w="3"/><text x="14.7716%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="14.5216%" y="565" width="0.0100%" height="15" fill="rgb(209,134,38)" fg:x="4336" fg:w="3"/><text x="14.7716%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.02%)</title><rect x="14.5149%" y="933" width="0.0201%" height="15" fill="rgb(230,127,29)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="14.5149%" y="917" width="0.0201%" height="15" fill="rgb(242,44,41)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="14.5149%" y="901" width="0.0201%" height="15" fill="rgb(222,56,43)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="14.5149%" y="885" width="0.0201%" height="15" fill="rgb(238,39,47)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.02%)</title><rect x="14.5149%" y="869" width="0.0201%" height="15" fill="rgb(226,79,43)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 0.02%)</title><rect x="14.5149%" y="853" width="0.0201%" height="15" fill="rgb(242,105,53)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="14.5149%" y="837" width="0.0201%" height="15" fill="rgb(251,132,46)" fg:x="4334" fg:w="6"/><text x="14.7649%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.02%)</title><rect x="14.5182%" y="821" width="0.0167%" height="15" fill="rgb(231,77,14)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.02%)</title><rect x="14.5182%" y="805" width="0.0167%" height="15" fill="rgb(240,135,9)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="815.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}}::{{closure}} (5 samples, 0.02%)</title><rect x="14.5182%" y="789" width="0.0167%" height="15" fill="rgb(248,109,14)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="799.50"></text></g><g><title>itertools::Itertools::collect_vec (5 samples, 0.02%)</title><rect x="14.5182%" y="773" width="0.0167%" height="15" fill="rgb(227,146,52)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.02%)</title><rect x="14.5182%" y="757" width="0.0167%" height="15" fill="rgb(232,54,3)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.02%)</title><rect x="14.5182%" y="741" width="0.0167%" height="15" fill="rgb(229,201,43)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.02%)</title><rect x="14.5182%" y="725" width="0.0167%" height="15" fill="rgb(252,161,33)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.02%)</title><rect x="14.5182%" y="709" width="0.0167%" height="15" fill="rgb(226,146,40)" fg:x="4335" fg:w="5"/><text x="14.7682%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::Range&lt;calamine::datatype::DataType&gt;&gt; (3 samples, 0.01%)</title><rect x="14.5417%" y="933" width="0.0100%" height="15" fill="rgb(219,47,25)" fg:x="4342" fg:w="3"/><text x="14.7917%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;calamine::datatype::DataType&gt;&gt; (3 samples, 0.01%)</title><rect x="14.5417%" y="917" width="0.0100%" height="15" fill="rgb(250,135,13)" fg:x="4342" fg:w="3"/><text x="14.7917%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="14.5718%" y="773" width="0.0134%" height="15" fill="rgb(219,229,18)" fg:x="4351" fg:w="4"/><text x="14.8218%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="14.5718%" y="837" width="0.0201%" height="15" fill="rgb(217,152,27)" fg:x="4351" fg:w="6"/><text x="14.8218%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.02%)</title><rect x="14.5718%" y="821" width="0.0201%" height="15" fill="rgb(225,71,47)" fg:x="4351" fg:w="6"/><text x="14.8218%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.02%)</title><rect x="14.5718%" y="805" width="0.0201%" height="15" fill="rgb(220,139,14)" fg:x="4351" fg:w="6"/><text x="14.8218%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.02%)</title><rect x="14.5718%" y="789" width="0.0201%" height="15" fill="rgb(247,54,32)" fg:x="4351" fg:w="6"/><text x="14.8218%" y="799.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (8 samples, 0.03%)</title><rect x="14.5718%" y="917" width="0.0268%" height="15" fill="rgb(252,131,39)" fg:x="4351" fg:w="8"/><text x="14.8218%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.03%)</title><rect x="14.5718%" y="901" width="0.0268%" height="15" fill="rgb(210,108,39)" fg:x="4351" fg:w="8"/><text x="14.8218%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.03%)</title><rect x="14.5718%" y="885" width="0.0268%" height="15" fill="rgb(205,23,29)" fg:x="4351" fg:w="8"/><text x="14.8218%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.03%)</title><rect x="14.5718%" y="869" width="0.0268%" height="15" fill="rgb(246,139,46)" fg:x="4351" fg:w="8"/><text x="14.8218%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.03%)</title><rect x="14.5718%" y="853" width="0.0268%" height="15" fill="rgb(250,81,26)" fg:x="4351" fg:w="8"/><text x="14.8218%" y="863.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (6 samples, 0.02%)</title><rect x="14.5986%" y="917" width="0.0201%" height="15" fill="rgb(214,104,7)" fg:x="4359" fg:w="6"/><text x="14.8486%" y="927.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (5 samples, 0.02%)</title><rect x="14.6020%" y="901" width="0.0167%" height="15" fill="rgb(233,189,8)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="14.6020%" y="885" width="0.0167%" height="15" fill="rgb(228,141,17)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="895.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.02%)</title><rect x="14.6020%" y="869" width="0.0167%" height="15" fill="rgb(247,157,1)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.02%)</title><rect x="14.6020%" y="853" width="0.0167%" height="15" fill="rgb(249,225,5)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.02%)</title><rect x="14.6020%" y="837" width="0.0167%" height="15" fill="rgb(242,55,13)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.02%)</title><rect x="14.6020%" y="821" width="0.0167%" height="15" fill="rgb(230,49,50)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="14.6020%" y="805" width="0.0167%" height="15" fill="rgb(241,111,38)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.02%)</title><rect x="14.6020%" y="789" width="0.0167%" height="15" fill="rgb(252,155,4)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="14.6020%" y="773" width="0.0167%" height="15" fill="rgb(212,69,32)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="14.6020%" y="757" width="0.0167%" height="15" fill="rgb(243,107,47)" fg:x="4360" fg:w="5"/><text x="14.8520%" y="767.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="14.6053%" y="741" width="0.0134%" height="15" fill="rgb(247,130,12)" fg:x="4361" fg:w="4"/><text x="14.8553%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="14.6187%" y="917" width="0.0201%" height="15" fill="rgb(233,74,16)" fg:x="4365" fg:w="6"/><text x="14.8687%" y="927.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.02%)</title><rect x="14.6187%" y="901" width="0.0201%" height="15" fill="rgb(208,58,18)" fg:x="4365" fg:w="6"/><text x="14.8687%" y="911.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="14.6187%" y="885" width="0.0201%" height="15" fill="rgb(242,225,1)" fg:x="4365" fg:w="6"/><text x="14.8687%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="14.6388%" y="917" width="0.0100%" height="15" fill="rgb(249,39,40)" fg:x="4371" fg:w="3"/><text x="14.8888%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="14.6622%" y="901" width="0.0100%" height="15" fill="rgb(207,72,44)" fg:x="4378" fg:w="3"/><text x="14.9122%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (7 samples, 0.02%)</title><rect x="14.6522%" y="917" width="0.0234%" height="15" fill="rgb(215,193,12)" fg:x="4375" fg:w="7"/><text x="14.9022%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="14.6756%" y="837" width="0.0134%" height="15" fill="rgb(248,41,39)" fg:x="4382" fg:w="4"/><text x="14.9256%" y="847.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="14.7024%" y="581" width="0.0100%" height="15" fill="rgb(253,85,4)" fg:x="4390" fg:w="3"/><text x="14.9524%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.01%)</title><rect x="14.7024%" y="613" width="0.0134%" height="15" fill="rgb(243,70,31)" fg:x="4390" fg:w="4"/><text x="14.9524%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.01%)</title><rect x="14.7024%" y="597" width="0.0134%" height="15" fill="rgb(253,195,26)" fg:x="4390" fg:w="4"/><text x="14.9524%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="14.6991%" y="629" width="0.0201%" height="15" fill="rgb(243,42,11)" fg:x="4389" fg:w="6"/><text x="14.9491%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.05%)</title><rect x="14.6924%" y="709" width="0.0469%" height="15" fill="rgb(239,66,17)" fg:x="4387" fg:w="14"/><text x="14.9424%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.05%)</title><rect x="14.6924%" y="693" width="0.0469%" height="15" fill="rgb(217,132,21)" fg:x="4387" fg:w="14"/><text x="14.9424%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.05%)</title><rect x="14.6924%" y="677" width="0.0469%" height="15" fill="rgb(252,202,21)" fg:x="4387" fg:w="14"/><text x="14.9424%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.05%)</title><rect x="14.6924%" y="661" width="0.0469%" height="15" fill="rgb(233,98,36)" fg:x="4387" fg:w="14"/><text x="14.9424%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.05%)</title><rect x="14.6924%" y="645" width="0.0469%" height="15" fill="rgb(216,153,54)" fg:x="4387" fg:w="14"/><text x="14.9424%" y="655.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="14.7259%" y="629" width="0.0134%" height="15" fill="rgb(250,99,7)" fg:x="4397" fg:w="4"/><text x="14.9759%" y="639.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="14.7259%" y="613" width="0.0134%" height="15" fill="rgb(207,56,50)" fg:x="4397" fg:w="4"/><text x="14.9759%" y="623.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.01%)</title><rect x="14.7259%" y="597" width="0.0134%" height="15" fill="rgb(244,61,34)" fg:x="4397" fg:w="4"/><text x="14.9759%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.01%)</title><rect x="14.7292%" y="581" width="0.0100%" height="15" fill="rgb(241,50,38)" fg:x="4398" fg:w="3"/><text x="14.9792%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.01%)</title><rect x="14.7292%" y="565" width="0.0100%" height="15" fill="rgb(212,166,30)" fg:x="4398" fg:w="3"/><text x="14.9792%" y="575.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (16 samples, 0.05%)</title><rect x="14.6890%" y="821" width="0.0536%" height="15" fill="rgb(249,127,32)" fg:x="4386" fg:w="16"/><text x="14.9390%" y="831.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (15 samples, 0.05%)</title><rect x="14.6924%" y="805" width="0.0502%" height="15" fill="rgb(209,103,0)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (15 samples, 0.05%)</title><rect x="14.6924%" y="789" width="0.0502%" height="15" fill="rgb(238,209,51)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (15 samples, 0.05%)</title><rect x="14.6924%" y="773" width="0.0502%" height="15" fill="rgb(237,56,23)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="783.50"></text></g><g><title>alloc::string::String::push_str (15 samples, 0.05%)</title><rect x="14.6924%" y="757" width="0.0502%" height="15" fill="rgb(215,153,46)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.05%)</title><rect x="14.6924%" y="741" width="0.0502%" height="15" fill="rgb(224,49,31)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.05%)</title><rect x="14.6924%" y="725" width="0.0502%" height="15" fill="rgb(250,18,42)" fg:x="4387" fg:w="15"/><text x="14.9424%" y="735.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.02%)</title><rect x="14.7527%" y="725" width="0.0234%" height="15" fill="rgb(215,176,39)" fg:x="4405" fg:w="7"/><text x="15.0027%" y="735.50"></text></g><g><title>__realloc (7 samples, 0.02%)</title><rect x="14.7527%" y="709" width="0.0234%" height="15" fill="rgb(223,77,29)" fg:x="4405" fg:w="7"/><text x="15.0027%" y="719.50"></text></g><g><title>_int_realloc (7 samples, 0.02%)</title><rect x="14.7527%" y="693" width="0.0234%" height="15" fill="rgb(234,94,52)" fg:x="4405" fg:w="7"/><text x="15.0027%" y="703.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="14.7527%" y="677" width="0.0234%" height="15" fill="rgb(220,154,50)" fg:x="4405" fg:w="7"/><text x="15.0027%" y="687.50"></text></g><g><title>sysmalloc (5 samples, 0.02%)</title><rect x="14.7594%" y="661" width="0.0167%" height="15" fill="rgb(212,11,10)" fg:x="4407" fg:w="5"/><text x="15.0094%" y="671.50"></text></g><g><title>__GI___mprotect (3 samples, 0.01%)</title><rect x="14.7661%" y="645" width="0.0100%" height="15" fill="rgb(205,166,19)" fg:x="4409" fg:w="3"/><text x="15.0161%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.03%)</title><rect x="14.7527%" y="757" width="0.0301%" height="15" fill="rgb(244,198,16)" fg:x="4405" fg:w="9"/><text x="15.0027%" y="767.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.03%)</title><rect x="14.7527%" y="741" width="0.0301%" height="15" fill="rgb(219,69,12)" fg:x="4405" fg:w="9"/><text x="15.0027%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.04%)</title><rect x="14.7460%" y="821" width="0.0402%" height="15" fill="rgb(245,30,7)" fg:x="4403" fg:w="12"/><text x="14.9960%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.04%)</title><rect x="14.7460%" y="805" width="0.0402%" height="15" fill="rgb(218,221,48)" fg:x="4403" fg:w="12"/><text x="14.9960%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.04%)</title><rect x="14.7460%" y="789" width="0.0402%" height="15" fill="rgb(216,66,15)" fg:x="4403" fg:w="12"/><text x="14.9960%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.04%)</title><rect x="14.7493%" y="773" width="0.0368%" height="15" fill="rgb(226,122,50)" fg:x="4404" fg:w="11"/><text x="14.9993%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.01%)</title><rect x="14.7929%" y="693" width="0.0134%" height="15" fill="rgb(239,156,16)" fg:x="4417" fg:w="4"/><text x="15.0429%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="14.7929%" y="741" width="0.0167%" height="15" fill="rgb(224,27,38)" fg:x="4417" fg:w="5"/><text x="15.0429%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="14.7929%" y="725" width="0.0167%" height="15" fill="rgb(224,39,27)" fg:x="4417" fg:w="5"/><text x="15.0429%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.02%)</title><rect x="14.7929%" y="709" width="0.0167%" height="15" fill="rgb(215,92,29)" fg:x="4417" fg:w="5"/><text x="15.0429%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="14.8163%" y="645" width="0.0100%" height="15" fill="rgb(207,159,16)" fg:x="4424" fg:w="3"/><text x="15.0663%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.04%)</title><rect x="14.7895%" y="773" width="0.0435%" height="15" fill="rgb(238,163,47)" fg:x="4416" fg:w="13"/><text x="15.0395%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.04%)</title><rect x="14.7929%" y="757" width="0.0402%" height="15" fill="rgb(219,91,49)" fg:x="4417" fg:w="12"/><text x="15.0429%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="14.8163%" y="741" width="0.0167%" height="15" fill="rgb(227,167,31)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="14.8163%" y="725" width="0.0167%" height="15" fill="rgb(234,80,54)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.02%)</title><rect x="14.8163%" y="709" width="0.0167%" height="15" fill="rgb(212,114,2)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.8163%" y="693" width="0.0167%" height="15" fill="rgb(234,50,24)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.8163%" y="677" width="0.0167%" height="15" fill="rgb(221,68,8)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.8163%" y="661" width="0.0167%" height="15" fill="rgb(254,180,31)" fg:x="4424" fg:w="5"/><text x="15.0663%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.01%)</title><rect x="14.8364%" y="725" width="0.0134%" height="15" fill="rgb(247,130,50)" fg:x="4430" fg:w="4"/><text x="15.0864%" y="735.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.01%)</title><rect x="14.8397%" y="709" width="0.0100%" height="15" fill="rgb(211,109,4)" fg:x="4431" fg:w="3"/><text x="15.0897%" y="719.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.01%)</title><rect x="14.8397%" y="693" width="0.0100%" height="15" fill="rgb(238,50,21)" fg:x="4431" fg:w="3"/><text x="15.0897%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.01%)</title><rect x="14.8397%" y="677" width="0.0100%" height="15" fill="rgb(225,57,45)" fg:x="4431" fg:w="3"/><text x="15.0897%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="14.8397%" y="661" width="0.0100%" height="15" fill="rgb(209,196,50)" fg:x="4431" fg:w="3"/><text x="15.0897%" y="671.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.01%)</title><rect x="14.8397%" y="645" width="0.0100%" height="15" fill="rgb(242,140,13)" fg:x="4431" fg:w="3"/><text x="15.0897%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (55 samples, 0.18%)</title><rect x="14.6756%" y="853" width="0.1842%" height="15" fill="rgb(217,111,7)" fg:x="4382" fg:w="55"/><text x="14.9256%" y="863.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}}::{{closure}}::{{closure}} (51 samples, 0.17%)</title><rect x="14.6890%" y="837" width="0.1708%" height="15" fill="rgb(253,193,51)" fg:x="4386" fg:w="51"/><text x="14.9390%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (22 samples, 0.07%)</title><rect x="14.7862%" y="821" width="0.0737%" height="15" fill="rgb(252,70,29)" fg:x="4415" fg:w="22"/><text x="15.0362%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (22 samples, 0.07%)</title><rect x="14.7862%" y="805" width="0.0737%" height="15" fill="rgb(232,127,12)" fg:x="4415" fg:w="22"/><text x="15.0362%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.07%)</title><rect x="14.7895%" y="789" width="0.0703%" height="15" fill="rgb(211,180,21)" fg:x="4416" fg:w="21"/><text x="15.0395%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.03%)</title><rect x="14.8330%" y="773" width="0.0268%" height="15" fill="rgb(229,72,13)" fg:x="4429" fg:w="8"/><text x="15.0830%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.03%)</title><rect x="14.8330%" y="757" width="0.0268%" height="15" fill="rgb(240,211,49)" fg:x="4429" fg:w="8"/><text x="15.0830%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 0.02%)</title><rect x="14.8364%" y="741" width="0.0234%" height="15" fill="rgb(219,149,40)" fg:x="4430" fg:w="7"/><text x="15.0864%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="14.8598%" y="789" width="0.0100%" height="15" fill="rgb(210,127,46)" fg:x="4437" fg:w="3"/><text x="15.1098%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.01%)</title><rect x="14.8598%" y="773" width="0.0100%" height="15" fill="rgb(220,106,7)" fg:x="4437" fg:w="3"/><text x="15.1098%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="14.8598%" y="757" width="0.0100%" height="15" fill="rgb(249,31,22)" fg:x="4437" fg:w="3"/><text x="15.1098%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="14.8598%" y="741" width="0.0100%" height="15" fill="rgb(253,1,49)" fg:x="4437" fg:w="3"/><text x="15.1098%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.02%)</title><rect x="14.8598%" y="853" width="0.0201%" height="15" fill="rgb(227,144,33)" fg:x="4437" fg:w="6"/><text x="15.1098%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (6 samples, 0.02%)</title><rect x="14.8598%" y="837" width="0.0201%" height="15" fill="rgb(249,163,44)" fg:x="4437" fg:w="6"/><text x="15.1098%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.02%)</title><rect x="14.8598%" y="821" width="0.0201%" height="15" fill="rgb(234,15,39)" fg:x="4437" fg:w="6"/><text x="15.1098%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 0.02%)</title><rect x="14.8598%" y="805" width="0.0201%" height="15" fill="rgb(207,66,16)" fg:x="4437" fg:w="6"/><text x="15.1098%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="14.8699%" y="789" width="0.0100%" height="15" fill="rgb(233,112,24)" fg:x="4440" fg:w="3"/><text x="15.1199%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="14.8699%" y="773" width="0.0100%" height="15" fill="rgb(230,90,22)" fg:x="4440" fg:w="3"/><text x="15.1199%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="14.8699%" y="757" width="0.0100%" height="15" fill="rgb(229,61,13)" fg:x="4440" fg:w="3"/><text x="15.1199%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="14.8699%" y="741" width="0.0100%" height="15" fill="rgb(225,57,24)" fg:x="4440" fg:w="3"/><text x="15.1199%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="14.9067%" y="517" width="0.0100%" height="15" fill="rgb(208,169,48)" fg:x="4451" fg:w="3"/><text x="15.1567%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.04%)</title><rect x="14.8866%" y="645" width="0.0368%" height="15" fill="rgb(244,218,51)" fg:x="4445" fg:w="11"/><text x="15.1366%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="14.8866%" y="629" width="0.0368%" height="15" fill="rgb(214,148,10)" fg:x="4445" fg:w="11"/><text x="15.1366%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.02%)</title><rect x="14.9000%" y="613" width="0.0234%" height="15" fill="rgb(225,174,27)" fg:x="4449" fg:w="7"/><text x="15.1500%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (6 samples, 0.02%)</title><rect x="14.9034%" y="597" width="0.0201%" height="15" fill="rgb(230,96,26)" fg:x="4450" fg:w="6"/><text x="15.1534%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.02%)</title><rect x="14.9067%" y="581" width="0.0167%" height="15" fill="rgb(232,10,30)" fg:x="4451" fg:w="5"/><text x="15.1567%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.9067%" y="565" width="0.0167%" height="15" fill="rgb(222,8,50)" fg:x="4451" fg:w="5"/><text x="15.1567%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.9067%" y="549" width="0.0167%" height="15" fill="rgb(213,81,27)" fg:x="4451" fg:w="5"/><text x="15.1567%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5 samples, 0.02%)</title><rect x="14.9067%" y="533" width="0.0167%" height="15" fill="rgb(245,50,10)" fg:x="4451" fg:w="5"/><text x="15.1567%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (3 samples, 0.01%)</title><rect x="14.9302%" y="613" width="0.0100%" height="15" fill="rgb(216,100,18)" fg:x="4458" fg:w="3"/><text x="15.1802%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.01%)</title><rect x="14.9469%" y="613" width="0.0134%" height="15" fill="rgb(236,147,54)" fg:x="4463" fg:w="4"/><text x="15.1969%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (12 samples, 0.04%)</title><rect x="14.9268%" y="645" width="0.0402%" height="15" fill="rgb(205,143,26)" fg:x="4457" fg:w="12"/><text x="15.1768%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (11 samples, 0.04%)</title><rect x="14.9302%" y="629" width="0.0368%" height="15" fill="rgb(236,26,9)" fg:x="4458" fg:w="11"/><text x="15.1802%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (27 samples, 0.09%)</title><rect x="14.8833%" y="693" width="0.0904%" height="15" fill="rgb(221,165,53)" fg:x="4444" fg:w="27"/><text x="15.1333%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (27 samples, 0.09%)</title><rect x="14.8833%" y="677" width="0.0904%" height="15" fill="rgb(214,110,17)" fg:x="4444" fg:w="27"/><text x="15.1333%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.09%)</title><rect x="14.8833%" y="661" width="0.0904%" height="15" fill="rgb(237,197,12)" fg:x="4444" fg:w="27"/><text x="15.1333%" y="671.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (3 samples, 0.01%)</title><rect x="14.9771%" y="677" width="0.0100%" height="15" fill="rgb(205,84,17)" fg:x="4472" fg:w="3"/><text x="15.2271%" y="687.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (3 samples, 0.01%)</title><rect x="14.9771%" y="661" width="0.0100%" height="15" fill="rgb(237,18,45)" fg:x="4472" fg:w="3"/><text x="15.2271%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="14.9771%" y="645" width="0.0100%" height="15" fill="rgb(221,87,14)" fg:x="4472" fg:w="3"/><text x="15.2271%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (32 samples, 0.11%)</title><rect x="14.8833%" y="789" width="0.1072%" height="15" fill="rgb(238,186,15)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.11%)</title><rect x="14.8833%" y="773" width="0.1072%" height="15" fill="rgb(208,115,11)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.11%)</title><rect x="14.8833%" y="757" width="0.1072%" height="15" fill="rgb(254,175,0)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.11%)</title><rect x="14.8833%" y="741" width="0.1072%" height="15" fill="rgb(227,24,42)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (32 samples, 0.11%)</title><rect x="14.8833%" y="725" width="0.1072%" height="15" fill="rgb(223,211,37)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 0.11%)</title><rect x="14.8833%" y="709" width="0.1072%" height="15" fill="rgb(235,49,27)" fg:x="4444" fg:w="32"/><text x="15.1333%" y="719.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5 samples, 0.02%)</title><rect x="14.9737%" y="693" width="0.0167%" height="15" fill="rgb(254,97,51)" fg:x="4471" fg:w="5"/><text x="15.2237%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.13%)</title><rect x="14.8799%" y="853" width="0.1340%" height="15" fill="rgb(249,51,40)" fg:x="4443" fg:w="40"/><text x="15.1299%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (40 samples, 0.13%)</title><rect x="14.8799%" y="837" width="0.1340%" height="15" fill="rgb(210,128,45)" fg:x="4443" fg:w="40"/><text x="15.1299%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (40 samples, 0.13%)</title><rect x="14.8799%" y="821" width="0.1340%" height="15" fill="rgb(224,137,50)" fg:x="4443" fg:w="40"/><text x="15.1299%" y="831.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (40 samples, 0.13%)</title><rect x="14.8799%" y="805" width="0.1340%" height="15" fill="rgb(242,15,9)" fg:x="4443" fg:w="40"/><text x="15.1299%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (7 samples, 0.02%)</title><rect x="14.9905%" y="789" width="0.0234%" height="15" fill="rgb(233,187,41)" fg:x="4476" fg:w="7"/><text x="15.2405%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.02%)</title><rect x="14.9905%" y="773" width="0.0234%" height="15" fill="rgb(227,2,29)" fg:x="4476" fg:w="7"/><text x="15.2405%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.02%)</title><rect x="14.9905%" y="757" width="0.0234%" height="15" fill="rgb(222,70,3)" fg:x="4476" fg:w="7"/><text x="15.2405%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (7 samples, 0.02%)</title><rect x="14.9905%" y="741" width="0.0234%" height="15" fill="rgb(213,11,42)" fg:x="4476" fg:w="7"/><text x="15.2405%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (7 samples, 0.02%)</title><rect x="14.9905%" y="725" width="0.0234%" height="15" fill="rgb(225,150,9)" fg:x="4476" fg:w="7"/><text x="15.2405%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (5 samples, 0.02%)</title><rect x="14.9972%" y="709" width="0.0167%" height="15" fill="rgb(230,162,45)" fg:x="4478" fg:w="5"/><text x="15.2472%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="15.0139%" y="837" width="0.0134%" height="15" fill="rgb(222,14,52)" fg:x="4483" fg:w="4"/><text x="15.2639%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (4 samples, 0.01%)</title><rect x="15.0139%" y="821" width="0.0134%" height="15" fill="rgb(254,198,14)" fg:x="4483" fg:w="4"/><text x="15.2639%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="15.0139%" y="805" width="0.0134%" height="15" fill="rgb(220,217,30)" fg:x="4483" fg:w="4"/><text x="15.2639%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="15.0139%" y="789" width="0.0134%" height="15" fill="rgb(215,146,41)" fg:x="4483" fg:w="4"/><text x="15.2639%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.01%)</title><rect x="15.0172%" y="773" width="0.0100%" height="15" fill="rgb(217,27,36)" fg:x="4484" fg:w="3"/><text x="15.2672%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="15.0172%" y="757" width="0.0100%" height="15" fill="rgb(219,218,39)" fg:x="4484" fg:w="3"/><text x="15.2672%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (5 samples, 0.02%)</title><rect x="15.0139%" y="853" width="0.0167%" height="15" fill="rgb(219,4,42)" fg:x="4483" fg:w="5"/><text x="15.2639%" y="863.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (109 samples, 0.37%)</title><rect x="14.6756%" y="917" width="0.3650%" height="15" fill="rgb(249,119,36)" fg:x="4382" fg:w="109"/><text x="14.9256%" y="927.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (109 samples, 0.37%)</title><rect x="14.6756%" y="901" width="0.3650%" height="15" fill="rgb(209,23,33)" fg:x="4382" fg:w="109"/><text x="14.9256%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (109 samples, 0.37%)</title><rect x="14.6756%" y="885" width="0.3650%" height="15" fill="rgb(211,10,0)" fg:x="4382" fg:w="109"/><text x="14.9256%" y="895.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}}::{{closure}} (109 samples, 0.37%)</title><rect x="14.6756%" y="869" width="0.3650%" height="15" fill="rgb(208,99,37)" fg:x="4382" fg:w="109"/><text x="14.9256%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,&amp;alloc::string::String&gt;&gt; (3 samples, 0.01%)</title><rect x="15.0306%" y="853" width="0.0100%" height="15" fill="rgb(213,132,31)" fg:x="4488" fg:w="3"/><text x="15.2806%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,&amp;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="15.0306%" y="837" width="0.0100%" height="15" fill="rgb(243,129,40)" fg:x="4488" fg:w="3"/><text x="15.2806%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,&amp;alloc::string::String)&gt;&gt; (3 samples, 0.01%)</title><rect x="15.0306%" y="821" width="0.0100%" height="15" fill="rgb(210,66,33)" fg:x="4488" fg:w="3"/><text x="15.2806%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="15.0306%" y="805" width="0.0100%" height="15" fill="rgb(209,189,4)" fg:x="4488" fg:w="3"/><text x="15.2806%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (3 samples, 0.01%)</title><rect x="15.0306%" y="789" width="0.0100%" height="15" fill="rgb(214,107,37)" fg:x="4488" fg:w="3"/><text x="15.2806%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.01%)</title><rect x="15.0407%" y="917" width="0.0100%" height="15" fill="rgb(245,88,54)" fg:x="4491" fg:w="3"/><text x="15.2907%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="15.0407%" y="901" width="0.0100%" height="15" fill="rgb(205,146,20)" fg:x="4491" fg:w="3"/><text x="15.2907%" y="911.50"></text></g><g><title>__realloc (3 samples, 0.01%)</title><rect x="15.0641%" y="725" width="0.0100%" height="15" fill="rgb(220,161,25)" fg:x="4498" fg:w="3"/><text x="15.3141%" y="735.50"></text></g><g><title>_int_realloc (3 samples, 0.01%)</title><rect x="15.0641%" y="709" width="0.0100%" height="15" fill="rgb(215,152,15)" fg:x="4498" fg:w="3"/><text x="15.3141%" y="719.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="15.0641%" y="693" width="0.0100%" height="15" fill="rgb(233,192,44)" fg:x="4498" fg:w="3"/><text x="15.3141%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.01%)</title><rect x="15.0641%" y="773" width="0.0134%" height="15" fill="rgb(240,170,46)" fg:x="4498" fg:w="4"/><text x="15.3141%" y="783.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.01%)</title><rect x="15.0641%" y="757" width="0.0134%" height="15" fill="rgb(207,104,33)" fg:x="4498" fg:w="4"/><text x="15.3141%" y="767.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.01%)</title><rect x="15.0641%" y="741" width="0.0134%" height="15" fill="rgb(219,21,39)" fg:x="4498" fg:w="4"/><text x="15.3141%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="15.0641%" y="789" width="0.0167%" height="15" fill="rgb(214,133,29)" fg:x="4498" fg:w="5"/><text x="15.3141%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.03%)</title><rect x="15.0574%" y="853" width="0.0301%" height="15" fill="rgb(226,93,6)" fg:x="4496" fg:w="9"/><text x="15.3074%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.03%)</title><rect x="15.0574%" y="837" width="0.0301%" height="15" fill="rgb(252,222,34)" fg:x="4496" fg:w="9"/><text x="15.3074%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.03%)</title><rect x="15.0574%" y="821" width="0.0301%" height="15" fill="rgb(252,92,48)" fg:x="4496" fg:w="9"/><text x="15.3074%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.03%)</title><rect x="15.0574%" y="805" width="0.0301%" height="15" fill="rgb(245,223,24)" fg:x="4496" fg:w="9"/><text x="15.3074%" y="815.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.01%)</title><rect x="15.1010%" y="741" width="0.0100%" height="15" fill="rgb(205,176,3)" fg:x="4509" fg:w="3"/><text x="15.3510%" y="751.50"></text></g><g><title>_int_malloc (3 samples, 0.01%)</title><rect x="15.1010%" y="725" width="0.0100%" height="15" fill="rgb(235,151,15)" fg:x="4509" fg:w="3"/><text x="15.3510%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (7 samples, 0.02%)</title><rect x="15.0909%" y="789" width="0.0234%" height="15" fill="rgb(237,209,11)" fg:x="4506" fg:w="7"/><text x="15.3409%" y="799.50"></text></g><g><title>core::ops::function::FnMut::call_mut (5 samples, 0.02%)</title><rect x="15.0976%" y="773" width="0.0167%" height="15" fill="rgb(243,227,24)" fg:x="4508" fg:w="5"/><text x="15.3476%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="15.0976%" y="757" width="0.0167%" height="15" fill="rgb(239,193,16)" fg:x="4508" fg:w="5"/><text x="15.3476%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.06%)</title><rect x="15.0574%" y="917" width="0.0603%" height="15" fill="rgb(231,27,9)" fg:x="4496" fg:w="18"/><text x="15.3074%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (18 samples, 0.06%)</title><rect x="15.0574%" y="901" width="0.0603%" height="15" fill="rgb(219,169,10)" fg:x="4496" fg:w="18"/><text x="15.3074%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.06%)</title><rect x="15.0574%" y="885" width="0.0603%" height="15" fill="rgb(244,229,43)" fg:x="4496" fg:w="18"/><text x="15.3074%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18 samples, 0.06%)</title><rect x="15.0574%" y="869" width="0.0603%" height="15" fill="rgb(254,38,20)" fg:x="4496" fg:w="18"/><text x="15.3074%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.03%)</title><rect x="15.0876%" y="853" width="0.0301%" height="15" fill="rgb(250,47,30)" fg:x="4505" fg:w="9"/><text x="15.3376%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.03%)</title><rect x="15.0876%" y="837" width="0.0301%" height="15" fill="rgb(224,124,36)" fg:x="4505" fg:w="9"/><text x="15.3376%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.03%)</title><rect x="15.0876%" y="821" width="0.0301%" height="15" fill="rgb(246,68,51)" fg:x="4505" fg:w="9"/><text x="15.3376%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.03%)</title><rect x="15.0876%" y="805" width="0.0301%" height="15" fill="rgb(253,43,49)" fg:x="4505" fg:w="9"/><text x="15.3376%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;excel_merge::File&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="917" width="0.0134%" height="15" fill="rgb(219,54,36)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="15.1278%" y="901" width="0.0134%" height="15" fill="rgb(227,133,34)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.01%)</title><rect x="15.1278%" y="885" width="0.0134%" height="15" fill="rgb(247,227,15)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;excel_merge::File&gt;&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="869" width="0.0134%" height="15" fill="rgb(229,96,14)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="15.1278%" y="853" width="0.0134%" height="15" fill="rgb(220,79,17)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[excel_merge::File]&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="837" width="0.0134%" height="15" fill="rgb(205,131,53)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;excel_merge::File&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="821" width="0.0134%" height="15" fill="rgb(209,50,29)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="805" width="0.0134%" height="15" fill="rgb(245,86,46)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="15.1278%" y="789" width="0.0134%" height="15" fill="rgb(235,66,46)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="773" width="0.0134%" height="15" fill="rgb(232,148,31)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (4 samples, 0.01%)</title><rect x="15.1278%" y="757" width="0.0134%" height="15" fill="rgb(217,149,8)" fg:x="4517" fg:w="4"/><text x="15.3778%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (46 samples, 0.15%)</title><rect x="16.7186%" y="757" width="0.1541%" height="15" fill="rgb(209,183,11)" fg:x="4992" fg:w="46"/><text x="16.9686%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.15%)</title><rect x="16.7253%" y="741" width="0.1474%" height="15" fill="rgb(208,55,20)" fg:x="4994" fg:w="44"/><text x="16.9753%" y="751.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (114 samples, 0.38%)</title><rect x="16.8726%" y="741" width="0.3818%" height="15" fill="rgb(218,39,14)" fg:x="5038" fg:w="114"/><text x="17.1226%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.81%)</title><rect x="16.4640%" y="773" width="0.8138%" height="15" fill="rgb(216,169,33)" fg:x="4916" fg:w="243"/><text x="16.7140%" y="783.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (121 samples, 0.41%)</title><rect x="16.8726%" y="757" width="0.4052%" height="15" fill="rgb(233,80,24)" fg:x="5038" fg:w="121"/><text x="17.1226%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (7 samples, 0.02%)</title><rect x="17.2544%" y="741" width="0.0234%" height="15" fill="rgb(213,179,31)" fg:x="5152" fg:w="7"/><text x="17.5044%" y="751.50"></text></g><g><title>__free (1,950 samples, 6.53%)</title><rect x="19.2103%" y="709" width="6.5307%" height="15" fill="rgb(209,19,5)" fg:x="5736" fg:w="1950"/><text x="19.4603%" y="719.50">__free</text></g><g><title>_int_free (1,508 samples, 5.05%)</title><rect x="20.6906%" y="693" width="5.0504%" height="15" fill="rgb(219,18,35)" fg:x="6178" fg:w="1508"/><text x="20.9406%" y="703.50">_int_f..</text></g><g><title>__rdl_dealloc (33 samples, 0.11%)</title><rect x="25.7410%" y="709" width="0.1105%" height="15" fill="rgb(209,169,16)" fg:x="7686" fg:w="33"/><text x="25.9910%" y="719.50"></text></g><g><title>__rust_dealloc (30 samples, 0.10%)</title><rect x="25.8515%" y="709" width="0.1005%" height="15" fill="rgb(245,90,51)" fg:x="7719" fg:w="30"/><text x="26.1015%" y="719.50"></text></g><g><title>core::alloc::layout::Layout::align (67 samples, 0.22%)</title><rect x="25.9520%" y="709" width="0.2244%" height="15" fill="rgb(220,99,45)" fg:x="7749" fg:w="67"/><text x="26.2020%" y="719.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (55 samples, 0.18%)</title><rect x="25.9922%" y="693" width="0.1842%" height="15" fill="rgb(249,89,25)" fg:x="7761" fg:w="55"/><text x="26.2422%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (2,120 samples, 7.10%)</title><rect x="19.1132%" y="725" width="7.1000%" height="15" fill="rgb(239,193,0)" fg:x="5707" fg:w="2120"/><text x="19.3632%" y="735.50">alloc::all..</text></g><g><title>core::alloc::layout::Layout::size (11 samples, 0.04%)</title><rect x="26.1764%" y="709" width="0.0368%" height="15" fill="rgb(231,126,1)" fg:x="7816" fg:w="11"/><text x="26.4264%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,350 samples, 7.87%)</title><rect x="18.4065%" y="741" width="7.8703%" height="15" fill="rgb(243,166,3)" fg:x="5496" fg:w="2350"/><text x="18.6565%" y="751.50">&lt;alloc::all..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (19 samples, 0.06%)</title><rect x="26.2132%" y="725" width="0.0636%" height="15" fill="rgb(223,22,34)" fg:x="7827" fg:w="19"/><text x="26.4632%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (32 samples, 0.11%)</title><rect x="29.4953%" y="693" width="0.1072%" height="15" fill="rgb(251,52,51)" fg:x="8807" fg:w="32"/><text x="29.7453%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (210 samples, 0.70%)</title><rect x="29.4953%" y="725" width="0.7033%" height="15" fill="rgb(221,165,28)" fg:x="8807" fg:w="210"/><text x="29.7453%" y="735.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (210 samples, 0.70%)</title><rect x="29.4953%" y="709" width="0.7033%" height="15" fill="rgb(218,121,47)" fg:x="8807" fg:w="210"/><text x="29.7453%" y="719.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (178 samples, 0.60%)</title><rect x="29.6025%" y="693" width="0.5961%" height="15" fill="rgb(209,120,9)" fg:x="8839" fg:w="178"/><text x="29.8525%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (34 samples, 0.11%)</title><rect x="30.0847%" y="677" width="0.1139%" height="15" fill="rgb(236,68,12)" fg:x="8983" fg:w="34"/><text x="30.3347%" y="687.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.01%)</title><rect x="30.1986%" y="725" width="0.0134%" height="15" fill="rgb(225,194,26)" fg:x="9017" fg:w="4"/><text x="30.4486%" y="735.50"></text></g><g><title>core::mem::size_of (35 samples, 0.12%)</title><rect x="30.2187%" y="725" width="0.1172%" height="15" fill="rgb(231,84,39)" fg:x="9023" fg:w="35"/><text x="30.4687%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (34 samples, 0.11%)</title><rect x="30.3359%" y="725" width="0.1139%" height="15" fill="rgb(210,11,45)" fg:x="9058" fg:w="34"/><text x="30.5859%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (70 samples, 0.23%)</title><rect x="30.4665%" y="709" width="0.2344%" height="15" fill="rgb(224,54,52)" fg:x="9097" fg:w="70"/><text x="30.7165%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (18 samples, 0.06%)</title><rect x="30.7010%" y="709" width="0.0603%" height="15" fill="rgb(238,102,14)" fg:x="9167" fg:w="18"/><text x="30.9510%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (11 samples, 0.04%)</title><rect x="30.7244%" y="693" width="0.0368%" height="15" fill="rgb(243,160,52)" fg:x="9174" fg:w="11"/><text x="30.9744%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,848 samples, 16.24%)</title><rect x="15.1479%" y="853" width="16.2363%" height="15" fill="rgb(216,114,19)" fg:x="4523" fg:w="4848"/><text x="15.3979%" y="863.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)]&gt; (4,847 samples, 16.23%)</title><rect x="15.1512%" y="837" width="16.2330%" height="15" fill="rgb(244,166,37)" fg:x="4524" fg:w="4847"/><text x="15.4012%" y="847.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt; (4,819 samples, 16.14%)</title><rect x="15.2450%" y="821" width="16.1392%" height="15" fill="rgb(246,29,44)" fg:x="4552" fg:w="4819"/><text x="15.4950%" y="831.50">core::ptr::drop_in_place&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,716 samples, 15.79%)</title><rect x="15.5899%" y="805" width="15.7942%" height="15" fill="rgb(215,56,53)" fg:x="4655" fg:w="4716"/><text x="15.8399%" y="815.50">core::ptr::drop_in_place..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,649 samples, 15.57%)</title><rect x="15.8143%" y="789" width="15.5698%" height="15" fill="rgb(217,60,2)" fg:x="4722" fg:w="4649"/><text x="16.0643%" y="799.50">core::ptr::drop_in_place..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,212 samples, 14.11%)</title><rect x="17.2779%" y="773" width="14.1063%" height="15" fill="rgb(207,26,24)" fg:x="5159" fg:w="4212"/><text x="17.5279%" y="783.50">core::ptr::drop_in_pl..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,151 samples, 13.90%)</title><rect x="17.4822%" y="757" width="13.9020%" height="15" fill="rgb(252,210,15)" fg:x="5220" fg:w="4151"/><text x="17.7322%" y="767.50">&lt;alloc::raw_vec::RawV..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,525 samples, 5.11%)</title><rect x="26.2768%" y="741" width="5.1073%" height="15" fill="rgb(253,209,26)" fg:x="7846" fg:w="1525"/><text x="26.5268%" y="751.50">alloc:..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (279 samples, 0.93%)</title><rect x="30.4498%" y="725" width="0.9344%" height="15" fill="rgb(238,170,14)" fg:x="9092" fg:w="279"/><text x="30.6998%" y="735.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (186 samples, 0.62%)</title><rect x="30.7612%" y="709" width="0.6229%" height="15" fill="rgb(216,178,15)" fg:x="9185" fg:w="186"/><text x="31.0112%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (25 samples, 0.08%)</title><rect x="31.3004%" y="693" width="0.0837%" height="15" fill="rgb(250,197,2)" fg:x="9346" fg:w="25"/><text x="31.5504%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt;&gt; (5,937 samples, 19.88%)</title><rect x="15.1479%" y="917" width="19.8835%" height="15" fill="rgb(212,70,42)" fg:x="4523" fg:w="5937"/><text x="15.3979%" y="927.50">core::ptr::drop_in_place&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,937 samples, 19.88%)</title><rect x="15.1479%" y="901" width="19.8835%" height="15" fill="rgb(227,213,9)" fg:x="4523" fg:w="5937"/><text x="15.3979%" y="911.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;]&gt; (5,937 samples, 19.88%)</title><rect x="15.1479%" y="885" width="19.8835%" height="15" fill="rgb(245,99,25)" fg:x="4523" fg:w="5937"/><text x="15.3979%" y="895.50">core::ptr::drop_in_place&lt;[alloc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt; (5,937 samples, 19.88%)</title><rect x="15.1479%" y="869" width="19.8835%" height="15" fill="rgb(250,82,29)" fg:x="4523" fg:w="5937"/><text x="15.3979%" y="879.50">core::ptr::drop_in_place&lt;alloc:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt; (1,089 samples, 3.65%)</title><rect x="31.3842%" y="853" width="3.6471%" height="15" fill="rgb(241,226,54)" fg:x="9371" fg:w="1089"/><text x="31.6342%" y="863.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,089 samples, 3.65%)</title><rect x="31.3842%" y="837" width="3.6471%" height="15" fill="rgb(221,99,41)" fg:x="9371" fg:w="1089"/><text x="31.6342%" y="847.50">&lt;all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,089 samples, 3.65%)</title><rect x="31.3842%" y="821" width="3.6471%" height="15" fill="rgb(213,90,21)" fg:x="9371" fg:w="1089"/><text x="31.6342%" y="831.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (1,089 samples, 3.65%)</title><rect x="31.3842%" y="805" width="3.6471%" height="15" fill="rgb(205,208,24)" fg:x="9371" fg:w="1089"/><text x="31.6342%" y="815.50">allo..</text></g><g><title>__free (1,089 samples, 3.65%)</title><rect x="31.3842%" y="789" width="3.6471%" height="15" fill="rgb(246,31,12)" fg:x="9371" fg:w="1089"/><text x="31.6342%" y="799.50">__fr..</text></g><g><title>_int_free (1,087 samples, 3.64%)</title><rect x="31.3909%" y="773" width="3.6404%" height="15" fill="rgb(213,154,6)" fg:x="9373" fg:w="1087"/><text x="31.6409%" y="783.50">_int..</text></g><g><title>malloc_consolidate (1,086 samples, 3.64%)</title><rect x="31.3942%" y="757" width="3.6371%" height="15" fill="rgb(222,163,29)" fg:x="9374" fg:w="1086"/><text x="31.6442%" y="767.50">mall..</text></g><g><title>unlink_chunk.constprop.0 (251 samples, 0.84%)</title><rect x="34.1907%" y="741" width="0.8406%" height="15" fill="rgb(227,201,8)" fg:x="10209" fg:w="251"/><text x="34.4407%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="917" width="0.0234%" height="15" fill="rgb(233,9,32)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="35.0313%" y="901" width="0.0234%" height="15" fill="rgb(217,54,24)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="885" width="0.0234%" height="15" fill="rgb(235,192,0)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="869" width="0.0234%" height="15" fill="rgb(235,45,9)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="35.0313%" y="853" width="0.0234%" height="15" fill="rgb(246,42,40)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="837" width="0.0234%" height="15" fill="rgb(248,111,24)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="821" width="0.0234%" height="15" fill="rgb(249,65,22)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0313%" y="805" width="0.0234%" height="15" fill="rgb(238,111,51)" fg:x="10460" fg:w="7"/><text x="35.2813%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.02%)</title><rect x="35.0347%" y="789" width="0.0201%" height="15" fill="rgb(250,118,22)" fg:x="10461" fg:w="6"/><text x="35.2847%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="35.0347%" y="773" width="0.0201%" height="15" fill="rgb(234,84,26)" fg:x="10461" fg:w="6"/><text x="35.2847%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="35.0447%" y="757" width="0.0100%" height="15" fill="rgb(243,172,12)" fg:x="10464" fg:w="3"/><text x="35.2947%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="35.0548%" y="789" width="0.0134%" height="15" fill="rgb(236,150,49)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (4 samples, 0.01%)</title><rect x="35.0548%" y="773" width="0.0134%" height="15" fill="rgb(225,197,26)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="35.0548%" y="757" width="0.0134%" height="15" fill="rgb(214,17,42)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="35.0548%" y="741" width="0.0134%" height="15" fill="rgb(224,165,40)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="35.0548%" y="725" width="0.0134%" height="15" fill="rgb(246,100,4)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="35.0548%" y="709" width="0.0134%" height="15" fill="rgb(222,103,0)" fg:x="10467" fg:w="4"/><text x="35.3048%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;excel_merge::File&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="917" width="0.0234%" height="15" fill="rgb(227,189,26)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="35.0548%" y="901" width="0.0234%" height="15" fill="rgb(214,202,17)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[excel_merge::File]&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="885" width="0.0234%" height="15" fill="rgb(229,111,3)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;excel_merge::File&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="869" width="0.0234%" height="15" fill="rgb(229,172,15)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="853" width="0.0234%" height="15" fill="rgb(230,224,35)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="35.0548%" y="837" width="0.0234%" height="15" fill="rgb(251,141,6)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="821" width="0.0234%" height="15" fill="rgb(225,208,6)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (7 samples, 0.02%)</title><rect x="35.0548%" y="805" width="0.0234%" height="15" fill="rgb(246,181,16)" fg:x="10467" fg:w="7"/><text x="35.3048%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (3 samples, 0.01%)</title><rect x="35.0682%" y="789" width="0.0100%" height="15" fill="rgb(227,129,36)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="35.0682%" y="773" width="0.0100%" height="15" fill="rgb(248,117,24)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="35.0682%" y="757" width="0.0100%" height="15" fill="rgb(214,185,35)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="35.0682%" y="741" width="0.0100%" height="15" fill="rgb(236,150,34)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="751.50"></text></g><g><title>__free (3 samples, 0.01%)</title><rect x="35.0682%" y="725" width="0.0100%" height="15" fill="rgb(243,228,27)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="735.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="35.0682%" y="709" width="0.0100%" height="15" fill="rgb(245,77,44)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="719.50"></text></g><g><title>malloc_consolidate (3 samples, 0.01%)</title><rect x="35.0682%" y="693" width="0.0100%" height="15" fill="rgb(235,214,42)" fg:x="10471" fg:w="3"/><text x="35.3182%" y="703.50"></text></g><g><title>alloc::string::String::new (250 samples, 0.84%)</title><rect x="41.0463%" y="581" width="0.8373%" height="15" fill="rgb(221,74,3)" fg:x="12256" fg:w="250"/><text x="41.2963%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (40 samples, 0.13%)</title><rect x="41.7496%" y="565" width="0.1340%" height="15" fill="rgb(206,121,29)" fg:x="12466" fg:w="40"/><text x="41.9996%" y="575.50"></text></g><g><title>core::fmt::Formatter::new (37 samples, 0.12%)</title><rect x="41.8835%" y="581" width="0.1239%" height="15" fill="rgb(249,131,53)" fg:x="12506" fg:w="37"/><text x="42.1335%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (14 samples, 0.05%)</title><rect x="43.7121%" y="485" width="0.0469%" height="15" fill="rgb(236,170,29)" fg:x="13052" fg:w="14"/><text x="43.9621%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13 samples, 0.04%)</title><rect x="43.7155%" y="469" width="0.0435%" height="15" fill="rgb(247,96,15)" fg:x="13053" fg:w="13"/><text x="43.9655%" y="479.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (7 samples, 0.02%)</title><rect x="43.7356%" y="453" width="0.0234%" height="15" fill="rgb(211,210,7)" fg:x="13059" fg:w="7"/><text x="43.9856%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (5 samples, 0.02%)</title><rect x="43.7423%" y="437" width="0.0167%" height="15" fill="rgb(240,88,50)" fg:x="13061" fg:w="5"/><text x="43.9923%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22 samples, 0.07%)</title><rect x="43.7590%" y="485" width="0.0737%" height="15" fill="rgb(209,229,26)" fg:x="13066" fg:w="22"/><text x="44.0090%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (44 samples, 0.15%)</title><rect x="44.0805%" y="437" width="0.1474%" height="15" fill="rgb(210,68,23)" fg:x="13162" fg:w="44"/><text x="44.3305%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (76 samples, 0.25%)</title><rect x="44.0638%" y="453" width="0.2545%" height="15" fill="rgb(229,180,13)" fg:x="13157" fg:w="76"/><text x="44.3138%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (27 samples, 0.09%)</title><rect x="44.2279%" y="437" width="0.0904%" height="15" fill="rgb(236,53,44)" fg:x="13206" fg:w="27"/><text x="44.4779%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (70 samples, 0.23%)</title><rect x="44.9982%" y="421" width="0.2344%" height="15" fill="rgb(244,214,29)" fg:x="13436" fg:w="70"/><text x="45.2482%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (154 samples, 0.52%)</title><rect x="45.2326%" y="421" width="0.5158%" height="15" fill="rgb(220,75,29)" fg:x="13506" fg:w="154"/><text x="45.4826%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (40 samples, 0.13%)</title><rect x="45.8924%" y="405" width="0.1340%" height="15" fill="rgb(214,183,37)" fg:x="13703" fg:w="40"/><text x="46.1424%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (4 samples, 0.01%)</title><rect x="46.0263%" y="405" width="0.0134%" height="15" fill="rgb(239,117,29)" fg:x="13743" fg:w="4"/><text x="46.2763%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (122 samples, 0.41%)</title><rect x="45.7484%" y="421" width="0.4086%" height="15" fill="rgb(237,171,35)" fg:x="13660" fg:w="122"/><text x="45.9984%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (35 samples, 0.12%)</title><rect x="46.0397%" y="405" width="0.1172%" height="15" fill="rgb(229,178,53)" fg:x="13747" fg:w="35"/><text x="46.2897%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (5 samples, 0.02%)</title><rect x="46.1402%" y="389" width="0.0167%" height="15" fill="rgb(210,102,19)" fg:x="13777" fg:w="5"/><text x="46.3902%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 0.18%)</title><rect x="47.2789%" y="373" width="0.1808%" height="15" fill="rgb(235,127,22)" fg:x="14117" fg:w="54"/><text x="47.5289%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (20 samples, 0.07%)</title><rect x="47.4597%" y="373" width="0.0670%" height="15" fill="rgb(244,31,31)" fg:x="14171" fg:w="20"/><text x="47.7097%" y="383.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (20 samples, 0.07%)</title><rect x="47.4597%" y="357" width="0.0670%" height="15" fill="rgb(231,43,21)" fg:x="14171" fg:w="20"/><text x="47.7097%" y="367.50"></text></g><g><title>alloc_perturb (18 samples, 0.06%)</title><rect x="50.1423%" y="325" width="0.0603%" height="15" fill="rgb(217,131,35)" fg:x="14972" fg:w="18"/><text x="50.3923%" y="335.50"></text></g><g><title>__GI___libc_malloc (791 samples, 2.65%)</title><rect x="47.6004%" y="357" width="2.6491%" height="15" fill="rgb(221,149,4)" fg:x="14213" fg:w="791"/><text x="47.8504%" y="367.50">__..</text></g><g><title>_int_malloc (411 samples, 1.38%)</title><rect x="48.8730%" y="341" width="1.3765%" height="15" fill="rgb(232,170,28)" fg:x="14593" fg:w="411"/><text x="49.1230%" y="351.50"></text></g><g><title>unlink_chunk.constprop.0 (14 samples, 0.05%)</title><rect x="50.2026%" y="325" width="0.0469%" height="15" fill="rgb(238,56,10)" fg:x="14990" fg:w="14"/><text x="50.4526%" y="335.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="50.2495%" y="357" width="0.0569%" height="15" fill="rgb(235,196,14)" fg:x="15004" fg:w="17"/><text x="50.4995%" y="367.50"></text></g><g><title>__rust_alloc (7 samples, 0.02%)</title><rect x="50.3064%" y="357" width="0.0234%" height="15" fill="rgb(216,45,48)" fg:x="15021" fg:w="7"/><text x="50.5564%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::align (37 samples, 0.12%)</title><rect x="50.3299%" y="357" width="0.1239%" height="15" fill="rgb(238,213,17)" fg:x="15028" fg:w="37"/><text x="50.5799%" y="367.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (29 samples, 0.10%)</title><rect x="50.3567%" y="341" width="0.0971%" height="15" fill="rgb(212,13,2)" fg:x="15036" fg:w="29"/><text x="50.6067%" y="351.50"></text></g><g><title>alloc::alloc::alloc (887 samples, 2.97%)</title><rect x="47.5267%" y="373" width="2.9706%" height="15" fill="rgb(240,114,20)" fg:x="14191" fg:w="887"/><text x="47.7767%" y="383.50">all..</text></g><g><title>core::ptr::read_volatile (12 samples, 0.04%)</title><rect x="50.4571%" y="357" width="0.0402%" height="15" fill="rgb(228,41,40)" fg:x="15066" fg:w="12"/><text x="50.7071%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::size (17 samples, 0.06%)</title><rect x="50.5007%" y="373" width="0.0569%" height="15" fill="rgb(244,132,35)" fg:x="15079" fg:w="17"/><text x="50.7507%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (52 samples, 0.17%)</title><rect x="50.5576%" y="373" width="0.1742%" height="15" fill="rgb(253,189,4)" fg:x="15096" fg:w="52"/><text x="50.8076%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (34 samples, 0.11%)</title><rect x="50.7318%" y="373" width="0.1139%" height="15" fill="rgb(224,37,19)" fg:x="15148" fg:w="34"/><text x="50.9818%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (11 samples, 0.04%)</title><rect x="50.8088%" y="357" width="0.0368%" height="15" fill="rgb(235,223,18)" fg:x="15171" fg:w="11"/><text x="51.0588%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (4 samples, 0.01%)</title><rect x="50.8322%" y="341" width="0.0134%" height="15" fill="rgb(235,163,25)" fg:x="15178" fg:w="4"/><text x="51.0822%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.01%)</title><rect x="50.8624%" y="357" width="0.0134%" height="15" fill="rgb(217,145,28)" fg:x="15187" fg:w="4"/><text x="51.1124%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (10 samples, 0.03%)</title><rect x="50.8758%" y="357" width="0.0335%" height="15" fill="rgb(223,223,32)" fg:x="15191" fg:w="10"/><text x="51.1258%" y="367.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (67 samples, 0.22%)</title><rect x="50.9126%" y="341" width="0.2244%" height="15" fill="rgb(227,189,39)" fg:x="15202" fg:w="67"/><text x="51.1626%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,340 samples, 4.49%)</title><rect x="46.6559%" y="405" width="4.4878%" height="15" fill="rgb(248,10,22)" fg:x="13931" fg:w="1340"/><text x="46.9059%" y="415.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,316 samples, 4.41%)</title><rect x="46.7363%" y="389" width="4.4074%" height="15" fill="rgb(248,46,39)" fg:x="13955" fg:w="1316"/><text x="46.9863%" y="399.50">alloc..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (89 samples, 0.30%)</title><rect x="50.8456%" y="373" width="0.2981%" height="15" fill="rgb(248,113,48)" fg:x="15182" fg:w="89"/><text x="51.0956%" y="383.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (70 samples, 0.23%)</title><rect x="50.9093%" y="357" width="0.2344%" height="15" fill="rgb(245,16,25)" fg:x="15201" fg:w="70"/><text x="51.1593%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (77 samples, 0.26%)</title><rect x="51.1437%" y="405" width="0.2579%" height="15" fill="rgb(249,152,16)" fg:x="15271" fg:w="77"/><text x="51.3937%" y="415.50"></text></g><g><title>alloc::raw_vec::alloc_guard (3 samples, 0.01%)</title><rect x="51.4016%" y="405" width="0.0100%" height="15" fill="rgb(250,16,1)" fg:x="15348" fg:w="3"/><text x="51.6516%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,772 samples, 5.93%)</title><rect x="46.1569%" y="421" width="5.9346%" height="15" fill="rgb(249,138,3)" fg:x="13782" fg:w="1772"/><text x="46.4069%" y="431.50">alloc::r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (203 samples, 0.68%)</title><rect x="51.4116%" y="405" width="0.6799%" height="15" fill="rgb(227,71,41)" fg:x="15351" fg:w="203"/><text x="51.6616%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (44 samples, 0.15%)</title><rect x="53.4311%" y="389" width="0.1474%" height="15" fill="rgb(209,184,23)" fg:x="15954" fg:w="44"/><text x="53.6811%" y="399.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (19 samples, 0.06%)</title><rect x="53.5149%" y="373" width="0.0636%" height="15" fill="rgb(223,215,31)" fg:x="15979" fg:w="19"/><text x="53.7649%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (440 samples, 1.47%)</title><rect x="52.1183%" y="405" width="1.4736%" height="15" fill="rgb(210,146,28)" fg:x="15562" fg:w="440"/><text x="52.3683%" y="415.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (4 samples, 0.01%)</title><rect x="53.5785%" y="389" width="0.0134%" height="15" fill="rgb(209,183,41)" fg:x="15998" fg:w="4"/><text x="53.8285%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (456 samples, 1.53%)</title><rect x="52.0915%" y="421" width="1.5272%" height="15" fill="rgb(209,224,45)" fg:x="15554" fg:w="456"/><text x="52.3415%" y="431.50"></text></g><g><title>core::ptr::alignment::Alignment::of (8 samples, 0.03%)</title><rect x="53.5919%" y="405" width="0.0268%" height="15" fill="rgb(224,209,51)" fg:x="16002" fg:w="8"/><text x="53.8419%" y="415.50"></text></g><g><title>core::mem::align_of (8 samples, 0.03%)</title><rect x="53.5919%" y="389" width="0.0268%" height="15" fill="rgb(223,17,39)" fg:x="16002" fg:w="8"/><text x="53.8419%" y="399.50"></text></g><g><title>core::cmp::max (732 samples, 2.45%)</title><rect x="53.6187%" y="421" width="2.4515%" height="15" fill="rgb(234,204,37)" fg:x="16010" fg:w="732"/><text x="53.8687%" y="431.50">co..</text></g><g><title>core::cmp::Ord::max (731 samples, 2.45%)</title><rect x="53.6220%" y="405" width="2.4482%" height="15" fill="rgb(236,120,5)" fg:x="16011" fg:w="731"/><text x="53.8720%" y="415.50">co..</text></g><g><title>core::cmp::max_by (624 samples, 2.09%)</title><rect x="53.9804%" y="389" width="2.0898%" height="15" fill="rgb(248,97,27)" fg:x="16118" fg:w="624"/><text x="54.2304%" y="399.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (248 samples, 0.83%)</title><rect x="55.2396%" y="373" width="0.8306%" height="15" fill="rgb(240,66,17)" fg:x="16494" fg:w="248"/><text x="55.4896%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (171 samples, 0.57%)</title><rect x="55.4975%" y="357" width="0.5727%" height="15" fill="rgb(210,79,3)" fg:x="16571" fg:w="171"/><text x="55.7475%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (112 samples, 0.38%)</title><rect x="56.0702%" y="421" width="0.3751%" height="15" fill="rgb(214,176,27)" fg:x="16742" fg:w="112"/><text x="56.3202%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.07%)</title><rect x="56.3750%" y="405" width="0.0703%" height="15" fill="rgb(235,185,3)" fg:x="16833" fg:w="21"/><text x="56.6250%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3,613 samples, 12.10%)</title><rect x="44.4087%" y="437" width="12.1002%" height="15" fill="rgb(227,24,12)" fg:x="13260" fg:w="3613"/><text x="44.6587%" y="447.50">alloc::raw_vec::Ra..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (19 samples, 0.06%)</title><rect x="56.4453%" y="421" width="0.0636%" height="15" fill="rgb(252,169,48)" fg:x="16854" fg:w="19"/><text x="56.6953%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,909 samples, 13.09%)</title><rect x="43.8327%" y="485" width="13.0915%" height="15" fill="rgb(212,65,1)" fg:x="13088" fg:w="3909"/><text x="44.0827%" y="495.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,854 samples, 12.91%)</title><rect x="44.0169%" y="469" width="12.9073%" height="15" fill="rgb(242,39,24)" fg:x="13143" fg:w="3854"/><text x="44.2669%" y="479.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,764 samples, 12.61%)</title><rect x="44.3183%" y="453" width="12.6059%" height="15" fill="rgb(249,32,23)" fg:x="13233" fg:w="3764"/><text x="44.5683%" y="463.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::handle_reserve (124 samples, 0.42%)</title><rect x="56.5089%" y="437" width="0.4153%" height="15" fill="rgb(251,195,23)" fg:x="16873" fg:w="124"/><text x="56.7589%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (59 samples, 0.20%)</title><rect x="56.7266%" y="421" width="0.1976%" height="15" fill="rgb(236,174,8)" fg:x="16938" fg:w="59"/><text x="56.9766%" y="431.50"></text></g><g><title>[main] (18 samples, 0.06%)</title><rect x="56.9778%" y="469" width="0.0603%" height="15" fill="rgb(220,197,8)" fg:x="17013" fg:w="18"/><text x="57.2278%" y="479.50"></text></g><g><title>__memcpy_sse2_unaligned (36 samples, 0.12%)</title><rect x="57.0381%" y="469" width="0.1206%" height="15" fill="rgb(240,108,37)" fg:x="17031" fg:w="36"/><text x="57.2881%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (118 samples, 0.40%)</title><rect x="56.9242%" y="485" width="0.3952%" height="15" fill="rgb(232,176,24)" fg:x="16997" fg:w="118"/><text x="57.1742%" y="495.50"></text></g><g><title>__memmove_sse2_unaligned_erms (48 samples, 0.16%)</title><rect x="57.1586%" y="469" width="0.1608%" height="15" fill="rgb(243,35,29)" fg:x="17067" fg:w="48"/><text x="57.4086%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,132 samples, 13.84%)</title><rect x="43.5045%" y="501" width="13.8384%" height="15" fill="rgb(210,37,18)" fg:x="12990" fg:w="4132"/><text x="43.7545%" y="511.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.02%)</title><rect x="57.3194%" y="485" width="0.0234%" height="15" fill="rgb(224,184,40)" fg:x="17115" fg:w="7"/><text x="57.5694%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (48 samples, 0.16%)</title><rect x="57.5471%" y="469" width="0.1608%" height="15" fill="rgb(236,39,29)" fg:x="17183" fg:w="48"/><text x="57.7971%" y="479.50"></text></g><g><title>core::mem::size_of (12 samples, 0.04%)</title><rect x="57.6677%" y="453" width="0.0402%" height="15" fill="rgb(232,48,39)" fg:x="17219" fg:w="12"/><text x="57.9177%" y="463.50"></text></g><g><title>core::ptr::slice_from_raw_parts (69 samples, 0.23%)</title><rect x="57.7079%" y="453" width="0.2311%" height="15" fill="rgb(236,34,42)" fg:x="17231" fg:w="69"/><text x="57.9579%" y="463.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (69 samples, 0.23%)</title><rect x="57.7079%" y="437" width="0.2311%" height="15" fill="rgb(243,106,37)" fg:x="17231" fg:w="69"/><text x="57.9579%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,354 samples, 14.58%)</title><rect x="43.4040%" y="517" width="14.5819%" height="15" fill="rgb(218,96,6)" fg:x="12960" fg:w="4354"/><text x="43.6540%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (192 samples, 0.64%)</title><rect x="57.3428%" y="501" width="0.6430%" height="15" fill="rgb(235,130,12)" fg:x="17122" fg:w="192"/><text x="57.5928%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (184 samples, 0.62%)</title><rect x="57.3696%" y="485" width="0.6162%" height="15" fill="rgb(231,95,0)" fg:x="17130" fg:w="184"/><text x="57.6196%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts (83 samples, 0.28%)</title><rect x="57.7079%" y="469" width="0.2780%" height="15" fill="rgb(228,12,23)" fg:x="17231" fg:w="83"/><text x="57.9579%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (14 samples, 0.05%)</title><rect x="57.9390%" y="453" width="0.0469%" height="15" fill="rgb(216,12,1)" fg:x="17300" fg:w="14"/><text x="58.1890%" y="463.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (14 samples, 0.05%)</title><rect x="57.9390%" y="437" width="0.0469%" height="15" fill="rgb(219,59,3)" fg:x="17300" fg:w="14"/><text x="58.1890%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.03%)</title><rect x="58.1399%" y="485" width="0.0268%" height="15" fill="rgb(215,208,46)" fg:x="17360" fg:w="8"/><text x="58.3899%" y="495.50"></text></g><g><title>core::ptr::invalid (3 samples, 0.01%)</title><rect x="58.1667%" y="485" width="0.0100%" height="15" fill="rgb(254,224,29)" fg:x="17368" fg:w="3"/><text x="58.4167%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (8 samples, 0.03%)</title><rect x="58.1768%" y="485" width="0.0268%" height="15" fill="rgb(232,14,29)" fg:x="17371" fg:w="8"/><text x="58.4268%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4,687 samples, 15.70%)</title><rect x="42.5299%" y="565" width="15.6971%" height="15" fill="rgb(208,45,52)" fg:x="12699" fg:w="4687"/><text x="42.7799%" y="575.50">&lt;alloc::string::String a..</text></g><g><title>alloc::string::String::push_str (4,587 samples, 15.36%)</title><rect x="42.8648%" y="549" width="15.3622%" height="15" fill="rgb(234,191,28)" fg:x="12799" fg:w="4587"/><text x="43.1148%" y="559.50">alloc::string::String::p..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,587 samples, 15.36%)</title><rect x="42.8648%" y="533" width="15.3622%" height="15" fill="rgb(244,67,43)" fg:x="12799" fg:w="4587"/><text x="43.1148%" y="543.50">alloc::vec::Vec&lt;T,A&gt;::ex..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (72 samples, 0.24%)</title><rect x="57.9859%" y="517" width="0.2411%" height="15" fill="rgb(236,189,24)" fg:x="17314" fg:w="72"/><text x="58.2359%" y="527.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (72 samples, 0.24%)</title><rect x="57.9859%" y="501" width="0.2411%" height="15" fill="rgb(239,214,33)" fg:x="17314" fg:w="72"/><text x="58.2359%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (7 samples, 0.02%)</title><rect x="58.2036%" y="485" width="0.0234%" height="15" fill="rgb(226,176,41)" fg:x="17379" fg:w="7"/><text x="58.4536%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4,962 samples, 16.62%)</title><rect x="42.0074%" y="581" width="16.6181%" height="15" fill="rgb(248,47,8)" fg:x="12543" fg:w="4962"/><text x="42.2574%" y="591.50">core::fmt::num::imp::&lt;impl..</text></g><g><title>core::fmt::Formatter::pad_integral (119 samples, 0.40%)</title><rect x="58.2270%" y="565" width="0.3985%" height="15" fill="rgb(218,81,44)" fg:x="17386" fg:w="119"/><text x="58.4770%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (24 samples, 0.08%)</title><rect x="58.5452%" y="549" width="0.0804%" height="15" fill="rgb(213,98,6)" fg:x="17481" fg:w="24"/><text x="58.7952%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.09%)</title><rect x="59.9518%" y="485" width="0.0904%" height="15" fill="rgb(222,85,22)" fg:x="17901" fg:w="27"/><text x="60.2018%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12 samples, 0.04%)</title><rect x="60.0020%" y="469" width="0.0402%" height="15" fill="rgb(239,46,39)" fg:x="17916" fg:w="12"/><text x="60.2520%" y="479.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (11 samples, 0.04%)</title><rect x="60.0054%" y="453" width="0.0368%" height="15" fill="rgb(237,12,29)" fg:x="17917" fg:w="11"/><text x="60.2554%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.01%)</title><rect x="60.0322%" y="437" width="0.0100%" height="15" fill="rgb(214,77,8)" fg:x="17925" fg:w="3"/><text x="60.2822%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="60.0422%" y="485" width="0.0100%" height="15" fill="rgb(217,168,37)" fg:x="17928" fg:w="3"/><text x="60.2922%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (48 samples, 0.16%)</title><rect x="60.2666%" y="437" width="0.1608%" height="15" fill="rgb(221,217,23)" fg:x="17995" fg:w="48"/><text x="60.5166%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (85 samples, 0.28%)</title><rect x="60.2431%" y="453" width="0.2847%" height="15" fill="rgb(243,229,36)" fg:x="17988" fg:w="85"/><text x="60.4931%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (30 samples, 0.10%)</title><rect x="60.4273%" y="437" width="0.1005%" height="15" fill="rgb(251,163,40)" fg:x="18043" fg:w="30"/><text x="60.6773%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (65 samples, 0.22%)</title><rect x="61.2814%" y="421" width="0.2177%" height="15" fill="rgb(237,222,12)" fg:x="18298" fg:w="65"/><text x="61.5314%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (56 samples, 0.19%)</title><rect x="61.4990%" y="421" width="0.1875%" height="15" fill="rgb(248,132,6)" fg:x="18363" fg:w="56"/><text x="61.7490%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (39 samples, 0.13%)</title><rect x="61.8808%" y="405" width="0.1306%" height="15" fill="rgb(227,167,50)" fg:x="18477" fg:w="39"/><text x="62.1308%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (134 samples, 0.45%)</title><rect x="61.6866%" y="421" width="0.4488%" height="15" fill="rgb(242,84,37)" fg:x="18419" fg:w="134"/><text x="61.9366%" y="431.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (36 samples, 0.12%)</title><rect x="62.0148%" y="405" width="0.1206%" height="15" fill="rgb(212,4,50)" fg:x="18517" fg:w="36"/><text x="62.2648%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.02%)</title><rect x="62.1153%" y="389" width="0.0201%" height="15" fill="rgb(230,228,32)" fg:x="18547" fg:w="6"/><text x="62.3653%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (41 samples, 0.14%)</title><rect x="63.6257%" y="373" width="0.1373%" height="15" fill="rgb(248,217,23)" fg:x="18998" fg:w="41"/><text x="63.8757%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (47 samples, 0.16%)</title><rect x="63.7630%" y="373" width="0.1574%" height="15" fill="rgb(238,197,32)" fg:x="19039" fg:w="47"/><text x="64.0130%" y="383.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (47 samples, 0.16%)</title><rect x="63.7630%" y="357" width="0.1574%" height="15" fill="rgb(236,106,1)" fg:x="19039" fg:w="47"/><text x="64.0130%" y="367.50"></text></g><g><title>alloc_perturb (16 samples, 0.05%)</title><rect x="66.1174%" y="325" width="0.0536%" height="15" fill="rgb(219,228,13)" fg:x="19742" fg:w="16"/><text x="66.3674%" y="335.50"></text></g><g><title>__GI___libc_malloc (650 samples, 2.18%)</title><rect x="64.0309%" y="357" width="2.1769%" height="15" fill="rgb(238,30,35)" fg:x="19119" fg:w="650"/><text x="64.2809%" y="367.50">_..</text></g><g><title>_int_malloc (290 samples, 0.97%)</title><rect x="65.2366%" y="341" width="0.9712%" height="15" fill="rgb(236,70,23)" fg:x="19479" fg:w="290"/><text x="65.4866%" y="351.50"></text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.04%)</title><rect x="66.1710%" y="325" width="0.0368%" height="15" fill="rgb(249,104,48)" fg:x="19758" fg:w="11"/><text x="66.4210%" y="335.50"></text></g><g><title>__rdl_alloc (17 samples, 0.06%)</title><rect x="66.2078%" y="357" width="0.0569%" height="15" fill="rgb(254,117,50)" fg:x="19769" fg:w="17"/><text x="66.4578%" y="367.50"></text></g><g><title>__rust_alloc (16 samples, 0.05%)</title><rect x="66.2648%" y="357" width="0.0536%" height="15" fill="rgb(223,152,4)" fg:x="19786" fg:w="16"/><text x="66.5148%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::align (40 samples, 0.13%)</title><rect x="66.3184%" y="357" width="0.1340%" height="15" fill="rgb(245,6,2)" fg:x="19802" fg:w="40"/><text x="66.5684%" y="367.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (29 samples, 0.10%)</title><rect x="66.3552%" y="341" width="0.0971%" height="15" fill="rgb(249,150,24)" fg:x="19813" fg:w="29"/><text x="66.6052%" y="351.50"></text></g><g><title>alloc::alloc::alloc (766 samples, 2.57%)</title><rect x="63.9204%" y="373" width="2.5654%" height="15" fill="rgb(228,185,42)" fg:x="19086" fg:w="766"/><text x="64.1704%" y="383.50">al..</text></g><g><title>core::ptr::read_volatile (8 samples, 0.03%)</title><rect x="66.4590%" y="357" width="0.0268%" height="15" fill="rgb(226,39,33)" fg:x="19844" fg:w="8"/><text x="66.7090%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::size (10 samples, 0.03%)</title><rect x="66.4858%" y="373" width="0.0335%" height="15" fill="rgb(221,166,19)" fg:x="19852" fg:w="10"/><text x="66.7358%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (44 samples, 0.15%)</title><rect x="66.5193%" y="373" width="0.1474%" height="15" fill="rgb(209,109,2)" fg:x="19862" fg:w="44"/><text x="66.7693%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (42 samples, 0.14%)</title><rect x="66.6667%" y="373" width="0.1407%" height="15" fill="rgb(252,216,26)" fg:x="19906" fg:w="42"/><text x="66.9167%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (23 samples, 0.08%)</title><rect x="66.7303%" y="357" width="0.0770%" height="15" fill="rgb(227,173,36)" fg:x="19925" fg:w="23"/><text x="66.9803%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (8 samples, 0.03%)</title><rect x="66.7805%" y="341" width="0.0268%" height="15" fill="rgb(209,90,7)" fg:x="19940" fg:w="8"/><text x="67.0305%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (8 samples, 0.03%)</title><rect x="66.8710%" y="357" width="0.0268%" height="15" fill="rgb(250,194,11)" fg:x="19967" fg:w="8"/><text x="67.1210%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 0.02%)</title><rect x="66.8978%" y="357" width="0.0234%" height="15" fill="rgb(220,72,50)" fg:x="19975" fg:w="7"/><text x="67.1478%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,305 samples, 4.37%)</title><rect x="62.7918%" y="405" width="4.3705%" height="15" fill="rgb(222,106,48)" fg:x="18749" fg:w="1305"/><text x="63.0418%" y="415.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,245 samples, 4.17%)</title><rect x="62.9927%" y="389" width="4.1696%" height="15" fill="rgb(216,220,45)" fg:x="18809" fg:w="1245"/><text x="63.2427%" y="399.50">alloc..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (106 samples, 0.36%)</title><rect x="66.8073%" y="373" width="0.3550%" height="15" fill="rgb(234,112,18)" fg:x="19948" fg:w="106"/><text x="67.0573%" y="383.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (72 samples, 0.24%)</title><rect x="66.9212%" y="357" width="0.2411%" height="15" fill="rgb(206,179,9)" fg:x="19982" fg:w="72"/><text x="67.1712%" y="367.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (70 samples, 0.23%)</title><rect x="66.9279%" y="341" width="0.2344%" height="15" fill="rgb(215,115,40)" fg:x="19984" fg:w="70"/><text x="67.1779%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (126 samples, 0.42%)</title><rect x="67.1623%" y="405" width="0.4220%" height="15" fill="rgb(222,69,34)" fg:x="20054" fg:w="126"/><text x="67.4123%" y="415.50"></text></g><g><title>alloc::raw_vec::alloc_guard (12 samples, 0.04%)</title><rect x="67.5843%" y="405" width="0.0402%" height="15" fill="rgb(209,161,10)" fg:x="20180" fg:w="12"/><text x="67.8343%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,838 samples, 6.16%)</title><rect x="62.1354%" y="421" width="6.1556%" height="15" fill="rgb(217,6,38)" fg:x="18553" fg:w="1838"/><text x="62.3854%" y="431.50">alloc::r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (199 samples, 0.67%)</title><rect x="67.6245%" y="405" width="0.6665%" height="15" fill="rgb(229,229,48)" fg:x="20192" fg:w="199"/><text x="67.8745%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (44 samples, 0.15%)</title><rect x="69.7512%" y="389" width="0.1474%" height="15" fill="rgb(225,21,28)" fg:x="20827" fg:w="44"/><text x="70.0012%" y="399.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (29 samples, 0.10%)</title><rect x="69.8014%" y="373" width="0.0971%" height="15" fill="rgb(206,33,13)" fg:x="20842" fg:w="29"/><text x="70.0514%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (469 samples, 1.57%)</title><rect x="68.3345%" y="405" width="1.5707%" height="15" fill="rgb(242,178,17)" fg:x="20404" fg:w="469"/><text x="68.5845%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (486 samples, 1.63%)</title><rect x="68.2910%" y="421" width="1.6276%" height="15" fill="rgb(220,162,5)" fg:x="20391" fg:w="486"/><text x="68.5410%" y="431.50"></text></g><g><title>core::ptr::alignment::Alignment::of (4 samples, 0.01%)</title><rect x="69.9052%" y="405" width="0.0134%" height="15" fill="rgb(210,33,43)" fg:x="20873" fg:w="4"/><text x="70.1552%" y="415.50"></text></g><g><title>core::mem::align_of (4 samples, 0.01%)</title><rect x="69.9052%" y="389" width="0.0134%" height="15" fill="rgb(216,116,54)" fg:x="20873" fg:w="4"/><text x="70.1552%" y="399.50"></text></g><g><title>core::cmp::max (608 samples, 2.04%)</title><rect x="69.9186%" y="421" width="2.0362%" height="15" fill="rgb(249,92,24)" fg:x="20877" fg:w="608"/><text x="70.1686%" y="431.50">c..</text></g><g><title>core::cmp::Ord::max (606 samples, 2.03%)</title><rect x="69.9253%" y="405" width="2.0295%" height="15" fill="rgb(231,189,14)" fg:x="20879" fg:w="606"/><text x="70.1753%" y="415.50">c..</text></g><g><title>core::cmp::max_by (563 samples, 1.89%)</title><rect x="70.0693%" y="389" width="1.8855%" height="15" fill="rgb(230,8,41)" fg:x="20922" fg:w="563"/><text x="70.3193%" y="399.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (247 samples, 0.83%)</title><rect x="71.1276%" y="373" width="0.8272%" height="15" fill="rgb(249,7,27)" fg:x="21238" fg:w="247"/><text x="71.3776%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (163 samples, 0.55%)</title><rect x="71.4090%" y="357" width="0.5459%" height="15" fill="rgb(232,86,5)" fg:x="21322" fg:w="163"/><text x="71.6590%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (114 samples, 0.38%)</title><rect x="71.9549%" y="421" width="0.3818%" height="15" fill="rgb(224,175,18)" fg:x="21485" fg:w="114"/><text x="72.2049%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (18 samples, 0.06%)</title><rect x="72.2764%" y="405" width="0.0603%" height="15" fill="rgb(220,129,12)" fg:x="21581" fg:w="18"/><text x="72.5264%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3,507 samples, 11.75%)</title><rect x="60.6685%" y="437" width="11.7452%" height="15" fill="rgb(210,19,36)" fg:x="18115" fg:w="3507"/><text x="60.9185%" y="447.50">alloc::raw_vec::R..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (23 samples, 0.08%)</title><rect x="72.3366%" y="421" width="0.0770%" height="15" fill="rgb(219,96,14)" fg:x="21599" fg:w="23"/><text x="72.5866%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,792 samples, 12.70%)</title><rect x="60.0522%" y="485" width="12.6997%" height="15" fill="rgb(249,106,1)" fg:x="17931" fg:w="3792"/><text x="60.3022%" y="495.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,746 samples, 12.55%)</title><rect x="60.2063%" y="469" width="12.5456%" height="15" fill="rgb(249,155,20)" fg:x="17977" fg:w="3746"/><text x="60.4563%" y="479.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,650 samples, 12.22%)</title><rect x="60.5278%" y="453" width="12.2241%" height="15" fill="rgb(244,168,9)" fg:x="18073" fg:w="3650"/><text x="60.7778%" y="463.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::handle_reserve (101 samples, 0.34%)</title><rect x="72.4137%" y="437" width="0.3383%" height="15" fill="rgb(216,23,50)" fg:x="21622" fg:w="101"/><text x="72.6637%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.15%)</title><rect x="72.5979%" y="421" width="0.1541%" height="15" fill="rgb(224,219,20)" fg:x="21677" fg:w="46"/><text x="72.8479%" y="431.50"></text></g><g><title>[main] (8 samples, 0.03%)</title><rect x="72.8055%" y="469" width="0.0268%" height="15" fill="rgb(222,156,15)" fg:x="21739" fg:w="8"/><text x="73.0555%" y="479.50"></text></g><g><title>__memcpy_sse2_unaligned (19 samples, 0.06%)</title><rect x="72.8323%" y="469" width="0.0636%" height="15" fill="rgb(231,97,17)" fg:x="21747" fg:w="19"/><text x="73.0823%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,997 samples, 13.39%)</title><rect x="59.7877%" y="501" width="13.3862%" height="15" fill="rgb(218,70,48)" fg:x="17852" fg:w="3997"/><text x="60.0377%" y="511.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping (126 samples, 0.42%)</title><rect x="72.7519%" y="485" width="0.4220%" height="15" fill="rgb(212,196,52)" fg:x="21723" fg:w="126"/><text x="73.0019%" y="495.50"></text></g><g><title>__memmove_sse2_unaligned_erms (83 samples, 0.28%)</title><rect x="72.8959%" y="469" width="0.2780%" height="15" fill="rgb(243,203,18)" fg:x="21766" fg:w="83"/><text x="73.1459%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (65 samples, 0.22%)</title><rect x="73.4385%" y="469" width="0.2177%" height="15" fill="rgb(252,125,41)" fg:x="21928" fg:w="65"/><text x="73.6885%" y="479.50"></text></g><g><title>core::mem::size_of (10 samples, 0.03%)</title><rect x="73.6227%" y="453" width="0.0335%" height="15" fill="rgb(223,180,33)" fg:x="21983" fg:w="10"/><text x="73.8727%" y="463.50"></text></g><g><title>core::ptr::slice_from_raw_parts (69 samples, 0.23%)</title><rect x="73.6562%" y="453" width="0.2311%" height="15" fill="rgb(254,159,46)" fg:x="21993" fg:w="69"/><text x="73.9062%" y="463.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (69 samples, 0.23%)</title><rect x="73.6562%" y="437" width="0.2311%" height="15" fill="rgb(254,38,10)" fg:x="21993" fg:w="69"/><text x="73.9062%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,250 samples, 14.23%)</title><rect x="59.6905%" y="517" width="14.2336%" height="15" fill="rgb(208,217,32)" fg:x="17823" fg:w="4250"/><text x="59.9405%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (224 samples, 0.75%)</title><rect x="73.1739%" y="501" width="0.7502%" height="15" fill="rgb(221,120,13)" fg:x="21849" fg:w="224"/><text x="73.4239%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (215 samples, 0.72%)</title><rect x="73.2041%" y="485" width="0.7201%" height="15" fill="rgb(246,54,52)" fg:x="21858" fg:w="215"/><text x="73.4541%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts (80 samples, 0.27%)</title><rect x="73.6562%" y="469" width="0.2679%" height="15" fill="rgb(242,34,25)" fg:x="21993" fg:w="80"/><text x="73.9062%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (11 samples, 0.04%)</title><rect x="73.8873%" y="453" width="0.0368%" height="15" fill="rgb(247,209,9)" fg:x="22062" fg:w="11"/><text x="74.1373%" y="463.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (11 samples, 0.04%)</title><rect x="73.8873%" y="437" width="0.0368%" height="15" fill="rgb(228,71,26)" fg:x="22062" fg:w="11"/><text x="74.1373%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.01%)</title><rect x="74.0681%" y="485" width="0.0134%" height="15" fill="rgb(222,145,49)" fg:x="22116" fg:w="4"/><text x="74.3181%" y="495.50"></text></g><g><title>core::ptr::invalid (8 samples, 0.03%)</title><rect x="74.0815%" y="485" width="0.0268%" height="15" fill="rgb(218,121,17)" fg:x="22120" fg:w="8"/><text x="74.3315%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.02%)</title><rect x="74.1083%" y="485" width="0.0201%" height="15" fill="rgb(244,50,7)" fg:x="22128" fg:w="6"/><text x="74.3583%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4,533 samples, 15.18%)</title><rect x="58.9604%" y="565" width="15.1814%" height="15" fill="rgb(246,229,37)" fg:x="17605" fg:w="4533"/><text x="59.2104%" y="575.50">&lt;alloc::string::String ..</text></g><g><title>alloc::string::String::push_str (4,422 samples, 14.81%)</title><rect x="59.3322%" y="549" width="14.8096%" height="15" fill="rgb(225,18,5)" fg:x="17716" fg:w="4422"/><text x="59.5822%" y="559.50">alloc::string::String::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,422 samples, 14.81%)</title><rect x="59.3322%" y="533" width="14.8096%" height="15" fill="rgb(213,204,8)" fg:x="17716" fg:w="4422"/><text x="59.5822%" y="543.50">alloc::vec::Vec&lt;T,A&gt;::e..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (65 samples, 0.22%)</title><rect x="73.9241%" y="517" width="0.2177%" height="15" fill="rgb(238,103,6)" fg:x="22073" fg:w="65"/><text x="74.1741%" y="527.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (65 samples, 0.22%)</title><rect x="73.9241%" y="501" width="0.2177%" height="15" fill="rgb(222,25,35)" fg:x="22073" fg:w="65"/><text x="74.1741%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (4 samples, 0.01%)</title><rect x="74.1284%" y="485" width="0.0134%" height="15" fill="rgb(213,203,35)" fg:x="22134" fg:w="4"/><text x="74.3784%" y="495.50"></text></g><g><title>core::fmt::Formatter::pad_integral (124 samples, 0.42%)</title><rect x="74.1418%" y="565" width="0.4153%" height="15" fill="rgb(221,79,53)" fg:x="22138" fg:w="124"/><text x="74.3918%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (26 samples, 0.09%)</title><rect x="74.4700%" y="549" width="0.0871%" height="15" fill="rgb(243,200,35)" fg:x="22236" fg:w="26"/><text x="74.7200%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (4,759 samples, 15.94%)</title><rect x="58.6255%" y="581" width="15.9382%" height="15" fill="rgb(248,60,25)" fg:x="17505" fg:w="4759"/><text x="58.8755%" y="591.50">core::fmt::num::imp::&lt;imp..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (10,551 samples, 35.34%)</title><rect x="39.7636%" y="597" width="35.3361%" height="15" fill="rgb(227,53,46)" fg:x="11873" fg:w="10551"/><text x="40.0136%" y="607.50">&lt;T as alloc::string::ToString&gt;::to_string</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (160 samples, 0.54%)</title><rect x="74.5638%" y="581" width="0.5359%" height="15" fill="rgb(216,120,32)" fg:x="22264" fg:w="160"/><text x="74.8138%" y="591.50"></text></g><g><title>alloc_perturb (25 samples, 0.08%)</title><rect x="80.3141%" y="549" width="0.0837%" height="15" fill="rgb(220,134,1)" fg:x="23981" fg:w="25"/><text x="80.5641%" y="559.50"></text></g><g><title>__GI___libc_malloc (1,382 samples, 4.63%)</title><rect x="75.8666%" y="581" width="4.6284%" height="15" fill="rgb(237,168,5)" fg:x="22653" fg:w="1382"/><text x="76.1166%" y="591.50">__GI_..</text></g><g><title>_int_malloc (666 samples, 2.23%)</title><rect x="78.2645%" y="565" width="2.2305%" height="15" fill="rgb(231,100,33)" fg:x="23369" fg:w="666"/><text x="78.5145%" y="575.50">_..</text></g><g><title>unlink_chunk.constprop.0 (29 samples, 0.10%)</title><rect x="80.3979%" y="549" width="0.0971%" height="15" fill="rgb(236,177,47)" fg:x="24006" fg:w="29"/><text x="80.6479%" y="559.50"></text></g><g><title>__memcpy_sse2_unaligned (127 samples, 0.43%)</title><rect x="80.4950%" y="581" width="0.4253%" height="15" fill="rgb(235,7,49)" fg:x="24035" fg:w="127"/><text x="80.7450%" y="591.50"></text></g><g><title>__memmove_sse2_unaligned_erms (74 samples, 0.25%)</title><rect x="80.9203%" y="581" width="0.2478%" height="15" fill="rgb(232,119,22)" fg:x="24162" fg:w="74"/><text x="81.1703%" y="591.50"></text></g><g><title>__rdl_alloc (24 samples, 0.08%)</title><rect x="81.1682%" y="581" width="0.0804%" height="15" fill="rgb(254,73,53)" fg:x="24236" fg:w="24"/><text x="81.4182%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,851 samples, 6.20%)</title><rect x="75.0996%" y="597" width="6.1991%" height="15" fill="rgb(251,35,20)" fg:x="22424" fg:w="1851"/><text x="75.3496%" y="607.50">&lt;alloc::..</text></g><g><title>__rust_alloc (15 samples, 0.05%)</title><rect x="81.2485%" y="581" width="0.0502%" height="15" fill="rgb(241,119,20)" fg:x="24260" fg:w="15"/><text x="81.4985%" y="591.50"></text></g><g><title>core::fmt::Arguments::as_str (60 samples, 0.20%)</title><rect x="81.6002%" y="581" width="0.2009%" height="15" fill="rgb(207,102,14)" fg:x="24365" fg:w="60"/><text x="81.8502%" y="591.50"></text></g><g><title>[main] (10 samples, 0.03%)</title><rect x="82.4308%" y="549" width="0.0335%" height="15" fill="rgb(248,201,50)" fg:x="24613" fg:w="10"/><text x="82.6808%" y="559.50"></text></g><g><title>__memcpy_sse2_unaligned (35 samples, 0.12%)</title><rect x="82.4642%" y="549" width="0.1172%" height="15" fill="rgb(222,185,44)" fg:x="24623" fg:w="35"/><text x="82.7142%" y="559.50"></text></g><g><title>__memmove_sse2_unaligned_erms (99 samples, 0.33%)</title><rect x="82.5815%" y="549" width="0.3316%" height="15" fill="rgb(218,107,18)" fg:x="24658" fg:w="99"/><text x="82.8315%" y="559.50"></text></g><g><title>__memcpy_sse2_unaligned (14 samples, 0.05%)</title><rect x="85.0363%" y="501" width="0.0469%" height="15" fill="rgb(237,177,39)" fg:x="25391" fg:w="14"/><text x="85.2863%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (154 samples, 0.52%)</title><rect x="84.6679%" y="517" width="0.5158%" height="15" fill="rgb(246,69,6)" fg:x="25281" fg:w="154"/><text x="84.9179%" y="527.50"></text></g><g><title>__memmove_sse2_unaligned_erms (30 samples, 0.10%)</title><rect x="85.0832%" y="501" width="0.1005%" height="15" fill="rgb(234,208,37)" fg:x="25405" fg:w="30"/><text x="85.3332%" y="511.50"></text></g><g><title>__memcpy_sse2_unaligned (29 samples, 0.10%)</title><rect x="86.5937%" y="485" width="0.0971%" height="15" fill="rgb(225,4,6)" fg:x="25856" fg:w="29"/><text x="86.8437%" y="495.50"></text></g><g><title>__memmove_sse2_unaligned_erms (49 samples, 0.16%)</title><rect x="86.6908%" y="485" width="0.1641%" height="15" fill="rgb(233,45,0)" fg:x="25885" fg:w="49"/><text x="86.9408%" y="495.50"></text></g><g><title>alloc_perturb (15 samples, 0.05%)</title><rect x="89.6581%" y="421" width="0.0502%" height="15" fill="rgb(226,136,5)" fg:x="26771" fg:w="15"/><text x="89.9081%" y="431.50"></text></g><g><title>__GI___libc_malloc (677 samples, 2.27%)</title><rect x="87.4845%" y="453" width="2.2673%" height="15" fill="rgb(211,91,47)" fg:x="26122" fg:w="677"/><text x="87.7345%" y="463.50">_..</text></g><g><title>_int_malloc (336 samples, 1.13%)</title><rect x="88.6265%" y="437" width="1.1253%" height="15" fill="rgb(242,88,51)" fg:x="26463" fg:w="336"/><text x="88.8765%" y="447.50"></text></g><g><title>unlink_chunk.constprop.0 (13 samples, 0.04%)</title><rect x="89.7083%" y="421" width="0.0435%" height="15" fill="rgb(230,91,28)" fg:x="26786" fg:w="13"/><text x="89.9583%" y="431.50"></text></g><g><title>__rdl_alloc (29 samples, 0.10%)</title><rect x="89.7518%" y="453" width="0.0971%" height="15" fill="rgb(254,186,29)" fg:x="26799" fg:w="29"/><text x="90.0018%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1,152 samples, 3.86%)</title><rect x="86.0243%" y="501" width="3.8581%" height="15" fill="rgb(238,6,4)" fg:x="25686" fg:w="1152"/><text x="86.2743%" y="511.50">&lt;&amp;mu..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (904 samples, 3.03%)</title><rect x="86.8549%" y="485" width="3.0276%" height="15" fill="rgb(221,151,16)" fg:x="25934" fg:w="904"/><text x="87.1049%" y="495.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (772 samples, 2.59%)</title><rect x="87.2970%" y="469" width="2.5855%" height="15" fill="rgb(251,143,52)" fg:x="26066" fg:w="772"/><text x="87.5470%" y="479.50">al..</text></g><g><title>__rust_alloc (10 samples, 0.03%)</title><rect x="89.8490%" y="453" width="0.0335%" height="15" fill="rgb(206,90,15)" fg:x="26828" fg:w="10"/><text x="90.0990%" y="463.50"></text></g><g><title>alloc::fmt::format (2,797 samples, 9.37%)</title><rect x="81.2988%" y="597" width="9.3674%" height="15" fill="rgb(218,35,8)" fg:x="24275" fg:w="2797"/><text x="81.5488%" y="607.50">alloc::fmt::f..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2,647 samples, 8.86%)</title><rect x="81.8011%" y="581" width="8.8650%" height="15" fill="rgb(239,215,6)" fg:x="24425" fg:w="2647"/><text x="82.0511%" y="591.50">core::option:..</text></g><g><title>alloc::fmt::format::{{closure}} (2,509 samples, 8.40%)</title><rect x="82.2633%" y="565" width="8.4028%" height="15" fill="rgb(245,116,39)" fg:x="24563" fg:w="2509"/><text x="82.5133%" y="575.50">alloc::fmt::..</text></g><g><title>alloc::fmt::format::format_inner (2,315 samples, 7.75%)</title><rect x="82.9130%" y="549" width="7.7531%" height="15" fill="rgb(242,65,28)" fg:x="24757" fg:w="2315"/><text x="83.1630%" y="559.50">alloc::fmt:..</text></g><g><title>core::fmt::write (1,993 samples, 6.67%)</title><rect x="83.9914%" y="533" width="6.6747%" height="15" fill="rgb(252,132,53)" fg:x="25079" fg:w="1993"/><text x="84.2414%" y="543.50">core::fmt..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (1,637 samples, 5.48%)</title><rect x="85.1837%" y="517" width="5.4824%" height="15" fill="rgb(224,159,50)" fg:x="25435" fg:w="1637"/><text x="85.4337%" y="527.50">core::f..</text></g><g><title>core::fmt::Formatter::pad_integral (234 samples, 0.78%)</title><rect x="89.8824%" y="501" width="0.7837%" height="15" fill="rgb(224,93,4)" fg:x="26838" fg:w="234"/><text x="90.1324%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (40 samples, 0.13%)</title><rect x="90.5322%" y="485" width="0.1340%" height="15" fill="rgb(208,81,34)" fg:x="27032" fg:w="40"/><text x="90.7822%" y="495.50"></text></g><g><title>[main] (21 samples, 0.07%)</title><rect x="91.1584%" y="581" width="0.0703%" height="15" fill="rgb(233,92,54)" fg:x="27219" fg:w="21"/><text x="91.4084%" y="591.50"></text></g><g><title>__memcpy_sse2_unaligned (27 samples, 0.09%)</title><rect x="91.2288%" y="581" width="0.0904%" height="15" fill="rgb(237,21,14)" fg:x="27240" fg:w="27"/><text x="91.4788%" y="591.50"></text></g><g><title>__memmove_sse2_unaligned_erms (96 samples, 0.32%)</title><rect x="91.3192%" y="581" width="0.3215%" height="15" fill="rgb(249,128,51)" fg:x="27267" fg:w="96"/><text x="91.5692%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (36 samples, 0.12%)</title><rect x="91.6407%" y="581" width="0.1206%" height="15" fill="rgb(223,129,24)" fg:x="27363" fg:w="36"/><text x="91.8907%" y="591.50"></text></g><g><title>__memmove_sse2_unaligned_erms (62 samples, 0.21%)</title><rect x="91.8484%" y="453" width="0.2076%" height="15" fill="rgb(231,168,25)" fg:x="27425" fg:w="62"/><text x="92.0984%" y="463.50"></text></g><g><title>_int_free (7 samples, 0.02%)</title><rect x="92.0560%" y="453" width="0.0234%" height="15" fill="rgb(224,39,20)" fg:x="27487" fg:w="7"/><text x="92.3060%" y="463.50"></text></g><g><title>_int_malloc (47 samples, 0.16%)</title><rect x="92.0794%" y="453" width="0.1574%" height="15" fill="rgb(225,152,53)" fg:x="27494" fg:w="47"/><text x="92.3294%" y="463.50"></text></g><g><title>alloc::alloc::realloc (125 samples, 0.42%)</title><rect x="91.8216%" y="501" width="0.4186%" height="15" fill="rgb(252,17,24)" fg:x="27417" fg:w="125"/><text x="92.0716%" y="511.50"></text></g><g><title>__realloc (125 samples, 0.42%)</title><rect x="91.8216%" y="485" width="0.4186%" height="15" fill="rgb(250,114,30)" fg:x="27417" fg:w="125"/><text x="92.0716%" y="495.50"></text></g><g><title>_int_realloc (121 samples, 0.41%)</title><rect x="91.8350%" y="469" width="0.4052%" height="15" fill="rgb(229,5,4)" fg:x="27421" fg:w="121"/><text x="92.0850%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (133 samples, 0.45%)</title><rect x="91.8048%" y="533" width="0.4454%" height="15" fill="rgb(225,176,49)" fg:x="27412" fg:w="133"/><text x="92.0548%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (133 samples, 0.45%)</title><rect x="91.8048%" y="517" width="0.4454%" height="15" fill="rgb(224,221,49)" fg:x="27412" fg:w="133"/><text x="92.0548%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 samples, 0.47%)</title><rect x="91.7881%" y="549" width="0.4655%" height="15" fill="rgb(253,169,27)" fg:x="27407" fg:w="139"/><text x="92.0381%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.01%)</title><rect x="92.2536%" y="549" width="0.0134%" height="15" fill="rgb(211,206,16)" fg:x="27546" fg:w="4"/><text x="92.5036%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.01%)</title><rect x="92.2536%" y="533" width="0.0134%" height="15" fill="rgb(244,87,35)" fg:x="27546" fg:w="4"/><text x="92.5036%" y="543.50"></text></g><g><title>core::cmp::max (3 samples, 0.01%)</title><rect x="92.2670%" y="549" width="0.0100%" height="15" fill="rgb(246,28,10)" fg:x="27550" fg:w="3"/><text x="92.5170%" y="559.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.01%)</title><rect x="92.2670%" y="533" width="0.0100%" height="15" fill="rgb(229,12,44)" fg:x="27550" fg:w="3"/><text x="92.5170%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (155 samples, 0.52%)</title><rect x="91.7680%" y="565" width="0.5191%" height="15" fill="rgb(210,145,37)" fg:x="27401" fg:w="155"/><text x="92.0180%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (159 samples, 0.53%)</title><rect x="91.7613%" y="581" width="0.5325%" height="15" fill="rgb(227,112,52)" fg:x="27399" fg:w="159"/><text x="92.0113%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (15 samples, 0.05%)</title><rect x="92.2938%" y="581" width="0.0502%" height="15" fill="rgb(238,155,34)" fg:x="27558" fg:w="15"/><text x="92.5438%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15 samples, 0.05%)</title><rect x="92.2938%" y="565" width="0.0502%" height="15" fill="rgb(239,226,36)" fg:x="27558" fg:w="15"/><text x="92.5438%" y="575.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (7 samples, 0.02%)</title><rect x="92.3206%" y="549" width="0.0234%" height="15" fill="rgb(230,16,23)" fg:x="27566" fg:w="7"/><text x="92.5706%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (7 samples, 0.02%)</title><rect x="92.3206%" y="533" width="0.0234%" height="15" fill="rgb(236,171,36)" fg:x="27566" fg:w="7"/><text x="92.5706%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.01%)</title><rect x="92.3440%" y="581" width="0.0134%" height="15" fill="rgb(221,22,14)" fg:x="27573" fg:w="4"/><text x="92.5940%" y="591.50"></text></g><g><title>[main] (14 samples, 0.05%)</title><rect x="92.4110%" y="565" width="0.0469%" height="15" fill="rgb(242,43,11)" fg:x="27593" fg:w="14"/><text x="92.6610%" y="575.50"></text></g><g><title>__memcpy_sse2_unaligned (23 samples, 0.08%)</title><rect x="92.4579%" y="565" width="0.0770%" height="15" fill="rgb(232,69,23)" fg:x="27607" fg:w="23"/><text x="92.7079%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (682 samples, 2.28%)</title><rect x="90.6661%" y="597" width="2.2841%" height="15" fill="rgb(216,180,54)" fg:x="27072" fg:w="682"/><text x="90.9161%" y="607.50">a..</text></g><g><title>core::ptr::write (177 samples, 0.59%)</title><rect x="92.3574%" y="581" width="0.5928%" height="15" fill="rgb(216,5,24)" fg:x="27577" fg:w="177"/><text x="92.6074%" y="591.50"></text></g><g><title>__memmove_sse2_unaligned_erms (124 samples, 0.42%)</title><rect x="92.5349%" y="565" width="0.4153%" height="15" fill="rgb(225,89,9)" fg:x="27630" fg:w="124"/><text x="92.7849%" y="575.50"></text></g><g><title>core::fmt::Arguments::new_v1 (198 samples, 0.66%)</title><rect x="92.9502%" y="597" width="0.6631%" height="15" fill="rgb(243,75,33)" fg:x="27754" fg:w="198"/><text x="93.2002%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (17,159 samples, 57.47%)</title><rect x="36.3475%" y="645" width="57.4668%" height="15" fill="rgb(247,141,45)" fg:x="10853" fg:w="17159"/><text x="36.5975%" y="655.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (16,858 samples, 56.46%)</title><rect x="37.3556%" y="629" width="56.4587%" height="15" fill="rgb(232,177,36)" fg:x="11154" fg:w="16858"/><text x="37.6056%" y="639.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}::{{closure}} (16,791 samples, 56.23%)</title><rect x="37.5800%" y="613" width="56.2343%" height="15" fill="rgb(219,125,36)" fg:x="11221" fg:w="16791"/><text x="37.8300%" y="623.50">excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>core::fmt::rt::Argument::new_display (60 samples, 0.20%)</title><rect x="93.6133%" y="597" width="0.2009%" height="15" fill="rgb(227,94,9)" fg:x="27952" fg:w="60"/><text x="93.8633%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::new (4 samples, 0.01%)</title><rect x="93.8009%" y="581" width="0.0134%" height="15" fill="rgb(240,34,52)" fg:x="28008" fg:w="4"/><text x="94.0509%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (9 samples, 0.03%)</title><rect x="93.8143%" y="645" width="0.0301%" height="15" fill="rgb(216,45,12)" fg:x="28012" fg:w="9"/><text x="94.0643%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.02%)</title><rect x="93.8243%" y="629" width="0.0201%" height="15" fill="rgb(246,21,19)" fg:x="28015" fg:w="6"/><text x="94.0743%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17,556 samples, 58.80%)</title><rect x="35.1251%" y="693" width="58.7963%" height="15" fill="rgb(213,98,42)" fg:x="10488" fg:w="17556"/><text x="35.3751%" y="703.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,556 samples, 58.80%)</title><rect x="35.1251%" y="677" width="58.7963%" height="15" fill="rgb(250,136,47)" fg:x="10488" fg:w="17556"/><text x="35.3751%" y="687.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,556 samples, 58.80%)</title><rect x="35.1251%" y="661" width="58.7963%" height="15" fill="rgb(251,124,27)" fg:x="10488" fg:w="17556"/><text x="35.3751%" y="671.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (23 samples, 0.08%)</title><rect x="93.8444%" y="645" width="0.0770%" height="15" fill="rgb(229,180,14)" fg:x="28021" fg:w="23"/><text x="94.0944%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17,565 samples, 58.83%)</title><rect x="35.0983%" y="837" width="58.8265%" height="15" fill="rgb(245,216,25)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="847.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (17,565 samples, 58.83%)</title><rect x="35.0983%" y="821" width="58.8265%" height="15" fill="rgb(251,43,5)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="831.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17,565 samples, 58.83%)</title><rect x="35.0983%" y="805" width="58.8265%" height="15" fill="rgb(250,128,24)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="815.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,565 samples, 58.83%)</title><rect x="35.0983%" y="789" width="58.8265%" height="15" fill="rgb(217,117,27)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="799.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,565 samples, 58.83%)</title><rect x="35.0983%" y="773" width="58.8265%" height="15" fill="rgb(245,147,4)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="783.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17,565 samples, 58.83%)</title><rect x="35.0983%" y="757" width="58.8265%" height="15" fill="rgb(242,201,35)" fg:x="10480" fg:w="17565"/><text x="35.3483%" y="767.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (17,563 samples, 58.82%)</title><rect x="35.1050%" y="741" width="58.8198%" height="15" fill="rgb(218,181,1)" fg:x="10482" fg:w="17563"/><text x="35.3550%" y="751.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (17,563 samples, 58.82%)</title><rect x="35.1050%" y="725" width="58.8198%" height="15" fill="rgb(222,6,29)" fg:x="10482" fg:w="17563"/><text x="35.3550%" y="735.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}} (17,561 samples, 58.81%)</title><rect x="35.1117%" y="709" width="58.8131%" height="15" fill="rgb(208,186,3)" fg:x="10484" fg:w="17561"/><text x="35.3617%" y="719.50">excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::collect (17,571 samples, 58.85%)</title><rect x="35.0882%" y="901" width="58.8466%" height="15" fill="rgb(216,36,26)" fg:x="10477" fg:w="17571"/><text x="35.3382%" y="911.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17,570 samples, 58.84%)</title><rect x="35.0916%" y="885" width="58.8432%" height="15" fill="rgb(248,201,23)" fg:x="10478" fg:w="17570"/><text x="35.3416%" y="895.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17,569 samples, 58.84%)</title><rect x="35.0949%" y="869" width="58.8399%" height="15" fill="rgb(251,170,31)" fg:x="10479" fg:w="17569"/><text x="35.3449%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17,568 samples, 58.84%)</title><rect x="35.0983%" y="853" width="58.8365%" height="15" fill="rgb(207,110,25)" fg:x="10480" fg:w="17568"/><text x="35.3483%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.01%)</title><rect x="93.9248%" y="837" width="0.0100%" height="15" fill="rgb(250,54,15)" fg:x="28045" fg:w="3"/><text x="94.1748%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="93.9248%" y="821" width="0.0100%" height="15" fill="rgb(227,68,33)" fg:x="28045" fg:w="3"/><text x="94.1748%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="93.9248%" y="805" width="0.0100%" height="15" fill="rgb(238,34,41)" fg:x="28045" fg:w="3"/><text x="94.1748%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.01%)</title><rect x="93.9248%" y="789" width="0.0100%" height="15" fill="rgb(220,11,15)" fg:x="28045" fg:w="3"/><text x="94.1748%" y="799.50"></text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}} (17,574 samples, 58.86%)</title><rect x="35.0815%" y="917" width="58.8566%" height="15" fill="rgb(246,111,35)" fg:x="10475" fg:w="17574"/><text x="35.3315%" y="927.50">excel_merge::calc_file_row_num_infos::{{closure}}</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="93.9449%" y="805" width="0.0134%" height="15" fill="rgb(209,88,53)" fg:x="28051" fg:w="4"/><text x="94.1949%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (4 samples, 0.01%)</title><rect x="93.9449%" y="789" width="0.0134%" height="15" fill="rgb(231,185,47)" fg:x="28051" fg:w="4"/><text x="94.1949%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.01%)</title><rect x="93.9482%" y="773" width="0.0100%" height="15" fill="rgb(233,154,1)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="783.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (3 samples, 0.01%)</title><rect x="93.9482%" y="757" width="0.0100%" height="15" fill="rgb(225,15,46)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (3 samples, 0.01%)</title><rect x="93.9482%" y="741" width="0.0100%" height="15" fill="rgb(211,135,41)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="751.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (3 samples, 0.01%)</title><rect x="93.9482%" y="725" width="0.0100%" height="15" fill="rgb(208,54,0)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="735.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (3 samples, 0.01%)</title><rect x="93.9482%" y="709" width="0.0100%" height="15" fill="rgb(244,136,14)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3 samples, 0.01%)</title><rect x="93.9482%" y="693" width="0.0100%" height="15" fill="rgb(241,56,14)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="703.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (3 samples, 0.01%)</title><rect x="93.9482%" y="677" width="0.0100%" height="15" fill="rgb(205,80,24)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="687.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.01%)</title><rect x="93.9482%" y="661" width="0.0100%" height="15" fill="rgb(220,57,4)" fg:x="28052" fg:w="3"/><text x="94.1982%" y="671.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.02%)</title><rect x="93.9583%" y="533" width="0.0201%" height="15" fill="rgb(226,193,50)" fg:x="28055" fg:w="6"/><text x="94.2083%" y="543.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="93.9650%" y="517" width="0.0134%" height="15" fill="rgb(231,168,22)" fg:x="28057" fg:w="4"/><text x="94.2150%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="93.9583%" y="549" width="0.0234%" height="15" fill="rgb(254,215,14)" fg:x="28055" fg:w="7"/><text x="94.2083%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.05%)</title><rect x="93.9415%" y="837" width="0.0469%" height="15" fill="rgb(211,115,16)" fg:x="28050" fg:w="14"/><text x="94.1915%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (14 samples, 0.05%)</title><rect x="93.9415%" y="821" width="0.0469%" height="15" fill="rgb(236,210,16)" fg:x="28050" fg:w="14"/><text x="94.1915%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="93.9583%" y="805" width="0.0301%" height="15" fill="rgb(221,94,12)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="93.9583%" y="789" width="0.0301%" height="15" fill="rgb(235,218,49)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="93.9583%" y="773" width="0.0301%" height="15" fill="rgb(217,114,14)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (9 samples, 0.03%)</title><rect x="93.9583%" y="757" width="0.0301%" height="15" fill="rgb(216,145,22)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="93.9583%" y="741" width="0.0301%" height="15" fill="rgb(217,112,39)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.03%)</title><rect x="93.9583%" y="725" width="0.0301%" height="15" fill="rgb(225,85,32)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 0.03%)</title><rect x="93.9583%" y="709" width="0.0301%" height="15" fill="rgb(245,209,47)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="719.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (9 samples, 0.03%)</title><rect x="93.9583%" y="693" width="0.0301%" height="15" fill="rgb(218,220,15)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="93.9583%" y="677" width="0.0301%" height="15" fill="rgb(222,202,31)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="93.9583%" y="661" width="0.0301%" height="15" fill="rgb(243,203,4)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="93.9583%" y="645" width="0.0301%" height="15" fill="rgb(237,92,17)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="93.9583%" y="629" width="0.0301%" height="15" fill="rgb(231,119,7)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="93.9583%" y="613" width="0.0301%" height="15" fill="rgb(237,82,41)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.03%)</title><rect x="93.9583%" y="597" width="0.0301%" height="15" fill="rgb(226,81,48)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.03%)</title><rect x="93.9583%" y="581" width="0.0301%" height="15" fill="rgb(234,70,51)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.03%)</title><rect x="93.9583%" y="565" width="0.0301%" height="15" fill="rgb(251,86,4)" fg:x="28055" fg:w="9"/><text x="94.2083%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="93.9951%" y="773" width="0.0100%" height="15" fill="rgb(244,144,28)" fg:x="28066" fg:w="3"/><text x="94.2451%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (10 samples, 0.03%)</title><rect x="93.9884%" y="821" width="0.0335%" height="15" fill="rgb(232,161,39)" fg:x="28064" fg:w="10"/><text x="94.2384%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.03%)</title><rect x="93.9951%" y="805" width="0.0268%" height="15" fill="rgb(247,34,51)" fg:x="28066" fg:w="8"/><text x="94.2451%" y="815.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (8 samples, 0.03%)</title><rect x="93.9951%" y="789" width="0.0268%" height="15" fill="rgb(225,132,2)" fg:x="28066" fg:w="8"/><text x="94.2451%" y="799.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (5 samples, 0.02%)</title><rect x="94.0052%" y="773" width="0.0167%" height="15" fill="rgb(209,159,44)" fg:x="28069" fg:w="5"/><text x="94.2552%" y="783.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (5 samples, 0.02%)</title><rect x="94.0052%" y="757" width="0.0167%" height="15" fill="rgb(251,214,1)" fg:x="28069" fg:w="5"/><text x="94.2552%" y="767.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (5 samples, 0.02%)</title><rect x="94.0052%" y="741" width="0.0167%" height="15" fill="rgb(247,84,47)" fg:x="28069" fg:w="5"/><text x="94.2552%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.01%)</title><rect x="94.0085%" y="725" width="0.0134%" height="15" fill="rgb(240,111,43)" fg:x="28070" fg:w="4"/><text x="94.2585%" y="735.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.01%)</title><rect x="94.0085%" y="709" width="0.0134%" height="15" fill="rgb(215,214,35)" fg:x="28070" fg:w="4"/><text x="94.2585%" y="719.50"></text></g><g><title>core::slice::memchr::memchr (4 samples, 0.01%)</title><rect x="94.0085%" y="693" width="0.0134%" height="15" fill="rgb(248,207,23)" fg:x="28070" fg:w="4"/><text x="94.2585%" y="703.50"></text></g><g><title>core::slice::memchr::memchr_naive (3 samples, 0.01%)</title><rect x="94.0119%" y="677" width="0.0100%" height="15" fill="rgb(214,186,4)" fg:x="28071" fg:w="3"/><text x="94.2619%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="94.0554%" y="533" width="0.0100%" height="15" fill="rgb(220,133,22)" fg:x="28084" fg:w="3"/><text x="94.3054%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.02%)</title><rect x="94.0453%" y="677" width="0.0234%" height="15" fill="rgb(239,134,19)" fg:x="28081" fg:w="7"/><text x="94.2953%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="94.0453%" y="661" width="0.0234%" height="15" fill="rgb(250,140,9)" fg:x="28081" fg:w="7"/><text x="94.2953%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="94.0520%" y="645" width="0.0167%" height="15" fill="rgb(225,59,14)" fg:x="28083" fg:w="5"/><text x="94.3020%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.02%)</title><rect x="94.0520%" y="629" width="0.0167%" height="15" fill="rgb(214,152,51)" fg:x="28083" fg:w="5"/><text x="94.3020%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.02%)</title><rect x="94.0520%" y="613" width="0.0167%" height="15" fill="rgb(251,227,43)" fg:x="28083" fg:w="5"/><text x="94.3020%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.01%)</title><rect x="94.0554%" y="597" width="0.0134%" height="15" fill="rgb(241,96,17)" fg:x="28084" fg:w="4"/><text x="94.3054%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.01%)</title><rect x="94.0554%" y="581" width="0.0134%" height="15" fill="rgb(234,198,43)" fg:x="28084" fg:w="4"/><text x="94.3054%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.01%)</title><rect x="94.0554%" y="565" width="0.0134%" height="15" fill="rgb(220,108,29)" fg:x="28084" fg:w="4"/><text x="94.3054%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.01%)</title><rect x="94.0554%" y="549" width="0.0134%" height="15" fill="rgb(226,163,33)" fg:x="28084" fg:w="4"/><text x="94.3054%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.01%)</title><rect x="94.0889%" y="629" width="0.0134%" height="15" fill="rgb(205,194,45)" fg:x="28094" fg:w="4"/><text x="94.3389%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (21 samples, 0.07%)</title><rect x="94.0420%" y="725" width="0.0703%" height="15" fill="rgb(206,143,44)" fg:x="28080" fg:w="21"/><text x="94.2920%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (20 samples, 0.07%)</title><rect x="94.0453%" y="709" width="0.0670%" height="15" fill="rgb(236,136,36)" fg:x="28081" fg:w="20"/><text x="94.2953%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (20 samples, 0.07%)</title><rect x="94.0453%" y="693" width="0.0670%" height="15" fill="rgb(249,172,42)" fg:x="28081" fg:w="20"/><text x="94.2953%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.04%)</title><rect x="94.0688%" y="677" width="0.0435%" height="15" fill="rgb(216,139,23)" fg:x="28088" fg:w="13"/><text x="94.3188%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.04%)</title><rect x="94.0721%" y="661" width="0.0402%" height="15" fill="rgb(207,166,20)" fg:x="28089" fg:w="12"/><text x="94.3221%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (12 samples, 0.04%)</title><rect x="94.0721%" y="645" width="0.0402%" height="15" fill="rgb(210,209,22)" fg:x="28089" fg:w="12"/><text x="94.3221%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.01%)</title><rect x="94.1023%" y="629" width="0.0100%" height="15" fill="rgb(232,118,20)" fg:x="28098" fg:w="3"/><text x="94.3523%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="94.1023%" y="613" width="0.0100%" height="15" fill="rgb(238,113,42)" fg:x="28098" fg:w="3"/><text x="94.3523%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="94.1190%" y="661" width="0.0134%" height="15" fill="rgb(231,42,5)" fg:x="28103" fg:w="4"/><text x="94.3690%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="94.1190%" y="645" width="0.0134%" height="15" fill="rgb(243,166,24)" fg:x="28103" fg:w="4"/><text x="94.3690%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.01%)</title><rect x="94.1190%" y="629" width="0.0134%" height="15" fill="rgb(237,226,12)" fg:x="28103" fg:w="4"/><text x="94.3690%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.02%)</title><rect x="94.1324%" y="661" width="0.0167%" height="15" fill="rgb(229,133,24)" fg:x="28107" fg:w="5"/><text x="94.3824%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.01%)</title><rect x="94.1391%" y="645" width="0.0100%" height="15" fill="rgb(238,33,43)" fg:x="28109" fg:w="3"/><text x="94.3891%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.01%)</title><rect x="94.1391%" y="629" width="0.0100%" height="15" fill="rgb(227,59,38)" fg:x="28109" fg:w="3"/><text x="94.3891%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.04%)</title><rect x="94.1190%" y="693" width="0.0402%" height="15" fill="rgb(230,97,0)" fg:x="28103" fg:w="12"/><text x="94.3690%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.04%)</title><rect x="94.1190%" y="677" width="0.0402%" height="15" fill="rgb(250,173,50)" fg:x="28103" fg:w="12"/><text x="94.3690%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="94.1492%" y="661" width="0.0100%" height="15" fill="rgb(240,15,50)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.01%)</title><rect x="94.1492%" y="645" width="0.0100%" height="15" fill="rgb(221,93,22)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.01%)</title><rect x="94.1492%" y="629" width="0.0100%" height="15" fill="rgb(245,180,53)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.01%)</title><rect x="94.1492%" y="613" width="0.0100%" height="15" fill="rgb(231,88,51)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.01%)</title><rect x="94.1492%" y="597" width="0.0100%" height="15" fill="rgb(240,58,21)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.01%)</title><rect x="94.1492%" y="581" width="0.0100%" height="15" fill="rgb(237,21,10)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.01%)</title><rect x="94.1492%" y="565" width="0.0100%" height="15" fill="rgb(218,43,11)" fg:x="28112" fg:w="3"/><text x="94.3992%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="94.2028%" y="549" width="0.0201%" height="15" fill="rgb(218,221,29)" fg:x="28128" fg:w="6"/><text x="94.4528%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="94.2028%" y="533" width="0.0201%" height="15" fill="rgb(214,118,42)" fg:x="28128" fg:w="6"/><text x="94.4528%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.02%)</title><rect x="94.2028%" y="517" width="0.0201%" height="15" fill="rgb(251,200,26)" fg:x="28128" fg:w="6"/><text x="94.4528%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.01%)</title><rect x="94.2095%" y="501" width="0.0134%" height="15" fill="rgb(237,101,39)" fg:x="28130" fg:w="4"/><text x="94.4595%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (9 samples, 0.03%)</title><rect x="94.2028%" y="613" width="0.0301%" height="15" fill="rgb(251,117,11)" fg:x="28128" fg:w="9"/><text x="94.4528%" y="623.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (9 samples, 0.03%)</title><rect x="94.2028%" y="597" width="0.0301%" height="15" fill="rgb(216,223,23)" fg:x="28128" fg:w="9"/><text x="94.4528%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.03%)</title><rect x="94.2028%" y="581" width="0.0301%" height="15" fill="rgb(251,54,12)" fg:x="28128" fg:w="9"/><text x="94.4528%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.03%)</title><rect x="94.2028%" y="565" width="0.0301%" height="15" fill="rgb(254,176,54)" fg:x="28128" fg:w="9"/><text x="94.4528%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (3 samples, 0.01%)</title><rect x="94.2329%" y="613" width="0.0100%" height="15" fill="rgb(210,32,8)" fg:x="28137" fg:w="3"/><text x="94.4829%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 0.01%)</title><rect x="94.2329%" y="597" width="0.0100%" height="15" fill="rgb(235,52,38)" fg:x="28137" fg:w="3"/><text x="94.4829%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (3 samples, 0.01%)</title><rect x="94.2597%" y="581" width="0.0100%" height="15" fill="rgb(231,4,44)" fg:x="28145" fg:w="3"/><text x="94.5097%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (33 samples, 0.11%)</title><rect x="94.1626%" y="677" width="0.1105%" height="15" fill="rgb(249,2,32)" fg:x="28116" fg:w="33"/><text x="94.4126%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.11%)</title><rect x="94.1659%" y="661" width="0.1072%" height="15" fill="rgb(224,65,26)" fg:x="28117" fg:w="32"/><text x="94.4159%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (32 samples, 0.11%)</title><rect x="94.1659%" y="645" width="0.1072%" height="15" fill="rgb(250,73,40)" fg:x="28117" fg:w="32"/><text x="94.4159%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (29 samples, 0.10%)</title><rect x="94.1760%" y="629" width="0.0971%" height="15" fill="rgb(253,177,16)" fg:x="28120" fg:w="29"/><text x="94.4260%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (9 samples, 0.03%)</title><rect x="94.2429%" y="613" width="0.0301%" height="15" fill="rgb(217,32,34)" fg:x="28140" fg:w="9"/><text x="94.4929%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (7 samples, 0.02%)</title><rect x="94.2496%" y="597" width="0.0234%" height="15" fill="rgb(212,7,10)" fg:x="28142" fg:w="7"/><text x="94.4996%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="94.2764%" y="661" width="0.0134%" height="15" fill="rgb(245,89,8)" fg:x="28150" fg:w="4"/><text x="94.5264%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (44 samples, 0.15%)</title><rect x="94.1592%" y="693" width="0.1474%" height="15" fill="rgb(237,16,53)" fg:x="28115" fg:w="44"/><text x="94.4092%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (10 samples, 0.03%)</title><rect x="94.2731%" y="677" width="0.0335%" height="15" fill="rgb(250,204,30)" fg:x="28149" fg:w="10"/><text x="94.5231%" y="687.50"></text></g><g><title>&lt;itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.29%)</title><rect x="94.0219%" y="789" width="0.2914%" height="15" fill="rgb(208,77,27)" fg:x="28074" fg:w="87"/><text x="94.2719%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (87 samples, 0.29%)</title><rect x="94.0219%" y="773" width="0.2914%" height="15" fill="rgb(250,204,28)" fg:x="28074" fg:w="87"/><text x="94.2719%" y="783.50"></text></g><g><title>&lt;itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (85 samples, 0.28%)</title><rect x="94.0286%" y="757" width="0.2847%" height="15" fill="rgb(244,63,21)" fg:x="28076" fg:w="85"/><text x="94.2786%" y="767.50"></text></g><g><title>itertools::duplicates_impl::private::Meta&lt;Key,F&gt;::filter (85 samples, 0.28%)</title><rect x="94.0286%" y="741" width="0.2847%" height="15" fill="rgb(236,85,44)" fg:x="28076" fg:w="85"/><text x="94.2786%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (60 samples, 0.20%)</title><rect x="94.1123%" y="725" width="0.2009%" height="15" fill="rgb(215,98,4)" fg:x="28101" fg:w="60"/><text x="94.3623%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60 samples, 0.20%)</title><rect x="94.1123%" y="709" width="0.2009%" height="15" fill="rgb(235,38,11)" fg:x="28101" fg:w="60"/><text x="94.3623%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 0.33%)</title><rect x="93.9884%" y="837" width="0.3282%" height="15" fill="rgb(254,186,25)" fg:x="28064" fg:w="98"/><text x="94.2384%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (88 samples, 0.29%)</title><rect x="94.0219%" y="821" width="0.2947%" height="15" fill="rgb(225,55,31)" fg:x="28074" fg:w="88"/><text x="94.2719%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (88 samples, 0.29%)</title><rect x="94.0219%" y="805" width="0.2947%" height="15" fill="rgb(211,15,21)" fg:x="28074" fg:w="88"/><text x="94.2719%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="94.3300%" y="773" width="0.0100%" height="15" fill="rgb(215,187,41)" fg:x="28166" fg:w="3"/><text x="94.5800%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="94.3300%" y="757" width="0.0100%" height="15" fill="rgb(248,69,32)" fg:x="28166" fg:w="3"/><text x="94.5800%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.02%)</title><rect x="94.3267%" y="837" width="0.0167%" height="15" fill="rgb(252,102,52)" fg:x="28165" fg:w="5"/><text x="94.5767%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="94.3267%" y="821" width="0.0167%" height="15" fill="rgb(253,140,32)" fg:x="28165" fg:w="5"/><text x="94.5767%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.02%)</title><rect x="94.3267%" y="805" width="0.0167%" height="15" fill="rgb(216,56,42)" fg:x="28165" fg:w="5"/><text x="94.5767%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.02%)</title><rect x="94.3267%" y="789" width="0.0167%" height="15" fill="rgb(216,184,14)" fg:x="28165" fg:w="5"/><text x="94.5767%" y="799.50"></text></g><g><title>itertools::Itertools::collect_vec (123 samples, 0.41%)</title><rect x="93.9382%" y="917" width="0.4119%" height="15" fill="rgb(237,187,27)" fg:x="28049" fg:w="123"/><text x="94.1882%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (123 samples, 0.41%)</title><rect x="93.9382%" y="901" width="0.4119%" height="15" fill="rgb(219,65,3)" fg:x="28049" fg:w="123"/><text x="94.1882%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (123 samples, 0.41%)</title><rect x="93.9382%" y="885" width="0.4119%" height="15" fill="rgb(245,83,25)" fg:x="28049" fg:w="123"/><text x="94.1882%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (122 samples, 0.41%)</title><rect x="93.9415%" y="869" width="0.4086%" height="15" fill="rgb(214,205,45)" fg:x="28050" fg:w="122"/><text x="94.1915%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (122 samples, 0.41%)</title><rect x="93.9415%" y="853" width="0.4086%" height="15" fill="rgb(241,20,18)" fg:x="28050" fg:w="122"/><text x="94.1915%" y="863.50"></text></g><g><title>excel_merge::search_from_files::{{closure}} (23,828 samples, 79.80%)</title><rect x="14.5584%" y="933" width="79.8017%" height="15" fill="rgb(232,163,23)" fg:x="4347" fg:w="23828"/><text x="14.8084%" y="943.50">excel_merge::search_from_files::{{closure}}</text></g><g><title>itertools::Itertools::duplicates (3 samples, 0.01%)</title><rect x="94.3501%" y="917" width="0.0100%" height="15" fill="rgb(214,5,46)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="927.50"></text></g><g><title>itertools::duplicates_impl::duplicates (3 samples, 0.01%)</title><rect x="94.3501%" y="901" width="0.0100%" height="15" fill="rgb(229,78,17)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="911.50"></text></g><g><title>itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt;::new (3 samples, 0.01%)</title><rect x="94.3501%" y="885" width="0.0100%" height="15" fill="rgb(248,89,10)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (3 samples, 0.01%)</title><rect x="94.3501%" y="869" width="0.0100%" height="15" fill="rgb(248,54,15)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="879.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (3 samples, 0.01%)</title><rect x="94.3501%" y="853" width="0.0100%" height="15" fill="rgb(223,116,6)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (3 samples, 0.01%)</title><rect x="94.3501%" y="837" width="0.0100%" height="15" fill="rgb(205,125,38)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="847.50"></text></g><g><title>std::collections::hash::map::RandomState::new (3 samples, 0.01%)</title><rect x="94.3501%" y="821" width="0.0100%" height="15" fill="rgb(251,78,38)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="94.3501%" y="805" width="0.0100%" height="15" fill="rgb(253,78,28)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.01%)</title><rect x="94.3501%" y="789" width="0.0100%" height="15" fill="rgb(209,120,3)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="799.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (3 samples, 0.01%)</title><rect x="94.3501%" y="773" width="0.0100%" height="15" fill="rgb(238,229,9)" fg:x="28172" fg:w="3"/><text x="94.6001%" y="783.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}} (25,271 samples, 84.63%)</title><rect x="9.7291%" y="949" width="84.6344%" height="15" fill="rgb(253,159,18)" fg:x="2905" fg:w="25271"/><text x="9.9791%" y="959.50">excel_merge::FilesMap::search_from_multipart::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}::{{closure}} (4 samples, 0.01%)</title><rect x="94.3635%" y="949" width="0.0134%" height="15" fill="rgb(244,42,34)" fg:x="28176" fg:w="4"/><text x="94.6135%" y="959.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.01%)</title><rect x="94.3769%" y="645" width="0.0134%" height="15" fill="rgb(224,8,7)" fg:x="28180" fg:w="4"/><text x="94.6269%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (3 samples, 0.01%)</title><rect x="94.3803%" y="629" width="0.0100%" height="15" fill="rgb(210,201,45)" fg:x="28181" fg:w="3"/><text x="94.6303%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.01%)</title><rect x="94.3803%" y="613" width="0.0100%" height="15" fill="rgb(252,185,21)" fg:x="28181" fg:w="3"/><text x="94.6303%" y="623.50"></text></g><g><title>alloc::collections::btree::mem::replace (3 samples, 0.01%)</title><rect x="94.3803%" y="597" width="0.0100%" height="15" fill="rgb(223,131,1)" fg:x="28181" fg:w="3"/><text x="94.6303%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::{{closure}} (3 samples, 0.01%)</title><rect x="94.3803%" y="581" width="0.0100%" height="15" fill="rgb(245,141,16)" fg:x="28181" fg:w="3"/><text x="94.6303%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (3 samples, 0.01%)</title><rect x="94.3803%" y="565" width="0.0100%" height="15" fill="rgb(229,55,45)" fg:x="28181" fg:w="3"/><text x="94.6303%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::workbook::Workbook&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="917" width="0.0234%" height="15" fill="rgb(208,92,15)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_xlsxwriter::worksheet::Worksheet&gt;&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="901" width="0.0234%" height="15" fill="rgb(234,185,47)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="885" width="0.0234%" height="15" fill="rgb(253,104,50)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust_xlsxwriter::worksheet::Worksheet]&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="869" width="0.0234%" height="15" fill="rgb(205,70,7)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::Worksheet&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="853" width="0.0234%" height="15" fill="rgb(240,178,43)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="837" width="0.0234%" height="15" fill="rgb(214,112,2)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="847.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="821" width="0.0234%" height="15" fill="rgb(206,46,17)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="831.50"></text></g><g><title>core::mem::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="805" width="0.0234%" height="15" fill="rgb(225,220,16)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="789" width="0.0234%" height="15" fill="rgb(238,65,40)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="773" width="0.0234%" height="15" fill="rgb(230,151,21)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (7 samples, 0.02%)</title><rect x="94.3769%" y="757" width="0.0234%" height="15" fill="rgb(218,58,49)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="767.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (7 samples, 0.02%)</title><rect x="94.3769%" y="741" width="0.0234%" height="15" fill="rgb(219,179,14)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="725" width="0.0234%" height="15" fill="rgb(223,72,1)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="709" width="0.0234%" height="15" fill="rgb(238,126,10)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="719.50"></text></g><g><title>core::mem::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="693" width="0.0234%" height="15" fill="rgb(224,206,38)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (7 samples, 0.02%)</title><rect x="94.3769%" y="677" width="0.0234%" height="15" fill="rgb(212,201,54)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="94.3769%" y="661" width="0.0234%" height="15" fill="rgb(218,154,48)" fg:x="28180" fg:w="7"/><text x="94.6269%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3 samples, 0.01%)</title><rect x="94.3903%" y="645" width="0.0100%" height="15" fill="rgb(232,93,24)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3 samples, 0.01%)</title><rect x="94.3903%" y="629" width="0.0100%" height="15" fill="rgb(245,30,21)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::CellType&gt; (3 samples, 0.01%)</title><rect x="94.3903%" y="613" width="0.0100%" height="15" fill="rgb(242,148,29)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (3 samples, 0.01%)</title><rect x="94.3903%" y="597" width="0.0100%" height="15" fill="rgb(244,153,54)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="94.3903%" y="581" width="0.0100%" height="15" fill="rgb(252,87,22)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.01%)</title><rect x="94.3903%" y="565" width="0.0100%" height="15" fill="rgb(210,51,29)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="575.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="94.3903%" y="549" width="0.0100%" height="15" fill="rgb(242,136,47)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;str&gt;&gt; (3 samples, 0.01%)</title><rect x="94.3903%" y="533" width="0.0100%" height="15" fill="rgb(238,68,4)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="543.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="94.3903%" y="517" width="0.0100%" height="15" fill="rgb(242,161,30)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="94.3903%" y="501" width="0.0100%" height="15" fill="rgb(218,58,44)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="94.3903%" y="485" width="0.0100%" height="15" fill="rgb(252,125,32)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="495.50"></text></g><g><title>__free (3 samples, 0.01%)</title><rect x="94.3903%" y="469" width="0.0100%" height="15" fill="rgb(219,178,0)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="479.50"></text></g><g><title>_int_free (3 samples, 0.01%)</title><rect x="94.3903%" y="453" width="0.0100%" height="15" fill="rgb(213,152,7)" fg:x="28184" fg:w="3"/><text x="94.6403%" y="463.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="94.4003%" y="901" width="0.0201%" height="15" fill="rgb(249,109,34)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="94.4003%" y="885" width="0.0201%" height="15" fill="rgb(232,96,21)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="895.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="94.4003%" y="869" width="0.0201%" height="15" fill="rgb(228,27,39)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="879.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (6 samples, 0.02%)</title><rect x="94.4003%" y="853" width="0.0201%" height="15" fill="rgb(211,182,52)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="863.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (6 samples, 0.02%)</title><rect x="94.4003%" y="837" width="0.0201%" height="15" fill="rgb(234,178,38)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="847.50"></text></g><g><title>core::slice::memchr::memchr (6 samples, 0.02%)</title><rect x="94.4003%" y="821" width="0.0201%" height="15" fill="rgb(221,111,3)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="831.50"></text></g><g><title>core::slice::memchr::memchr_naive (6 samples, 0.02%)</title><rect x="94.4003%" y="805" width="0.0201%" height="15" fill="rgb(228,175,21)" fg:x="28187" fg:w="6"/><text x="94.6503%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="94.4405%" y="837" width="0.0435%" height="15" fill="rgb(228,174,43)" fg:x="28199" fg:w="13"/><text x="94.6905%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="94.4673%" y="821" width="0.0167%" height="15" fill="rgb(211,191,0)" fg:x="28207" fg:w="5"/><text x="94.7173%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (3 samples, 0.01%)</title><rect x="94.4874%" y="837" width="0.0100%" height="15" fill="rgb(253,117,3)" fg:x="28213" fg:w="3"/><text x="94.7374%" y="847.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::autofit (32 samples, 0.11%)</title><rect x="94.4003%" y="917" width="0.1072%" height="15" fill="rgb(241,127,19)" fg:x="28187" fg:w="32"/><text x="94.6503%" y="927.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (26 samples, 0.09%)</title><rect x="94.4204%" y="901" width="0.0871%" height="15" fill="rgb(218,103,12)" fg:x="28193" fg:w="26"/><text x="94.6704%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (26 samples, 0.09%)</title><rect x="94.4204%" y="885" width="0.0871%" height="15" fill="rgb(236,214,43)" fg:x="28193" fg:w="26"/><text x="94.6704%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (26 samples, 0.09%)</title><rect x="94.4204%" y="869" width="0.0871%" height="15" fill="rgb(244,144,19)" fg:x="28193" fg:w="26"/><text x="94.6704%" y="879.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (26 samples, 0.09%)</title><rect x="94.4204%" y="853" width="0.0871%" height="15" fill="rgb(246,188,10)" fg:x="28193" fg:w="26"/><text x="94.6704%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="94.5209%" y="757" width="0.0134%" height="15" fill="rgb(212,193,33)" fg:x="28223" fg:w="4"/><text x="94.7709%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.04%)</title><rect x="94.5109%" y="773" width="0.0402%" height="15" fill="rgb(241,51,29)" fg:x="28220" fg:w="12"/><text x="94.7609%" y="783.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.05%)</title><rect x="94.5075%" y="885" width="0.0469%" height="15" fill="rgb(211,58,19)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.05%)</title><rect x="94.5075%" y="869" width="0.0469%" height="15" fill="rgb(229,111,26)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.05%)</title><rect x="94.5075%" y="853" width="0.0469%" height="15" fill="rgb(213,115,40)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.05%)</title><rect x="94.5075%" y="837" width="0.0469%" height="15" fill="rgb(209,56,44)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.05%)</title><rect x="94.5075%" y="821" width="0.0469%" height="15" fill="rgb(230,108,32)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.05%)</title><rect x="94.5075%" y="805" width="0.0469%" height="15" fill="rgb(216,165,31)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.05%)</title><rect x="94.5075%" y="789" width="0.0469%" height="15" fill="rgb(218,122,21)" fg:x="28219" fg:w="14"/><text x="94.7575%" y="799.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::MultiCharEq&gt;::matches (4 samples, 0.01%)</title><rect x="94.5544%" y="821" width="0.0134%" height="15" fill="rgb(223,224,47)" fg:x="28233" fg:w="4"/><text x="94.8044%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (3 samples, 0.01%)</title><rect x="94.5578%" y="805" width="0.0100%" height="15" fill="rgb(238,102,44)" fg:x="28234" fg:w="3"/><text x="94.8078%" y="815.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (7 samples, 0.02%)</title><rect x="94.5544%" y="885" width="0.0234%" height="15" fill="rgb(236,46,40)" fg:x="28233" fg:w="7"/><text x="94.8044%" y="895.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (7 samples, 0.02%)</title><rect x="94.5544%" y="869" width="0.0234%" height="15" fill="rgb(247,202,50)" fg:x="28233" fg:w="7"/><text x="94.8044%" y="879.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (7 samples, 0.02%)</title><rect x="94.5544%" y="853" width="0.0234%" height="15" fill="rgb(209,99,20)" fg:x="28233" fg:w="7"/><text x="94.8044%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (7 samples, 0.02%)</title><rect x="94.5544%" y="837" width="0.0234%" height="15" fill="rgb(252,27,34)" fg:x="28233" fg:w="7"/><text x="94.8044%" y="847.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.01%)</title><rect x="94.5678%" y="821" width="0.0100%" height="15" fill="rgb(215,206,23)" fg:x="28237" fg:w="3"/><text x="94.8178%" y="831.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::MultiCharEq&gt;::matches (10 samples, 0.03%)</title><rect x="94.5778%" y="821" width="0.0335%" height="15" fill="rgb(212,135,36)" fg:x="28240" fg:w="10"/><text x="94.8278%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (10 samples, 0.03%)</title><rect x="94.5778%" y="805" width="0.0335%" height="15" fill="rgb(240,189,1)" fg:x="28240" fg:w="10"/><text x="94.8278%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="94.5979%" y="789" width="0.0134%" height="15" fill="rgb(242,56,20)" fg:x="28246" fg:w="4"/><text x="94.8479%" y="799.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (15 samples, 0.05%)</title><rect x="94.5778%" y="885" width="0.0502%" height="15" fill="rgb(247,132,33)" fg:x="28240" fg:w="15"/><text x="94.8278%" y="895.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (15 samples, 0.05%)</title><rect x="94.5778%" y="869" width="0.0502%" height="15" fill="rgb(208,149,11)" fg:x="28240" fg:w="15"/><text x="94.8278%" y="879.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (15 samples, 0.05%)</title><rect x="94.5778%" y="853" width="0.0502%" height="15" fill="rgb(211,33,11)" fg:x="28240" fg:w="15"/><text x="94.8278%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (15 samples, 0.05%)</title><rect x="94.5778%" y="837" width="0.0502%" height="15" fill="rgb(221,29,38)" fg:x="28240" fg:w="15"/><text x="94.8278%" y="847.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="94.6113%" y="821" width="0.0167%" height="15" fill="rgb(206,182,49)" fg:x="28250" fg:w="5"/><text x="94.8613%" y="831.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.10%)</title><rect x="94.6381%" y="741" width="0.0971%" height="15" fill="rgb(216,140,1)" fg:x="28258" fg:w="29"/><text x="94.8881%" y="751.50"></text></g><g><title>_int_malloc (29 samples, 0.10%)</title><rect x="94.6381%" y="725" width="0.0971%" height="15" fill="rgb(232,57,40)" fg:x="28258" fg:w="29"/><text x="94.8881%" y="735.50"></text></g><g><title>sysmalloc (25 samples, 0.08%)</title><rect x="94.6515%" y="709" width="0.0837%" height="15" fill="rgb(224,186,18)" fg:x="28262" fg:w="25"/><text x="94.9015%" y="719.50"></text></g><g><title>__GI___mprotect (20 samples, 0.07%)</title><rect x="94.6683%" y="693" width="0.0670%" height="15" fill="rgb(215,121,11)" fg:x="28267" fg:w="20"/><text x="94.9183%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.11%)</title><rect x="94.6314%" y="789" width="0.1072%" height="15" fill="rgb(245,147,10)" fg:x="28256" fg:w="32"/><text x="94.8814%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.10%)</title><rect x="94.6348%" y="773" width="0.1038%" height="15" fill="rgb(238,153,13)" fg:x="28257" fg:w="31"/><text x="94.8848%" y="783.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.10%)</title><rect x="94.6348%" y="757" width="0.1038%" height="15" fill="rgb(233,108,0)" fg:x="28257" fg:w="31"/><text x="94.8848%" y="767.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::new (34 samples, 0.11%)</title><rect x="94.6281%" y="885" width="0.1139%" height="15" fill="rgb(212,157,17)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="895.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::new (34 samples, 0.11%)</title><rect x="94.6281%" y="869" width="0.1139%" height="15" fill="rgb(225,213,38)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (34 samples, 0.11%)</title><rect x="94.6281%" y="853" width="0.1139%" height="15" fill="rgb(248,16,11)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.11%)</title><rect x="94.6281%" y="837" width="0.1139%" height="15" fill="rgb(241,33,4)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.11%)</title><rect x="94.6281%" y="821" width="0.1139%" height="15" fill="rgb(222,26,43)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.11%)</title><rect x="94.6281%" y="805" width="0.1139%" height="15" fill="rgb(243,29,36)" fg:x="28255" fg:w="34"/><text x="94.8781%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (4 samples, 0.01%)</title><rect x="94.7453%" y="853" width="0.0134%" height="15" fill="rgb(241,9,27)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.01%)</title><rect x="94.7453%" y="837" width="0.0134%" height="15" fill="rgb(205,117,26)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.01%)</title><rect x="94.7453%" y="821" width="0.0134%" height="15" fill="rgb(209,80,39)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.01%)</title><rect x="94.7453%" y="805" width="0.0134%" height="15" fill="rgb(239,155,6)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="94.7453%" y="789" width="0.0134%" height="15" fill="rgb(212,104,12)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="94.7453%" y="773" width="0.0134%" height="15" fill="rgb(234,204,3)" fg:x="28290" fg:w="4"/><text x="94.9953%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="94.7654%" y="837" width="0.0134%" height="15" fill="rgb(251,218,7)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(&amp;str,alloc::string::String)]&gt; (4 samples, 0.01%)</title><rect x="94.7654%" y="821" width="0.0134%" height="15" fill="rgb(221,81,32)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,alloc::string::String)&gt; (4 samples, 0.01%)</title><rect x="94.7654%" y="805" width="0.0134%" height="15" fill="rgb(214,152,26)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.01%)</title><rect x="94.7654%" y="789" width="0.0134%" height="15" fill="rgb(223,22,3)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="94.7654%" y="773" width="0.0134%" height="15" fill="rgb(207,174,7)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="94.7654%" y="757" width="0.0134%" height="15" fill="rgb(224,19,52)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="94.7654%" y="741" width="0.0134%" height="15" fill="rgb(228,24,14)" fg:x="28296" fg:w="4"/><text x="95.0154%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="94.7687%" y="725" width="0.0100%" height="15" fill="rgb(230,153,43)" fg:x="28297" fg:w="3"/><text x="95.0187%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="94.7687%" y="709" width="0.0100%" height="15" fill="rgb(231,106,12)" fg:x="28297" fg:w="3"/><text x="95.0187%" y="719.50"></text></g><g><title>__free (3 samples, 0.01%)</title><rect x="94.7687%" y="693" width="0.0100%" height="15" fill="rgb(215,92,2)" fg:x="28297" fg:w="3"/><text x="95.0187%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(&amp;str,alloc::string::String)&gt;&gt; (5 samples, 0.02%)</title><rect x="94.7654%" y="853" width="0.0167%" height="15" fill="rgb(249,143,25)" fg:x="28296" fg:w="5"/><text x="95.0154%" y="863.50"></text></g><g><title>alloc::fmt::format (4 samples, 0.01%)</title><rect x="94.8056%" y="821" width="0.0134%" height="15" fill="rgb(252,7,35)" fg:x="28308" fg:w="4"/><text x="95.0556%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (4 samples, 0.01%)</title><rect x="94.8056%" y="805" width="0.0134%" height="15" fill="rgb(216,69,40)" fg:x="28308" fg:w="4"/><text x="95.0556%" y="815.50"></text></g><g><title>alloc::fmt::format::{{closure}} (3 samples, 0.01%)</title><rect x="94.8089%" y="789" width="0.0100%" height="15" fill="rgb(240,36,33)" fg:x="28309" fg:w="3"/><text x="95.0589%" y="799.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.01%)</title><rect x="94.8089%" y="773" width="0.0100%" height="15" fill="rgb(231,128,14)" fg:x="28309" fg:w="3"/><text x="95.0589%" y="783.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="94.8089%" y="757" width="0.0100%" height="15" fill="rgb(245,143,14)" fg:x="28309" fg:w="3"/><text x="95.0589%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="94.8223%" y="629" width="0.0100%" height="15" fill="rgb(222,130,28)" fg:x="28313" fg:w="3"/><text x="95.0723%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="94.8223%" y="613" width="0.0100%" height="15" fill="rgb(212,10,48)" fg:x="28313" fg:w="3"/><text x="95.0723%" y="623.50"></text></g><g><title>rust_xlsxwriter::format::Color::attributes (16 samples, 0.05%)</title><rect x="94.7821%" y="853" width="0.0536%" height="15" fill="rgb(254,118,45)" fg:x="28301" fg:w="16"/><text x="95.0321%" y="863.50"></text></g><g><title>rust_xlsxwriter::format::Color::argb_hex_value (11 samples, 0.04%)</title><rect x="94.7989%" y="837" width="0.0368%" height="15" fill="rgb(228,6,45)" fg:x="28306" fg:w="11"/><text x="95.0489%" y="847.50"></text></g><g><title>rust_xlsxwriter::format::Color::rgb_hex_value (4 samples, 0.01%)</title><rect x="94.8223%" y="821" width="0.0134%" height="15" fill="rgb(241,18,35)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="831.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (4 samples, 0.01%)</title><rect x="94.8223%" y="805" width="0.0134%" height="15" fill="rgb(227,214,53)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.01%)</title><rect x="94.8223%" y="789" width="0.0134%" height="15" fill="rgb(224,107,51)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.01%)</title><rect x="94.8223%" y="773" width="0.0134%" height="15" fill="rgb(248,60,28)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.01%)</title><rect x="94.8223%" y="757" width="0.0134%" height="15" fill="rgb(249,101,23)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.01%)</title><rect x="94.8223%" y="741" width="0.0134%" height="15" fill="rgb(228,51,19)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.01%)</title><rect x="94.8223%" y="725" width="0.0134%" height="15" fill="rgb(213,20,6)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.01%)</title><rect x="94.8223%" y="709" width="0.0134%" height="15" fill="rgb(212,124,10)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.01%)</title><rect x="94.8223%" y="693" width="0.0134%" height="15" fill="rgb(248,3,40)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="94.8223%" y="677" width="0.0134%" height="15" fill="rgb(223,178,23)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="94.8223%" y="661" width="0.0134%" height="15" fill="rgb(240,132,45)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.01%)</title><rect x="94.8223%" y="645" width="0.0134%" height="15" fill="rgb(245,164,36)" fg:x="28313" fg:w="4"/><text x="95.0723%" y="655.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="94.8391%" y="789" width="0.0201%" height="15" fill="rgb(231,188,53)" fg:x="28318" fg:w="6"/><text x="95.0891%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="94.8424%" y="773" width="0.0167%" height="15" fill="rgb(237,198,39)" fg:x="28319" fg:w="5"/><text x="95.0924%" y="783.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.01%)</title><rect x="94.8458%" y="757" width="0.0134%" height="15" fill="rgb(223,120,35)" fg:x="28320" fg:w="4"/><text x="95.0958%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="94.8491%" y="741" width="0.0100%" height="15" fill="rgb(253,107,49)" fg:x="28321" fg:w="3"/><text x="95.0991%" y="751.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (8 samples, 0.03%)</title><rect x="94.8357%" y="821" width="0.0268%" height="15" fill="rgb(216,44,31)" fg:x="28317" fg:w="8"/><text x="95.0857%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (8 samples, 0.03%)</title><rect x="94.8357%" y="805" width="0.0268%" height="15" fill="rgb(253,87,21)" fg:x="28317" fg:w="8"/><text x="95.0857%" y="815.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (12 samples, 0.04%)</title><rect x="94.8357%" y="837" width="0.0402%" height="15" fill="rgb(226,18,2)" fg:x="28317" fg:w="12"/><text x="95.0857%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.01%)</title><rect x="94.8625%" y="821" width="0.0134%" height="15" fill="rgb(216,8,46)" fg:x="28325" fg:w="4"/><text x="95.1125%" y="831.50"></text></g><g><title>core::fmt::write (4 samples, 0.01%)</title><rect x="94.8625%" y="805" width="0.0134%" height="15" fill="rgb(226,140,39)" fg:x="28325" fg:w="4"/><text x="95.1125%" y="815.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="94.8759%" y="837" width="0.0134%" height="15" fill="rgb(221,194,54)" fg:x="28329" fg:w="4"/><text x="95.1259%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_color (47 samples, 0.16%)</title><rect x="94.7420%" y="869" width="0.1574%" height="15" fill="rgb(213,92,11)" fg:x="28289" fg:w="47"/><text x="94.9920%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (19 samples, 0.06%)</title><rect x="94.8357%" y="853" width="0.0636%" height="15" fill="rgb(229,162,46)" fg:x="28317" fg:w="19"/><text x="95.0857%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.01%)</title><rect x="94.8893%" y="837" width="0.0100%" height="15" fill="rgb(214,111,36)" fg:x="28333" fg:w="3"/><text x="95.1393%" y="847.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="94.8893%" y="821" width="0.0100%" height="15" fill="rgb(207,6,21)" fg:x="28333" fg:w="3"/><text x="95.1393%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="94.8893%" y="805" width="0.0100%" height="15" fill="rgb(213,127,38)" fg:x="28333" fg:w="3"/><text x="95.1393%" y="815.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="94.8893%" y="789" width="0.0100%" height="15" fill="rgb(238,118,32)" fg:x="28333" fg:w="3"/><text x="95.1393%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="94.8893%" y="773" width="0.0100%" height="15" fill="rgb(240,139,39)" fg:x="28333" fg:w="3"/><text x="95.1393%" y="783.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (3 samples, 0.01%)</title><rect x="94.8994%" y="853" width="0.0100%" height="15" fill="rgb(235,10,37)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="863.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.01%)</title><rect x="94.8994%" y="837" width="0.0100%" height="15" fill="rgb(249,171,38)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.01%)</title><rect x="94.8994%" y="821" width="0.0100%" height="15" fill="rgb(242,144,32)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="94.8994%" y="805" width="0.0100%" height="15" fill="rgb(217,117,21)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="94.8994%" y="789" width="0.0100%" height="15" fill="rgb(249,87,1)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.01%)</title><rect x="94.8994%" y="773" width="0.0100%" height="15" fill="rgb(248,196,48)" fg:x="28336" fg:w="3"/><text x="95.1494%" y="783.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="94.9094%" y="789" width="0.0134%" height="15" fill="rgb(251,206,33)" fg:x="28339" fg:w="4"/><text x="95.1594%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="94.9094%" y="773" width="0.0134%" height="15" fill="rgb(232,141,28)" fg:x="28339" fg:w="4"/><text x="95.1594%" y="783.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.01%)</title><rect x="94.9128%" y="757" width="0.0100%" height="15" fill="rgb(209,167,14)" fg:x="28340" fg:w="3"/><text x="95.1628%" y="767.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (6 samples, 0.02%)</title><rect x="94.9094%" y="821" width="0.0201%" height="15" fill="rgb(225,11,50)" fg:x="28339" fg:w="6"/><text x="95.1594%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (6 samples, 0.02%)</title><rect x="94.9094%" y="805" width="0.0201%" height="15" fill="rgb(209,50,20)" fg:x="28339" fg:w="6"/><text x="95.1594%" y="815.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.01%)</title><rect x="94.9362%" y="789" width="0.0100%" height="15" fill="rgb(212,17,46)" fg:x="28347" fg:w="3"/><text x="95.1862%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (4 samples, 0.01%)</title><rect x="94.9496%" y="757" width="0.0134%" height="15" fill="rgb(216,101,39)" fg:x="28351" fg:w="4"/><text x="95.1996%" y="767.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.01%)</title><rect x="94.9496%" y="741" width="0.0134%" height="15" fill="rgb(212,228,48)" fg:x="28351" fg:w="4"/><text x="95.1996%" y="751.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (17 samples, 0.06%)</title><rect x="94.9094%" y="837" width="0.0569%" height="15" fill="rgb(250,6,50)" fg:x="28339" fg:w="17"/><text x="95.1594%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (11 samples, 0.04%)</title><rect x="94.9295%" y="821" width="0.0368%" height="15" fill="rgb(250,160,48)" fg:x="28345" fg:w="11"/><text x="95.1795%" y="831.50"></text></g><g><title>core::fmt::write (10 samples, 0.03%)</title><rect x="94.9329%" y="805" width="0.0335%" height="15" fill="rgb(244,216,33)" fg:x="28346" fg:w="10"/><text x="95.1829%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.02%)</title><rect x="94.9462%" y="789" width="0.0201%" height="15" fill="rgb(207,157,5)" fg:x="28350" fg:w="6"/><text x="95.1962%" y="799.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="94.9496%" y="773" width="0.0167%" height="15" fill="rgb(228,199,8)" fg:x="28351" fg:w="5"/><text x="95.1996%" y="783.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="94.9764%" y="757" width="0.0100%" height="15" fill="rgb(227,80,20)" fg:x="28359" fg:w="3"/><text x="95.2264%" y="767.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="94.9764%" y="741" width="0.0100%" height="15" fill="rgb(222,9,33)" fg:x="28359" fg:w="3"/><text x="95.2264%" y="751.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.02%)</title><rect x="94.9764%" y="805" width="0.0167%" height="15" fill="rgb(239,44,28)" fg:x="28359" fg:w="5"/><text x="95.2264%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="94.9764%" y="789" width="0.0167%" height="15" fill="rgb(249,187,43)" fg:x="28359" fg:w="5"/><text x="95.2264%" y="799.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="94.9764%" y="773" width="0.0167%" height="15" fill="rgb(216,141,28)" fg:x="28359" fg:w="5"/><text x="95.2264%" y="783.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_family (32 samples, 0.11%)</title><rect x="94.8994%" y="869" width="0.1072%" height="15" fill="rgb(230,154,53)" fg:x="28336" fg:w="32"/><text x="95.1494%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (29 samples, 0.10%)</title><rect x="94.9094%" y="853" width="0.0971%" height="15" fill="rgb(227,82,4)" fg:x="28339" fg:w="29"/><text x="95.1594%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (10 samples, 0.03%)</title><rect x="94.9730%" y="837" width="0.0335%" height="15" fill="rgb(220,107,16)" fg:x="28358" fg:w="10"/><text x="95.2230%" y="847.50"></text></g><g><title>core::fmt::write (10 samples, 0.03%)</title><rect x="94.9730%" y="821" width="0.0335%" height="15" fill="rgb(207,187,2)" fg:x="28358" fg:w="10"/><text x="95.2230%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="94.9931%" y="805" width="0.0134%" height="15" fill="rgb(210,162,52)" fg:x="28364" fg:w="4"/><text x="95.2431%" y="815.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="94.9931%" y="789" width="0.0134%" height="15" fill="rgb(217,216,49)" fg:x="28364" fg:w="4"/><text x="95.2431%" y="799.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="95.0166%" y="789" width="0.0201%" height="15" fill="rgb(218,146,49)" fg:x="28371" fg:w="6"/><text x="95.2666%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="95.0199%" y="773" width="0.0167%" height="15" fill="rgb(216,55,40)" fg:x="28372" fg:w="5"/><text x="95.2699%" y="783.50"></text></g><g><title>core::str::validations::next_code_point (5 samples, 0.02%)</title><rect x="95.0199%" y="757" width="0.0167%" height="15" fill="rgb(208,196,21)" fg:x="28372" fg:w="5"/><text x="95.2699%" y="767.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (10 samples, 0.03%)</title><rect x="95.0099%" y="821" width="0.0335%" height="15" fill="rgb(242,117,42)" fg:x="28369" fg:w="10"/><text x="95.2599%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (10 samples, 0.03%)</title><rect x="95.0099%" y="805" width="0.0335%" height="15" fill="rgb(210,11,23)" fg:x="28369" fg:w="10"/><text x="95.2599%" y="815.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.01%)</title><rect x="95.0434%" y="789" width="0.0134%" height="15" fill="rgb(217,110,2)" fg:x="28379" fg:w="4"/><text x="95.2934%" y="799.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="95.0434%" y="773" width="0.0134%" height="15" fill="rgb(229,77,54)" fg:x="28379" fg:w="4"/><text x="95.2934%" y="783.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="95.0467%" y="757" width="0.0100%" height="15" fill="rgb(218,53,16)" fg:x="28380" fg:w="3"/><text x="95.2967%" y="767.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (7 samples, 0.02%)</title><rect x="95.0635%" y="757" width="0.0234%" height="15" fill="rgb(215,38,13)" fg:x="28385" fg:w="7"/><text x="95.3135%" y="767.50"></text></g><g><title>std::io::cursor::vec_write (7 samples, 0.02%)</title><rect x="95.0635%" y="741" width="0.0234%" height="15" fill="rgb(235,42,18)" fg:x="28385" fg:w="7"/><text x="95.3135%" y="751.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (25 samples, 0.08%)</title><rect x="95.0099%" y="837" width="0.0837%" height="15" fill="rgb(219,66,54)" fg:x="28369" fg:w="25"/><text x="95.2599%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (15 samples, 0.05%)</title><rect x="95.0434%" y="821" width="0.0502%" height="15" fill="rgb(222,205,4)" fg:x="28379" fg:w="15"/><text x="95.2934%" y="831.50"></text></g><g><title>core::fmt::write (15 samples, 0.05%)</title><rect x="95.0434%" y="805" width="0.0502%" height="15" fill="rgb(227,213,46)" fg:x="28379" fg:w="15"/><text x="95.2934%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 0.03%)</title><rect x="95.0601%" y="789" width="0.0335%" height="15" fill="rgb(250,145,42)" fg:x="28384" fg:w="10"/><text x="95.3101%" y="799.50"></text></g><g><title>std::io::Write::write_all (9 samples, 0.03%)</title><rect x="95.0635%" y="773" width="0.0301%" height="15" fill="rgb(219,15,2)" fg:x="28385" fg:w="9"/><text x="95.3135%" y="783.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="95.0936%" y="837" width="0.0134%" height="15" fill="rgb(231,181,52)" fg:x="28394" fg:w="4"/><text x="95.3436%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_name (34 samples, 0.11%)</title><rect x="95.0065%" y="869" width="0.1139%" height="15" fill="rgb(235,1,42)" fg:x="28368" fg:w="34"/><text x="95.2565%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (33 samples, 0.11%)</title><rect x="95.0099%" y="853" width="0.1105%" height="15" fill="rgb(249,88,27)" fg:x="28369" fg:w="33"/><text x="95.2599%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.01%)</title><rect x="95.1070%" y="837" width="0.0134%" height="15" fill="rgb(235,145,16)" fg:x="28398" fg:w="4"/><text x="95.3570%" y="847.50"></text></g><g><title>core::fmt::write (4 samples, 0.01%)</title><rect x="95.1070%" y="821" width="0.0134%" height="15" fill="rgb(237,114,19)" fg:x="28398" fg:w="4"/><text x="95.3570%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="95.1204%" y="805" width="0.0100%" height="15" fill="rgb(238,51,50)" fg:x="28402" fg:w="3"/><text x="95.3704%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.03%)</title><rect x="95.1204%" y="853" width="0.0268%" height="15" fill="rgb(205,194,25)" fg:x="28402" fg:w="8"/><text x="95.3704%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.03%)</title><rect x="95.1204%" y="837" width="0.0268%" height="15" fill="rgb(215,203,17)" fg:x="28402" fg:w="8"/><text x="95.3704%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.03%)</title><rect x="95.1204%" y="821" width="0.0268%" height="15" fill="rgb(233,112,49)" fg:x="28402" fg:w="8"/><text x="95.3704%" y="831.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="95.1338%" y="805" width="0.0134%" height="15" fill="rgb(241,130,26)" fg:x="28406" fg:w="4"/><text x="95.3838%" y="815.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="95.1338%" y="789" width="0.0134%" height="15" fill="rgb(252,223,19)" fg:x="28406" fg:w="4"/><text x="95.3838%" y="799.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="95.1639%" y="789" width="0.0201%" height="15" fill="rgb(211,95,25)" fg:x="28415" fg:w="6"/><text x="95.4139%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="95.1673%" y="773" width="0.0167%" height="15" fill="rgb(251,182,27)" fg:x="28416" fg:w="5"/><text x="95.4173%" y="783.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.01%)</title><rect x="95.1740%" y="757" width="0.0100%" height="15" fill="rgb(238,24,4)" fg:x="28418" fg:w="3"/><text x="95.4240%" y="767.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (8 samples, 0.03%)</title><rect x="95.1606%" y="821" width="0.0268%" height="15" fill="rgb(224,220,25)" fg:x="28414" fg:w="8"/><text x="95.4106%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (8 samples, 0.03%)</title><rect x="95.1606%" y="805" width="0.0268%" height="15" fill="rgb(239,133,26)" fg:x="28414" fg:w="8"/><text x="95.4106%" y="815.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (25 samples, 0.08%)</title><rect x="95.1539%" y="837" width="0.0837%" height="15" fill="rgb(211,94,48)" fg:x="28412" fg:w="25"/><text x="95.4039%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (15 samples, 0.05%)</title><rect x="95.1874%" y="821" width="0.0502%" height="15" fill="rgb(239,87,6)" fg:x="28422" fg:w="15"/><text x="95.4374%" y="831.50"></text></g><g><title>core::fmt::write (14 samples, 0.05%)</title><rect x="95.1907%" y="805" width="0.0469%" height="15" fill="rgb(227,62,0)" fg:x="28423" fg:w="14"/><text x="95.4407%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.03%)</title><rect x="95.2075%" y="789" width="0.0301%" height="15" fill="rgb(211,226,4)" fg:x="28428" fg:w="9"/><text x="95.4575%" y="799.50"></text></g><g><title>std::io::Write::write_all (9 samples, 0.03%)</title><rect x="95.2075%" y="773" width="0.0301%" height="15" fill="rgb(253,38,52)" fg:x="28428" fg:w="9"/><text x="95.4575%" y="783.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.02%)</title><rect x="95.2209%" y="757" width="0.0167%" height="15" fill="rgb(229,126,40)" fg:x="28432" fg:w="5"/><text x="95.4709%" y="767.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="95.2242%" y="741" width="0.0134%" height="15" fill="rgb(229,165,44)" fg:x="28433" fg:w="4"/><text x="95.4742%" y="751.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="95.2276%" y="725" width="0.0100%" height="15" fill="rgb(247,95,47)" fg:x="28434" fg:w="3"/><text x="95.4776%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="95.2276%" y="709" width="0.0100%" height="15" fill="rgb(216,140,30)" fg:x="28434" fg:w="3"/><text x="95.4776%" y="719.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_scheme (42 samples, 0.14%)</title><rect x="95.1204%" y="869" width="0.1407%" height="15" fill="rgb(246,214,8)" fg:x="28402" fg:w="42"/><text x="95.3704%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (32 samples, 0.11%)</title><rect x="95.1539%" y="853" width="0.1072%" height="15" fill="rgb(227,224,15)" fg:x="28412" fg:w="32"/><text x="95.4039%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (7 samples, 0.02%)</title><rect x="95.2376%" y="837" width="0.0234%" height="15" fill="rgb(233,175,4)" fg:x="28437" fg:w="7"/><text x="95.4876%" y="847.50"></text></g><g><title>core::fmt::write (6 samples, 0.02%)</title><rect x="95.2410%" y="821" width="0.0201%" height="15" fill="rgb(221,66,45)" fg:x="28438" fg:w="6"/><text x="95.4910%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="95.2477%" y="805" width="0.0134%" height="15" fill="rgb(221,178,18)" fg:x="28440" fg:w="4"/><text x="95.4977%" y="815.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="95.2477%" y="789" width="0.0134%" height="15" fill="rgb(213,81,29)" fg:x="28440" fg:w="4"/><text x="95.4977%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="95.2510%" y="773" width="0.0100%" height="15" fill="rgb(220,89,49)" fg:x="28441" fg:w="3"/><text x="95.5010%" y="783.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="95.2510%" y="757" width="0.0100%" height="15" fill="rgb(227,60,33)" fg:x="28441" fg:w="3"/><text x="95.5010%" y="767.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="95.2678%" y="789" width="0.0134%" height="15" fill="rgb(205,113,12)" fg:x="28446" fg:w="4"/><text x="95.5178%" y="799.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="95.2711%" y="773" width="0.0100%" height="15" fill="rgb(211,32,1)" fg:x="28447" fg:w="3"/><text x="95.5211%" y="783.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (7 samples, 0.02%)</title><rect x="95.2611%" y="821" width="0.0234%" height="15" fill="rgb(246,2,12)" fg:x="28444" fg:w="7"/><text x="95.5111%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (7 samples, 0.02%)</title><rect x="95.2611%" y="805" width="0.0234%" height="15" fill="rgb(243,37,27)" fg:x="28444" fg:w="7"/><text x="95.5111%" y="815.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.01%)</title><rect x="95.2879%" y="789" width="0.0134%" height="15" fill="rgb(248,211,31)" fg:x="28452" fg:w="4"/><text x="95.5379%" y="799.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="95.2879%" y="773" width="0.0134%" height="15" fill="rgb(242,146,47)" fg:x="28452" fg:w="4"/><text x="95.5379%" y="783.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="95.2879%" y="757" width="0.0134%" height="15" fill="rgb(206,70,20)" fg:x="28452" fg:w="4"/><text x="95.5379%" y="767.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="95.2912%" y="741" width="0.0100%" height="15" fill="rgb(215,10,51)" fg:x="28453" fg:w="3"/><text x="95.5412%" y="751.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="95.2912%" y="725" width="0.0100%" height="15" fill="rgb(243,178,53)" fg:x="28453" fg:w="3"/><text x="95.5412%" y="735.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (4 samples, 0.01%)</title><rect x="95.3079%" y="757" width="0.0134%" height="15" fill="rgb(233,221,20)" fg:x="28458" fg:w="4"/><text x="95.5579%" y="767.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.01%)</title><rect x="95.3079%" y="741" width="0.0134%" height="15" fill="rgb(218,95,35)" fg:x="28458" fg:w="4"/><text x="95.5579%" y="751.50"></text></g><g><title>&lt;(&amp;str,&amp;str) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (19 samples, 0.06%)</title><rect x="95.2611%" y="837" width="0.0636%" height="15" fill="rgb(229,13,5)" fg:x="28444" fg:w="19"/><text x="95.5111%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (12 samples, 0.04%)</title><rect x="95.2845%" y="821" width="0.0402%" height="15" fill="rgb(252,164,30)" fg:x="28451" fg:w="12"/><text x="95.5345%" y="831.50"></text></g><g><title>core::fmt::write (12 samples, 0.04%)</title><rect x="95.2845%" y="805" width="0.0402%" height="15" fill="rgb(232,68,36)" fg:x="28451" fg:w="12"/><text x="95.5345%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="95.3079%" y="789" width="0.0167%" height="15" fill="rgb(219,59,54)" fg:x="28458" fg:w="5"/><text x="95.5579%" y="799.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="95.3079%" y="773" width="0.0167%" height="15" fill="rgb(250,92,33)" fg:x="28458" fg:w="5"/><text x="95.5579%" y="783.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_size (24 samples, 0.08%)</title><rect x="95.2611%" y="869" width="0.0804%" height="15" fill="rgb(229,162,54)" fg:x="28444" fg:w="24"/><text x="95.5111%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (24 samples, 0.08%)</title><rect x="95.2611%" y="853" width="0.0804%" height="15" fill="rgb(244,114,52)" fg:x="28444" fg:w="24"/><text x="95.5111%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.01%)</title><rect x="95.3314%" y="837" width="0.0100%" height="15" fill="rgb(212,211,43)" fg:x="28465" fg:w="3"/><text x="95.5814%" y="847.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="95.3314%" y="821" width="0.0100%" height="15" fill="rgb(226,147,8)" fg:x="28465" fg:w="3"/><text x="95.5814%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="95.3314%" y="805" width="0.0100%" height="15" fill="rgb(226,23,13)" fg:x="28465" fg:w="3"/><text x="95.5814%" y="815.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="95.3314%" y="789" width="0.0100%" height="15" fill="rgb(240,63,4)" fg:x="28465" fg:w="3"/><text x="95.5814%" y="799.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (4 samples, 0.01%)</title><rect x="95.3414%" y="869" width="0.0134%" height="15" fill="rgb(221,1,32)" fg:x="28468" fg:w="4"/><text x="95.5914%" y="879.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.01%)</title><rect x="95.3414%" y="853" width="0.0134%" height="15" fill="rgb(242,117,10)" fg:x="28468" fg:w="4"/><text x="95.5914%" y="863.50"></text></g><g><title>core::fmt::write (4 samples, 0.01%)</title><rect x="95.3414%" y="837" width="0.0134%" height="15" fill="rgb(249,172,44)" fg:x="28468" fg:w="4"/><text x="95.5914%" y="847.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="95.3448%" y="821" width="0.0100%" height="15" fill="rgb(244,46,45)" fg:x="28469" fg:w="3"/><text x="95.5948%" y="831.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="95.3448%" y="805" width="0.0100%" height="15" fill="rgb(206,43,17)" fg:x="28469" fg:w="3"/><text x="95.5948%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="95.3448%" y="789" width="0.0100%" height="15" fill="rgb(239,218,39)" fg:x="28469" fg:w="3"/><text x="95.5948%" y="799.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="95.3448%" y="773" width="0.0100%" height="15" fill="rgb(208,169,54)" fg:x="28469" fg:w="3"/><text x="95.5948%" y="783.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font (187 samples, 0.63%)</title><rect x="94.7420%" y="885" width="0.6263%" height="15" fill="rgb(247,25,42)" fg:x="28289" fg:w="187"/><text x="94.9920%" y="895.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (4 samples, 0.01%)</title><rect x="95.3548%" y="869" width="0.0134%" height="15" fill="rgb(226,23,31)" fg:x="28472" fg:w="4"/><text x="95.6048%" y="879.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.01%)</title><rect x="95.3548%" y="853" width="0.0134%" height="15" fill="rgb(247,16,28)" fg:x="28472" fg:w="4"/><text x="95.6048%" y="863.50"></text></g><g><title>core::fmt::write (4 samples, 0.01%)</title><rect x="95.3548%" y="837" width="0.0134%" height="15" fill="rgb(231,147,38)" fg:x="28472" fg:w="4"/><text x="95.6048%" y="847.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="95.3582%" y="821" width="0.0100%" height="15" fill="rgb(253,81,48)" fg:x="28473" fg:w="3"/><text x="95.6082%" y="831.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="95.3582%" y="805" width="0.0100%" height="15" fill="rgb(249,222,43)" fg:x="28473" fg:w="3"/><text x="95.6082%" y="815.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="95.3816%" y="661" width="0.0100%" height="15" fill="rgb(221,3,27)" fg:x="28480" fg:w="3"/><text x="95.6316%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.03%)</title><rect x="95.3682%" y="693" width="0.0268%" height="15" fill="rgb(228,180,5)" fg:x="28476" fg:w="8"/><text x="95.6182%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="95.3682%" y="677" width="0.0268%" height="15" fill="rgb(227,131,42)" fg:x="28476" fg:w="8"/><text x="95.6182%" y="687.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::read_to_string (10 samples, 0.03%)</title><rect x="95.3682%" y="885" width="0.0335%" height="15" fill="rgb(212,3,39)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="895.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (10 samples, 0.03%)</title><rect x="95.3682%" y="869" width="0.0335%" height="15" fill="rgb(226,45,5)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (10 samples, 0.03%)</title><rect x="95.3682%" y="853" width="0.0335%" height="15" fill="rgb(215,167,45)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="863.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (10 samples, 0.03%)</title><rect x="95.3682%" y="837" width="0.0335%" height="15" fill="rgb(250,218,53)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (10 samples, 0.03%)</title><rect x="95.3682%" y="821" width="0.0335%" height="15" fill="rgb(207,140,0)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.03%)</title><rect x="95.3682%" y="805" width="0.0335%" height="15" fill="rgb(238,133,51)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.03%)</title><rect x="95.3682%" y="789" width="0.0335%" height="15" fill="rgb(218,203,53)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.03%)</title><rect x="95.3682%" y="773" width="0.0335%" height="15" fill="rgb(226,184,25)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.03%)</title><rect x="95.3682%" y="757" width="0.0335%" height="15" fill="rgb(231,121,21)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.03%)</title><rect x="95.3682%" y="741" width="0.0335%" height="15" fill="rgb(251,14,34)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.03%)</title><rect x="95.3682%" y="725" width="0.0335%" height="15" fill="rgb(249,193,11)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.03%)</title><rect x="95.3682%" y="709" width="0.0335%" height="15" fill="rgb(220,172,37)" fg:x="28476" fg:w="10"/><text x="95.6182%" y="719.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3 samples, 0.01%)</title><rect x="95.4017%" y="869" width="0.0100%" height="15" fill="rgb(231,229,43)" fg:x="28486" fg:w="3"/><text x="95.6517%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (4 samples, 0.01%)</title><rect x="95.4285%" y="821" width="0.0134%" height="15" fill="rgb(250,161,5)" fg:x="28494" fg:w="4"/><text x="95.6785%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (4 samples, 0.01%)</title><rect x="95.4285%" y="805" width="0.0134%" height="15" fill="rgb(218,225,18)" fg:x="28494" fg:w="4"/><text x="95.6785%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.01%)</title><rect x="95.4453%" y="805" width="0.0134%" height="15" fill="rgb(245,45,42)" fg:x="28499" fg:w="4"/><text x="95.6953%" y="815.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.01%)</title><rect x="95.4486%" y="789" width="0.0100%" height="15" fill="rgb(211,115,1)" fg:x="28500" fg:w="3"/><text x="95.6986%" y="799.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (3 samples, 0.01%)</title><rect x="95.4486%" y="773" width="0.0100%" height="15" fill="rgb(248,133,52)" fg:x="28500" fg:w="3"/><text x="95.6986%" y="783.50"></text></g><g><title>core::char::convert::from_u32_unchecked (3 samples, 0.01%)</title><rect x="95.4486%" y="757" width="0.0100%" height="15" fill="rgb(238,100,21)" fg:x="28500" fg:w="3"/><text x="95.6986%" y="767.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.07%)</title><rect x="95.4252%" y="837" width="0.0670%" height="15" fill="rgb(247,144,11)" fg:x="28493" fg:w="20"/><text x="95.6752%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.05%)</title><rect x="95.4419%" y="821" width="0.0502%" height="15" fill="rgb(206,164,16)" fg:x="28498" fg:w="15"/><text x="95.6919%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (10 samples, 0.03%)</title><rect x="95.4587%" y="805" width="0.0335%" height="15" fill="rgb(222,34,3)" fg:x="28503" fg:w="10"/><text x="95.7087%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="95.4721%" y="789" width="0.0201%" height="15" fill="rgb(248,82,4)" fg:x="28507" fg:w="6"/><text x="95.7221%" y="799.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_data (27 samples, 0.09%)</title><rect x="95.4118%" y="869" width="0.0904%" height="15" fill="rgb(228,81,46)" fg:x="28489" fg:w="27"/><text x="95.6618%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (27 samples, 0.09%)</title><rect x="95.4118%" y="853" width="0.0904%" height="15" fill="rgb(227,67,47)" fg:x="28489" fg:w="27"/><text x="95.6618%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 0.03%)</title><rect x="95.5089%" y="821" width="0.0335%" height="15" fill="rgb(215,93,53)" fg:x="28518" fg:w="10"/><text x="95.7589%" y="831.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.03%)</title><rect x="95.5156%" y="805" width="0.0268%" height="15" fill="rgb(248,194,39)" fg:x="28520" fg:w="8"/><text x="95.7656%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.02%)</title><rect x="95.5256%" y="789" width="0.0167%" height="15" fill="rgb(215,5,19)" fg:x="28523" fg:w="5"/><text x="95.7756%" y="799.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.01%)</title><rect x="95.5290%" y="773" width="0.0134%" height="15" fill="rgb(226,215,51)" fg:x="28524" fg:w="4"/><text x="95.7790%" y="783.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (11 samples, 0.04%)</title><rect x="95.5089%" y="837" width="0.0368%" height="15" fill="rgb(225,56,26)" fg:x="28518" fg:w="11"/><text x="95.7589%" y="847.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (4 samples, 0.01%)</title><rect x="95.5457%" y="837" width="0.0134%" height="15" fill="rgb(222,75,29)" fg:x="28529" fg:w="4"/><text x="95.7957%" y="847.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.01%)</title><rect x="95.5491%" y="821" width="0.0100%" height="15" fill="rgb(236,139,6)" fg:x="28530" fg:w="3"/><text x="95.7991%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="95.5491%" y="805" width="0.0100%" height="15" fill="rgb(223,137,36)" fg:x="28530" fg:w="3"/><text x="95.7991%" y="815.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="95.5491%" y="789" width="0.0100%" height="15" fill="rgb(226,99,2)" fg:x="28530" fg:w="3"/><text x="95.7991%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="95.5491%" y="773" width="0.0100%" height="15" fill="rgb(206,133,23)" fg:x="28530" fg:w="3"/><text x="95.7991%" y="783.50"></text></g><g><title>std::io::cursor::reserve_and_pad (4 samples, 0.01%)</title><rect x="95.5826%" y="773" width="0.0134%" height="15" fill="rgb(243,173,15)" fg:x="28540" fg:w="4"/><text x="95.8326%" y="783.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (13 samples, 0.04%)</title><rect x="95.5658%" y="805" width="0.0435%" height="15" fill="rgb(228,69,28)" fg:x="28535" fg:w="13"/><text x="95.8158%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (12 samples, 0.04%)</title><rect x="95.5692%" y="789" width="0.0402%" height="15" fill="rgb(212,51,22)" fg:x="28536" fg:w="12"/><text x="95.8192%" y="799.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (4 samples, 0.01%)</title><rect x="95.5960%" y="773" width="0.0134%" height="15" fill="rgb(227,113,0)" fg:x="28544" fg:w="4"/><text x="95.8460%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.01%)</title><rect x="95.5993%" y="757" width="0.0100%" height="15" fill="rgb(252,84,27)" fg:x="28545" fg:w="3"/><text x="95.8493%" y="767.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_data_element (66 samples, 0.22%)</title><rect x="95.4017%" y="885" width="0.2210%" height="15" fill="rgb(223,145,39)" fg:x="28486" fg:w="66"/><text x="95.6517%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (36 samples, 0.12%)</title><rect x="95.5022%" y="869" width="0.1206%" height="15" fill="rgb(239,219,30)" fg:x="28516" fg:w="36"/><text x="95.7522%" y="879.50"></text></g><g><title>core::fmt::write (35 samples, 0.12%)</title><rect x="95.5055%" y="853" width="0.1172%" height="15" fill="rgb(224,196,39)" fg:x="28517" fg:w="35"/><text x="95.7555%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (19 samples, 0.06%)</title><rect x="95.5591%" y="837" width="0.0636%" height="15" fill="rgb(205,35,43)" fg:x="28533" fg:w="19"/><text x="95.8091%" y="847.50"></text></g><g><title>std::io::Write::write_all (19 samples, 0.06%)</title><rect x="95.5591%" y="821" width="0.0636%" height="15" fill="rgb(228,201,21)" fg:x="28533" fg:w="19"/><text x="95.8091%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.01%)</title><rect x="95.6094%" y="805" width="0.0134%" height="15" fill="rgb(237,118,16)" fg:x="28548" fg:w="4"/><text x="95.8594%" y="815.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="95.6094%" y="789" width="0.0134%" height="15" fill="rgb(241,17,19)" fg:x="28548" fg:w="4"/><text x="95.8594%" y="799.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.01%)</title><rect x="95.6094%" y="773" width="0.0134%" height="15" fill="rgb(214,10,25)" fg:x="28548" fg:w="4"/><text x="95.8594%" y="783.50"></text></g><g><title>std::io::cursor::reserve_and_pad (3 samples, 0.01%)</title><rect x="95.6395%" y="773" width="0.0100%" height="15" fill="rgb(238,37,29)" fg:x="28557" fg:w="3"/><text x="95.8895%" y="783.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (9 samples, 0.03%)</title><rect x="95.6295%" y="805" width="0.0301%" height="15" fill="rgb(253,83,25)" fg:x="28554" fg:w="9"/><text x="95.8795%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (9 samples, 0.03%)</title><rect x="95.6295%" y="789" width="0.0301%" height="15" fill="rgb(234,192,12)" fg:x="28554" fg:w="9"/><text x="95.8795%" y="799.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (3 samples, 0.01%)</title><rect x="95.6496%" y="773" width="0.0100%" height="15" fill="rgb(241,216,45)" fg:x="28560" fg:w="3"/><text x="95.8996%" y="783.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (13 samples, 0.04%)</title><rect x="95.6228%" y="885" width="0.0435%" height="15" fill="rgb(242,22,33)" fg:x="28552" fg:w="13"/><text x="95.8728%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (13 samples, 0.04%)</title><rect x="95.6228%" y="869" width="0.0435%" height="15" fill="rgb(231,105,49)" fg:x="28552" fg:w="13"/><text x="95.8728%" y="879.50"></text></g><g><title>core::fmt::write (13 samples, 0.04%)</title><rect x="95.6228%" y="853" width="0.0435%" height="15" fill="rgb(218,204,15)" fg:x="28552" fg:w="13"/><text x="95.8728%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.04%)</title><rect x="95.6295%" y="837" width="0.0368%" height="15" fill="rgb(235,138,41)" fg:x="28554" fg:w="11"/><text x="95.8795%" y="847.50"></text></g><g><title>std::io::Write::write_all (11 samples, 0.04%)</title><rect x="95.6295%" y="821" width="0.0368%" height="15" fill="rgb(246,0,9)" fg:x="28554" fg:w="11"/><text x="95.8795%" y="831.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.02%)</title><rect x="95.6663%" y="837" width="0.0167%" height="15" fill="rgb(210,74,4)" fg:x="28565" fg:w="5"/><text x="95.9163%" y="847.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="95.6663%" y="821" width="0.0167%" height="15" fill="rgb(250,60,41)" fg:x="28565" fg:w="5"/><text x="95.9163%" y="831.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="95.6663%" y="805" width="0.0167%" height="15" fill="rgb(220,115,12)" fg:x="28565" fg:w="5"/><text x="95.9163%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (4 samples, 0.01%)</title><rect x="95.6696%" y="789" width="0.0134%" height="15" fill="rgb(237,100,13)" fg:x="28566" fg:w="4"/><text x="95.9196%" y="799.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.01%)</title><rect x="95.6696%" y="773" width="0.0134%" height="15" fill="rgb(213,55,26)" fg:x="28566" fg:w="4"/><text x="95.9196%" y="783.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.02%)</title><rect x="95.6864%" y="805" width="0.0167%" height="15" fill="rgb(216,17,4)" fg:x="28571" fg:w="5"/><text x="95.9364%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (5 samples, 0.02%)</title><rect x="95.6864%" y="789" width="0.0167%" height="15" fill="rgb(220,153,47)" fg:x="28571" fg:w="5"/><text x="95.9364%" y="799.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_rich_string (360 samples, 1.21%)</title><rect x="94.5075%" y="901" width="1.2057%" height="15" fill="rgb(215,131,9)" fg:x="28219" fg:w="360"/><text x="94.7575%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (14 samples, 0.05%)</title><rect x="95.6663%" y="885" width="0.0469%" height="15" fill="rgb(233,46,42)" fg:x="28565" fg:w="14"/><text x="95.9163%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (14 samples, 0.05%)</title><rect x="95.6663%" y="869" width="0.0469%" height="15" fill="rgb(226,86,7)" fg:x="28565" fg:w="14"/><text x="95.9163%" y="879.50"></text></g><g><title>core::fmt::write (14 samples, 0.05%)</title><rect x="95.6663%" y="853" width="0.0469%" height="15" fill="rgb(239,226,21)" fg:x="28565" fg:w="14"/><text x="95.9163%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.03%)</title><rect x="95.6830%" y="837" width="0.0301%" height="15" fill="rgb(244,137,22)" fg:x="28570" fg:w="9"/><text x="95.9330%" y="847.50"></text></g><g><title>std::io::Write::write_all (9 samples, 0.03%)</title><rect x="95.6830%" y="821" width="0.0301%" height="15" fill="rgb(211,139,35)" fg:x="28570" fg:w="9"/><text x="95.9330%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.01%)</title><rect x="95.7031%" y="805" width="0.0100%" height="15" fill="rgb(214,62,50)" fg:x="28576" fg:w="3"/><text x="95.9531%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (9 samples, 0.03%)</title><rect x="95.7132%" y="885" width="0.0301%" height="15" fill="rgb(212,113,44)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (9 samples, 0.03%)</title><rect x="95.7132%" y="869" width="0.0301%" height="15" fill="rgb(226,150,43)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (9 samples, 0.03%)</title><rect x="95.7132%" y="853" width="0.0301%" height="15" fill="rgb(250,71,37)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (9 samples, 0.03%)</title><rect x="95.7132%" y="837" width="0.0301%" height="15" fill="rgb(219,76,19)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (9 samples, 0.03%)</title><rect x="95.7132%" y="821" width="0.0301%" height="15" fill="rgb(250,39,11)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (9 samples, 0.03%)</title><rect x="95.7132%" y="805" width="0.0301%" height="15" fill="rgb(230,64,31)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::{{closure}} (9 samples, 0.03%)</title><rect x="95.7132%" y="789" width="0.0301%" height="15" fill="rgb(208,222,23)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.03%)</title><rect x="95.7132%" y="773" width="0.0301%" height="15" fill="rgb(227,125,18)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.03%)</title><rect x="95.7132%" y="757" width="0.0301%" height="15" fill="rgb(234,210,9)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="767.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.03%)</title><rect x="95.7132%" y="741" width="0.0301%" height="15" fill="rgb(217,127,24)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="751.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.03%)</title><rect x="95.7132%" y="725" width="0.0301%" height="15" fill="rgb(239,141,48)" fg:x="28579" fg:w="9"/><text x="95.9632%" y="735.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="95.7199%" y="709" width="0.0234%" height="15" fill="rgb(227,109,8)" fg:x="28581" fg:w="7"/><text x="95.9699%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (4 samples, 0.01%)</title><rect x="95.7467%" y="837" width="0.0134%" height="15" fill="rgb(235,184,23)" fg:x="28589" fg:w="4"/><text x="95.9967%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="95.8773%" y="789" width="0.0100%" height="15" fill="rgb(227,226,48)" fg:x="28628" fg:w="3"/><text x="96.1273%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.13%)</title><rect x="95.8137%" y="805" width="0.1306%" height="15" fill="rgb(206,150,11)" fg:x="28609" fg:w="39"/><text x="96.0637%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.06%)</title><rect x="95.8873%" y="789" width="0.0569%" height="15" fill="rgb(254,2,33)" fg:x="28631" fg:w="17"/><text x="96.1373%" y="799.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (5 samples, 0.02%)</title><rect x="95.9275%" y="773" width="0.0167%" height="15" fill="rgb(243,160,20)" fg:x="28643" fg:w="5"/><text x="96.1775%" y="783.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (4 samples, 0.01%)</title><rect x="95.9443%" y="805" width="0.0134%" height="15" fill="rgb(218,208,30)" fg:x="28648" fg:w="4"/><text x="96.1943%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (8 samples, 0.03%)</title><rect x="95.9577%" y="805" width="0.0268%" height="15" fill="rgb(224,120,49)" fg:x="28652" fg:w="8"/><text x="96.2077%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (3 samples, 0.01%)</title><rect x="95.9845%" y="805" width="0.0100%" height="15" fill="rgb(246,12,2)" fg:x="28660" fg:w="3"/><text x="96.2345%" y="815.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (3 samples, 0.01%)</title><rect x="95.9845%" y="789" width="0.0100%" height="15" fill="rgb(236,117,3)" fg:x="28660" fg:w="3"/><text x="96.2345%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="95.9945%" y="805" width="0.0100%" height="15" fill="rgb(216,128,52)" fg:x="28663" fg:w="3"/><text x="96.2445%" y="815.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="95.9945%" y="789" width="0.0100%" height="15" fill="rgb(246,145,19)" fg:x="28663" fg:w="3"/><text x="96.2445%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="95.9945%" y="773" width="0.0100%" height="15" fill="rgb(222,11,46)" fg:x="28663" fg:w="3"/><text x="96.2445%" y="783.50"></text></g><g><title>core::ptr::slice_from_raw_parts (3 samples, 0.01%)</title><rect x="95.9945%" y="757" width="0.0100%" height="15" fill="rgb(245,82,36)" fg:x="28663" fg:w="3"/><text x="96.2445%" y="767.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (3 samples, 0.01%)</title><rect x="95.9945%" y="741" width="0.0100%" height="15" fill="rgb(250,73,51)" fg:x="28663" fg:w="3"/><text x="96.2445%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (80 samples, 0.27%)</title><rect x="95.7433%" y="869" width="0.2679%" height="15" fill="rgb(221,189,23)" fg:x="28588" fg:w="80"/><text x="95.9933%" y="879.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (80 samples, 0.27%)</title><rect x="95.7433%" y="853" width="0.2679%" height="15" fill="rgb(210,33,7)" fg:x="28588" fg:w="80"/><text x="95.9933%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (73 samples, 0.24%)</title><rect x="95.7668%" y="837" width="0.2445%" height="15" fill="rgb(210,107,22)" fg:x="28595" fg:w="73"/><text x="96.0168%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (68 samples, 0.23%)</title><rect x="95.7835%" y="821" width="0.2277%" height="15" fill="rgb(222,116,37)" fg:x="28600" fg:w="68"/><text x="96.0335%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (5 samples, 0.02%)</title><rect x="96.0347%" y="821" width="0.0167%" height="15" fill="rgb(254,17,48)" fg:x="28675" fg:w="5"/><text x="96.2847%" y="831.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (3 samples, 0.01%)</title><rect x="96.0414%" y="805" width="0.0100%" height="15" fill="rgb(224,36,32)" fg:x="28677" fg:w="3"/><text x="96.2914%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="96.0715%" y="789" width="0.0435%" height="15" fill="rgb(232,90,46)" fg:x="28686" fg:w="13"/><text x="96.3215%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="96.0950%" y="773" width="0.0201%" height="15" fill="rgb(241,66,40)" fg:x="28693" fg:w="6"/><text x="96.3450%" y="783.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.01%)</title><rect x="96.1017%" y="757" width="0.0134%" height="15" fill="rgb(249,184,29)" fg:x="28695" fg:w="4"/><text x="96.3517%" y="767.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.01%)</title><rect x="96.1184%" y="789" width="0.0100%" height="15" fill="rgb(231,181,1)" fg:x="28700" fg:w="3"/><text x="96.3684%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (3 samples, 0.01%)</title><rect x="96.1285%" y="789" width="0.0100%" height="15" fill="rgb(224,94,2)" fg:x="28703" fg:w="3"/><text x="96.3785%" y="799.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (40 samples, 0.13%)</title><rect x="96.0113%" y="853" width="0.1340%" height="15" fill="rgb(229,170,15)" fg:x="28668" fg:w="40"/><text x="96.2613%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.12%)</title><rect x="96.0280%" y="837" width="0.1172%" height="15" fill="rgb(240,127,35)" fg:x="28673" fg:w="35"/><text x="96.2780%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (28 samples, 0.09%)</title><rect x="96.0514%" y="821" width="0.0938%" height="15" fill="rgb(248,196,34)" fg:x="28680" fg:w="28"/><text x="96.3014%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (27 samples, 0.09%)</title><rect x="96.0548%" y="805" width="0.0904%" height="15" fill="rgb(236,137,7)" fg:x="28681" fg:w="27"/><text x="96.3048%" y="815.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::{{closure}} (3 samples, 0.01%)</title><rect x="96.1720%" y="821" width="0.0100%" height="15" fill="rgb(235,127,16)" fg:x="28716" fg:w="3"/><text x="96.4220%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (5 samples, 0.02%)</title><rect x="96.1888%" y="805" width="0.0167%" height="15" fill="rgb(250,192,54)" fg:x="28721" fg:w="5"/><text x="96.4388%" y="815.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_rich_string (508 samples, 1.70%)</title><rect x="94.5075%" y="917" width="1.7013%" height="15" fill="rgb(218,98,20)" fg:x="28219" fg:w="508"/><text x="94.7575%" y="927.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_rich_string (148 samples, 0.50%)</title><rect x="95.7132%" y="901" width="0.4957%" height="15" fill="rgb(230,176,47)" fg:x="28579" fg:w="148"/><text x="95.9632%" y="911.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (139 samples, 0.47%)</title><rect x="95.7433%" y="885" width="0.4655%" height="15" fill="rgb(244,2,33)" fg:x="28588" fg:w="139"/><text x="95.9933%" y="895.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (59 samples, 0.20%)</title><rect x="96.0113%" y="869" width="0.1976%" height="15" fill="rgb(231,100,17)" fg:x="28668" fg:w="59"/><text x="96.2613%" y="879.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (19 samples, 0.06%)</title><rect x="96.1452%" y="853" width="0.0636%" height="15" fill="rgb(245,23,12)" fg:x="28708" fg:w="19"/><text x="96.3952%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.05%)</title><rect x="96.1586%" y="837" width="0.0502%" height="15" fill="rgb(249,55,22)" fg:x="28712" fg:w="15"/><text x="96.4086%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (8 samples, 0.03%)</title><rect x="96.1821%" y="821" width="0.0268%" height="15" fill="rgb(207,134,9)" fg:x="28719" fg:w="8"/><text x="96.4321%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="96.2256%" y="805" width="0.0435%" height="15" fill="rgb(218,134,0)" fg:x="28732" fg:w="13"/><text x="96.4756%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="96.2524%" y="789" width="0.0167%" height="15" fill="rgb(213,212,33)" fg:x="28740" fg:w="5"/><text x="96.5024%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (3 samples, 0.01%)</title><rect x="96.2691%" y="805" width="0.0100%" height="15" fill="rgb(252,106,18)" fg:x="28745" fg:w="3"/><text x="96.5191%" y="815.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (22 samples, 0.07%)</title><rect x="96.2189%" y="869" width="0.0737%" height="15" fill="rgb(208,126,42)" fg:x="28730" fg:w="22"/><text x="96.4689%" y="879.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (22 samples, 0.07%)</title><rect x="96.2189%" y="853" width="0.0737%" height="15" fill="rgb(246,175,29)" fg:x="28730" fg:w="22"/><text x="96.4689%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (22 samples, 0.07%)</title><rect x="96.2189%" y="837" width="0.0737%" height="15" fill="rgb(215,13,50)" fg:x="28730" fg:w="22"/><text x="96.4689%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (22 samples, 0.07%)</title><rect x="96.2189%" y="821" width="0.0737%" height="15" fill="rgb(216,172,15)" fg:x="28730" fg:w="22"/><text x="96.4689%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (6 samples, 0.02%)</title><rect x="96.2926%" y="853" width="0.0201%" height="15" fill="rgb(212,103,13)" fg:x="28752" fg:w="6"/><text x="96.5426%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.02%)</title><rect x="96.2926%" y="837" width="0.0201%" height="15" fill="rgb(231,171,36)" fg:x="28752" fg:w="6"/><text x="96.5426%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (6 samples, 0.02%)</title><rect x="96.2926%" y="821" width="0.0201%" height="15" fill="rgb(250,123,20)" fg:x="28752" fg:w="6"/><text x="96.5426%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (6 samples, 0.02%)</title><rect x="96.2926%" y="805" width="0.0201%" height="15" fill="rgb(212,53,50)" fg:x="28752" fg:w="6"/><text x="96.5426%" y="815.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (11 samples, 0.04%)</title><rect x="96.2926%" y="869" width="0.0368%" height="15" fill="rgb(243,54,12)" fg:x="28752" fg:w="11"/><text x="96.5426%" y="879.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.02%)</title><rect x="96.3127%" y="853" width="0.0167%" height="15" fill="rgb(234,101,34)" fg:x="28758" fg:w="5"/><text x="96.5627%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.01%)</title><rect x="96.3194%" y="837" width="0.0100%" height="15" fill="rgb(254,67,22)" fg:x="28760" fg:w="3"/><text x="96.5694%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.01%)</title><rect x="96.3194%" y="821" width="0.0100%" height="15" fill="rgb(250,35,47)" fg:x="28760" fg:w="3"/><text x="96.5694%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (3 samples, 0.01%)</title><rect x="96.3194%" y="805" width="0.0100%" height="15" fill="rgb(226,126,38)" fg:x="28760" fg:w="3"/><text x="96.5694%" y="815.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string (40 samples, 0.13%)</title><rect x="96.2088%" y="917" width="0.1340%" height="15" fill="rgb(216,138,53)" fg:x="28727" fg:w="40"/><text x="96.4588%" y="927.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_string (40 samples, 0.13%)</title><rect x="96.2088%" y="901" width="0.1340%" height="15" fill="rgb(246,199,43)" fg:x="28727" fg:w="40"/><text x="96.4588%" y="911.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (39 samples, 0.13%)</title><rect x="96.2122%" y="885" width="0.1306%" height="15" fill="rgb(232,125,11)" fg:x="28728" fg:w="39"/><text x="96.4622%" y="895.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.01%)</title><rect x="96.3294%" y="869" width="0.0134%" height="15" fill="rgb(218,219,45)" fg:x="28763" fg:w="4"/><text x="96.5794%" y="879.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.01%)</title><rect x="96.3294%" y="853" width="0.0134%" height="15" fill="rgb(216,102,54)" fg:x="28763" fg:w="4"/><text x="96.5794%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.01%)</title><rect x="96.3328%" y="837" width="0.0100%" height="15" fill="rgb(250,228,7)" fg:x="28764" fg:w="3"/><text x="96.5828%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (3 samples, 0.01%)</title><rect x="96.3328%" y="821" width="0.0100%" height="15" fill="rgb(226,125,25)" fg:x="28764" fg:w="3"/><text x="96.5828%" y="831.50"></text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (588 samples, 1.97%)</title><rect x="94.3769%" y="949" width="1.9693%" height="15" fill="rgb(224,165,27)" fg:x="28180" fg:w="588"/><text x="94.6269%" y="959.50">e..</text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (588 samples, 1.97%)</title><rect x="94.3769%" y="933" width="1.9693%" height="15" fill="rgb(233,86,3)" fg:x="28180" fg:w="588"/><text x="94.6269%" y="943.50">e..</text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::shared_strings_table::SharedStringsTable&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="885" width="0.0100%" height="15" fill="rgb(228,116,20)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::sync::Arc&lt;str&gt;,u32&gt;&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="869" width="0.0100%" height="15" fill="rgb(209,192,17)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::sync::Arc&lt;str&gt;,u32,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="853" width="0.0100%" height="15" fill="rgb(224,88,34)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;str&gt;,u32)&gt;&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="837" width="0.0100%" height="15" fill="rgb(233,38,6)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="96.3462%" y="821" width="0.0100%" height="15" fill="rgb(212,59,30)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (3 samples, 0.01%)</title><rect x="96.3462%" y="805" width="0.0100%" height="15" fill="rgb(213,80,3)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.01%)</title><rect x="96.3462%" y="789" width="0.0100%" height="15" fill="rgb(251,178,7)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.01%)</title><rect x="96.3462%" y="773" width="0.0100%" height="15" fill="rgb(213,154,26)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;str&gt;,u32)&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="757" width="0.0100%" height="15" fill="rgb(238,165,49)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (3 samples, 0.01%)</title><rect x="96.3462%" y="741" width="0.0100%" height="15" fill="rgb(248,91,46)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="96.3462%" y="725" width="0.0100%" height="15" fill="rgb(244,21,52)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.01%)</title><rect x="96.3462%" y="709" width="0.0100%" height="15" fill="rgb(247,122,20)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.01%)</title><rect x="96.3462%" y="693" width="0.0100%" height="15" fill="rgb(218,27,9)" fg:x="28768" fg:w="3"/><text x="96.5962%" y="703.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_root_rels_file (3 samples, 0.01%)</title><rect x="96.3629%" y="885" width="0.0100%" height="15" fill="rgb(246,7,6)" fg:x="28773" fg:w="3"/><text x="96.6129%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key::{{closure}} (4 samples, 0.01%)</title><rect x="96.3964%" y="773" width="0.0134%" height="15" fill="rgb(227,135,54)" fg:x="28783" fg:w="4"/><text x="96.6464%" y="783.50"></text></g><g><title>core::slice::sort::merge (7 samples, 0.02%)</title><rect x="96.3897%" y="789" width="0.0234%" height="15" fill="rgb(247,14,11)" fg:x="28781" fg:w="7"/><text x="96.6397%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (11 samples, 0.04%)</title><rect x="96.3897%" y="837" width="0.0368%" height="15" fill="rgb(206,149,34)" fg:x="28781" fg:w="11"/><text x="96.6397%" y="847.50"></text></g><g><title>alloc::slice::stable_sort (11 samples, 0.04%)</title><rect x="96.3897%" y="821" width="0.0368%" height="15" fill="rgb(227,228,4)" fg:x="28781" fg:w="11"/><text x="96.6397%" y="831.50"></text></g><g><title>core::slice::sort::merge_sort (11 samples, 0.04%)</title><rect x="96.3897%" y="805" width="0.0368%" height="15" fill="rgb(238,218,28)" fg:x="28781" fg:w="11"/><text x="96.6397%" y="815.50"></text></g><g><title>core::slice::sort::provide_sorted_batch (4 samples, 0.01%)</title><rect x="96.4131%" y="789" width="0.0134%" height="15" fill="rgb(252,86,40)" fg:x="28788" fg:w="4"/><text x="96.6631%" y="799.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (4 samples, 0.01%)</title><rect x="96.4131%" y="773" width="0.0134%" height="15" fill="rgb(251,225,11)" fg:x="28788" fg:w="4"/><text x="96.6631%" y="783.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (4 samples, 0.01%)</title><rect x="96.4265%" y="837" width="0.0134%" height="15" fill="rgb(206,46,49)" fg:x="28792" fg:w="4"/><text x="96.6765%" y="847.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (4 samples, 0.01%)</title><rect x="96.4265%" y="821" width="0.0134%" height="15" fill="rgb(245,128,24)" fg:x="28792" fg:w="4"/><text x="96.6765%" y="831.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (4 samples, 0.01%)</title><rect x="96.4265%" y="805" width="0.0134%" height="15" fill="rgb(219,177,34)" fg:x="28792" fg:w="4"/><text x="96.6765%" y="815.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (3 samples, 0.01%)</title><rect x="96.4299%" y="789" width="0.0100%" height="15" fill="rgb(218,60,48)" fg:x="28793" fg:w="3"/><text x="96.6799%" y="799.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (4 samples, 0.01%)</title><rect x="96.4399%" y="837" width="0.0134%" height="15" fill="rgb(221,11,5)" fg:x="28796" fg:w="4"/><text x="96.6899%" y="847.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.01%)</title><rect x="96.4433%" y="821" width="0.0100%" height="15" fill="rgb(220,148,13)" fg:x="28797" fg:w="3"/><text x="96.6933%" y="831.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (3 samples, 0.01%)</title><rect x="96.4433%" y="805" width="0.0100%" height="15" fill="rgb(210,16,3)" fg:x="28797" fg:w="3"/><text x="96.6933%" y="815.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_rich_si_element (3 samples, 0.01%)</title><rect x="96.4533%" y="837" width="0.0100%" height="15" fill="rgb(236,80,2)" fg:x="28800" fg:w="3"/><text x="96.7033%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.01%)</title><rect x="96.4533%" y="821" width="0.0100%" height="15" fill="rgb(239,129,19)" fg:x="28800" fg:w="3"/><text x="96.7033%" y="831.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="96.4533%" y="805" width="0.0100%" height="15" fill="rgb(220,106,35)" fg:x="28800" fg:w="3"/><text x="96.7033%" y="815.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_data (4 samples, 0.01%)</title><rect x="96.4634%" y="821" width="0.0134%" height="15" fill="rgb(252,139,45)" fg:x="28803" fg:w="4"/><text x="96.7134%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (3 samples, 0.01%)</title><rect x="96.4667%" y="805" width="0.0100%" height="15" fill="rgb(229,8,36)" fg:x="28804" fg:w="3"/><text x="96.7167%" y="815.50"></text></g><g><title>&lt;&amp;str as regex::regex::string::Replacer&gt;::no_expansion (4 samples, 0.01%)</title><rect x="96.4835%" y="773" width="0.0134%" height="15" fill="rgb(230,126,33)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="783.50"></text></g><g><title>regex::regex::string::no_expansion (4 samples, 0.01%)</title><rect x="96.4835%" y="757" width="0.0134%" height="15" fill="rgb(239,140,21)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="767.50"></text></g><g><title>regex::find_byte::find_byte (4 samples, 0.01%)</title><rect x="96.4835%" y="741" width="0.0134%" height="15" fill="rgb(254,104,9)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="751.50"></text></g><g><title>regex::find_byte::find_byte::imp (4 samples, 0.01%)</title><rect x="96.4835%" y="725" width="0.0134%" height="15" fill="rgb(239,52,14)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="735.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.01%)</title><rect x="96.4835%" y="709" width="0.0134%" height="15" fill="rgb(208,227,44)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.01%)</title><rect x="96.4835%" y="693" width="0.0134%" height="15" fill="rgb(246,18,19)" fg:x="28809" fg:w="4"/><text x="96.7335%" y="703.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.01%)</title><rect x="96.4868%" y="677" width="0.0100%" height="15" fill="rgb(235,228,25)" fg:x="28810" fg:w="3"/><text x="96.7368%" y="687.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="96.4868%" y="661" width="0.0100%" height="15" fill="rgb(240,156,20)" fg:x="28810" fg:w="3"/><text x="96.7368%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.01%)</title><rect x="96.4868%" y="645" width="0.0100%" height="15" fill="rgb(224,8,20)" fg:x="28810" fg:w="3"/><text x="96.7368%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.01%)</title><rect x="96.4868%" y="629" width="0.0100%" height="15" fill="rgb(214,12,52)" fg:x="28810" fg:w="3"/><text x="96.7368%" y="639.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (5 samples, 0.02%)</title><rect x="96.4969%" y="773" width="0.0167%" height="15" fill="rgb(211,220,47)" fg:x="28813" fg:w="5"/><text x="96.7469%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (5 samples, 0.02%)</title><rect x="96.4969%" y="757" width="0.0167%" height="15" fill="rgb(250,173,5)" fg:x="28813" fg:w="5"/><text x="96.7469%" y="767.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (5 samples, 0.02%)</title><rect x="96.4969%" y="741" width="0.0167%" height="15" fill="rgb(250,125,52)" fg:x="28813" fg:w="5"/><text x="96.7469%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="96.4969%" y="725" width="0.0167%" height="15" fill="rgb(209,133,18)" fg:x="28813" fg:w="5"/><text x="96.7469%" y="735.50"></text></g><g><title>&lt;regex::regex::string::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="96.5002%" y="709" width="0.0134%" height="15" fill="rgb(216,173,22)" fg:x="28814" fg:w="4"/><text x="96.7502%" y="719.50"></text></g><g><title>regex_automata::meta::regex::Regex::static_captures_len (3 samples, 0.01%)</title><rect x="96.5036%" y="693" width="0.0100%" height="15" fill="rgb(205,3,22)" fg:x="28815" fg:w="3"/><text x="96.7536%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::peekable::Peekable&lt;core::iter::adapters::enumerate::Enumerate&lt;regex::regex::string::CaptureMatches&gt;&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5170%" y="773" width="0.0100%" height="15" fill="rgb(248,22,20)" fg:x="28819" fg:w="3"/><text x="96.7670%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;regex::regex::string::CaptureMatches&gt;&gt; (3 samples, 0.01%)</title><rect x="96.5170%" y="757" width="0.0100%" height="15" fill="rgb(233,6,29)" fg:x="28819" fg:w="3"/><text x="96.7670%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::CaptureMatches&gt; (3 samples, 0.01%)</title><rect x="96.5170%" y="741" width="0.0100%" height="15" fill="rgb(240,22,54)" fg:x="28819" fg:w="3"/><text x="96.7670%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::CapturesMatches&gt; (3 samples, 0.01%)</title><rect x="96.5170%" y="725" width="0.0100%" height="15" fill="rgb(231,133,32)" fg:x="28819" fg:w="3"/><text x="96.7670%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (7 samples, 0.02%)</title><rect x="96.5337%" y="741" width="0.0234%" height="15" fill="rgb(248,193,4)" fg:x="28824" fg:w="7"/><text x="96.7837%" y="751.50"></text></g><g><title>regex_automata::util::captures::Captures::all (5 samples, 0.02%)</title><rect x="96.5404%" y="725" width="0.0167%" height="15" fill="rgb(211,178,46)" fg:x="28826" fg:w="5"/><text x="96.7904%" y="735.50"></text></g><g><title>alloc::vec::from_elem (5 samples, 0.02%)</title><rect x="96.5404%" y="709" width="0.0167%" height="15" fill="rgb(224,5,42)" fg:x="28826" fg:w="5"/><text x="96.7904%" y="719.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 0.02%)</title><rect x="96.5404%" y="693" width="0.0167%" height="15" fill="rgb(239,176,25)" fg:x="28826" fg:w="5"/><text x="96.7904%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="96.5471%" y="677" width="0.0100%" height="15" fill="rgb(245,187,50)" fg:x="28828" fg:w="3"/><text x="96.7971%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.01%)</title><rect x="96.5471%" y="661" width="0.0100%" height="15" fill="rgb(248,24,15)" fg:x="28828" fg:w="3"/><text x="96.7971%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.01%)</title><rect x="96.5471%" y="645" width="0.0100%" height="15" fill="rgb(205,166,13)" fg:x="28828" fg:w="3"/><text x="96.7971%" y="655.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_escapes (26 samples, 0.09%)</title><rect x="96.4768%" y="821" width="0.0871%" height="15" fill="rgb(208,114,23)" fg:x="28807" fg:w="26"/><text x="96.7268%" y="831.50"></text></g><g><title>regex::regex::string::Regex::replace_all (24 samples, 0.08%)</title><rect x="96.4835%" y="805" width="0.0804%" height="15" fill="rgb(239,127,18)" fg:x="28809" fg:w="24"/><text x="96.7335%" y="815.50"></text></g><g><title>regex::regex::string::Regex::replacen (24 samples, 0.08%)</title><rect x="96.4835%" y="789" width="0.0804%" height="15" fill="rgb(219,154,28)" fg:x="28809" fg:w="24"/><text x="96.7335%" y="799.50"></text></g><g><title>regex::regex::string::Regex::captures_iter (11 samples, 0.04%)</title><rect x="96.5270%" y="773" width="0.0368%" height="15" fill="rgb(225,157,23)" fg:x="28822" fg:w="11"/><text x="96.7770%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Regex::captures_iter (11 samples, 0.04%)</title><rect x="96.5270%" y="757" width="0.0368%" height="15" fill="rgb(219,8,6)" fg:x="28822" fg:w="11"/><text x="96.7770%" y="767.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::assemble_xml_file (60 samples, 0.20%)</title><rect x="96.3730%" y="869" width="0.2009%" height="15" fill="rgb(212,47,6)" fg:x="28776" fg:w="60"/><text x="96.6230%" y="879.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::write_sst_strings (60 samples, 0.20%)</title><rect x="96.3730%" y="853" width="0.2009%" height="15" fill="rgb(224,190,4)" fg:x="28776" fg:w="60"/><text x="96.6230%" y="863.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_si_element (33 samples, 0.11%)</title><rect x="96.4634%" y="837" width="0.1105%" height="15" fill="rgb(239,183,29)" fg:x="28803" fg:w="33"/><text x="96.7134%" y="847.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.01%)</title><rect x="96.5639%" y="821" width="0.0100%" height="15" fill="rgb(213,57,7)" fg:x="28833" fg:w="3"/><text x="96.8139%" y="831.50"></text></g><g><title>core::fmt::write (3 samples, 0.01%)</title><rect x="96.5639%" y="805" width="0.0100%" height="15" fill="rgb(216,148,1)" fg:x="28833" fg:w="3"/><text x="96.8139%" y="815.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="96.5639%" y="789" width="0.0100%" height="15" fill="rgb(236,182,29)" fg:x="28833" fg:w="3"/><text x="96.8139%" y="799.50"></text></g><g><title>slide_hash (22 samples, 0.07%)</title><rect x="96.7313%" y="629" width="0.0737%" height="15" fill="rgb(244,120,48)" fg:x="28883" fg:w="22"/><text x="96.9813%" y="639.50"></text></g><g><title>fill_window (26 samples, 0.09%)</title><rect x="96.7246%" y="645" width="0.0871%" height="15" fill="rgb(206,71,34)" fg:x="28881" fg:w="26"/><text x="96.9746%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (91 samples, 0.30%)</title><rect x="96.5739%" y="837" width="0.3048%" height="15" fill="rgb(242,32,6)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="847.50"></text></g><g><title>&lt;flate2::deflate::write::DeflateEncoder&lt;W&gt; as std::io::Write&gt;::write (91 samples, 0.30%)</title><rect x="96.5739%" y="821" width="0.3048%" height="15" fill="rgb(241,35,3)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="831.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (91 samples, 0.30%)</title><rect x="96.5739%" y="805" width="0.3048%" height="15" fill="rgb(222,62,19)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="815.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (91 samples, 0.30%)</title><rect x="96.5739%" y="789" width="0.3048%" height="15" fill="rgb(223,110,41)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="799.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (91 samples, 0.30%)</title><rect x="96.5739%" y="773" width="0.3048%" height="15" fill="rgb(208,224,4)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="783.50"></text></g><g><title>flate2::mem::Compress::compress_vec (91 samples, 0.30%)</title><rect x="96.5739%" y="757" width="0.3048%" height="15" fill="rgb(241,137,19)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="767.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (91 samples, 0.30%)</title><rect x="96.5739%" y="741" width="0.3048%" height="15" fill="rgb(244,24,17)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="751.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (91 samples, 0.30%)</title><rect x="96.5739%" y="725" width="0.3048%" height="15" fill="rgb(245,178,49)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="735.50"></text></g><g><title>flate2::mem::Compress::compress (91 samples, 0.30%)</title><rect x="96.5739%" y="709" width="0.3048%" height="15" fill="rgb(219,160,38)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="719.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (91 samples, 0.30%)</title><rect x="96.5739%" y="693" width="0.3048%" height="15" fill="rgb(228,137,14)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="703.50"></text></g><g><title>deflate (91 samples, 0.30%)</title><rect x="96.5739%" y="677" width="0.3048%" height="15" fill="rgb(237,134,11)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="687.50"></text></g><g><title>deflate_slow (91 samples, 0.30%)</title><rect x="96.5739%" y="661" width="0.3048%" height="15" fill="rgb(211,126,44)" fg:x="28836" fg:w="91"/><text x="96.8239%" y="671.50"></text></g><g><title>longest_match (19 samples, 0.06%)</title><rect x="96.8150%" y="645" width="0.0636%" height="15" fill="rgb(226,171,33)" fg:x="28908" fg:w="19"/><text x="97.0650%" y="655.50"></text></g><g><title>std::io::Write::write_all (98 samples, 0.33%)</title><rect x="96.5739%" y="869" width="0.3282%" height="15" fill="rgb(253,99,13)" fg:x="28836" fg:w="98"/><text x="96.8239%" y="879.50"></text></g><g><title>zip::write::&lt;impl std::io::Write for zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::write (98 samples, 0.33%)</title><rect x="96.5739%" y="853" width="0.3282%" height="15" fill="rgb(244,48,7)" fg:x="28836" fg:w="98"/><text x="96.8239%" y="863.50"></text></g><g><title>zip::write::ZipWriterStats::update (7 samples, 0.02%)</title><rect x="96.8787%" y="837" width="0.0234%" height="15" fill="rgb(244,217,54)" fg:x="28927" fg:w="7"/><text x="97.1287%" y="847.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.02%)</title><rect x="96.8787%" y="821" width="0.0234%" height="15" fill="rgb(224,15,18)" fg:x="28927" fg:w="7"/><text x="97.1287%" y="831.50"></text></g><g><title>crc32fast::baseline::State::update (7 samples, 0.02%)</title><rect x="96.8787%" y="805" width="0.0234%" height="15" fill="rgb(244,99,12)" fg:x="28927" fg:w="7"/><text x="97.1287%" y="815.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (7 samples, 0.02%)</title><rect x="96.8787%" y="789" width="0.0234%" height="15" fill="rgb(233,226,8)" fg:x="28927" fg:w="7"/><text x="97.1287%" y="799.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_shared_strings_file (161 samples, 0.54%)</title><rect x="96.3730%" y="885" width="0.5392%" height="15" fill="rgb(229,211,3)" fg:x="28776" fg:w="161"/><text x="96.6230%" y="895.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (3 samples, 0.01%)</title><rect x="96.9021%" y="869" width="0.0100%" height="15" fill="rgb(216,140,21)" fg:x="28934" fg:w="3"/><text x="97.1521%" y="879.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_theme_file (3 samples, 0.01%)</title><rect x="96.9155%" y="885" width="0.0100%" height="15" fill="rgb(234,122,30)" fg:x="28938" fg:w="3"/><text x="97.1655%" y="895.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_workbook_file (3 samples, 0.01%)</title><rect x="96.9256%" y="885" width="0.0100%" height="15" fill="rgb(236,25,46)" fg:x="28941" fg:w="3"/><text x="97.1756%" y="895.50"></text></g><g><title>_tr_flush_block (11 samples, 0.04%)</title><rect x="97.2303%" y="645" width="0.0368%" height="15" fill="rgb(217,52,54)" fg:x="29032" fg:w="11"/><text x="97.4803%" y="655.50"></text></g><g><title>compress_block (11 samples, 0.04%)</title><rect x="97.2303%" y="629" width="0.0368%" height="15" fill="rgb(222,29,26)" fg:x="29032" fg:w="11"/><text x="97.4803%" y="639.50"></text></g><g><title>read_buf (8 samples, 0.03%)</title><rect x="97.2672%" y="629" width="0.0268%" height="15" fill="rgb(216,177,29)" fg:x="29043" fg:w="8"/><text x="97.5172%" y="639.50"></text></g><g><title>zmemcpy (8 samples, 0.03%)</title><rect x="97.2672%" y="613" width="0.0268%" height="15" fill="rgb(247,136,51)" fg:x="29043" fg:w="8"/><text x="97.5172%" y="623.50"></text></g><g><title>slide_hash (28 samples, 0.09%)</title><rect x="97.2939%" y="629" width="0.0938%" height="15" fill="rgb(231,47,47)" fg:x="29051" fg:w="28"/><text x="97.5439%" y="639.50"></text></g><g><title>fill_window (42 samples, 0.14%)</title><rect x="97.2672%" y="645" width="0.1407%" height="15" fill="rgb(211,192,36)" fg:x="29043" fg:w="42"/><text x="97.5172%" y="655.50"></text></g><g><title>zmemcpy (6 samples, 0.02%)</title><rect x="97.3877%" y="629" width="0.0201%" height="15" fill="rgb(229,156,32)" fg:x="29079" fg:w="6"/><text x="97.6377%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (235 samples, 0.79%)</title><rect x="96.9423%" y="837" width="0.7870%" height="15" fill="rgb(248,213,20)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="847.50"></text></g><g><title>&lt;flate2::deflate::write::DeflateEncoder&lt;W&gt; as std::io::Write&gt;::write (235 samples, 0.79%)</title><rect x="96.9423%" y="821" width="0.7870%" height="15" fill="rgb(217,64,7)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="831.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (235 samples, 0.79%)</title><rect x="96.9423%" y="805" width="0.7870%" height="15" fill="rgb(232,142,8)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="815.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (235 samples, 0.79%)</title><rect x="96.9423%" y="789" width="0.7870%" height="15" fill="rgb(224,92,44)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="799.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (235 samples, 0.79%)</title><rect x="96.9423%" y="773" width="0.7870%" height="15" fill="rgb(214,169,17)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="783.50"></text></g><g><title>flate2::mem::Compress::compress_vec (235 samples, 0.79%)</title><rect x="96.9423%" y="757" width="0.7870%" height="15" fill="rgb(210,59,37)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="767.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (235 samples, 0.79%)</title><rect x="96.9423%" y="741" width="0.7870%" height="15" fill="rgb(214,116,48)" fg:x="28946" fg:w="235"/><text x="97.1923%" y="751.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (234 samples, 0.78%)</title><rect x="96.9456%" y="725" width="0.7837%" height="15" fill="rgb(244,191,6)" fg:x="28947" fg:w="234"/><text x="97.1956%" y="735.50"></text></g><g><title>flate2::mem::Compress::compress (234 samples, 0.78%)</title><rect x="96.9456%" y="709" width="0.7837%" height="15" fill="rgb(241,50,52)" fg:x="28947" fg:w="234"/><text x="97.1956%" y="719.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (234 samples, 0.78%)</title><rect x="96.9456%" y="693" width="0.7837%" height="15" fill="rgb(236,75,39)" fg:x="28947" fg:w="234"/><text x="97.1956%" y="703.50"></text></g><g><title>deflate (234 samples, 0.78%)</title><rect x="96.9456%" y="677" width="0.7837%" height="15" fill="rgb(236,99,0)" fg:x="28947" fg:w="234"/><text x="97.1956%" y="687.50"></text></g><g><title>deflate_slow (234 samples, 0.78%)</title><rect x="96.9456%" y="661" width="0.7837%" height="15" fill="rgb(207,202,15)" fg:x="28947" fg:w="234"/><text x="97.1956%" y="671.50"></text></g><g><title>longest_match (95 samples, 0.32%)</title><rect x="97.4112%" y="645" width="0.3182%" height="15" fill="rgb(233,207,14)" fg:x="29086" fg:w="95"/><text x="97.6612%" y="655.50"></text></g><g><title>std::io::Write::write_all (250 samples, 0.84%)</title><rect x="96.9423%" y="869" width="0.8373%" height="15" fill="rgb(226,27,51)" fg:x="28946" fg:w="250"/><text x="97.1923%" y="879.50"></text></g><g><title>zip::write::&lt;impl std::io::Write for zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::write (250 samples, 0.84%)</title><rect x="96.9423%" y="853" width="0.8373%" height="15" fill="rgb(206,104,42)" fg:x="28946" fg:w="250"/><text x="97.1923%" y="863.50"></text></g><g><title>zip::write::ZipWriterStats::update (15 samples, 0.05%)</title><rect x="97.7293%" y="837" width="0.0502%" height="15" fill="rgb(212,225,4)" fg:x="29181" fg:w="15"/><text x="97.9793%" y="847.50"></text></g><g><title>crc32fast::Hasher::update (15 samples, 0.05%)</title><rect x="97.7293%" y="821" width="0.0502%" height="15" fill="rgb(233,96,42)" fg:x="29181" fg:w="15"/><text x="97.9793%" y="831.50"></text></g><g><title>crc32fast::baseline::State::update (15 samples, 0.05%)</title><rect x="97.7293%" y="805" width="0.0502%" height="15" fill="rgb(229,21,32)" fg:x="29181" fg:w="15"/><text x="97.9793%" y="815.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (15 samples, 0.05%)</title><rect x="97.7293%" y="789" width="0.0502%" height="15" fill="rgb(226,216,24)" fg:x="29181" fg:w="15"/><text x="97.9793%" y="799.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_worksheet_file (252 samples, 0.84%)</title><rect x="96.9423%" y="885" width="0.8440%" height="15" fill="rgb(221,163,17)" fg:x="28946" fg:w="252"/><text x="97.1923%" y="895.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6 samples, 0.02%)</title><rect x="97.8030%" y="821" width="0.0201%" height="15" fill="rgb(216,216,42)" fg:x="29203" fg:w="6"/><text x="98.0530%" y="831.50"></text></g><g><title>alloc::collections::btree::mem::replace (6 samples, 0.02%)</title><rect x="97.8030%" y="805" width="0.0201%" height="15" fill="rgb(240,118,7)" fg:x="29203" fg:w="6"/><text x="98.0530%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (5 samples, 0.02%)</title><rect x="97.8064%" y="789" width="0.0167%" height="15" fill="rgb(221,67,37)" fg:x="29204" fg:w="5"/><text x="98.0564%" y="799.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (4 samples, 0.01%)</title><rect x="97.8097%" y="773" width="0.0134%" height="15" fill="rgb(241,32,44)" fg:x="29205" fg:w="4"/><text x="98.0597%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::ValuesMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="97.8030%" y="869" width="0.0234%" height="15" fill="rgb(235,204,43)" fg:x="29203" fg:w="7"/><text x="98.0530%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="97.8030%" y="853" width="0.0234%" height="15" fill="rgb(213,116,10)" fg:x="29203" fg:w="7"/><text x="98.0530%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::ValMut,K,V&gt;::next_unchecked (7 samples, 0.02%)</title><rect x="97.8030%" y="837" width="0.0234%" height="15" fill="rgb(239,15,48)" fg:x="29203" fg:w="7"/><text x="98.0530%" y="847.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (3 samples, 0.01%)</title><rect x="97.8265%" y="853" width="0.0100%" height="15" fill="rgb(207,123,36)" fg:x="29210" fg:w="3"/><text x="98.0765%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="97.8633%" y="677" width="0.0100%" height="15" fill="rgb(209,103,30)" fg:x="29221" fg:w="3"/><text x="98.1133%" y="687.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.01%)</title><rect x="97.8633%" y="661" width="0.0100%" height="15" fill="rgb(238,100,19)" fg:x="29221" fg:w="3"/><text x="98.1133%" y="671.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.01%)</title><rect x="97.8633%" y="645" width="0.0100%" height="15" fill="rgb(244,30,14)" fg:x="29221" fg:w="3"/><text x="98.1133%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.03%)</title><rect x="97.8800%" y="565" width="0.0268%" height="15" fill="rgb(249,174,6)" fg:x="29226" fg:w="8"/><text x="98.1300%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.05%)</title><rect x="97.8733%" y="581" width="0.0502%" height="15" fill="rgb(235,213,41)" fg:x="29224" fg:w="15"/><text x="98.1233%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.01%)</title><rect x="97.9102%" y="565" width="0.0134%" height="15" fill="rgb(213,118,6)" fg:x="29235" fg:w="4"/><text x="98.1602%" y="575.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (21 samples, 0.07%)</title><rect x="97.8566%" y="725" width="0.0703%" height="15" fill="rgb(235,44,51)" fg:x="29219" fg:w="21"/><text x="98.1066%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.07%)</title><rect x="97.8566%" y="709" width="0.0703%" height="15" fill="rgb(217,9,53)" fg:x="29219" fg:w="21"/><text x="98.1066%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.07%)</title><rect x="97.8566%" y="693" width="0.0703%" height="15" fill="rgb(237,172,34)" fg:x="29219" fg:w="21"/><text x="98.1066%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.05%)</title><rect x="97.8733%" y="677" width="0.0536%" height="15" fill="rgb(206,206,11)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (16 samples, 0.05%)</title><rect x="97.8733%" y="661" width="0.0536%" height="15" fill="rgb(214,149,29)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (16 samples, 0.05%)</title><rect x="97.8733%" y="645" width="0.0536%" height="15" fill="rgb(208,123,3)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (16 samples, 0.05%)</title><rect x="97.8733%" y="629" width="0.0536%" height="15" fill="rgb(229,126,4)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (16 samples, 0.05%)</title><rect x="97.8733%" y="613" width="0.0536%" height="15" fill="rgb(222,92,36)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (16 samples, 0.05%)</title><rect x="97.8733%" y="597" width="0.0536%" height="15" fill="rgb(216,39,41)" fg:x="29224" fg:w="16"/><text x="98.1233%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (23 samples, 0.08%)</title><rect x="97.8532%" y="741" width="0.0770%" height="15" fill="rgb(253,127,28)" fg:x="29218" fg:w="23"/><text x="98.1032%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (31 samples, 0.10%)</title><rect x="97.8365%" y="821" width="0.1038%" height="15" fill="rgb(249,152,51)" fg:x="29213" fg:w="31"/><text x="98.0865%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (31 samples, 0.10%)</title><rect x="97.8365%" y="805" width="0.1038%" height="15" fill="rgb(209,123,42)" fg:x="29213" fg:w="31"/><text x="98.0865%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (31 samples, 0.10%)</title><rect x="97.8365%" y="789" width="0.1038%" height="15" fill="rgb(241,118,22)" fg:x="29213" fg:w="31"/><text x="98.0865%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (31 samples, 0.10%)</title><rect x="97.8365%" y="773" width="0.1038%" height="15" fill="rgb(208,25,7)" fg:x="29213" fg:w="31"/><text x="98.0865%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (31 samples, 0.10%)</title><rect x="97.8365%" y="757" width="0.1038%" height="15" fill="rgb(243,144,39)" fg:x="29213" fg:w="31"/><text x="98.0865%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (3 samples, 0.01%)</title><rect x="97.9303%" y="741" width="0.0100%" height="15" fill="rgb(250,50,5)" fg:x="29241" fg:w="3"/><text x="98.1803%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 0.01%)</title><rect x="97.9303%" y="725" width="0.0100%" height="15" fill="rgb(207,67,11)" fg:x="29241" fg:w="3"/><text x="98.1803%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (3 samples, 0.01%)</title><rect x="97.9303%" y="709" width="0.0100%" height="15" fill="rgb(245,204,40)" fg:x="29241" fg:w="3"/><text x="98.1803%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.03%)</title><rect x="97.9403%" y="789" width="0.0301%" height="15" fill="rgb(238,228,24)" fg:x="29244" fg:w="9"/><text x="98.1903%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.03%)</title><rect x="97.9403%" y="773" width="0.0301%" height="15" fill="rgb(217,116,22)" fg:x="29244" fg:w="9"/><text x="98.1903%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.03%)</title><rect x="97.9403%" y="757" width="0.0301%" height="15" fill="rgb(234,98,12)" fg:x="29244" fg:w="9"/><text x="98.1903%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.02%)</title><rect x="97.9504%" y="741" width="0.0201%" height="15" fill="rgb(242,170,50)" fg:x="29247" fg:w="6"/><text x="98.2004%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.01%)</title><rect x="97.9705%" y="789" width="0.0100%" height="15" fill="rgb(235,7,5)" fg:x="29253" fg:w="3"/><text x="98.2205%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.03%)</title><rect x="98.0040%" y="677" width="0.0335%" height="15" fill="rgb(241,114,28)" fg:x="29263" fg:w="10"/><text x="98.2540%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.01%)</title><rect x="98.0274%" y="661" width="0.0100%" height="15" fill="rgb(246,112,42)" fg:x="29270" fg:w="3"/><text x="98.2774%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.02%)</title><rect x="98.0374%" y="677" width="0.0167%" height="15" fill="rgb(248,228,14)" fg:x="29273" fg:w="5"/><text x="98.2874%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.07%)</title><rect x="97.9872%" y="693" width="0.0703%" height="15" fill="rgb(208,133,18)" fg:x="29258" fg:w="21"/><text x="98.2372%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.12%)</title><rect x="97.9403%" y="821" width="0.1239%" height="15" fill="rgb(207,35,49)" fg:x="29244" fg:w="37"/><text x="98.1903%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 0.12%)</title><rect x="97.9403%" y="805" width="0.1239%" height="15" fill="rgb(205,68,36)" fg:x="29244" fg:w="37"/><text x="98.1903%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.08%)</title><rect x="97.9805%" y="789" width="0.0837%" height="15" fill="rgb(245,62,40)" fg:x="29256" fg:w="25"/><text x="98.2305%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (24 samples, 0.08%)</title><rect x="97.9839%" y="773" width="0.0804%" height="15" fill="rgb(228,27,24)" fg:x="29257" fg:w="24"/><text x="98.2339%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (24 samples, 0.08%)</title><rect x="97.9839%" y="757" width="0.0804%" height="15" fill="rgb(253,19,12)" fg:x="29257" fg:w="24"/><text x="98.2339%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (23 samples, 0.08%)</title><rect x="97.9872%" y="741" width="0.0770%" height="15" fill="rgb(232,28,20)" fg:x="29258" fg:w="23"/><text x="98.2372%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (23 samples, 0.08%)</title><rect x="97.9872%" y="725" width="0.0770%" height="15" fill="rgb(218,35,51)" fg:x="29258" fg:w="23"/><text x="98.2372%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (23 samples, 0.08%)</title><rect x="97.9872%" y="709" width="0.0770%" height="15" fill="rgb(212,90,40)" fg:x="29258" fg:w="23"/><text x="98.2372%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="98.0877%" y="725" width="0.0100%" height="15" fill="rgb(220,172,12)" fg:x="29288" fg:w="3"/><text x="98.3377%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.01%)</title><rect x="98.0877%" y="709" width="0.0100%" height="15" fill="rgb(226,159,20)" fg:x="29288" fg:w="3"/><text x="98.3377%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.01%)</title><rect x="98.0877%" y="693" width="0.0100%" height="15" fill="rgb(234,205,16)" fg:x="29288" fg:w="3"/><text x="98.3377%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.02%)</title><rect x="98.0810%" y="789" width="0.0201%" height="15" fill="rgb(207,9,39)" fg:x="29286" fg:w="6"/><text x="98.3310%" y="799.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (5 samples, 0.02%)</title><rect x="98.0843%" y="773" width="0.0167%" height="15" fill="rgb(249,143,15)" fg:x="29287" fg:w="5"/><text x="98.3343%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="98.0843%" y="757" width="0.0167%" height="15" fill="rgb(253,133,29)" fg:x="29287" fg:w="5"/><text x="98.3343%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as alloc::sync::ArcEqIdent&lt;T&gt;&gt;::eq (5 samples, 0.02%)</title><rect x="98.0843%" y="741" width="0.0167%" height="15" fill="rgb(221,187,0)" fg:x="29287" fg:w="5"/><text x="98.3343%" y="751.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::update_string_table_ids (97 samples, 0.32%)</title><rect x="97.7863%" y="885" width="0.3249%" height="15" fill="rgb(205,204,26)" fg:x="29198" fg:w="97"/><text x="98.0363%" y="895.50"></text></g><g><title>rust_xlsxwriter::shared_strings_table::SharedStringsTable::shared_string_index (85 samples, 0.28%)</title><rect x="97.8265%" y="869" width="0.2847%" height="15" fill="rgb(224,68,54)" fg:x="29210" fg:w="85"/><text x="98.0765%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (82 samples, 0.27%)</title><rect x="97.8365%" y="853" width="0.2746%" height="15" fill="rgb(209,67,4)" fg:x="29213" fg:w="82"/><text x="98.0865%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (82 samples, 0.27%)</title><rect x="97.8365%" y="837" width="0.2746%" height="15" fill="rgb(228,229,18)" fg:x="29213" fg:w="82"/><text x="98.0865%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.05%)</title><rect x="98.0642%" y="821" width="0.0469%" height="15" fill="rgb(231,89,13)" fg:x="29281" fg:w="14"/><text x="98.3142%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (12 samples, 0.04%)</title><rect x="98.0709%" y="805" width="0.0402%" height="15" fill="rgb(210,182,18)" fg:x="29283" fg:w="12"/><text x="98.3209%" y="815.50"></text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (528 samples, 1.77%)</title><rect x="96.3462%" y="949" width="1.7683%" height="15" fill="rgb(240,105,2)" fg:x="28768" fg:w="528"/><text x="96.5962%" y="959.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_to_buffer (528 samples, 1.77%)</title><rect x="96.3462%" y="933" width="1.7683%" height="15" fill="rgb(207,170,50)" fg:x="28768" fg:w="528"/><text x="96.5962%" y="943.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (528 samples, 1.77%)</title><rect x="96.3462%" y="917" width="1.7683%" height="15" fill="rgb(232,133,24)" fg:x="28768" fg:w="528"/><text x="96.5962%" y="927.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (528 samples, 1.77%)</title><rect x="96.3462%" y="901" width="1.7683%" height="15" fill="rgb(235,166,27)" fg:x="28768" fg:w="528"/><text x="96.5962%" y="911.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 0.02%)</title><rect x="98.1413%" y="677" width="0.0201%" height="15" fill="rgb(209,19,13)" fg:x="29304" fg:w="6"/><text x="98.3913%" y="687.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.02%)</title><rect x="98.1413%" y="661" width="0.0201%" height="15" fill="rgb(226,79,39)" fg:x="29304" fg:w="6"/><text x="98.3913%" y="671.50"></text></g><g><title>__GI___write (6 samples, 0.02%)</title><rect x="98.1413%" y="645" width="0.0201%" height="15" fill="rgb(222,163,10)" fg:x="29304" fg:w="6"/><text x="98.3913%" y="655.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (7 samples, 0.02%)</title><rect x="98.1413%" y="917" width="0.0234%" height="15" fill="rgb(214,44,19)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="927.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io::{{closure}} (7 samples, 0.02%)</title><rect x="98.1413%" y="901" width="0.0234%" height="15" fill="rgb(210,217,13)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="911.50"></text></g><g><title>tracing_core::event::Event::dispatch (7 samples, 0.02%)</title><rect x="98.1413%" y="885" width="0.0234%" height="15" fill="rgb(237,61,54)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="895.50"></text></g><g><title>tracing_core::dispatcher::get_default (7 samples, 0.02%)</title><rect x="98.1413%" y="869" width="0.0234%" height="15" fill="rgb(226,184,24)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="879.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (7 samples, 0.02%)</title><rect x="98.1413%" y="853" width="0.0234%" height="15" fill="rgb(223,226,4)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="863.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (7 samples, 0.02%)</title><rect x="98.1413%" y="837" width="0.0234%" height="15" fill="rgb(210,26,41)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (7 samples, 0.02%)</title><rect x="98.1413%" y="821" width="0.0234%" height="15" fill="rgb(220,221,6)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (7 samples, 0.02%)</title><rect x="98.1413%" y="805" width="0.0234%" height="15" fill="rgb(225,89,49)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (7 samples, 0.02%)</title><rect x="98.1413%" y="789" width="0.0234%" height="15" fill="rgb(218,70,45)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (7 samples, 0.02%)</title><rect x="98.1413%" y="773" width="0.0234%" height="15" fill="rgb(238,166,21)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.02%)</title><rect x="98.1413%" y="757" width="0.0234%" height="15" fill="rgb(224,141,44)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.02%)</title><rect x="98.1413%" y="741" width="0.0234%" height="15" fill="rgb(230,12,49)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (7 samples, 0.02%)</title><rect x="98.1413%" y="725" width="0.0234%" height="15" fill="rgb(212,174,12)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="735.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.02%)</title><rect x="98.1413%" y="709" width="0.0234%" height="15" fill="rgb(246,67,9)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="719.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.02%)</title><rect x="98.1413%" y="693" width="0.0234%" height="15" fill="rgb(239,35,23)" fg:x="29304" fg:w="7"/><text x="98.3913%" y="703.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (9 samples, 0.03%)</title><rect x="98.1413%" y="949" width="0.0301%" height="15" fill="rgb(211,167,0)" fg:x="29304" fg:w="9"/><text x="98.3913%" y="959.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (9 samples, 0.03%)</title><rect x="98.1413%" y="933" width="0.0301%" height="15" fill="rgb(225,119,45)" fg:x="29304" fg:w="9"/><text x="98.3913%" y="943.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (19 samples, 0.06%)</title><rect x="98.1748%" y="949" width="0.0636%" height="15" fill="rgb(210,162,6)" fg:x="29314" fg:w="19"/><text x="98.4248%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (18 samples, 0.06%)</title><rect x="98.1781%" y="933" width="0.0603%" height="15" fill="rgb(208,118,35)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="943.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (18 samples, 0.06%)</title><rect x="98.1781%" y="917" width="0.0603%" height="15" fill="rgb(239,4,53)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="927.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (18 samples, 0.06%)</title><rect x="98.1781%" y="901" width="0.0603%" height="15" fill="rgb(213,130,21)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="911.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (18 samples, 0.06%)</title><rect x="98.1781%" y="885" width="0.0603%" height="15" fill="rgb(235,148,0)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="895.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (18 samples, 0.06%)</title><rect x="98.1781%" y="869" width="0.0603%" height="15" fill="rgb(244,224,18)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="879.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode::{{closure}} (18 samples, 0.06%)</title><rect x="98.1781%" y="853" width="0.0603%" height="15" fill="rgb(211,214,4)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="863.50"></text></g><g><title>tracing_core::event::Event::dispatch (18 samples, 0.06%)</title><rect x="98.1781%" y="837" width="0.0603%" height="15" fill="rgb(206,119,25)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="847.50"></text></g><g><title>tracing_core::dispatcher::get_default (18 samples, 0.06%)</title><rect x="98.1781%" y="821" width="0.0603%" height="15" fill="rgb(243,93,47)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="831.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (18 samples, 0.06%)</title><rect x="98.1781%" y="805" width="0.0603%" height="15" fill="rgb(224,194,6)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="815.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (18 samples, 0.06%)</title><rect x="98.1781%" y="789" width="0.0603%" height="15" fill="rgb(243,229,6)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="98.1781%" y="773" width="0.0603%" height="15" fill="rgb(207,23,50)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="783.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="98.1781%" y="757" width="0.0603%" height="15" fill="rgb(253,192,32)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (18 samples, 0.06%)</title><rect x="98.1781%" y="741" width="0.0603%" height="15" fill="rgb(213,21,6)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (18 samples, 0.06%)</title><rect x="98.1781%" y="725" width="0.0603%" height="15" fill="rgb(243,151,13)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.06%)</title><rect x="98.1781%" y="709" width="0.0603%" height="15" fill="rgb(233,165,41)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.06%)</title><rect x="98.1781%" y="693" width="0.0603%" height="15" fill="rgb(246,176,45)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="703.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (18 samples, 0.06%)</title><rect x="98.1781%" y="677" width="0.0603%" height="15" fill="rgb(217,170,52)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="687.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (18 samples, 0.06%)</title><rect x="98.1781%" y="661" width="0.0603%" height="15" fill="rgb(214,203,54)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="671.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (18 samples, 0.06%)</title><rect x="98.1781%" y="645" width="0.0603%" height="15" fill="rgb(248,215,49)" fg:x="29315" fg:w="18"/><text x="98.4281%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (17 samples, 0.06%)</title><rect x="98.1815%" y="629" width="0.0569%" height="15" fill="rgb(208,46,10)" fg:x="29316" fg:w="17"/><text x="98.4315%" y="639.50"></text></g><g><title>syscall (17 samples, 0.06%)</title><rect x="98.1815%" y="613" width="0.0569%" height="15" fill="rgb(254,5,31)" fg:x="29316" fg:w="17"/><text x="98.4315%" y="623.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.02%)</title><rect x="98.2384%" y="677" width="0.0234%" height="15" fill="rgb(222,104,33)" fg:x="29333" fg:w="7"/><text x="98.4884%" y="687.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.02%)</title><rect x="98.2384%" y="661" width="0.0234%" height="15" fill="rgb(248,49,16)" fg:x="29333" fg:w="7"/><text x="98.4884%" y="671.50"></text></g><g><title>__GI___write (7 samples, 0.02%)</title><rect x="98.2384%" y="645" width="0.0234%" height="15" fill="rgb(232,198,41)" fg:x="29333" fg:w="7"/><text x="98.4884%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (13 samples, 0.04%)</title><rect x="98.2618%" y="677" width="0.0435%" height="15" fill="rgb(214,125,3)" fg:x="29340" fg:w="13"/><text x="98.5118%" y="687.50"></text></g><g><title>syscall (13 samples, 0.04%)</title><rect x="98.2618%" y="661" width="0.0435%" height="15" fill="rgb(229,220,28)" fg:x="29340" fg:w="13"/><text x="98.5118%" y="671.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (21 samples, 0.07%)</title><rect x="98.2384%" y="949" width="0.0703%" height="15" fill="rgb(222,64,37)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (21 samples, 0.07%)</title><rect x="98.2384%" y="933" width="0.0703%" height="15" fill="rgb(249,184,13)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="943.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (21 samples, 0.07%)</title><rect x="98.2384%" y="917" width="0.0703%" height="15" fill="rgb(252,176,6)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="927.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head::{{closure}} (21 samples, 0.07%)</title><rect x="98.2384%" y="901" width="0.0703%" height="15" fill="rgb(228,153,7)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="911.50"></text></g><g><title>tracing_core::event::Event::dispatch (21 samples, 0.07%)</title><rect x="98.2384%" y="885" width="0.0703%" height="15" fill="rgb(242,193,5)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="895.50"></text></g><g><title>tracing_core::dispatcher::get_default (21 samples, 0.07%)</title><rect x="98.2384%" y="869" width="0.0703%" height="15" fill="rgb(232,140,9)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="879.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (21 samples, 0.07%)</title><rect x="98.2384%" y="853" width="0.0703%" height="15" fill="rgb(213,222,16)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="863.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (21 samples, 0.07%)</title><rect x="98.2384%" y="837" width="0.0703%" height="15" fill="rgb(222,75,50)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (21 samples, 0.07%)</title><rect x="98.2384%" y="821" width="0.0703%" height="15" fill="rgb(205,180,2)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (21 samples, 0.07%)</title><rect x="98.2384%" y="805" width="0.0703%" height="15" fill="rgb(216,34,7)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (21 samples, 0.07%)</title><rect x="98.2384%" y="789" width="0.0703%" height="15" fill="rgb(253,16,32)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (21 samples, 0.07%)</title><rect x="98.2384%" y="773" width="0.0703%" height="15" fill="rgb(208,97,28)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.07%)</title><rect x="98.2384%" y="757" width="0.0703%" height="15" fill="rgb(225,92,11)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.07%)</title><rect x="98.2384%" y="741" width="0.0703%" height="15" fill="rgb(243,38,12)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (21 samples, 0.07%)</title><rect x="98.2384%" y="725" width="0.0703%" height="15" fill="rgb(208,139,16)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="735.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (21 samples, 0.07%)</title><rect x="98.2384%" y="709" width="0.0703%" height="15" fill="rgb(227,24,9)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="719.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (21 samples, 0.07%)</title><rect x="98.2384%" y="693" width="0.0703%" height="15" fill="rgb(206,62,11)" fg:x="29333" fg:w="21"/><text x="98.4884%" y="703.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (3 samples, 0.01%)</title><rect x="98.3087%" y="933" width="0.0100%" height="15" fill="rgb(228,134,27)" fg:x="29354" fg:w="3"/><text x="98.5587%" y="943.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (3 samples, 0.01%)</title><rect x="98.3087%" y="917" width="0.0100%" height="15" fill="rgb(205,55,33)" fg:x="29354" fg:w="3"/><text x="98.5587%" y="927.50"></text></g><g><title>&lt;axum::routing::Router&lt;(),B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (3 samples, 0.01%)</title><rect x="98.3087%" y="901" width="0.0100%" height="15" fill="rgb(243,75,43)" fg:x="29354" fg:w="3"/><text x="98.5587%" y="911.50"></text></g><g><title>axum::routing::Router&lt;S,B&gt;::call_with_state (3 samples, 0.01%)</title><rect x="98.3087%" y="885" width="0.0100%" height="15" fill="rgb(223,27,42)" fg:x="29354" fg:w="3"/><text x="98.5587%" y="895.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head::{{closure}} (3 samples, 0.01%)</title><rect x="98.3188%" y="917" width="0.0100%" height="15" fill="rgb(232,189,33)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="927.50"></text></g><g><title>tracing_core::event::Event::dispatch (3 samples, 0.01%)</title><rect x="98.3188%" y="901" width="0.0100%" height="15" fill="rgb(210,9,39)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="911.50"></text></g><g><title>tracing_core::dispatcher::get_default (3 samples, 0.01%)</title><rect x="98.3188%" y="885" width="0.0100%" height="15" fill="rgb(242,85,26)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="895.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (3 samples, 0.01%)</title><rect x="98.3188%" y="869" width="0.0100%" height="15" fill="rgb(248,44,4)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="879.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (3 samples, 0.01%)</title><rect x="98.3188%" y="853" width="0.0100%" height="15" fill="rgb(250,96,46)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (3 samples, 0.01%)</title><rect x="98.3188%" y="837" width="0.0100%" height="15" fill="rgb(229,116,26)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (3 samples, 0.01%)</title><rect x="98.3188%" y="821" width="0.0100%" height="15" fill="rgb(246,94,34)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (3 samples, 0.01%)</title><rect x="98.3188%" y="805" width="0.0100%" height="15" fill="rgb(251,73,21)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (3 samples, 0.01%)</title><rect x="98.3188%" y="789" width="0.0100%" height="15" fill="rgb(254,121,25)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="98.3188%" y="773" width="0.0100%" height="15" fill="rgb(215,161,49)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.01%)</title><rect x="98.3188%" y="757" width="0.0100%" height="15" fill="rgb(221,43,13)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (3 samples, 0.01%)</title><rect x="98.3188%" y="741" width="0.0100%" height="15" fill="rgb(249,5,37)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (3 samples, 0.01%)</title><rect x="98.3188%" y="725" width="0.0100%" height="15" fill="rgb(226,25,44)" fg:x="29357" fg:w="3"/><text x="98.5688%" y="735.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (8 samples, 0.03%)</title><rect x="98.3087%" y="949" width="0.0268%" height="15" fill="rgb(238,189,16)" fg:x="29354" fg:w="8"/><text x="98.5587%" y="959.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (5 samples, 0.02%)</title><rect x="98.3188%" y="933" width="0.0167%" height="15" fill="rgb(251,186,8)" fg:x="29357" fg:w="5"/><text x="98.5688%" y="943.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (3 samples, 0.01%)</title><rect x="98.3355%" y="949" width="0.0100%" height="15" fill="rgb(254,34,31)" fg:x="29362" fg:w="3"/><text x="98.5855%" y="959.50"></text></g><g><title>quick_xml::events::BytesStart::attributes (4 samples, 0.01%)</title><rect x="98.3824%" y="949" width="0.0134%" height="15" fill="rgb(225,215,27)" fg:x="29376" fg:w="4"/><text x="98.6324%" y="959.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (3 samples, 0.01%)</title><rect x="98.3958%" y="949" width="0.0100%" height="15" fill="rgb(221,192,48)" fg:x="29380" fg:w="3"/><text x="98.6458%" y="959.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (3 samples, 0.01%)</title><rect x="98.4326%" y="949" width="0.0100%" height="15" fill="rgb(219,137,20)" fg:x="29391" fg:w="3"/><text x="98.6826%" y="959.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (3 samples, 0.01%)</title><rect x="98.4326%" y="933" width="0.0100%" height="15" fill="rgb(219,84,11)" fg:x="29391" fg:w="3"/><text x="98.6826%" y="943.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_to_buffer (3 samples, 0.01%)</title><rect x="98.4427%" y="949" width="0.0100%" height="15" fill="rgb(224,10,23)" fg:x="29394" fg:w="3"/><text x="98.6927%" y="959.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (3 samples, 0.01%)</title><rect x="98.4427%" y="933" width="0.0100%" height="15" fill="rgb(248,22,39)" fg:x="29394" fg:w="3"/><text x="98.6927%" y="943.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (3 samples, 0.01%)</title><rect x="98.4427%" y="917" width="0.0100%" height="15" fill="rgb(212,154,20)" fg:x="29394" fg:w="3"/><text x="98.6927%" y="927.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.01%)</title><rect x="98.4795%" y="949" width="0.0134%" height="15" fill="rgb(236,199,50)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="959.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.01%)</title><rect x="98.4795%" y="933" width="0.0134%" height="15" fill="rgb(211,9,17)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="943.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (4 samples, 0.01%)</title><rect x="98.4795%" y="917" width="0.0134%" height="15" fill="rgb(243,216,36)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="927.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="98.4795%" y="901" width="0.0134%" height="15" fill="rgb(250,2,10)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="911.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="98.4795%" y="885" width="0.0134%" height="15" fill="rgb(226,50,48)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="895.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="98.4795%" y="869" width="0.0134%" height="15" fill="rgb(243,81,16)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="879.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.01%)</title><rect x="98.4795%" y="853" width="0.0134%" height="15" fill="rgb(250,14,2)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="863.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 0.01%)</title><rect x="98.4795%" y="837" width="0.0134%" height="15" fill="rgb(233,135,29)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="847.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (4 samples, 0.01%)</title><rect x="98.4795%" y="821" width="0.0134%" height="15" fill="rgb(224,64,43)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="831.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (4 samples, 0.01%)</title><rect x="98.4795%" y="805" width="0.0134%" height="15" fill="rgb(238,84,13)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="815.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (4 samples, 0.01%)</title><rect x="98.4795%" y="789" width="0.0134%" height="15" fill="rgb(253,48,26)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="799.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4 samples, 0.01%)</title><rect x="98.4795%" y="773" width="0.0134%" height="15" fill="rgb(205,223,31)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="783.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush::{{closure}} (4 samples, 0.01%)</title><rect x="98.4795%" y="757" width="0.0134%" height="15" fill="rgb(221,41,32)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="767.50"></text></g><g><title>tracing_core::event::Event::dispatch (4 samples, 0.01%)</title><rect x="98.4795%" y="741" width="0.0134%" height="15" fill="rgb(213,158,31)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="751.50"></text></g><g><title>tracing_core::dispatcher::get_default (4 samples, 0.01%)</title><rect x="98.4795%" y="725" width="0.0134%" height="15" fill="rgb(245,126,43)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="735.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (4 samples, 0.01%)</title><rect x="98.4795%" y="709" width="0.0134%" height="15" fill="rgb(227,7,22)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="719.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (4 samples, 0.01%)</title><rect x="98.4795%" y="693" width="0.0134%" height="15" fill="rgb(252,90,44)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="703.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.01%)</title><rect x="98.4795%" y="677" width="0.0134%" height="15" fill="rgb(253,91,0)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.01%)</title><rect x="98.4795%" y="661" width="0.0134%" height="15" fill="rgb(252,175,49)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="671.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.01%)</title><rect x="98.4795%" y="645" width="0.0134%" height="15" fill="rgb(246,150,1)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="655.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (4 samples, 0.01%)</title><rect x="98.4795%" y="629" width="0.0134%" height="15" fill="rgb(241,192,25)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.01%)</title><rect x="98.4795%" y="613" width="0.0134%" height="15" fill="rgb(239,187,11)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.01%)</title><rect x="98.4795%" y="597" width="0.0134%" height="15" fill="rgb(218,202,51)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="607.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (4 samples, 0.01%)</title><rect x="98.4795%" y="581" width="0.0134%" height="15" fill="rgb(225,176,8)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="591.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (4 samples, 0.01%)</title><rect x="98.4795%" y="565" width="0.0134%" height="15" fill="rgb(219,122,41)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="575.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (4 samples, 0.01%)</title><rect x="98.4795%" y="549" width="0.0134%" height="15" fill="rgb(248,140,20)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="559.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 0.01%)</title><rect x="98.4795%" y="533" width="0.0134%" height="15" fill="rgb(245,41,37)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.01%)</title><rect x="98.4795%" y="517" width="0.0134%" height="15" fill="rgb(235,82,39)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="527.50"></text></g><g><title>__GI___write (4 samples, 0.01%)</title><rect x="98.4795%" y="501" width="0.0134%" height="15" fill="rgb(230,108,42)" fg:x="29405" fg:w="4"/><text x="98.7295%" y="511.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (40 samples, 0.13%)</title><rect x="98.4929%" y="949" width="0.1340%" height="15" fill="rgb(215,150,50)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="959.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (40 samples, 0.13%)</title><rect x="98.4929%" y="933" width="0.1340%" height="15" fill="rgb(233,212,5)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="943.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (40 samples, 0.13%)</title><rect x="98.4929%" y="917" width="0.1340%" height="15" fill="rgb(245,80,22)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="927.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (40 samples, 0.13%)</title><rect x="98.4929%" y="901" width="0.1340%" height="15" fill="rgb(238,129,16)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="911.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (40 samples, 0.13%)</title><rect x="98.4929%" y="885" width="0.1340%" height="15" fill="rgb(240,19,0)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="895.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (40 samples, 0.13%)</title><rect x="98.4929%" y="869" width="0.1340%" height="15" fill="rgb(232,42,35)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="879.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (40 samples, 0.13%)</title><rect x="98.4929%" y="853" width="0.1340%" height="15" fill="rgb(223,130,24)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="863.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (40 samples, 0.13%)</title><rect x="98.4929%" y="837" width="0.1340%" height="15" fill="rgb(237,16,22)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="847.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (40 samples, 0.13%)</title><rect x="98.4929%" y="821" width="0.1340%" height="15" fill="rgb(248,192,20)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="831.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (40 samples, 0.13%)</title><rect x="98.4929%" y="805" width="0.1340%" height="15" fill="rgb(233,167,2)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="815.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (40 samples, 0.13%)</title><rect x="98.4929%" y="789" width="0.1340%" height="15" fill="rgb(252,71,44)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="799.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (40 samples, 0.13%)</title><rect x="98.4929%" y="773" width="0.1340%" height="15" fill="rgb(238,37,47)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="783.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (40 samples, 0.13%)</title><rect x="98.4929%" y="757" width="0.1340%" height="15" fill="rgb(214,202,54)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="767.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush::{{closure}} (40 samples, 0.13%)</title><rect x="98.4929%" y="741" width="0.1340%" height="15" fill="rgb(254,165,40)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="751.50"></text></g><g><title>tracing_core::event::Event::dispatch (40 samples, 0.13%)</title><rect x="98.4929%" y="725" width="0.1340%" height="15" fill="rgb(246,173,38)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="735.50"></text></g><g><title>tracing_core::dispatcher::get_default (40 samples, 0.13%)</title><rect x="98.4929%" y="709" width="0.1340%" height="15" fill="rgb(215,3,27)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="719.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (40 samples, 0.13%)</title><rect x="98.4929%" y="693" width="0.1340%" height="15" fill="rgb(239,169,51)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (40 samples, 0.13%)</title><rect x="98.4929%" y="677" width="0.1340%" height="15" fill="rgb(212,5,25)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (40 samples, 0.13%)</title><rect x="98.4929%" y="661" width="0.1340%" height="15" fill="rgb(243,45,17)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="671.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (40 samples, 0.13%)</title><rect x="98.4929%" y="645" width="0.1340%" height="15" fill="rgb(242,97,9)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="655.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (40 samples, 0.13%)</title><rect x="98.4929%" y="629" width="0.1340%" height="15" fill="rgb(228,71,31)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="639.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (40 samples, 0.13%)</title><rect x="98.4929%" y="613" width="0.1340%" height="15" fill="rgb(252,184,16)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.13%)</title><rect x="98.4929%" y="597" width="0.1340%" height="15" fill="rgb(236,169,46)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (40 samples, 0.13%)</title><rect x="98.4929%" y="581" width="0.1340%" height="15" fill="rgb(207,17,47)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="591.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (40 samples, 0.13%)</title><rect x="98.4929%" y="565" width="0.1340%" height="15" fill="rgb(206,201,28)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="575.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (40 samples, 0.13%)</title><rect x="98.4929%" y="549" width="0.1340%" height="15" fill="rgb(224,184,23)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="559.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (40 samples, 0.13%)</title><rect x="98.4929%" y="533" width="0.1340%" height="15" fill="rgb(208,139,48)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (40 samples, 0.13%)</title><rect x="98.4929%" y="517" width="0.1340%" height="15" fill="rgb(208,130,10)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="527.50"></text></g><g><title>syscall (40 samples, 0.13%)</title><rect x="98.4929%" y="501" width="0.1340%" height="15" fill="rgb(211,213,45)" fg:x="29409" fg:w="40"/><text x="98.7429%" y="511.50"></text></g><g><title>[unknown] (28,160 samples, 94.31%)</title><rect x="4.3337%" y="965" width="94.3099%" height="15" fill="rgb(235,100,30)" fg:x="1294" fg:w="28160"/><text x="4.5837%" y="975.50">[unknown]</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.01%)</title><rect x="98.6302%" y="949" width="0.0134%" height="15" fill="rgb(206,144,31)" fg:x="29450" fg:w="4"/><text x="98.8802%" y="959.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (3 samples, 0.01%)</title><rect x="98.6838%" y="677" width="0.0100%" height="15" fill="rgb(224,200,26)" fg:x="29466" fg:w="3"/><text x="98.9338%" y="687.50"></text></g><g><title>alloc::collections::btree::mem::replace (3 samples, 0.01%)</title><rect x="98.6838%" y="661" width="0.0100%" height="15" fill="rgb(247,104,53)" fg:x="29466" fg:w="3"/><text x="98.9338%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="98.6838%" y="709" width="0.0201%" height="15" fill="rgb(220,14,17)" fg:x="29466" fg:w="6"/><text x="98.9338%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (6 samples, 0.02%)</title><rect x="98.6838%" y="693" width="0.0201%" height="15" fill="rgb(230,140,40)" fg:x="29466" fg:w="6"/><text x="98.9338%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (3 samples, 0.01%)</title><rect x="98.6939%" y="677" width="0.0100%" height="15" fill="rgb(229,2,41)" fg:x="29469" fg:w="3"/><text x="98.9439%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (7 samples, 0.02%)</title><rect x="98.7039%" y="709" width="0.0234%" height="15" fill="rgb(232,89,16)" fg:x="29472" fg:w="7"/><text x="98.9539%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.02%)</title><rect x="98.7073%" y="693" width="0.0201%" height="15" fill="rgb(247,59,52)" fg:x="29473" fg:w="6"/><text x="98.9573%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (5 samples, 0.02%)</title><rect x="98.7106%" y="677" width="0.0167%" height="15" fill="rgb(226,110,21)" fg:x="29474" fg:w="5"/><text x="98.9606%" y="687.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.01%)</title><rect x="98.7140%" y="661" width="0.0134%" height="15" fill="rgb(224,176,43)" fg:x="29475" fg:w="4"/><text x="98.9640%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (4 samples, 0.01%)</title><rect x="98.7374%" y="597" width="0.0134%" height="15" fill="rgb(221,73,6)" fg:x="29482" fg:w="4"/><text x="98.9874%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (5 samples, 0.02%)</title><rect x="98.7374%" y="645" width="0.0167%" height="15" fill="rgb(232,78,19)" fg:x="29482" fg:w="5"/><text x="98.9874%" y="655.50"></text></g><g><title>alloc::collections::btree::mem::replace (5 samples, 0.02%)</title><rect x="98.7374%" y="629" width="0.0167%" height="15" fill="rgb(233,112,48)" fg:x="29482" fg:w="5"/><text x="98.9874%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (5 samples, 0.02%)</title><rect x="98.7374%" y="613" width="0.0167%" height="15" fill="rgb(243,131,47)" fg:x="29482" fg:w="5"/><text x="98.9874%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="98.7274%" y="693" width="0.0301%" height="15" fill="rgb(226,51,1)" fg:x="29479" fg:w="9"/><text x="98.9774%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="98.7307%" y="677" width="0.0268%" height="15" fill="rgb(247,58,7)" fg:x="29480" fg:w="8"/><text x="98.9807%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (7 samples, 0.02%)</title><rect x="98.7341%" y="661" width="0.0234%" height="15" fill="rgb(209,7,32)" fg:x="29481" fg:w="7"/><text x="98.9841%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (7 samples, 0.02%)</title><rect x="98.7575%" y="693" width="0.0234%" height="15" fill="rgb(209,39,41)" fg:x="29488" fg:w="7"/><text x="99.0075%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (7 samples, 0.02%)</title><rect x="98.7575%" y="677" width="0.0234%" height="15" fill="rgb(226,182,46)" fg:x="29488" fg:w="7"/><text x="99.0075%" y="687.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (6 samples, 0.02%)</title><rect x="98.7608%" y="661" width="0.0201%" height="15" fill="rgb(230,219,10)" fg:x="29489" fg:w="6"/><text x="99.0108%" y="671.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.02%)</title><rect x="98.7642%" y="645" width="0.0167%" height="15" fill="rgb(227,175,30)" fg:x="29490" fg:w="5"/><text x="99.0142%" y="655.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::calculate_spans (19 samples, 0.06%)</title><rect x="98.7274%" y="709" width="0.0636%" height="15" fill="rgb(217,2,50)" fg:x="29479" fg:w="19"/><text x="98.9774%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.03%)</title><rect x="98.8044%" y="613" width="0.0268%" height="15" fill="rgb(229,160,0)" fg:x="29502" fg:w="8"/><text x="99.0544%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.02%)</title><rect x="98.8077%" y="597" width="0.0234%" height="15" fill="rgb(207,78,37)" fg:x="29503" fg:w="7"/><text x="99.0577%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.02%)</title><rect x="98.8077%" y="581" width="0.0234%" height="15" fill="rgb(225,57,0)" fg:x="29503" fg:w="7"/><text x="99.0577%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.01%)</title><rect x="98.8178%" y="565" width="0.0134%" height="15" fill="rgb(232,154,2)" fg:x="29506" fg:w="4"/><text x="99.0678%" y="575.50"></text></g><g><title>__memmove_sse2_unaligned_erms (3 samples, 0.01%)</title><rect x="98.8312%" y="565" width="0.0100%" height="15" fill="rgb(241,212,25)" fg:x="29510" fg:w="3"/><text x="99.0812%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.01%)</title><rect x="98.8312%" y="613" width="0.0134%" height="15" fill="rgb(226,69,20)" fg:x="29510" fg:w="4"/><text x="99.0812%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.01%)</title><rect x="98.8312%" y="597" width="0.0134%" height="15" fill="rgb(247,184,54)" fg:x="29510" fg:w="4"/><text x="99.0812%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.01%)</title><rect x="98.8312%" y="581" width="0.0134%" height="15" fill="rgb(210,145,0)" fg:x="29510" fg:w="4"/><text x="99.0812%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.05%)</title><rect x="98.8010%" y="645" width="0.0469%" height="15" fill="rgb(253,82,12)" fg:x="29501" fg:w="14"/><text x="99.0510%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.05%)</title><rect x="98.8010%" y="629" width="0.0469%" height="15" fill="rgb(245,42,11)" fg:x="29501" fg:w="14"/><text x="99.0510%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="98.8580%" y="597" width="0.0100%" height="15" fill="rgb(219,147,32)" fg:x="29518" fg:w="3"/><text x="99.1080%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.01%)</title><rect x="98.8680%" y="597" width="0.0100%" height="15" fill="rgb(246,12,7)" fg:x="29521" fg:w="3"/><text x="99.1180%" y="607.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_cell_xf_index (30 samples, 0.10%)</title><rect x="98.7910%" y="709" width="0.1005%" height="15" fill="rgb(243,50,9)" fg:x="29498" fg:w="30"/><text x="99.0410%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (30 samples, 0.10%)</title><rect x="98.7910%" y="693" width="0.1005%" height="15" fill="rgb(219,149,6)" fg:x="29498" fg:w="30"/><text x="99.0410%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (29 samples, 0.10%)</title><rect x="98.7943%" y="677" width="0.0971%" height="15" fill="rgb(241,51,42)" fg:x="29499" fg:w="29"/><text x="99.0443%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.09%)</title><rect x="98.8010%" y="661" width="0.0904%" height="15" fill="rgb(226,128,27)" fg:x="29501" fg:w="27"/><text x="99.0510%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.04%)</title><rect x="98.8479%" y="645" width="0.0435%" height="15" fill="rgb(244,144,4)" fg:x="29515" fg:w="13"/><text x="99.0979%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.04%)</title><rect x="98.8479%" y="629" width="0.0435%" height="15" fill="rgb(221,4,13)" fg:x="29515" fg:w="13"/><text x="99.0979%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.04%)</title><rect x="98.8479%" y="613" width="0.0435%" height="15" fill="rgb(208,170,28)" fg:x="29515" fg:w="13"/><text x="99.0979%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.01%)</title><rect x="98.8814%" y="597" width="0.0100%" height="15" fill="rgb(226,131,13)" fg:x="29525" fg:w="3"/><text x="99.1314%" y="607.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="98.9216%" y="613" width="0.0100%" height="15" fill="rgb(215,72,41)" fg:x="29537" fg:w="3"/><text x="99.1716%" y="623.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="98.9216%" y="597" width="0.0100%" height="15" fill="rgb(243,108,20)" fg:x="29537" fg:w="3"/><text x="99.1716%" y="607.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.02%)</title><rect x="98.9182%" y="645" width="0.0167%" height="15" fill="rgb(230,189,17)" fg:x="29536" fg:w="5"/><text x="99.1682%" y="655.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.02%)</title><rect x="98.9182%" y="629" width="0.0167%" height="15" fill="rgb(220,50,17)" fg:x="29536" fg:w="5"/><text x="99.1682%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (6 samples, 0.02%)</title><rect x="98.9182%" y="661" width="0.0201%" height="15" fill="rgb(248,152,48)" fg:x="29536" fg:w="6"/><text x="99.1682%" y="671.50"></text></g><g><title>std::io::cursor::reserve_and_pad (5 samples, 0.02%)</title><rect x="98.9685%" y="597" width="0.0167%" height="15" fill="rgb(244,91,11)" fg:x="29551" fg:w="5"/><text x="99.2185%" y="607.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (10 samples, 0.03%)</title><rect x="98.9584%" y="629" width="0.0335%" height="15" fill="rgb(220,157,5)" fg:x="29548" fg:w="10"/><text x="99.2084%" y="639.50"></text></g><g><title>std::io::cursor::vec_write (10 samples, 0.03%)</title><rect x="98.9584%" y="613" width="0.0335%" height="15" fill="rgb(253,137,8)" fg:x="29548" fg:w="10"/><text x="99.2084%" y="623.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (21 samples, 0.07%)</title><rect x="98.9383%" y="661" width="0.0703%" height="15" fill="rgb(217,137,51)" fg:x="29542" fg:w="21"/><text x="99.1883%" y="671.50"></text></g><g><title>std::io::Write::write_all (19 samples, 0.06%)</title><rect x="98.9450%" y="645" width="0.0636%" height="15" fill="rgb(218,209,53)" fg:x="29544" fg:w="19"/><text x="99.1950%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.02%)</title><rect x="98.9919%" y="629" width="0.0167%" height="15" fill="rgb(249,137,25)" fg:x="29558" fg:w="5"/><text x="99.2419%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.02%)</title><rect x="98.9919%" y="613" width="0.0167%" height="15" fill="rgb(239,155,26)" fg:x="29558" fg:w="5"/><text x="99.2419%" y="623.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.01%)</title><rect x="98.9986%" y="597" width="0.0100%" height="15" fill="rgb(227,85,46)" fg:x="29560" fg:w="3"/><text x="99.2486%" y="607.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.02%)</title><rect x="99.0288%" y="613" width="0.0167%" height="15" fill="rgb(251,107,43)" fg:x="29569" fg:w="5"/><text x="99.2788%" y="623.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.01%)</title><rect x="99.0321%" y="597" width="0.0134%" height="15" fill="rgb(234,170,33)" fg:x="29570" fg:w="4"/><text x="99.2821%" y="607.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.04%)</title><rect x="99.0120%" y="645" width="0.0402%" height="15" fill="rgb(206,29,35)" fg:x="29564" fg:w="12"/><text x="99.2620%" y="655.50"></text></g><g><title>std::io::Write::write_all (10 samples, 0.03%)</title><rect x="99.0187%" y="629" width="0.0335%" height="15" fill="rgb(227,138,25)" fg:x="29566" fg:w="10"/><text x="99.2687%" y="639.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string_cell (51 samples, 0.17%)</title><rect x="98.8915%" y="709" width="0.1708%" height="15" fill="rgb(249,131,35)" fg:x="29528" fg:w="51"/><text x="99.1415%" y="719.50"></text></g><g><title>std::io::Write::write_fmt (44 samples, 0.15%)</title><rect x="98.9149%" y="693" width="0.1474%" height="15" fill="rgb(239,6,40)" fg:x="29535" fg:w="44"/><text x="99.1649%" y="703.50"></text></g><g><title>core::fmt::write (44 samples, 0.15%)</title><rect x="98.9149%" y="677" width="0.1474%" height="15" fill="rgb(246,136,47)" fg:x="29535" fg:w="44"/><text x="99.1649%" y="687.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (16 samples, 0.05%)</title><rect x="99.0087%" y="661" width="0.0536%" height="15" fill="rgb(253,58,26)" fg:x="29563" fg:w="16"/><text x="99.2587%" y="671.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.01%)</title><rect x="99.0522%" y="645" width="0.0100%" height="15" fill="rgb(237,141,10)" fg:x="29576" fg:w="3"/><text x="99.3022%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="99.0824%" y="629" width="0.0100%" height="15" fill="rgb(234,156,12)" fg:x="29585" fg:w="3"/><text x="99.3324%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="99.0824%" y="613" width="0.0100%" height="15" fill="rgb(243,224,36)" fg:x="29585" fg:w="3"/><text x="99.3324%" y="623.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="99.0824%" y="597" width="0.0100%" height="15" fill="rgb(205,229,51)" fg:x="29585" fg:w="3"/><text x="99.3324%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="99.0824%" y="693" width="0.0134%" height="15" fill="rgb(223,189,4)" fg:x="29585" fg:w="4"/><text x="99.3324%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.01%)</title><rect x="99.0824%" y="677" width="0.0134%" height="15" fill="rgb(249,167,54)" fg:x="29585" fg:w="4"/><text x="99.3324%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="99.0824%" y="661" width="0.0134%" height="15" fill="rgb(218,34,28)" fg:x="29585" fg:w="4"/><text x="99.3324%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="99.0824%" y="645" width="0.0134%" height="15" fill="rgb(232,109,42)" fg:x="29585" fg:w="4"/><text x="99.3324%" y="655.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (6 samples, 0.02%)</title><rect x="99.0991%" y="677" width="0.0201%" height="15" fill="rgb(248,214,46)" fg:x="29590" fg:w="6"/><text x="99.3491%" y="687.50"></text></g><g><title>std::io::Write::write_fmt (5 samples, 0.02%)</title><rect x="99.1024%" y="661" width="0.0167%" height="15" fill="rgb(244,216,40)" fg:x="29591" fg:w="5"/><text x="99.3524%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.02%)</title><rect x="99.1024%" y="645" width="0.0167%" height="15" fill="rgb(231,226,31)" fg:x="29591" fg:w="5"/><text x="99.3524%" y="655.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="99.1091%" y="629" width="0.0100%" height="15" fill="rgb(238,38,43)" fg:x="29593" fg:w="3"/><text x="99.3591%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.01%)</title><rect x="99.1091%" y="613" width="0.0100%" height="15" fill="rgb(208,88,43)" fg:x="29593" fg:w="3"/><text x="99.3591%" y="623.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.01%)</title><rect x="99.1091%" y="597" width="0.0100%" height="15" fill="rgb(205,136,37)" fg:x="29593" fg:w="3"/><text x="99.3591%" y="607.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.01%)</title><rect x="99.1091%" y="581" width="0.0100%" height="15" fill="rgb(237,34,14)" fg:x="29593" fg:w="3"/><text x="99.3591%" y="591.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_table_row (20 samples, 0.07%)</title><rect x="99.0623%" y="709" width="0.0670%" height="15" fill="rgb(236,193,44)" fg:x="29579" fg:w="20"/><text x="99.3123%" y="719.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag (9 samples, 0.03%)</title><rect x="99.0991%" y="693" width="0.0301%" height="15" fill="rgb(231,48,10)" fg:x="29590" fg:w="9"/><text x="99.3491%" y="703.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file::{{closure}}::{{closure}} (137 samples, 0.46%)</title><rect x="98.6771%" y="773" width="0.4588%" height="15" fill="rgb(213,141,34)" fg:x="29464" fg:w="137"/><text x="98.9271%" y="783.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::assemble_xml_file (137 samples, 0.46%)</title><rect x="98.6771%" y="757" width="0.4588%" height="15" fill="rgb(249,130,34)" fg:x="29464" fg:w="137"/><text x="98.9271%" y="767.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_sheet_data (137 samples, 0.46%)</title><rect x="98.6771%" y="741" width="0.4588%" height="15" fill="rgb(219,42,41)" fg:x="29464" fg:w="137"/><text x="98.9271%" y="751.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_data_table (137 samples, 0.46%)</title><rect x="98.6771%" y="725" width="0.4588%" height="15" fill="rgb(224,100,54)" fg:x="29464" fg:w="137"/><text x="98.9271%" y="735.50"></text></g><g><title>core::mem::drop (3 samples, 0.01%)</title><rect x="99.1359%" y="741" width="0.0100%" height="15" fill="rgb(229,200,27)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 0.01%)</title><rect x="99.1359%" y="725" width="0.0100%" height="15" fill="rgb(217,118,10)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 0.01%)</title><rect x="99.1359%" y="709" width="0.0100%" height="15" fill="rgb(206,22,3)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="719.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="99.1359%" y="693" width="0.0100%" height="15" fill="rgb(232,163,46)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.01%)</title><rect x="99.1359%" y="677" width="0.0100%" height="15" fill="rgb(206,95,13)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="687.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (3 samples, 0.01%)</title><rect x="99.1359%" y="661" width="0.0100%" height="15" fill="rgb(253,154,18)" fg:x="29601" fg:w="3"/><text x="99.3859%" y="671.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (16 samples, 0.05%)</title><rect x="99.1460%" y="629" width="0.0536%" height="15" fill="rgb(219,32,23)" fg:x="29604" fg:w="16"/><text x="99.3960%" y="639.50"></text></g><g><title>syscall (16 samples, 0.05%)</title><rect x="99.1460%" y="613" width="0.0536%" height="15" fill="rgb(230,191,45)" fg:x="29604" fg:w="16"/><text x="99.3960%" y="623.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait_timeout (17 samples, 0.06%)</title><rect x="99.1460%" y="741" width="0.0569%" height="15" fill="rgb(229,64,36)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="751.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_for (17 samples, 0.06%)</title><rect x="99.1460%" y="725" width="0.0569%" height="15" fill="rgb(205,129,25)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="735.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (17 samples, 0.06%)</title><rect x="99.1460%" y="709" width="0.0569%" height="15" fill="rgb(254,112,7)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::park (17 samples, 0.06%)</title><rect x="99.1460%" y="693" width="0.0569%" height="15" fill="rgb(226,53,48)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (17 samples, 0.06%)</title><rect x="99.1460%" y="677" width="0.0569%" height="15" fill="rgb(214,153,38)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (17 samples, 0.06%)</title><rect x="99.1460%" y="661" width="0.0569%" height="15" fill="rgb(243,101,7)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (17 samples, 0.06%)</title><rect x="99.1460%" y="645" width="0.0569%" height="15" fill="rgb(240,140,22)" fg:x="29604" fg:w="17"/><text x="99.3960%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (17 samples, 0.06%)</title><rect x="99.2029%" y="645" width="0.0569%" height="15" fill="rgb(235,114,2)" fg:x="29621" fg:w="17"/><text x="99.4529%" y="655.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (17 samples, 0.06%)</title><rect x="99.2029%" y="629" width="0.0569%" height="15" fill="rgb(242,59,12)" fg:x="29621" fg:w="17"/><text x="99.4529%" y="639.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (17 samples, 0.06%)</title><rect x="99.2029%" y="613" width="0.0569%" height="15" fill="rgb(252,134,9)" fg:x="29621" fg:w="17"/><text x="99.4529%" y="623.50"></text></g><g><title>syscall (16 samples, 0.05%)</title><rect x="99.2063%" y="597" width="0.0536%" height="15" fill="rgb(236,4,44)" fg:x="29622" fg:w="16"/><text x="99.4563%" y="607.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (18 samples, 0.06%)</title><rect x="99.2029%" y="741" width="0.0603%" height="15" fill="rgb(254,172,41)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="751.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (18 samples, 0.06%)</title><rect x="99.2029%" y="725" width="0.0603%" height="15" fill="rgb(244,63,20)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="735.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (18 samples, 0.06%)</title><rect x="99.2029%" y="709" width="0.0603%" height="15" fill="rgb(250,73,31)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="719.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (18 samples, 0.06%)</title><rect x="99.2029%" y="693" width="0.0603%" height="15" fill="rgb(241,38,36)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::park (18 samples, 0.06%)</title><rect x="99.2029%" y="677" width="0.0603%" height="15" fill="rgb(245,211,2)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="687.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (18 samples, 0.06%)</title><rect x="99.2029%" y="661" width="0.0603%" height="15" fill="rgb(206,120,28)" fg:x="29621" fg:w="18"/><text x="99.4529%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (6 samples, 0.02%)</title><rect x="99.2632%" y="133" width="0.0201%" height="15" fill="rgb(211,59,34)" fg:x="29639" fg:w="6"/><text x="99.5132%" y="143.50"></text></g><g><title>syscall (6 samples, 0.02%)</title><rect x="99.2632%" y="117" width="0.0201%" height="15" fill="rgb(233,168,5)" fg:x="29639" fg:w="6"/><text x="99.5132%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (7 samples, 0.02%)</title><rect x="99.2632%" y="661" width="0.0234%" height="15" fill="rgb(234,33,13)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="671.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.02%)</title><rect x="99.2632%" y="645" width="0.0234%" height="15" fill="rgb(231,150,26)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="655.50"></text></g><g><title>std::panicking::try (7 samples, 0.02%)</title><rect x="99.2632%" y="629" width="0.0234%" height="15" fill="rgb(217,191,4)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="639.50"></text></g><g><title>__rust_try (7 samples, 0.02%)</title><rect x="99.2632%" y="613" width="0.0234%" height="15" fill="rgb(246,198,38)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="623.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.02%)</title><rect x="99.2632%" y="597" width="0.0234%" height="15" fill="rgb(245,64,37)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="607.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7 samples, 0.02%)</title><rect x="99.2632%" y="581" width="0.0234%" height="15" fill="rgb(250,30,36)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.02%)</title><rect x="99.2632%" y="565" width="0.0234%" height="15" fill="rgb(217,86,53)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="575.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::{{closure}} (7 samples, 0.02%)</title><rect x="99.2632%" y="549" width="0.0234%" height="15" fill="rgb(228,157,16)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="559.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (7 samples, 0.02%)</title><rect x="99.2632%" y="533" width="0.0234%" height="15" fill="rgb(217,59,31)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="543.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (7 samples, 0.02%)</title><rect x="99.2632%" y="517" width="0.0234%" height="15" fill="rgb(237,138,41)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join::{{closure}} (7 samples, 0.02%)</title><rect x="99.2632%" y="501" width="0.0234%" height="15" fill="rgb(227,91,49)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (7 samples, 0.02%)</title><rect x="99.2632%" y="485" width="0.0234%" height="15" fill="rgb(247,21,44)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (7 samples, 0.02%)</title><rect x="99.2632%" y="469" width="0.0234%" height="15" fill="rgb(219,210,51)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (7 samples, 0.02%)</title><rect x="99.2632%" y="453" width="0.0234%" height="15" fill="rgb(209,140,6)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="463.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (7 samples, 0.02%)</title><rect x="99.2632%" y="437" width="0.0234%" height="15" fill="rgb(221,188,24)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::schedule (7 samples, 0.02%)</title><rect x="99.2632%" y="421" width="0.0234%" height="15" fill="rgb(232,154,20)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 0.02%)</title><rect x="99.2632%" y="405" width="0.0234%" height="15" fill="rgb(244,137,50)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (7 samples, 0.02%)</title><rect x="99.2632%" y="389" width="0.0234%" height="15" fill="rgb(225,185,43)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (7 samples, 0.02%)</title><rect x="99.2632%" y="373" width="0.0234%" height="15" fill="rgb(213,205,38)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="383.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 0.02%)</title><rect x="99.2632%" y="357" width="0.0234%" height="15" fill="rgb(236,73,12)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.02%)</title><rect x="99.2632%" y="341" width="0.0234%" height="15" fill="rgb(235,219,13)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="351.50"></text></g><g><title>tokio::runtime::context::with_scheduler::{{closure}} (7 samples, 0.02%)</title><rect x="99.2632%" y="325" width="0.0234%" height="15" fill="rgb(218,59,36)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="335.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (7 samples, 0.02%)</title><rect x="99.2632%" y="309" width="0.0234%" height="15" fill="rgb(205,110,39)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::{{closure}} (7 samples, 0.02%)</title><rect x="99.2632%" y="293" width="0.0234%" height="15" fill="rgb(218,206,42)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (7 samples, 0.02%)</title><rect x="99.2632%" y="277" width="0.0234%" height="15" fill="rgb(248,125,24)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (7 samples, 0.02%)</title><rect x="99.2632%" y="261" width="0.0234%" height="15" fill="rgb(242,28,27)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (7 samples, 0.02%)</title><rect x="99.2632%" y="245" width="0.0234%" height="15" fill="rgb(216,228,15)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (7 samples, 0.02%)</title><rect x="99.2632%" y="229" width="0.0234%" height="15" fill="rgb(235,116,46)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (7 samples, 0.02%)</title><rect x="99.2632%" y="213" width="0.0234%" height="15" fill="rgb(224,18,32)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="223.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (7 samples, 0.02%)</title><rect x="99.2632%" y="197" width="0.0234%" height="15" fill="rgb(252,5,12)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (7 samples, 0.02%)</title><rect x="99.2632%" y="181" width="0.0234%" height="15" fill="rgb(251,36,5)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.02%)</title><rect x="99.2632%" y="165" width="0.0234%" height="15" fill="rgb(217,53,14)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="175.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (7 samples, 0.02%)</title><rect x="99.2632%" y="149" width="0.0234%" height="15" fill="rgb(215,86,45)" fg:x="29639" fg:w="7"/><text x="99.5132%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.02%)</title><rect x="99.2967%" y="261" width="0.0201%" height="15" fill="rgb(242,169,11)" fg:x="29649" fg:w="6"/><text x="99.5467%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.02%)</title><rect x="99.2967%" y="245" width="0.0201%" height="15" fill="rgb(211,213,45)" fg:x="29649" fg:w="6"/><text x="99.5467%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (21 samples, 0.07%)</title><rect x="99.3168%" y="229" width="0.0703%" height="15" fill="rgb(205,88,11)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="239.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (21 samples, 0.07%)</title><rect x="99.3168%" y="213" width="0.0703%" height="15" fill="rgb(252,69,26)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (21 samples, 0.07%)</title><rect x="99.3168%" y="197" width="0.0703%" height="15" fill="rgb(246,123,37)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (21 samples, 0.07%)</title><rect x="99.3168%" y="181" width="0.0703%" height="15" fill="rgb(212,205,5)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="191.50"></text></g><g><title>parking_lot_core::parking_lot::park (21 samples, 0.07%)</title><rect x="99.3168%" y="165" width="0.0703%" height="15" fill="rgb(253,148,0)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="175.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (21 samples, 0.07%)</title><rect x="99.3168%" y="149" width="0.0703%" height="15" fill="rgb(239,22,4)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (21 samples, 0.07%)</title><rect x="99.3168%" y="133" width="0.0703%" height="15" fill="rgb(226,26,53)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="143.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (21 samples, 0.07%)</title><rect x="99.3168%" y="117" width="0.0703%" height="15" fill="rgb(225,229,45)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="127.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (21 samples, 0.07%)</title><rect x="99.3168%" y="101" width="0.0703%" height="15" fill="rgb(220,60,37)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="111.50"></text></g><g><title>syscall (21 samples, 0.07%)</title><rect x="99.3168%" y="85" width="0.0703%" height="15" fill="rgb(217,180,35)" fg:x="29655" fg:w="21"/><text x="99.5668%" y="95.50"></text></g><g><title>tokio::runtime::driver::IoStack::park (21 samples, 0.07%)</title><rect x="99.3871%" y="149" width="0.0703%" height="15" fill="rgb(229,7,53)" fg:x="29676" fg:w="21"/><text x="99.6371%" y="159.50"></text></g><g><title>tokio::runtime::process::Driver::park (21 samples, 0.07%)</title><rect x="99.3871%" y="133" width="0.0703%" height="15" fill="rgb(254,137,3)" fg:x="29676" fg:w="21"/><text x="99.6371%" y="143.50"></text></g><g><title>tokio::runtime::signal::Driver::park (21 samples, 0.07%)</title><rect x="99.3871%" y="117" width="0.0703%" height="15" fill="rgb(215,140,41)" fg:x="29676" fg:w="21"/><text x="99.6371%" y="127.50"></text></g><g><title>tokio::runtime::io::driver::Driver::park (21 samples, 0.07%)</title><rect x="99.3871%" y="101" width="0.0703%" height="15" fill="rgb(250,80,15)" fg:x="29676" fg:w="21"/><text x="99.6371%" y="111.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (21 samples, 0.07%)</title><rect x="99.3871%" y="85" width="0.0703%" height="15" fill="rgb(252,191,6)" fg:x="29676" fg:w="21"/><text x="99.6371%" y="95.50"></text></g><g><title>mio::poll::Poll::poll (19 samples, 0.06%)</title><rect x="99.3938%" y="69" width="0.0636%" height="15" fill="rgb(246,217,18)" fg:x="29678" fg:w="19"/><text x="99.6438%" y="79.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (19 samples, 0.06%)</title><rect x="99.3938%" y="53" width="0.0636%" height="15" fill="rgb(223,93,7)" fg:x="29678" fg:w="19"/><text x="99.6438%" y="63.50"></text></g><g><title>epoll_wait (19 samples, 0.06%)</title><rect x="99.3938%" y="37" width="0.0636%" height="15" fill="rgb(225,55,52)" fg:x="29678" fg:w="19"/><text x="99.6438%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (56 samples, 0.19%)</title><rect x="99.2967%" y="293" width="0.1875%" height="15" fill="rgb(240,31,24)" fg:x="29649" fg:w="56"/><text x="99.5467%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (56 samples, 0.19%)</title><rect x="99.2967%" y="277" width="0.1875%" height="15" fill="rgb(205,56,52)" fg:x="29649" fg:w="56"/><text x="99.5467%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (50 samples, 0.17%)</title><rect x="99.3168%" y="261" width="0.1675%" height="15" fill="rgb(246,146,12)" fg:x="29655" fg:w="50"/><text x="99.5668%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (50 samples, 0.17%)</title><rect x="99.3168%" y="245" width="0.1675%" height="15" fill="rgb(239,84,36)" fg:x="29655" fg:w="50"/><text x="99.5668%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (29 samples, 0.10%)</title><rect x="99.3871%" y="229" width="0.0971%" height="15" fill="rgb(207,41,40)" fg:x="29676" fg:w="29"/><text x="99.6371%" y="239.50"></text></g><g><title>tokio::runtime::driver::Driver::park (29 samples, 0.10%)</title><rect x="99.3871%" y="213" width="0.0971%" height="15" fill="rgb(241,179,25)" fg:x="29676" fg:w="29"/><text x="99.6371%" y="223.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (29 samples, 0.10%)</title><rect x="99.3871%" y="197" width="0.0971%" height="15" fill="rgb(210,0,34)" fg:x="29676" fg:w="29"/><text x="99.6371%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park (29 samples, 0.10%)</title><rect x="99.3871%" y="181" width="0.0971%" height="15" fill="rgb(225,217,29)" fg:x="29676" fg:w="29"/><text x="99.6371%" y="191.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (29 samples, 0.10%)</title><rect x="99.3871%" y="165" width="0.0971%" height="15" fill="rgb(216,191,38)" fg:x="29676" fg:w="29"/><text x="99.6371%" y="175.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (7 samples, 0.02%)</title><rect x="99.4608%" y="149" width="0.0234%" height="15" fill="rgb(232,140,52)" fg:x="29698" fg:w="7"/><text x="99.7108%" y="159.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.02%)</title><rect x="99.4608%" y="133" width="0.0234%" height="15" fill="rgb(223,158,51)" fg:x="29698" fg:w="7"/><text x="99.7108%" y="143.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (7 samples, 0.02%)</title><rect x="99.4608%" y="117" width="0.0234%" height="15" fill="rgb(235,29,51)" fg:x="29698" fg:w="7"/><text x="99.7108%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.01%)</title><rect x="99.4842%" y="293" width="0.0134%" height="15" fill="rgb(215,181,18)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="303.50"></text></g><g><title>tokio::runtime::coop::budget (4 samples, 0.01%)</title><rect x="99.4842%" y="277" width="0.0134%" height="15" fill="rgb(227,125,34)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="287.50"></text></g><g><title>tokio::runtime::coop::with_budget (4 samples, 0.01%)</title><rect x="99.4842%" y="261" width="0.0134%" height="15" fill="rgb(230,197,49)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (4 samples, 0.01%)</title><rect x="99.4842%" y="245" width="0.0134%" height="15" fill="rgb(239,141,16)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="255.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (4 samples, 0.01%)</title><rect x="99.4842%" y="229" width="0.0134%" height="15" fill="rgb(225,105,43)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 0.01%)</title><rect x="99.4842%" y="213" width="0.0134%" height="15" fill="rgb(214,131,14)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="223.50"></text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.01%)</title><rect x="99.4842%" y="197" width="0.0134%" height="15" fill="rgb(229,177,11)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.01%)</title><rect x="99.4842%" y="181" width="0.0134%" height="15" fill="rgb(231,180,14)" fg:x="29705" fg:w="4"/><text x="99.7342%" y="191.50"></text></g><g><title>tokio::runtime::context::set_scheduler (68 samples, 0.23%)</title><rect x="99.2900%" y="405" width="0.2277%" height="15" fill="rgb(232,88,2)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (68 samples, 0.23%)</title><rect x="99.2900%" y="389" width="0.2277%" height="15" fill="rgb(205,220,8)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (68 samples, 0.23%)</title><rect x="99.2900%" y="373" width="0.2277%" height="15" fill="rgb(225,23,53)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="383.50"></text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (68 samples, 0.23%)</title><rect x="99.2900%" y="357" width="0.2277%" height="15" fill="rgb(213,62,29)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="367.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (68 samples, 0.23%)</title><rect x="99.2900%" y="341" width="0.2277%" height="15" fill="rgb(227,75,7)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (68 samples, 0.23%)</title><rect x="99.2900%" y="325" width="0.2277%" height="15" fill="rgb(207,105,14)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (68 samples, 0.23%)</title><rect x="99.2900%" y="309" width="0.2277%" height="15" fill="rgb(245,62,29)" fg:x="29647" fg:w="68"/><text x="99.5400%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (6 samples, 0.02%)</title><rect x="99.4976%" y="293" width="0.0201%" height="15" fill="rgb(236,202,4)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (6 samples, 0.02%)</title><rect x="99.4976%" y="277" width="0.0201%" height="15" fill="rgb(250,67,1)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (6 samples, 0.02%)</title><rect x="99.4976%" y="261" width="0.0201%" height="15" fill="rgb(253,115,44)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (6 samples, 0.02%)</title><rect x="99.4976%" y="245" width="0.0201%" height="15" fill="rgb(251,139,18)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (6 samples, 0.02%)</title><rect x="99.4976%" y="229" width="0.0201%" height="15" fill="rgb(218,22,32)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="239.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (6 samples, 0.02%)</title><rect x="99.4976%" y="213" width="0.0201%" height="15" fill="rgb(243,53,5)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop::{{closure}} (6 samples, 0.02%)</title><rect x="99.4976%" y="197" width="0.0201%" height="15" fill="rgb(227,56,16)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="207.50"></text></g><g><title>core::ptr::read (6 samples, 0.02%)</title><rect x="99.4976%" y="181" width="0.0201%" height="15" fill="rgb(245,53,0)" fg:x="29709" fg:w="6"/><text x="99.7476%" y="191.50"></text></g><g><title>std::panic::catch_unwind (252 samples, 0.84%)</title><rect x="98.6771%" y="885" width="0.8440%" height="15" fill="rgb(216,170,35)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="895.50"></text></g><g><title>std::panicking::try (252 samples, 0.84%)</title><rect x="98.6771%" y="869" width="0.8440%" height="15" fill="rgb(211,200,8)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="879.50"></text></g><g><title>__rust_try (252 samples, 0.84%)</title><rect x="98.6771%" y="853" width="0.8440%" height="15" fill="rgb(228,204,44)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="863.50"></text></g><g><title>std::panicking::try::do_call (252 samples, 0.84%)</title><rect x="98.6771%" y="837" width="0.8440%" height="15" fill="rgb(214,121,17)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="847.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (252 samples, 0.84%)</title><rect x="98.6771%" y="821" width="0.8440%" height="15" fill="rgb(233,64,38)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (252 samples, 0.84%)</title><rect x="98.6771%" y="805" width="0.8440%" height="15" fill="rgb(253,54,19)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="815.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (252 samples, 0.84%)</title><rect x="98.6771%" y="789" width="0.8440%" height="15" fill="rgb(253,94,18)" fg:x="29464" fg:w="252"/><text x="98.9271%" y="799.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (115 samples, 0.39%)</title><rect x="99.1359%" y="773" width="0.3851%" height="15" fill="rgb(227,57,52)" fg:x="29601" fg:w="115"/><text x="99.3859%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (115 samples, 0.39%)</title><rect x="99.1359%" y="757" width="0.3851%" height="15" fill="rgb(230,228,50)" fg:x="29601" fg:w="115"/><text x="99.3859%" y="767.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (77 samples, 0.26%)</title><rect x="99.2632%" y="741" width="0.2579%" height="15" fill="rgb(217,205,27)" fg:x="29639" fg:w="77"/><text x="99.5132%" y="751.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (77 samples, 0.26%)</title><rect x="99.2632%" y="725" width="0.2579%" height="15" fill="rgb(252,71,50)" fg:x="29639" fg:w="77"/><text x="99.5132%" y="735.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (77 samples, 0.26%)</title><rect x="99.2632%" y="709" width="0.2579%" height="15" fill="rgb(209,86,4)" fg:x="29639" fg:w="77"/><text x="99.5132%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::poll (77 samples, 0.26%)</title><rect x="99.2632%" y="693" width="0.2579%" height="15" fill="rgb(229,94,0)" fg:x="29639" fg:w="77"/><text x="99.5132%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77 samples, 0.26%)</title><rect x="99.2632%" y="677" width="0.2579%" height="15" fill="rgb(252,223,21)" fg:x="29639" fg:w="77"/><text x="99.5132%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (70 samples, 0.23%)</title><rect x="99.2866%" y="661" width="0.2344%" height="15" fill="rgb(230,210,4)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (70 samples, 0.23%)</title><rect x="99.2866%" y="645" width="0.2344%" height="15" fill="rgb(240,149,38)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="655.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 0.23%)</title><rect x="99.2866%" y="629" width="0.2344%" height="15" fill="rgb(254,105,20)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="639.50"></text></g><g><title>std::panicking::try (70 samples, 0.23%)</title><rect x="99.2866%" y="613" width="0.2344%" height="15" fill="rgb(253,87,46)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="623.50"></text></g><g><title>__rust_try (70 samples, 0.23%)</title><rect x="99.2866%" y="597" width="0.2344%" height="15" fill="rgb(253,116,33)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="607.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 0.23%)</title><rect x="99.2866%" y="581" width="0.2344%" height="15" fill="rgb(229,198,5)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 0.23%)</title><rect x="99.2866%" y="565" width="0.2344%" height="15" fill="rgb(242,38,37)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="575.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (70 samples, 0.23%)</title><rect x="99.2866%" y="549" width="0.2344%" height="15" fill="rgb(242,69,53)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="559.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (70 samples, 0.23%)</title><rect x="99.2866%" y="533" width="0.2344%" height="15" fill="rgb(249,80,16)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="543.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (70 samples, 0.23%)</title><rect x="99.2866%" y="517" width="0.2344%" height="15" fill="rgb(206,128,11)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (70 samples, 0.23%)</title><rect x="99.2866%" y="501" width="0.2344%" height="15" fill="rgb(212,35,20)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="511.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.23%)</title><rect x="99.2866%" y="485" width="0.2344%" height="15" fill="rgb(236,79,13)" fg:x="29646" fg:w="70"/><text x="99.5366%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (69 samples, 0.23%)</title><rect x="99.2900%" y="469" width="0.2311%" height="15" fill="rgb(233,123,3)" fg:x="29647" fg:w="69"/><text x="99.5400%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (69 samples, 0.23%)</title><rect x="99.2900%" y="453" width="0.2311%" height="15" fill="rgb(214,93,52)" fg:x="29647" fg:w="69"/><text x="99.5400%" y="463.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (69 samples, 0.23%)</title><rect x="99.2900%" y="437" width="0.2311%" height="15" fill="rgb(251,37,40)" fg:x="29647" fg:w="69"/><text x="99.5400%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (69 samples, 0.23%)</title><rect x="99.2900%" y="421" width="0.2311%" height="15" fill="rgb(227,80,54)" fg:x="29647" fg:w="69"/><text x="99.5400%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (256 samples, 0.86%)</title><rect x="98.6771%" y="917" width="0.8574%" height="15" fill="rgb(254,48,11)" fg:x="29464" fg:w="256"/><text x="98.9271%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (256 samples, 0.86%)</title><rect x="98.6771%" y="901" width="0.8574%" height="15" fill="rgb(235,193,26)" fg:x="29464" fg:w="256"/><text x="98.9271%" y="911.50"></text></g><g><title>std::sys::unix::thread::guard::current (4 samples, 0.01%)</title><rect x="99.5211%" y="885" width="0.0134%" height="15" fill="rgb(229,99,21)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="895.50"></text></g><g><title>__pthread_getattr_np (4 samples, 0.01%)</title><rect x="99.5211%" y="869" width="0.0134%" height="15" fill="rgb(211,140,41)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="879.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.01%)</title><rect x="99.5211%" y="853" width="0.0134%" height="15" fill="rgb(240,227,30)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="863.50"></text></g><g><title>tcache_init.part.0 (4 samples, 0.01%)</title><rect x="99.5211%" y="837" width="0.0134%" height="15" fill="rgb(215,224,45)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="847.50"></text></g><g><title>arena_get2 (4 samples, 0.01%)</title><rect x="99.5211%" y="821" width="0.0134%" height="15" fill="rgb(206,123,31)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="831.50"></text></g><g><title>alloc_new_heap (4 samples, 0.01%)</title><rect x="99.5211%" y="805" width="0.0134%" height="15" fill="rgb(210,138,16)" fg:x="29716" fg:w="4"/><text x="99.7711%" y="815.50"></text></g><g><title>__GI___munmap (3 samples, 0.01%)</title><rect x="99.5244%" y="789" width="0.0100%" height="15" fill="rgb(228,57,28)" fg:x="29717" fg:w="3"/><text x="99.7744%" y="799.50"></text></g><g><title>__clone3 (268 samples, 0.90%)</title><rect x="98.6436%" y="965" width="0.8976%" height="15" fill="rgb(242,170,10)" fg:x="29454" fg:w="268"/><text x="98.8936%" y="975.50"></text></g><g><title>start_thread (259 samples, 0.87%)</title><rect x="98.6738%" y="949" width="0.8674%" height="15" fill="rgb(228,214,39)" fg:x="29463" fg:w="259"/><text x="98.9238%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (258 samples, 0.86%)</title><rect x="98.6771%" y="933" width="0.8641%" height="15" fill="rgb(218,179,33)" fg:x="29464" fg:w="258"/><text x="98.9271%" y="943.50"></text></g><g><title>__rdl_alloc (6 samples, 0.02%)</title><rect x="99.5412%" y="965" width="0.0201%" height="15" fill="rgb(235,193,39)" fg:x="29722" fg:w="6"/><text x="99.7912%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (14 samples, 0.05%)</title><rect x="99.5713%" y="965" width="0.0469%" height="15" fill="rgb(219,221,36)" fg:x="29731" fg:w="14"/><text x="99.8213%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.06%)</title><rect x="99.6182%" y="965" width="0.0636%" height="15" fill="rgb(248,218,19)" fg:x="29745" fg:w="19"/><text x="99.8682%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (17 samples, 0.06%)</title><rect x="99.6952%" y="965" width="0.0569%" height="15" fill="rgb(205,50,9)" fg:x="29768" fg:w="17"/><text x="99.9452%" y="975.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.01%)</title><rect x="99.7555%" y="965" width="0.0100%" height="15" fill="rgb(238,81,28)" fg:x="29786" fg:w="3"/><text x="100.0055%" y="975.50"></text></g><g><title>core::cmp::max_by (20 samples, 0.07%)</title><rect x="99.7656%" y="965" width="0.0670%" height="15" fill="rgb(235,110,19)" fg:x="29789" fg:w="20"/><text x="100.0156%" y="975.50"></text></g><g><title>core::fmt::Formatter::pad_integral (6 samples, 0.02%)</title><rect x="99.8359%" y="965" width="0.0201%" height="15" fill="rgb(214,7,14)" fg:x="29810" fg:w="6"/><text x="100.0859%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.06%)</title><rect x="99.8593%" y="965" width="0.0603%" height="15" fill="rgb(211,77,3)" fg:x="29817" fg:w="18"/><text x="100.1093%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.01%)</title><rect x="99.9230%" y="965" width="0.0134%" height="15" fill="rgb(229,5,9)" fg:x="29836" fg:w="4"/><text x="100.1730%" y="975.50"></text></g><g><title>encoding_rs::UTF_16LE (3 samples, 0.01%)</title><rect x="99.9464%" y="965" width="0.0100%" height="15" fill="rgb(225,90,11)" fg:x="29843" fg:w="3"/><text x="100.1964%" y="975.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.01%)</title><rect x="99.9464%" y="949" width="0.0100%" height="15" fill="rgb(242,56,8)" fg:x="29843" fg:w="3"/><text x="100.1964%" y="959.50"></text></g><g><title>all (29,859 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(249,212,39)" fg:x="0" fg:w="29859"/><text x="0.2500%" y="1007.50"></text></g><g><title>tokio-runtime-w (29,787 samples, 99.76%)</title><rect x="0.2411%" y="981" width="99.7589%" height="15" fill="rgb(236,90,9)" fg:x="72" fg:w="29787"/><text x="0.4911%" y="991.50">tokio-runtime-w</text></g></svg></svg>