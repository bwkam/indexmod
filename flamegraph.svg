<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="12719"><g><title>[[heap]] (2 samples, 0.02%)</title><rect x="0.0000%" y="1013" width="0.0157%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.02%)</title><rect x="0.0472%" y="997" width="0.0157%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="2"/><text x="0.2972%" y="1007.50"></text></g><g><title>hyper::server::server::Server&lt;I,S,E&gt;::poll_watch (3 samples, 0.02%)</title><rect x="0.0629%" y="997" width="0.0236%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="3"/><text x="0.3129%" y="1007.50"></text></g><g><title>hyper::server::server::Server&lt;I,S,E&gt;::poll_next_ (3 samples, 0.02%)</title><rect x="0.0629%" y="981" width="0.0236%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="3"/><text x="0.3129%" y="991.50"></text></g><g><title>&lt;hyper::server::tcp::AddrIncoming as hyper::server::accept::Accept&gt;::poll_accept (2 samples, 0.02%)</title><rect x="0.0708%" y="965" width="0.0157%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="2"/><text x="0.3208%" y="975.50"></text></g><g><title>hyper::server::tcp::AddrIncoming::poll_next_ (2 samples, 0.02%)</title><rect x="0.0708%" y="949" width="0.0157%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="2"/><text x="0.3208%" y="959.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::poll_accept (2 samples, 0.02%)</title><rect x="0.0708%" y="933" width="0.0157%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="2"/><text x="0.3208%" y="943.50"></text></g><g><title>main::main::{{closure}} (4 samples, 0.03%)</title><rect x="0.0865%" y="997" width="0.0314%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="4"/><text x="0.3365%" y="1007.50"></text></g><g><title>tracing_subscriber::fmt::init (2 samples, 0.02%)</title><rect x="0.1022%" y="981" width="0.0157%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="2"/><text x="0.3522%" y="991.50"></text></g><g><title>tracing_subscriber::fmt::try_init (2 samples, 0.02%)</title><rect x="0.1022%" y="965" width="0.0157%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="2"/><text x="0.3522%" y="975.50"></text></g><g><title>regex::builders::Builder::build_one_string (3 samples, 0.02%)</title><rect x="0.1179%" y="997" width="0.0236%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="3"/><text x="0.3679%" y="1007.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.02%)</title><rect x="0.1179%" y="981" width="0.0236%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="3"/><text x="0.3679%" y="991.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (3 samples, 0.02%)</title><rect x="0.1179%" y="965" width="0.0236%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="3"/><text x="0.3679%" y="975.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.02%)</title><rect x="0.1179%" y="949" width="0.0236%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="3"/><text x="0.3679%" y="959.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.02%)</title><rect x="0.1179%" y="933" width="0.0236%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="3"/><text x="0.3679%" y="943.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (3 samples, 0.02%)</title><rect x="0.1179%" y="917" width="0.0236%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="3"/><text x="0.3679%" y="927.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::induct (2 samples, 0.02%)</title><rect x="0.1258%" y="901" width="0.0157%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="2"/><text x="0.3758%" y="911.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit_class (2 samples, 0.02%)</title><rect x="0.1258%" y="885" width="0.0157%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="2"/><text x="0.3758%" y="895.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit_class_post (2 samples, 0.02%)</title><rect x="0.1258%" y="869" width="0.0157%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="2"/><text x="0.3758%" y="879.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.02%)</title><rect x="0.1258%" y="853" width="0.0157%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="2"/><text x="0.3758%" y="863.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (2 samples, 0.02%)</title><rect x="0.1415%" y="997" width="0.0157%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="2"/><text x="0.3915%" y="1007.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (2 samples, 0.02%)</title><rect x="0.1415%" y="981" width="0.0157%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="2"/><text x="0.3915%" y="991.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.02%)</title><rect x="0.1415%" y="965" width="0.0157%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="2"/><text x="0.3915%" y="975.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.02%)</title><rect x="0.1415%" y="949" width="0.0157%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="2"/><text x="0.3915%" y="959.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.1730%" y="885" width="0.0157%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="0.4230%" y="895.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (5 samples, 0.04%)</title><rect x="0.1730%" y="901" width="0.0393%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="5"/><text x="0.4230%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (2 samples, 0.02%)</title><rect x="0.2123%" y="885" width="0.0157%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="2"/><text x="0.4623%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="0.2123%" y="869" width="0.0157%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="2"/><text x="0.4623%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="0.2123%" y="853" width="0.0157%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="2"/><text x="0.4623%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.02%)</title><rect x="0.2123%" y="837" width="0.0157%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="2"/><text x="0.4623%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (2 samples, 0.02%)</title><rect x="0.2123%" y="821" width="0.0157%" height="15" fill="rgb(209,103,24)" fg:x="27" fg:w="2"/><text x="0.4623%" y="831.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add::{{closure}} (2 samples, 0.02%)</title><rect x="0.2123%" y="805" width="0.0157%" height="15" fill="rgb(229,88,8)" fg:x="27" fg:w="2"/><text x="0.4623%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (2 samples, 0.02%)</title><rect x="0.2123%" y="789" width="0.0157%" height="15" fill="rgb(213,181,19)" fg:x="27" fg:w="2"/><text x="0.4623%" y="799.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="0.2123%" y="773" width="0.0157%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="2"/><text x="0.4623%" y="783.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.02%)</title><rect x="0.2123%" y="901" width="0.0236%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="3"/><text x="0.4623%" y="911.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 0.08%)</title><rect x="0.1730%" y="997" width="0.0786%" height="15" fill="rgb(233,36,39)" fg:x="22" fg:w="10"/><text x="0.4230%" y="1007.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.08%)</title><rect x="0.1730%" y="981" width="0.0786%" height="15" fill="rgb(226,3,54)" fg:x="22" fg:w="10"/><text x="0.4230%" y="991.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (10 samples, 0.08%)</title><rect x="0.1730%" y="965" width="0.0786%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="10"/><text x="0.4230%" y="975.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (10 samples, 0.08%)</title><rect x="0.1730%" y="949" width="0.0786%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="10"/><text x="0.4230%" y="959.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.08%)</title><rect x="0.1730%" y="933" width="0.0786%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="10"/><text x="0.4230%" y="943.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (10 samples, 0.08%)</title><rect x="0.1730%" y="917" width="0.0786%" height="15" fill="rgb(231,60,39)" fg:x="22" fg:w="10"/><text x="0.4230%" y="927.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (2 samples, 0.02%)</title><rect x="0.2359%" y="901" width="0.0157%" height="15" fill="rgb(208,69,12)" fg:x="30" fg:w="2"/><text x="0.4859%" y="911.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (2 samples, 0.02%)</title><rect x="0.2359%" y="885" width="0.0157%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="2"/><text x="0.4859%" y="895.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (2 samples, 0.02%)</title><rect x="0.2359%" y="869" width="0.0157%" height="15" fill="rgb(213,116,39)" fg:x="30" fg:w="2"/><text x="0.4859%" y="879.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.02%)</title><rect x="0.2359%" y="853" width="0.0157%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="2"/><text x="0.4859%" y="863.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.02%)</title><rect x="0.2359%" y="837" width="0.0157%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="2"/><text x="0.4859%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="0.2359%" y="821" width="0.0157%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="2"/><text x="0.4859%" y="831.50"></text></g><g><title>[unknown] (31 samples, 0.24%)</title><rect x="0.0236%" y="1013" width="0.2437%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="31"/><text x="0.2736%" y="1023.50"></text></g><g><title>__GI___mmap64 (7 samples, 0.06%)</title><rect x="0.3066%" y="949" width="0.0550%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="7"/><text x="0.5566%" y="959.50"></text></g><g><title>__clone3 (20 samples, 0.16%)</title><rect x="0.2673%" y="1013" width="0.1572%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="20"/><text x="0.5173%" y="1023.50"></text></g><g><title>start_thread (15 samples, 0.12%)</title><rect x="0.3066%" y="997" width="0.1179%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="15"/><text x="0.5566%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (15 samples, 0.12%)</title><rect x="0.3066%" y="981" width="0.1179%" height="15" fill="rgb(250,213,24)" fg:x="39" fg:w="15"/><text x="0.5566%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (15 samples, 0.12%)</title><rect x="0.3066%" y="965" width="0.1179%" height="15" fill="rgb(247,123,22)" fg:x="39" fg:w="15"/><text x="0.5566%" y="975.50"></text></g><g><title>__GI___mprotect (8 samples, 0.06%)</title><rect x="0.3617%" y="949" width="0.0629%" height="15" fill="rgb(231,138,38)" fg:x="46" fg:w="8"/><text x="0.6117%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (6 samples, 0.05%)</title><rect x="0.4717%" y="853" width="0.0472%" height="15" fill="rgb(231,145,46)" fg:x="60" fg:w="6"/><text x="0.7217%" y="863.50"></text></g><g><title>__libc_start_main_alias_2 (28 samples, 0.22%)</title><rect x="0.4717%" y="997" width="0.2201%" height="15" fill="rgb(251,118,11)" fg:x="60" fg:w="28"/><text x="0.7217%" y="1007.50"></text></g><g><title>__libc_start_call_main (28 samples, 0.22%)</title><rect x="0.4717%" y="981" width="0.2201%" height="15" fill="rgb(217,147,25)" fg:x="60" fg:w="28"/><text x="0.7217%" y="991.50"></text></g><g><title>main (28 samples, 0.22%)</title><rect x="0.4717%" y="965" width="0.2201%" height="15" fill="rgb(247,81,37)" fg:x="60" fg:w="28"/><text x="0.7217%" y="975.50"></text></g><g><title>std::rt::lang_start (28 samples, 0.22%)</title><rect x="0.4717%" y="949" width="0.2201%" height="15" fill="rgb(209,12,38)" fg:x="60" fg:w="28"/><text x="0.7217%" y="959.50"></text></g><g><title>std::rt::lang_start_internal (28 samples, 0.22%)</title><rect x="0.4717%" y="933" width="0.2201%" height="15" fill="rgb(227,1,9)" fg:x="60" fg:w="28"/><text x="0.7217%" y="943.50"></text></g><g><title>std::rt::lang_start::{{closure}} (28 samples, 0.22%)</title><rect x="0.4717%" y="917" width="0.2201%" height="15" fill="rgb(248,47,43)" fg:x="60" fg:w="28"/><text x="0.7217%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 0.22%)</title><rect x="0.4717%" y="901" width="0.2201%" height="15" fill="rgb(221,10,30)" fg:x="60" fg:w="28"/><text x="0.7217%" y="911.50"></text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 0.22%)</title><rect x="0.4717%" y="885" width="0.2201%" height="15" fill="rgb(210,229,1)" fg:x="60" fg:w="28"/><text x="0.7217%" y="895.50"></text></g><g><title>main::main (28 samples, 0.22%)</title><rect x="0.4717%" y="869" width="0.2201%" height="15" fill="rgb(222,148,37)" fg:x="60" fg:w="28"/><text x="0.7217%" y="879.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (21 samples, 0.17%)</title><rect x="0.5268%" y="853" width="0.1651%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="21"/><text x="0.7768%" y="863.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (21 samples, 0.17%)</title><rect x="0.5268%" y="837" width="0.1651%" height="15" fill="rgb(247,98,35)" fg:x="67" fg:w="21"/><text x="0.7768%" y="847.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (20 samples, 0.16%)</title><rect x="0.5346%" y="821" width="0.1572%" height="15" fill="rgb(247,138,52)" fg:x="68" fg:w="20"/><text x="0.7846%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (20 samples, 0.16%)</title><rect x="0.5346%" y="805" width="0.1572%" height="15" fill="rgb(213,79,30)" fg:x="68" fg:w="20"/><text x="0.7846%" y="815.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (20 samples, 0.16%)</title><rect x="0.5346%" y="789" width="0.1572%" height="15" fill="rgb(246,177,23)" fg:x="68" fg:w="20"/><text x="0.7846%" y="799.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (20 samples, 0.16%)</title><rect x="0.5346%" y="773" width="0.1572%" height="15" fill="rgb(230,62,27)" fg:x="68" fg:w="20"/><text x="0.7846%" y="783.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park (20 samples, 0.16%)</title><rect x="0.5346%" y="757" width="0.1572%" height="15" fill="rgb(216,154,8)" fg:x="68" fg:w="20"/><text x="0.7846%" y="767.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (20 samples, 0.16%)</title><rect x="0.5346%" y="741" width="0.1572%" height="15" fill="rgb(244,35,45)" fg:x="68" fg:w="20"/><text x="0.7846%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.16%)</title><rect x="0.5346%" y="725" width="0.1572%" height="15" fill="rgb(251,115,12)" fg:x="68" fg:w="20"/><text x="0.7846%" y="735.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (20 samples, 0.16%)</title><rect x="0.5346%" y="709" width="0.1572%" height="15" fill="rgb(240,54,50)" fg:x="68" fg:w="20"/><text x="0.7846%" y="719.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (20 samples, 0.16%)</title><rect x="0.5346%" y="693" width="0.1572%" height="15" fill="rgb(233,84,52)" fg:x="68" fg:w="20"/><text x="0.7846%" y="703.50"></text></g><g><title>tokio::runtime::park::Inner::park (20 samples, 0.16%)</title><rect x="0.5346%" y="677" width="0.1572%" height="15" fill="rgb(207,117,47)" fg:x="68" fg:w="20"/><text x="0.7846%" y="687.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (20 samples, 0.16%)</title><rect x="0.5346%" y="661" width="0.1572%" height="15" fill="rgb(249,43,39)" fg:x="68" fg:w="20"/><text x="0.7846%" y="671.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (20 samples, 0.16%)</title><rect x="0.5346%" y="645" width="0.1572%" height="15" fill="rgb(209,38,44)" fg:x="68" fg:w="20"/><text x="0.7846%" y="655.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (20 samples, 0.16%)</title><rect x="0.5346%" y="629" width="0.1572%" height="15" fill="rgb(236,212,23)" fg:x="68" fg:w="20"/><text x="0.7846%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::park (19 samples, 0.15%)</title><rect x="0.5425%" y="613" width="0.1494%" height="15" fill="rgb(242,79,21)" fg:x="69" fg:w="19"/><text x="0.7925%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (19 samples, 0.15%)</title><rect x="0.5425%" y="597" width="0.1494%" height="15" fill="rgb(211,96,35)" fg:x="69" fg:w="19"/><text x="0.7925%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (19 samples, 0.15%)</title><rect x="0.5425%" y="581" width="0.1494%" height="15" fill="rgb(253,215,40)" fg:x="69" fg:w="19"/><text x="0.7925%" y="591.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (19 samples, 0.15%)</title><rect x="0.5425%" y="565" width="0.1494%" height="15" fill="rgb(211,81,21)" fg:x="69" fg:w="19"/><text x="0.7925%" y="575.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (19 samples, 0.15%)</title><rect x="0.5425%" y="549" width="0.1494%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="19"/><text x="0.7925%" y="559.50"></text></g><g><title>syscall (19 samples, 0.15%)</title><rect x="0.5425%" y="533" width="0.1494%" height="15" fill="rgb(235,213,38)" fg:x="69" fg:w="19"/><text x="0.7925%" y="543.50"></text></g><g><title>_dl_relocate_object (3 samples, 0.02%)</title><rect x="0.6997%" y="949" width="0.0236%" height="15" fill="rgb(237,122,38)" fg:x="89" fg:w="3"/><text x="0.9497%" y="959.50"></text></g><g><title>_start (39 samples, 0.31%)</title><rect x="0.4246%" y="1013" width="0.3066%" height="15" fill="rgb(244,218,35)" fg:x="54" fg:w="39"/><text x="0.6746%" y="1023.50"></text></g><g><title>_dl_start (5 samples, 0.04%)</title><rect x="0.6919%" y="997" width="0.0393%" height="15" fill="rgb(240,68,47)" fg:x="88" fg:w="5"/><text x="0.9419%" y="1007.50"></text></g><g><title>_dl_sysdep_start (5 samples, 0.04%)</title><rect x="0.6919%" y="981" width="0.0393%" height="15" fill="rgb(210,16,53)" fg:x="88" fg:w="5"/><text x="0.9419%" y="991.50"></text></g><g><title>dl_main (5 samples, 0.04%)</title><rect x="0.6919%" y="965" width="0.0393%" height="15" fill="rgb(235,124,12)" fg:x="88" fg:w="5"/><text x="0.9419%" y="975.50"></text></g><g><title>main (94 samples, 0.74%)</title><rect x="0.0000%" y="1029" width="0.7391%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="94"/><text x="0.2500%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="0.7548%" y="1013" width="0.0157%" height="15" fill="rgb(250,166,2)" fg:x="96" fg:w="2"/><text x="1.0048%" y="1023.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="0.7705%" y="1013" width="0.0157%" height="15" fill="rgb(242,216,29)" fg:x="98" fg:w="2"/><text x="1.0205%" y="1023.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (2 samples, 0.02%)</title><rect x="0.7941%" y="1013" width="0.0157%" height="15" fill="rgb(230,116,27)" fg:x="101" fg:w="2"/><text x="1.0441%" y="1023.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (3 samples, 0.02%)</title><rect x="0.8177%" y="1013" width="0.0236%" height="15" fill="rgb(228,99,48)" fg:x="104" fg:w="3"/><text x="1.0677%" y="1023.50"></text></g><g><title>&lt;rust_xlsxwriter::chart::ChartDataLabel::is_default::DEFAULT_STATE as core::ops::deref::Deref&gt;::deref::__stability::LAZY (2 samples, 0.02%)</title><rect x="0.8413%" y="1013" width="0.0157%" height="15" fill="rgb(253,11,6)" fg:x="107" fg:w="2"/><text x="1.0913%" y="1023.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="0.8413%" y="997" width="0.0157%" height="15" fill="rgb(247,143,39)" fg:x="107" fg:w="2"/><text x="1.0913%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.09%)</title><rect x="0.8570%" y="997" width="0.0943%" height="15" fill="rgb(236,97,10)" fg:x="109" fg:w="12"/><text x="1.1070%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (27 samples, 0.21%)</title><rect x="0.9513%" y="997" width="0.2123%" height="15" fill="rgb(233,208,19)" fg:x="121" fg:w="27"/><text x="1.2013%" y="1007.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="1.1715%" y="997" width="0.0236%" height="15" fill="rgb(216,164,2)" fg:x="149" fg:w="3"/><text x="1.4215%" y="1007.50"></text></g><g><title>_int_malloc (12 samples, 0.09%)</title><rect x="1.1951%" y="997" width="0.0943%" height="15" fill="rgb(220,129,5)" fg:x="152" fg:w="12"/><text x="1.4451%" y="1007.50"></text></g><g><title>alloc::fmt::format::format_inner (16 samples, 0.13%)</title><rect x="1.2894%" y="997" width="0.1258%" height="15" fill="rgb(242,17,10)" fg:x="164" fg:w="16"/><text x="1.5394%" y="1007.50"></text></g><g><title>[[heap]] (73 samples, 0.57%)</title><rect x="0.8570%" y="1013" width="0.5739%" height="15" fill="rgb(242,107,0)" fg:x="109" fg:w="73"/><text x="1.1070%" y="1023.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.04%)</title><rect x="1.4309%" y="997" width="0.0393%" height="15" fill="rgb(251,28,31)" fg:x="182" fg:w="5"/><text x="1.6809%" y="1007.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (2 samples, 0.02%)</title><rect x="1.4702%" y="997" width="0.0157%" height="15" fill="rgb(233,223,10)" fg:x="187" fg:w="2"/><text x="1.7202%" y="1007.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="1.4860%" y="997" width="0.0157%" height="15" fill="rgb(215,21,27)" fg:x="189" fg:w="2"/><text x="1.7360%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="1.5174%" y="997" width="0.0236%" height="15" fill="rgb(232,23,21)" fg:x="193" fg:w="3"/><text x="1.7674%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.5410%" y="997" width="0.0157%" height="15" fill="rgb(244,5,23)" fg:x="196" fg:w="2"/><text x="1.7910%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="1.5646%" y="997" width="0.0157%" height="15" fill="rgb(226,81,46)" fg:x="199" fg:w="2"/><text x="1.8146%" y="1007.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="1.6118%" y="997" width="0.0236%" height="15" fill="rgb(247,70,30)" fg:x="205" fg:w="3"/><text x="1.8618%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="1.6353%" y="997" width="0.0236%" height="15" fill="rgb(212,68,19)" fg:x="208" fg:w="3"/><text x="1.8853%" y="1007.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.02%)</title><rect x="1.7140%" y="997" width="0.0157%" height="15" fill="rgb(240,187,13)" fg:x="218" fg:w="2"/><text x="1.9640%" y="1007.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="1.7376%" y="997" width="0.0550%" height="15" fill="rgb(223,113,26)" fg:x="221" fg:w="7"/><text x="1.9876%" y="1007.50"></text></g><g><title>_int_malloc (33 samples, 0.26%)</title><rect x="1.8083%" y="997" width="0.2595%" height="15" fill="rgb(206,192,2)" fg:x="230" fg:w="33"/><text x="2.0583%" y="1007.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="2.0756%" y="997" width="0.0157%" height="15" fill="rgb(241,108,4)" fg:x="264" fg:w="2"/><text x="2.3256%" y="1007.50"></text></g><g><title>alloc::fmt::format::format_inner (12 samples, 0.09%)</title><rect x="2.1543%" y="997" width="0.0943%" height="15" fill="rgb(247,173,49)" fg:x="274" fg:w="12"/><text x="2.4043%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="2.2565%" y="997" width="0.0157%" height="15" fill="rgb(224,114,35)" fg:x="287" fg:w="2"/><text x="2.5065%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.07%)</title><rect x="2.2722%" y="997" width="0.0708%" height="15" fill="rgb(245,159,27)" fg:x="289" fg:w="9"/><text x="2.5222%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.13%)</title><rect x="2.3430%" y="997" width="0.1258%" height="15" fill="rgb(245,172,44)" fg:x="298" fg:w="16"/><text x="2.5930%" y="1007.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="2.4687%" y="997" width="0.0550%" height="15" fill="rgb(236,23,11)" fg:x="314" fg:w="7"/><text x="2.7187%" y="1007.50"></text></g><g><title>alloc::raw_vec::handle_reserve (2 samples, 0.02%)</title><rect x="2.5238%" y="997" width="0.0157%" height="15" fill="rgb(205,117,38)" fg:x="321" fg:w="2"/><text x="2.7738%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.08%)</title><rect x="2.5552%" y="997" width="0.0786%" height="15" fill="rgb(237,72,25)" fg:x="325" fg:w="10"/><text x="2.8052%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.03%)</title><rect x="2.6339%" y="997" width="0.0314%" height="15" fill="rgb(244,70,9)" fg:x="335" fg:w="4"/><text x="2.8839%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.02%)</title><rect x="2.6653%" y="997" width="0.0157%" height="15" fill="rgb(217,125,39)" fg:x="339" fg:w="2"/><text x="2.9153%" y="1007.50"></text></g><g><title>calamine::xlsx::get_attribute (2 samples, 0.02%)</title><rect x="2.6810%" y="997" width="0.0157%" height="15" fill="rgb(235,36,10)" fg:x="341" fg:w="2"/><text x="2.9310%" y="1007.50"></text></g><g><title>calamine::xlsx::get_row_column (2 samples, 0.02%)</title><rect x="2.6968%" y="997" width="0.0157%" height="15" fill="rgb(251,123,47)" fg:x="343" fg:w="2"/><text x="2.9468%" y="1007.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (10 samples, 0.08%)</title><rect x="2.7125%" y="997" width="0.0786%" height="15" fill="rgb(221,13,13)" fg:x="345" fg:w="10"/><text x="2.9625%" y="1007.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="2.8068%" y="997" width="0.0157%" height="15" fill="rgb(238,131,9)" fg:x="357" fg:w="2"/><text x="3.0568%" y="1007.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.03%)</title><rect x="2.8304%" y="997" width="0.0314%" height="15" fill="rgb(211,50,8)" fg:x="360" fg:w="4"/><text x="3.0804%" y="1007.50"></text></g><g><title>core::fmt::Formatter::pad_integral (7 samples, 0.06%)</title><rect x="2.8619%" y="997" width="0.0550%" height="15" fill="rgb(245,182,24)" fg:x="364" fg:w="7"/><text x="3.1119%" y="1007.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (7 samples, 0.06%)</title><rect x="2.9169%" y="997" width="0.0550%" height="15" fill="rgb(242,14,37)" fg:x="371" fg:w="7"/><text x="3.1669%" y="1007.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.02%)</title><rect x="2.9719%" y="997" width="0.0157%" height="15" fill="rgb(246,228,12)" fg:x="378" fg:w="2"/><text x="3.2219%" y="1007.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (4 samples, 0.03%)</title><rect x="2.9877%" y="997" width="0.0314%" height="15" fill="rgb(213,55,15)" fg:x="380" fg:w="4"/><text x="3.2377%" y="1007.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="3.0191%" y="997" width="0.0157%" height="15" fill="rgb(209,9,3)" fg:x="384" fg:w="2"/><text x="3.2691%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="3.0348%" y="997" width="0.0157%" height="15" fill="rgb(230,59,30)" fg:x="386" fg:w="2"/><text x="3.2848%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="3.0584%" y="997" width="0.0157%" height="15" fill="rgb(209,121,21)" fg:x="389" fg:w="2"/><text x="3.3084%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="3.0899%" y="997" width="0.0236%" height="15" fill="rgb(220,109,13)" fg:x="393" fg:w="3"/><text x="3.3399%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust_xlsxwriter::format::Format]&gt; (3 samples, 0.02%)</title><rect x="3.1370%" y="997" width="0.0236%" height="15" fill="rgb(232,18,1)" fg:x="399" fg:w="3"/><text x="3.3870%" y="1007.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (5 samples, 0.04%)</title><rect x="3.1921%" y="997" width="0.0393%" height="15" fill="rgb(215,41,42)" fg:x="406" fg:w="5"/><text x="3.4421%" y="1007.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (15 samples, 0.12%)</title><rect x="3.2314%" y="997" width="0.1179%" height="15" fill="rgb(224,123,36)" fg:x="411" fg:w="15"/><text x="3.4814%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="3.3572%" y="997" width="0.0236%" height="15" fill="rgb(240,125,3)" fg:x="427" fg:w="3"/><text x="3.6072%" y="1007.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (2 samples, 0.02%)</title><rect x="3.5459%" y="997" width="0.0157%" height="15" fill="rgb(205,98,50)" fg:x="451" fg:w="2"/><text x="3.7959%" y="1007.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (2 samples, 0.02%)</title><rect x="3.5695%" y="997" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="454" fg:w="2"/><text x="3.8195%" y="1007.50"></text></g><g><title>[anon] (287 samples, 2.26%)</title><rect x="1.4309%" y="1013" width="2.2565%" height="15" fill="rgb(238,207,15)" fg:x="182" fg:w="287"/><text x="1.6809%" y="1023.50">[..</text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (2 samples, 0.02%)</title><rect x="4.1120%" y="997" width="0.0157%" height="15" fill="rgb(213,199,42)" fg:x="523" fg:w="2"/><text x="4.3620%" y="1007.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.13%)</title><rect x="4.1355%" y="997" width="0.1337%" height="15" fill="rgb(235,201,11)" fg:x="526" fg:w="17"/><text x="4.3855%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="4.2692%" y="997" width="0.0314%" height="15" fill="rgb(207,46,11)" fg:x="543" fg:w="4"/><text x="4.5192%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="4.3007%" y="997" width="0.0157%" height="15" fill="rgb(241,35,35)" fg:x="547" fg:w="2"/><text x="4.5507%" y="1007.50"></text></g><g><title>alloc::raw_vec::handle_reserve (2 samples, 0.02%)</title><rect x="4.3242%" y="997" width="0.0157%" height="15" fill="rgb(243,32,47)" fg:x="550" fg:w="2"/><text x="4.5742%" y="1007.50"></text></g><g><title>core::fmt::Formatter::pad_integral (29 samples, 0.23%)</title><rect x="4.3636%" y="997" width="0.2280%" height="15" fill="rgb(247,202,23)" fg:x="555" fg:w="29"/><text x="4.6136%" y="1007.50"></text></g><g><title>[main] (116 samples, 0.91%)</title><rect x="3.6874%" y="1013" width="0.9120%" height="15" fill="rgb(219,102,11)" fg:x="469" fg:w="116"/><text x="3.9374%" y="1023.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (54 samples, 0.42%)</title><rect x="4.5994%" y="997" width="0.4246%" height="15" fill="rgb(243,110,44)" fg:x="585" fg:w="54"/><text x="4.8494%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.05%)</title><rect x="5.0790%" y="949" width="0.0472%" height="15" fill="rgb(222,74,54)" fg:x="646" fg:w="6"/><text x="5.3290%" y="959.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.02%)</title><rect x="5.1105%" y="933" width="0.0157%" height="15" fill="rgb(216,99,12)" fg:x="650" fg:w="2"/><text x="5.3605%" y="943.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="5.1105%" y="917" width="0.0157%" height="15" fill="rgb(226,22,26)" fg:x="650" fg:w="2"/><text x="5.3605%" y="927.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.02%)</title><rect x="5.1105%" y="901" width="0.0157%" height="15" fill="rgb(217,163,10)" fg:x="650" fg:w="2"/><text x="5.3605%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.03%)</title><rect x="5.1341%" y="949" width="0.0314%" height="15" fill="rgb(213,25,53)" fg:x="653" fg:w="4"/><text x="5.3841%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="5.1341%" y="933" width="0.0314%" height="15" fill="rgb(252,105,26)" fg:x="653" fg:w="4"/><text x="5.3841%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="5.1419%" y="917" width="0.0236%" height="15" fill="rgb(220,39,43)" fg:x="654" fg:w="3"/><text x="5.3919%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (2 samples, 0.02%)</title><rect x="5.1655%" y="949" width="0.0157%" height="15" fill="rgb(229,68,48)" fg:x="657" fg:w="2"/><text x="5.4155%" y="959.50"></text></g><g><title>alloc::slice::hack::into_vec (2 samples, 0.02%)</title><rect x="5.1655%" y="933" width="0.0157%" height="15" fill="rgb(252,8,32)" fg:x="657" fg:w="2"/><text x="5.4155%" y="943.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (2 samples, 0.02%)</title><rect x="5.1655%" y="917" width="0.0157%" height="15" fill="rgb(223,20,43)" fg:x="657" fg:w="2"/><text x="5.4155%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="5.2127%" y="885" width="0.0236%" height="15" fill="rgb(229,81,49)" fg:x="663" fg:w="3"/><text x="5.4627%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.02%)</title><rect x="5.2127%" y="869" width="0.0236%" height="15" fill="rgb(236,28,36)" fg:x="663" fg:w="3"/><text x="5.4627%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="5.2205%" y="853" width="0.0157%" height="15" fill="rgb(249,185,26)" fg:x="664" fg:w="2"/><text x="5.4705%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="5.2205%" y="837" width="0.0157%" height="15" fill="rgb(249,174,33)" fg:x="664" fg:w="2"/><text x="5.4705%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.02%)</title><rect x="5.2363%" y="885" width="0.0157%" height="15" fill="rgb(233,201,37)" fg:x="666" fg:w="2"/><text x="5.4863%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.02%)</title><rect x="5.2363%" y="869" width="0.0157%" height="15" fill="rgb(221,78,26)" fg:x="666" fg:w="2"/><text x="5.4863%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.02%)</title><rect x="5.2363%" y="853" width="0.0157%" height="15" fill="rgb(250,127,30)" fg:x="666" fg:w="2"/><text x="5.4863%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.06%)</title><rect x="5.1969%" y="949" width="0.0629%" height="15" fill="rgb(230,49,44)" fg:x="661" fg:w="8"/><text x="5.4469%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="5.1969%" y="933" width="0.0629%" height="15" fill="rgb(229,67,23)" fg:x="661" fg:w="8"/><text x="5.4469%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.06%)</title><rect x="5.2048%" y="917" width="0.0550%" height="15" fill="rgb(249,83,47)" fg:x="662" fg:w="7"/><text x="5.4548%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (7 samples, 0.06%)</title><rect x="5.2048%" y="901" width="0.0550%" height="15" fill="rgb(215,43,3)" fg:x="662" fg:w="7"/><text x="5.4548%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="5.2677%" y="901" width="0.0157%" height="15" fill="rgb(238,154,13)" fg:x="670" fg:w="2"/><text x="5.5177%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="5.2677%" y="885" width="0.0157%" height="15" fill="rgb(219,56,2)" fg:x="670" fg:w="2"/><text x="5.5177%" y="895.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="5.2677%" y="869" width="0.0157%" height="15" fill="rgb(233,0,4)" fg:x="670" fg:w="2"/><text x="5.5177%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;alloc::string::String&gt;&gt; (6 samples, 0.05%)</title><rect x="5.2677%" y="949" width="0.0472%" height="15" fill="rgb(235,30,7)" fg:x="670" fg:w="6"/><text x="5.5177%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;alloc::string::String&gt;&gt; (6 samples, 0.05%)</title><rect x="5.2677%" y="933" width="0.0472%" height="15" fill="rgb(250,79,13)" fg:x="670" fg:w="6"/><text x="5.5177%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="5.2677%" y="917" width="0.0472%" height="15" fill="rgb(211,146,34)" fg:x="670" fg:w="6"/><text x="5.5177%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="5.2834%" y="901" width="0.0314%" height="15" fill="rgb(228,22,38)" fg:x="672" fg:w="4"/><text x="5.5334%" y="911.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.02%)</title><rect x="5.3227%" y="677" width="0.0236%" height="15" fill="rgb(235,168,5)" fg:x="677" fg:w="3"/><text x="5.5727%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (2 samples, 0.02%)</title><rect x="5.3306%" y="661" width="0.0157%" height="15" fill="rgb(221,155,16)" fg:x="678" fg:w="2"/><text x="5.5806%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="5.3542%" y="533" width="0.0157%" height="15" fill="rgb(215,215,53)" fg:x="681" fg:w="2"/><text x="5.6042%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="5.3542%" y="517" width="0.0157%" height="15" fill="rgb(223,4,10)" fg:x="681" fg:w="2"/><text x="5.6042%" y="527.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="5.3542%" y="501" width="0.0157%" height="15" fill="rgb(234,103,6)" fg:x="681" fg:w="2"/><text x="5.6042%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.05%)</title><rect x="5.3542%" y="597" width="0.0472%" height="15" fill="rgb(227,97,0)" fg:x="681" fg:w="6"/><text x="5.6042%" y="607.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="5.3542%" y="581" width="0.0472%" height="15" fill="rgb(234,150,53)" fg:x="681" fg:w="6"/><text x="5.6042%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;str&gt;&gt; (6 samples, 0.05%)</title><rect x="5.3542%" y="565" width="0.0472%" height="15" fill="rgb(228,201,54)" fg:x="681" fg:w="6"/><text x="5.6042%" y="575.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="5.3542%" y="549" width="0.0472%" height="15" fill="rgb(222,22,37)" fg:x="681" fg:w="6"/><text x="5.6042%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="5.3856%" y="533" width="0.0157%" height="15" fill="rgb(237,53,32)" fg:x="685" fg:w="2"/><text x="5.6356%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="5.3856%" y="517" width="0.0157%" height="15" fill="rgb(233,25,53)" fg:x="685" fg:w="2"/><text x="5.6356%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::workbook::Workbook&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="949" width="0.0865%" height="15" fill="rgb(210,40,34)" fg:x="677" fg:w="11"/><text x="5.5727%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_xlsxwriter::worksheet::Worksheet&gt;&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="933" width="0.0865%" height="15" fill="rgb(241,220,44)" fg:x="677" fg:w="11"/><text x="5.5727%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="917" width="0.0865%" height="15" fill="rgb(235,28,35)" fg:x="677" fg:w="11"/><text x="5.5727%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust_xlsxwriter::worksheet::Worksheet]&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="901" width="0.0865%" height="15" fill="rgb(210,56,17)" fg:x="677" fg:w="11"/><text x="5.5727%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::Worksheet&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="885" width="0.0865%" height="15" fill="rgb(224,130,29)" fg:x="677" fg:w="11"/><text x="5.5727%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="869" width="0.0865%" height="15" fill="rgb(235,212,8)" fg:x="677" fg:w="11"/><text x="5.5727%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="853" width="0.0865%" height="15" fill="rgb(223,33,50)" fg:x="677" fg:w="11"/><text x="5.5727%" y="863.50"></text></g><g><title>core::mem::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="837" width="0.0865%" height="15" fill="rgb(219,149,13)" fg:x="677" fg:w="11"/><text x="5.5727%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="821" width="0.0865%" height="15" fill="rgb(250,156,29)" fg:x="677" fg:w="11"/><text x="5.5727%" y="831.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="805" width="0.0865%" height="15" fill="rgb(216,193,19)" fg:x="677" fg:w="11"/><text x="5.5727%" y="815.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (11 samples, 0.09%)</title><rect x="5.3227%" y="789" width="0.0865%" height="15" fill="rgb(216,135,14)" fg:x="677" fg:w="11"/><text x="5.5727%" y="799.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (11 samples, 0.09%)</title><rect x="5.3227%" y="773" width="0.0865%" height="15" fill="rgb(241,47,5)" fg:x="677" fg:w="11"/><text x="5.5727%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="757" width="0.0865%" height="15" fill="rgb(233,42,35)" fg:x="677" fg:w="11"/><text x="5.5727%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="741" width="0.0865%" height="15" fill="rgb(231,13,6)" fg:x="677" fg:w="11"/><text x="5.5727%" y="751.50"></text></g><g><title>core::mem::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="725" width="0.0865%" height="15" fill="rgb(207,181,40)" fg:x="677" fg:w="11"/><text x="5.5727%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (11 samples, 0.09%)</title><rect x="5.3227%" y="709" width="0.0865%" height="15" fill="rgb(254,173,49)" fg:x="677" fg:w="11"/><text x="5.5727%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="5.3227%" y="693" width="0.0865%" height="15" fill="rgb(221,1,38)" fg:x="677" fg:w="11"/><text x="5.5727%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (8 samples, 0.06%)</title><rect x="5.3463%" y="677" width="0.0629%" height="15" fill="rgb(206,124,46)" fg:x="680" fg:w="8"/><text x="5.5963%" y="687.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (8 samples, 0.06%)</title><rect x="5.3463%" y="661" width="0.0629%" height="15" fill="rgb(249,21,11)" fg:x="680" fg:w="8"/><text x="5.5963%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::CellType&gt; (8 samples, 0.06%)</title><rect x="5.3463%" y="645" width="0.0629%" height="15" fill="rgb(222,201,40)" fg:x="680" fg:w="8"/><text x="5.5963%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (8 samples, 0.06%)</title><rect x="5.3463%" y="629" width="0.0629%" height="15" fill="rgb(235,61,29)" fg:x="680" fg:w="8"/><text x="5.5963%" y="639.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="5.3463%" y="613" width="0.0629%" height="15" fill="rgb(219,207,3)" fg:x="680" fg:w="8"/><text x="5.5963%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.02%)</title><rect x="5.4092%" y="949" width="0.0157%" height="15" fill="rgb(222,56,46)" fg:x="688" fg:w="2"/><text x="5.6592%" y="959.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.02%)</title><rect x="5.4250%" y="949" width="0.0157%" height="15" fill="rgb(239,76,54)" fg:x="690" fg:w="2"/><text x="5.6750%" y="959.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (2 samples, 0.02%)</title><rect x="5.4643%" y="901" width="0.0157%" height="15" fill="rgb(231,124,27)" fg:x="695" fg:w="2"/><text x="5.7143%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (2 samples, 0.02%)</title><rect x="5.4643%" y="885" width="0.0157%" height="15" fill="rgb(249,195,6)" fg:x="695" fg:w="2"/><text x="5.7143%" y="895.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (2 samples, 0.02%)</title><rect x="5.4643%" y="869" width="0.0157%" height="15" fill="rgb(237,174,47)" fg:x="695" fg:w="2"/><text x="5.7143%" y="879.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (3 samples, 0.02%)</title><rect x="5.4643%" y="917" width="0.0236%" height="15" fill="rgb(206,201,31)" fg:x="695" fg:w="3"/><text x="5.7143%" y="927.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (2 samples, 0.02%)</title><rect x="5.5114%" y="869" width="0.0157%" height="15" fill="rgb(231,57,52)" fg:x="701" fg:w="2"/><text x="5.7614%" y="879.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.03%)</title><rect x="5.5272%" y="853" width="0.0314%" height="15" fill="rgb(248,177,22)" fg:x="703" fg:w="4"/><text x="5.7772%" y="863.50"></text></g><g><title>core::str::validations::next_code_point_reverse (4 samples, 0.03%)</title><rect x="5.5272%" y="837" width="0.0314%" height="15" fill="rgb(215,211,37)" fg:x="703" fg:w="4"/><text x="5.7772%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.03%)</title><rect x="5.5272%" y="821" width="0.0314%" height="15" fill="rgb(241,128,51)" fg:x="703" fg:w="4"/><text x="5.7772%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (10 samples, 0.08%)</title><rect x="5.4879%" y="917" width="0.0786%" height="15" fill="rgb(227,165,31)" fg:x="698" fg:w="10"/><text x="5.7379%" y="927.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (8 samples, 0.06%)</title><rect x="5.5036%" y="901" width="0.0629%" height="15" fill="rgb(228,167,24)" fg:x="700" fg:w="8"/><text x="5.7536%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (8 samples, 0.06%)</title><rect x="5.5036%" y="885" width="0.0629%" height="15" fill="rgb(228,143,12)" fg:x="700" fg:w="8"/><text x="5.7536%" y="895.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5 samples, 0.04%)</title><rect x="5.5272%" y="869" width="0.0393%" height="15" fill="rgb(249,149,8)" fg:x="703" fg:w="5"/><text x="5.7772%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.02%)</title><rect x="5.5901%" y="853" width="0.0157%" height="15" fill="rgb(243,35,44)" fg:x="711" fg:w="2"/><text x="5.8401%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="5.6136%" y="821" width="0.0157%" height="15" fill="rgb(246,89,9)" fg:x="714" fg:w="2"/><text x="5.8636%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (9 samples, 0.07%)</title><rect x="5.5665%" y="917" width="0.0708%" height="15" fill="rgb(233,213,13)" fg:x="708" fg:w="9"/><text x="5.8165%" y="927.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (9 samples, 0.07%)</title><rect x="5.5665%" y="901" width="0.0708%" height="15" fill="rgb(233,141,41)" fg:x="708" fg:w="9"/><text x="5.8165%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (9 samples, 0.07%)</title><rect x="5.5665%" y="885" width="0.0708%" height="15" fill="rgb(239,167,4)" fg:x="708" fg:w="9"/><text x="5.8165%" y="895.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="5.5822%" y="869" width="0.0550%" height="15" fill="rgb(209,217,16)" fg:x="710" fg:w="7"/><text x="5.8322%" y="879.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="5.6058%" y="853" width="0.0314%" height="15" fill="rgb(219,88,35)" fg:x="713" fg:w="4"/><text x="5.8558%" y="863.50"></text></g><g><title>core::str::validations::next_code_point (4 samples, 0.03%)</title><rect x="5.6058%" y="837" width="0.0314%" height="15" fill="rgb(220,193,23)" fg:x="713" fg:w="4"/><text x="5.8558%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (25 samples, 0.20%)</title><rect x="5.4485%" y="949" width="0.1966%" height="15" fill="rgb(230,90,52)" fg:x="693" fg:w="25"/><text x="5.6985%" y="959.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (25 samples, 0.20%)</title><rect x="5.4485%" y="933" width="0.1966%" height="15" fill="rgb(252,106,19)" fg:x="693" fg:w="25"/><text x="5.6985%" y="943.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (3 samples, 0.02%)</title><rect x="5.6530%" y="917" width="0.0236%" height="15" fill="rgb(206,74,20)" fg:x="719" fg:w="3"/><text x="5.9030%" y="927.50"></text></g><g><title>core::str::pattern::StrSearcher::new (3 samples, 0.02%)</title><rect x="5.6530%" y="901" width="0.0236%" height="15" fill="rgb(230,138,44)" fg:x="719" fg:w="3"/><text x="5.9030%" y="911.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.02%)</title><rect x="5.6844%" y="917" width="0.0236%" height="15" fill="rgb(235,182,43)" fg:x="723" fg:w="3"/><text x="5.9344%" y="927.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (3 samples, 0.02%)</title><rect x="5.6844%" y="901" width="0.0236%" height="15" fill="rgb(242,16,51)" fg:x="723" fg:w="3"/><text x="5.9344%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (8 samples, 0.06%)</title><rect x="5.6530%" y="933" width="0.0629%" height="15" fill="rgb(248,9,4)" fg:x="719" fg:w="8"/><text x="5.9030%" y="943.50"></text></g><g><title>excel_merge::search::SearchFiles::split_thing (11 samples, 0.09%)</title><rect x="5.6451%" y="949" width="0.0865%" height="15" fill="rgb(210,31,22)" fg:x="718" fg:w="11"/><text x="5.8951%" y="959.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.02%)</title><rect x="5.7159%" y="933" width="0.0157%" height="15" fill="rgb(239,54,39)" fg:x="727" fg:w="2"/><text x="5.9659%" y="943.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="5.8181%" y="789" width="0.0236%" height="15" fill="rgb(230,99,41)" fg:x="740" fg:w="3"/><text x="6.0681%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="5.8181%" y="773" width="0.0236%" height="15" fill="rgb(253,106,12)" fg:x="740" fg:w="3"/><text x="6.0681%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4 samples, 0.03%)</title><rect x="5.8495%" y="741" width="0.0314%" height="15" fill="rgb(213,46,41)" fg:x="744" fg:w="4"/><text x="6.0995%" y="751.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (4 samples, 0.03%)</title><rect x="5.8495%" y="725" width="0.0314%" height="15" fill="rgb(215,133,35)" fg:x="744" fg:w="4"/><text x="6.0995%" y="735.50"></text></g><g><title>core::slice::memchr::memchr (4 samples, 0.03%)</title><rect x="5.8495%" y="709" width="0.0314%" height="15" fill="rgb(213,28,5)" fg:x="744" fg:w="4"/><text x="6.0995%" y="719.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.02%)</title><rect x="5.8652%" y="693" width="0.0157%" height="15" fill="rgb(215,77,49)" fg:x="746" fg:w="2"/><text x="6.1152%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="5.7630%" y="853" width="0.1258%" height="15" fill="rgb(248,100,22)" fg:x="733" fg:w="16"/><text x="6.0130%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (15 samples, 0.12%)</title><rect x="5.7709%" y="837" width="0.1179%" height="15" fill="rgb(208,67,9)" fg:x="734" fg:w="15"/><text x="6.0209%" y="847.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.07%)</title><rect x="5.8181%" y="821" width="0.0708%" height="15" fill="rgb(219,133,21)" fg:x="740" fg:w="9"/><text x="6.0681%" y="831.50"></text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer::{{closure}} (9 samples, 0.07%)</title><rect x="5.8181%" y="805" width="0.0708%" height="15" fill="rgb(246,46,29)" fg:x="740" fg:w="9"/><text x="6.0681%" y="815.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (6 samples, 0.05%)</title><rect x="5.8417%" y="789" width="0.0472%" height="15" fill="rgb(246,185,52)" fg:x="743" fg:w="6"/><text x="6.0917%" y="799.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (6 samples, 0.05%)</title><rect x="5.8417%" y="773" width="0.0472%" height="15" fill="rgb(252,136,11)" fg:x="743" fg:w="6"/><text x="6.0917%" y="783.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (5 samples, 0.04%)</title><rect x="5.8495%" y="757" width="0.0393%" height="15" fill="rgb(219,138,53)" fg:x="744" fg:w="5"/><text x="6.0995%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.14%)</title><rect x="5.7552%" y="869" width="0.1415%" height="15" fill="rgb(211,51,23)" fg:x="732" fg:w="18"/><text x="6.0052%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="5.9124%" y="869" width="0.0157%" height="15" fill="rgb(247,221,28)" fg:x="752" fg:w="2"/><text x="6.1624%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="5.9124%" y="853" width="0.0157%" height="15" fill="rgb(251,222,45)" fg:x="752" fg:w="2"/><text x="6.1624%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="5.9124%" y="837" width="0.0157%" height="15" fill="rgb(217,162,53)" fg:x="752" fg:w="2"/><text x="6.1624%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="5.9124%" y="821" width="0.0157%" height="15" fill="rgb(229,93,14)" fg:x="752" fg:w="2"/><text x="6.1624%" y="831.50"></text></g><g><title>itertools::Itertools::collect_vec (27 samples, 0.21%)</title><rect x="5.7316%" y="949" width="0.2123%" height="15" fill="rgb(209,67,49)" fg:x="729" fg:w="27"/><text x="5.9816%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (27 samples, 0.21%)</title><rect x="5.7316%" y="933" width="0.2123%" height="15" fill="rgb(213,87,29)" fg:x="729" fg:w="27"/><text x="5.9816%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (27 samples, 0.21%)</title><rect x="5.7316%" y="917" width="0.2123%" height="15" fill="rgb(205,151,52)" fg:x="729" fg:w="27"/><text x="5.9816%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 0.20%)</title><rect x="5.7394%" y="901" width="0.2044%" height="15" fill="rgb(253,215,39)" fg:x="730" fg:w="26"/><text x="5.9894%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26 samples, 0.20%)</title><rect x="5.7394%" y="885" width="0.2044%" height="15" fill="rgb(221,220,41)" fg:x="730" fg:w="26"/><text x="5.9894%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="5.9517%" y="933" width="0.0157%" height="15" fill="rgb(218,133,21)" fg:x="757" fg:w="2"/><text x="6.2017%" y="943.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.02%)</title><rect x="5.9832%" y="869" width="0.0236%" height="15" fill="rgb(221,193,43)" fg:x="761" fg:w="3"/><text x="6.2332%" y="879.50"></text></g><g><title>core::slice::memchr::memchr (2 samples, 0.02%)</title><rect x="5.9910%" y="853" width="0.0157%" height="15" fill="rgb(240,128,52)" fg:x="762" fg:w="2"/><text x="6.2410%" y="863.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="5.9675%" y="901" width="0.0629%" height="15" fill="rgb(253,114,12)" fg:x="759" fg:w="8"/><text x="6.2175%" y="911.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (7 samples, 0.06%)</title><rect x="5.9753%" y="885" width="0.0550%" height="15" fill="rgb(215,223,47)" fg:x="760" fg:w="7"/><text x="6.2253%" y="895.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (3 samples, 0.02%)</title><rect x="6.0068%" y="869" width="0.0236%" height="15" fill="rgb(248,225,23)" fg:x="764" fg:w="3"/><text x="6.2568%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="6.0146%" y="853" width="0.0157%" height="15" fill="rgb(250,108,0)" fg:x="765" fg:w="2"/><text x="6.2646%" y="863.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="5.9675%" y="933" width="0.0865%" height="15" fill="rgb(228,208,7)" fg:x="759" fg:w="11"/><text x="6.2175%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="5.9675%" y="917" width="0.0865%" height="15" fill="rgb(244,45,10)" fg:x="759" fg:w="11"/><text x="6.2175%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="6.0382%" y="901" width="0.0157%" height="15" fill="rgb(207,125,25)" fg:x="768" fg:w="2"/><text x="6.2882%" y="911.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.02%)</title><rect x="6.0382%" y="885" width="0.0157%" height="15" fill="rgb(210,195,18)" fg:x="768" fg:w="2"/><text x="6.2882%" y="895.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2 samples, 0.02%)</title><rect x="6.0382%" y="869" width="0.0157%" height="15" fill="rgb(249,80,12)" fg:x="768" fg:w="2"/><text x="6.2882%" y="879.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2 samples, 0.02%)</title><rect x="6.0382%" y="853" width="0.0157%" height="15" fill="rgb(221,65,9)" fg:x="768" fg:w="2"/><text x="6.2882%" y="863.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (2 samples, 0.02%)</title><rect x="6.0382%" y="837" width="0.0157%" height="15" fill="rgb(235,49,36)" fg:x="768" fg:w="2"/><text x="6.2882%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="6.0697%" y="917" width="0.0157%" height="15" fill="rgb(225,32,20)" fg:x="772" fg:w="2"/><text x="6.3197%" y="927.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (6 samples, 0.05%)</title><rect x="6.0697%" y="933" width="0.0472%" height="15" fill="rgb(215,141,46)" fg:x="772" fg:w="6"/><text x="6.3197%" y="943.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.02%)</title><rect x="6.0932%" y="917" width="0.0236%" height="15" fill="rgb(250,160,47)" fg:x="775" fg:w="3"/><text x="6.3432%" y="927.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="6.2584%" y="885" width="0.0157%" height="15" fill="rgb(216,222,40)" fg:x="796" fg:w="2"/><text x="6.5084%" y="895.50"></text></g><g><title>rust_xlsxwriter::utility::pixel_width (22 samples, 0.17%)</title><rect x="6.1326%" y="933" width="0.1730%" height="15" fill="rgb(234,217,39)" fg:x="780" fg:w="22"/><text x="6.3826%" y="943.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="6.2033%" y="917" width="0.1022%" height="15" fill="rgb(207,178,40)" fg:x="789" fg:w="13"/><text x="6.4533%" y="927.50"></text></g><g><title>core::str::validations::next_code_point (12 samples, 0.09%)</title><rect x="6.2112%" y="901" width="0.0943%" height="15" fill="rgb(221,136,13)" fg:x="790" fg:w="12"/><text x="6.4612%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="6.2741%" y="885" width="0.0314%" height="15" fill="rgb(249,199,10)" fg:x="798" fg:w="4"/><text x="6.5241%" y="895.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (3 samples, 0.02%)</title><rect x="6.2819%" y="869" width="0.0236%" height="15" fill="rgb(249,222,13)" fg:x="799" fg:w="3"/><text x="6.5319%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="6.3213%" y="805" width="0.0157%" height="15" fill="rgb(244,185,38)" fg:x="804" fg:w="2"/><text x="6.5713%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="6.3213%" y="853" width="0.0472%" height="15" fill="rgb(236,202,9)" fg:x="804" fg:w="6"/><text x="6.5713%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="6.3213%" y="837" width="0.0472%" height="15" fill="rgb(250,229,37)" fg:x="804" fg:w="6"/><text x="6.5713%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.05%)</title><rect x="6.3213%" y="821" width="0.0472%" height="15" fill="rgb(206,174,23)" fg:x="804" fg:w="6"/><text x="6.5713%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="6.3370%" y="805" width="0.0314%" height="15" fill="rgb(211,33,43)" fg:x="806" fg:w="4"/><text x="6.5870%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="6.3684%" y="853" width="0.0157%" height="15" fill="rgb(245,58,50)" fg:x="810" fg:w="2"/><text x="6.6184%" y="863.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="6.3684%" y="837" width="0.0157%" height="15" fill="rgb(244,68,36)" fg:x="810" fg:w="2"/><text x="6.6184%" y="847.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="6.3684%" y="821" width="0.0157%" height="15" fill="rgb(232,229,15)" fg:x="810" fg:w="2"/><text x="6.6184%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.09%)</title><rect x="6.3213%" y="885" width="0.0865%" height="15" fill="rgb(254,30,23)" fg:x="804" fg:w="11"/><text x="6.5713%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.09%)</title><rect x="6.3213%" y="869" width="0.0865%" height="15" fill="rgb(235,160,14)" fg:x="804" fg:w="11"/><text x="6.5713%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="6.3841%" y="853" width="0.0236%" height="15" fill="rgb(212,155,44)" fg:x="812" fg:w="3"/><text x="6.6341%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3 samples, 0.02%)</title><rect x="6.3841%" y="837" width="0.0236%" height="15" fill="rgb(226,2,50)" fg:x="812" fg:w="3"/><text x="6.6341%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u16 (2 samples, 0.02%)</title><rect x="6.3920%" y="821" width="0.0157%" height="15" fill="rgb(234,177,6)" fg:x="813" fg:w="2"/><text x="6.6420%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3920%" y="805" width="0.0157%" height="15" fill="rgb(217,24,9)" fg:x="813" fg:w="2"/><text x="6.6420%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3920%" y="789" width="0.0157%" height="15" fill="rgb(220,13,46)" fg:x="813" fg:w="2"/><text x="6.6420%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="6.3920%" y="773" width="0.0157%" height="15" fill="rgb(239,221,27)" fg:x="813" fg:w="2"/><text x="6.6420%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="6.4077%" y="837" width="0.0157%" height="15" fill="rgb(222,198,25)" fg:x="815" fg:w="2"/><text x="6.6577%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.02%)</title><rect x="6.4235%" y="837" width="0.0157%" height="15" fill="rgb(211,99,13)" fg:x="817" fg:w="2"/><text x="6.6735%" y="847.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="6.4235%" y="821" width="0.0157%" height="15" fill="rgb(232,111,31)" fg:x="817" fg:w="2"/><text x="6.6735%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="6.4392%" y="837" width="0.0157%" height="15" fill="rgb(245,82,37)" fg:x="819" fg:w="2"/><text x="6.6892%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="6.4392%" y="821" width="0.0157%" height="15" fill="rgb(227,149,46)" fg:x="819" fg:w="2"/><text x="6.6892%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="6.4392%" y="805" width="0.0157%" height="15" fill="rgb(218,36,50)" fg:x="819" fg:w="2"/><text x="6.6892%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (20 samples, 0.16%)</title><rect x="6.3055%" y="933" width="0.1572%" height="15" fill="rgb(226,80,48)" fg:x="802" fg:w="20"/><text x="6.5555%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (19 samples, 0.15%)</title><rect x="6.3134%" y="917" width="0.1494%" height="15" fill="rgb(238,224,15)" fg:x="803" fg:w="19"/><text x="6.5634%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (18 samples, 0.14%)</title><rect x="6.3213%" y="901" width="0.1415%" height="15" fill="rgb(241,136,10)" fg:x="804" fg:w="18"/><text x="6.5713%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.06%)</title><rect x="6.4077%" y="885" width="0.0550%" height="15" fill="rgb(208,32,45)" fg:x="815" fg:w="7"/><text x="6.6577%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.06%)</title><rect x="6.4077%" y="869" width="0.0550%" height="15" fill="rgb(207,135,9)" fg:x="815" fg:w="7"/><text x="6.6577%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 0.06%)</title><rect x="6.4077%" y="853" width="0.0550%" height="15" fill="rgb(206,86,44)" fg:x="815" fg:w="7"/><text x="6.6577%" y="863.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::autofit (67 samples, 0.53%)</title><rect x="5.9439%" y="949" width="0.5268%" height="15" fill="rgb(245,177,15)" fg:x="756" fg:w="67"/><text x="6.1939%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="6.4864%" y="933" width="0.0236%" height="15" fill="rgb(206,64,50)" fg:x="825" fg:w="3"/><text x="6.7364%" y="943.50"></text></g><g><title>__free (3 samples, 0.02%)</title><rect x="6.5099%" y="837" width="0.0236%" height="15" fill="rgb(234,36,40)" fg:x="828" fg:w="3"/><text x="6.7599%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="6.5099%" y="869" width="0.0314%" height="15" fill="rgb(213,64,8)" fg:x="828" fg:w="4"/><text x="6.7599%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="6.5099%" y="853" width="0.0314%" height="15" fill="rgb(210,75,36)" fg:x="828" fg:w="4"/><text x="6.7599%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.06%)</title><rect x="6.5099%" y="933" width="0.0629%" height="15" fill="rgb(229,88,21)" fg:x="828" fg:w="8"/><text x="6.7599%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.06%)</title><rect x="6.5099%" y="917" width="0.0629%" height="15" fill="rgb(252,204,47)" fg:x="828" fg:w="8"/><text x="6.7599%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.06%)</title><rect x="6.5099%" y="901" width="0.0629%" height="15" fill="rgb(208,77,27)" fg:x="828" fg:w="8"/><text x="6.7599%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="6.5099%" y="885" width="0.0629%" height="15" fill="rgb(221,76,26)" fg:x="828" fg:w="8"/><text x="6.7599%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="6.5414%" y="869" width="0.0314%" height="15" fill="rgb(225,139,18)" fg:x="832" fg:w="4"/><text x="6.7914%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="6.6200%" y="917" width="0.0236%" height="15" fill="rgb(230,137,11)" fg:x="842" fg:w="3"/><text x="6.8700%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="6.6436%" y="917" width="0.0393%" height="15" fill="rgb(212,28,1)" fg:x="845" fg:w="5"/><text x="6.8936%" y="927.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.02%)</title><rect x="6.6672%" y="901" width="0.0157%" height="15" fill="rgb(248,164,17)" fg:x="848" fg:w="2"/><text x="6.9172%" y="911.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.02%)</title><rect x="6.6829%" y="917" width="0.0157%" height="15" fill="rgb(222,171,42)" fg:x="850" fg:w="2"/><text x="6.9329%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="6.6829%" y="901" width="0.0157%" height="15" fill="rgb(243,84,45)" fg:x="850" fg:w="2"/><text x="6.9329%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (4 samples, 0.03%)</title><rect x="6.6986%" y="917" width="0.0314%" height="15" fill="rgb(252,49,23)" fg:x="852" fg:w="4"/><text x="6.9486%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_xlsxwriter::format::Format&gt;&gt; (2 samples, 0.02%)</title><rect x="6.7380%" y="917" width="0.0157%" height="15" fill="rgb(215,19,7)" fg:x="857" fg:w="2"/><text x="6.9880%" y="927.50"></text></g><g><title>[main] (2 samples, 0.02%)</title><rect x="6.7615%" y="901" width="0.0157%" height="15" fill="rgb(238,81,41)" fg:x="860" fg:w="2"/><text x="7.0115%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::xmlwriter::XMLWriter&gt; (2 samples, 0.02%)</title><rect x="6.7615%" y="885" width="0.0157%" height="15" fill="rgb(210,199,37)" fg:x="860" fg:w="2"/><text x="7.0115%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.02%)</title><rect x="6.7851%" y="869" width="0.0157%" height="15" fill="rgb(244,192,49)" fg:x="863" fg:w="2"/><text x="7.0351%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (4 samples, 0.03%)</title><rect x="6.7773%" y="901" width="0.0314%" height="15" fill="rgb(226,211,11)" fg:x="862" fg:w="4"/><text x="7.0273%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="6.7773%" y="885" width="0.0314%" height="15" fill="rgb(236,162,54)" fg:x="862" fg:w="4"/><text x="7.0273%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="6.8244%" y="821" width="0.0472%" height="15" fill="rgb(220,229,9)" fg:x="868" fg:w="6"/><text x="7.0744%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="6.8244%" y="805" width="0.0472%" height="15" fill="rgb(250,87,22)" fg:x="868" fg:w="6"/><text x="7.0744%" y="815.50"></text></g><g><title>__free (6 samples, 0.05%)</title><rect x="6.8244%" y="789" width="0.0472%" height="15" fill="rgb(239,43,17)" fg:x="868" fg:w="6"/><text x="7.0744%" y="799.50"></text></g><g><title>_int_free (4 samples, 0.03%)</title><rect x="6.8402%" y="773" width="0.0314%" height="15" fill="rgb(231,177,25)" fg:x="870" fg:w="4"/><text x="7.0902%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::styles::Styles&gt; (17 samples, 0.13%)</title><rect x="6.7537%" y="917" width="0.1337%" height="15" fill="rgb(219,179,1)" fg:x="859" fg:w="17"/><text x="7.0037%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::xmlwriter::XMLWriter&gt; (10 samples, 0.08%)</title><rect x="6.8087%" y="901" width="0.0786%" height="15" fill="rgb(238,219,53)" fg:x="866" fg:w="10"/><text x="7.0587%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (10 samples, 0.08%)</title><rect x="6.8087%" y="885" width="0.0786%" height="15" fill="rgb(232,167,36)" fg:x="866" fg:w="10"/><text x="7.0587%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 0.08%)</title><rect x="6.8087%" y="869" width="0.0786%" height="15" fill="rgb(244,19,51)" fg:x="866" fg:w="10"/><text x="7.0587%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.07%)</title><rect x="6.8166%" y="853" width="0.0708%" height="15" fill="rgb(224,6,22)" fg:x="867" fg:w="9"/><text x="7.0666%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.07%)</title><rect x="6.8166%" y="837" width="0.0708%" height="15" fill="rgb(224,145,5)" fg:x="867" fg:w="9"/><text x="7.0666%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="6.8716%" y="821" width="0.0157%" height="15" fill="rgb(234,130,49)" fg:x="874" fg:w="2"/><text x="7.1216%" y="831.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (5 samples, 0.04%)</title><rect x="6.8952%" y="917" width="0.0393%" height="15" fill="rgb(254,6,2)" fg:x="877" fg:w="5"/><text x="7.1452%" y="927.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (5 samples, 0.04%)</title><rect x="6.8952%" y="901" width="0.0393%" height="15" fill="rgb(208,96,46)" fg:x="877" fg:w="5"/><text x="7.1452%" y="911.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (3 samples, 0.02%)</title><rect x="6.9109%" y="885" width="0.0236%" height="15" fill="rgb(239,3,39)" fg:x="879" fg:w="3"/><text x="7.1609%" y="895.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (2 samples, 0.02%)</title><rect x="6.9188%" y="869" width="0.0157%" height="15" fill="rgb(233,210,1)" fg:x="880" fg:w="2"/><text x="7.1688%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (3 samples, 0.02%)</title><rect x="6.9345%" y="917" width="0.0236%" height="15" fill="rgb(244,137,37)" fg:x="882" fg:w="3"/><text x="7.1845%" y="927.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.02%)</title><rect x="6.9345%" y="901" width="0.0236%" height="15" fill="rgb(240,136,2)" fg:x="882" fg:w="3"/><text x="7.1845%" y="911.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (2 samples, 0.02%)</title><rect x="6.9424%" y="885" width="0.0157%" height="15" fill="rgb(239,18,37)" fg:x="883" fg:w="2"/><text x="7.1924%" y="895.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format::is_default::DEFAULT_STATE as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="6.9581%" y="901" width="0.0236%" height="15" fill="rgb(218,185,22)" fg:x="885" fg:w="3"/><text x="7.2081%" y="911.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format::is_default::DEFAULT_STATE as core::ops::deref::Deref&gt;::deref::__stability (3 samples, 0.02%)</title><rect x="6.9581%" y="885" width="0.0236%" height="15" fill="rgb(225,218,4)" fg:x="885" fg:w="3"/><text x="7.2081%" y="895.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="6.9581%" y="869" width="0.0236%" height="15" fill="rgb(230,182,32)" fg:x="885" fg:w="3"/><text x="7.2081%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="7.0053%" y="869" width="0.0236%" height="15" fill="rgb(242,56,43)" fg:x="891" fg:w="3"/><text x="7.2553%" y="879.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.02%)</title><rect x="7.0053%" y="853" width="0.0236%" height="15" fill="rgb(233,99,24)" fg:x="891" fg:w="3"/><text x="7.2553%" y="863.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="7.0131%" y="837" width="0.0157%" height="15" fill="rgb(234,209,42)" fg:x="892" fg:w="2"/><text x="7.2631%" y="847.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="7.0131%" y="821" width="0.0157%" height="15" fill="rgb(227,7,12)" fg:x="892" fg:w="2"/><text x="7.2631%" y="831.50"></text></g><g><title>__memcmp_sse2 (2 samples, 0.02%)</title><rect x="7.0131%" y="805" width="0.0157%" height="15" fill="rgb(245,203,43)" fg:x="892" fg:w="2"/><text x="7.2631%" y="815.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Color as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="7.0446%" y="853" width="0.0157%" height="15" fill="rgb(238,205,33)" fg:x="896" fg:w="2"/><text x="7.2946%" y="863.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Border as core::cmp::PartialEq&gt;::eq (5 samples, 0.04%)</title><rect x="7.0289%" y="869" width="0.0393%" height="15" fill="rgb(231,56,7)" fg:x="894" fg:w="5"/><text x="7.2789%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="7.0996%" y="805" width="0.0157%" height="15" fill="rgb(244,186,29)" fg:x="903" fg:w="2"/><text x="7.3496%" y="815.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.02%)</title><rect x="7.0996%" y="789" width="0.0157%" height="15" fill="rgb(234,111,31)" fg:x="903" fg:w="2"/><text x="7.3496%" y="799.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="7.0996%" y="773" width="0.0157%" height="15" fill="rgb(241,149,10)" fg:x="903" fg:w="2"/><text x="7.3496%" y="783.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.02%)</title><rect x="7.0996%" y="757" width="0.0157%" height="15" fill="rgb(249,206,44)" fg:x="903" fg:w="2"/><text x="7.3496%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="7.0996%" y="821" width="0.0236%" height="15" fill="rgb(251,153,30)" fg:x="903" fg:w="3"/><text x="7.3496%" y="831.50"></text></g><g><title>rust_xlsxwriter::format::Format::is_default (27 samples, 0.21%)</title><rect x="6.9581%" y="917" width="0.2123%" height="15" fill="rgb(239,152,38)" fg:x="885" fg:w="27"/><text x="7.2081%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.19%)</title><rect x="6.9817%" y="901" width="0.1887%" height="15" fill="rgb(249,139,47)" fg:x="888" fg:w="24"/><text x="7.2317%" y="911.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Format as core::cmp::PartialEq&gt;::eq (24 samples, 0.19%)</title><rect x="6.9817%" y="885" width="0.1887%" height="15" fill="rgb(244,64,35)" fg:x="888" fg:w="24"/><text x="7.2317%" y="895.50"></text></g><g><title>&lt;rust_xlsxwriter::format::Font as core::cmp::PartialEq&gt;::eq (12 samples, 0.09%)</title><rect x="7.0760%" y="869" width="0.0943%" height="15" fill="rgb(216,46,15)" fg:x="900" fg:w="12"/><text x="7.3260%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (9 samples, 0.07%)</title><rect x="7.0996%" y="853" width="0.0708%" height="15" fill="rgb(250,74,19)" fg:x="903" fg:w="9"/><text x="7.3496%" y="863.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (9 samples, 0.07%)</title><rect x="7.0996%" y="837" width="0.0708%" height="15" fill="rgb(249,42,33)" fg:x="903" fg:w="9"/><text x="7.3496%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.05%)</title><rect x="7.1232%" y="821" width="0.0472%" height="15" fill="rgb(242,149,17)" fg:x="906" fg:w="6"/><text x="7.3732%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.05%)</title><rect x="7.1232%" y="805" width="0.0472%" height="15" fill="rgb(244,29,21)" fg:x="906" fg:w="6"/><text x="7.3732%" y="815.50"></text></g><g><title>__memcmp_sse2 (3 samples, 0.02%)</title><rect x="7.1468%" y="789" width="0.0236%" height="15" fill="rgb(220,130,37)" fg:x="909" fg:w="3"/><text x="7.3968%" y="799.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::new (2 samples, 0.02%)</title><rect x="7.1704%" y="917" width="0.0157%" height="15" fill="rgb(211,67,2)" fg:x="912" fg:w="2"/><text x="7.4204%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::new (2 samples, 0.02%)</title><rect x="7.1704%" y="901" width="0.0157%" height="15" fill="rgb(235,68,52)" fg:x="912" fg:w="2"/><text x="7.4204%" y="911.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.02%)</title><rect x="7.2018%" y="885" width="0.0157%" height="15" fill="rgb(246,142,3)" fg:x="916" fg:w="2"/><text x="7.4518%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.02%)</title><rect x="7.2018%" y="869" width="0.0157%" height="15" fill="rgb(241,25,7)" fg:x="916" fg:w="2"/><text x="7.4518%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.02%)</title><rect x="7.2018%" y="853" width="0.0157%" height="15" fill="rgb(242,119,39)" fg:x="916" fg:w="2"/><text x="7.4518%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="7.2254%" y="869" width="0.0157%" height="15" fill="rgb(241,98,45)" fg:x="919" fg:w="2"/><text x="7.4754%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(&amp;str,alloc::string::String)]&gt; (2 samples, 0.02%)</title><rect x="7.2254%" y="853" width="0.0157%" height="15" fill="rgb(254,28,30)" fg:x="919" fg:w="2"/><text x="7.4754%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="7.2411%" y="837" width="0.0157%" height="15" fill="rgb(241,142,54)" fg:x="921" fg:w="2"/><text x="7.4911%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="7.2411%" y="821" width="0.0157%" height="15" fill="rgb(222,85,15)" fg:x="921" fg:w="2"/><text x="7.4911%" y="831.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="7.2411%" y="805" width="0.0157%" height="15" fill="rgb(210,85,47)" fg:x="921" fg:w="2"/><text x="7.4911%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(&amp;str,alloc::string::String)&gt;&gt; (6 samples, 0.05%)</title><rect x="7.2254%" y="885" width="0.0472%" height="15" fill="rgb(224,206,25)" fg:x="919" fg:w="6"/><text x="7.4754%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(&amp;str,alloc::string::String)&gt;&gt; (4 samples, 0.03%)</title><rect x="7.2411%" y="869" width="0.0314%" height="15" fill="rgb(243,201,19)" fg:x="921" fg:w="4"/><text x="7.4911%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="7.2411%" y="853" width="0.0314%" height="15" fill="rgb(236,59,4)" fg:x="921" fg:w="4"/><text x="7.4911%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="7.2569%" y="837" width="0.0157%" height="15" fill="rgb(254,179,45)" fg:x="923" fg:w="2"/><text x="7.5069%" y="847.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_color (11 samples, 0.09%)</title><rect x="7.2018%" y="901" width="0.0865%" height="15" fill="rgb(226,14,10)" fg:x="916" fg:w="11"/><text x="7.4518%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (2 samples, 0.02%)</title><rect x="7.2726%" y="885" width="0.0157%" height="15" fill="rgb(244,27,41)" fg:x="925" fg:w="2"/><text x="7.5226%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.2726%" y="869" width="0.0157%" height="15" fill="rgb(235,35,32)" fg:x="925" fg:w="2"/><text x="7.5226%" y="879.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_family (3 samples, 0.02%)</title><rect x="7.2883%" y="901" width="0.0236%" height="15" fill="rgb(218,68,31)" fg:x="927" fg:w="3"/><text x="7.5383%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(&amp;str,alloc::string::String): 1]&gt; (2 samples, 0.02%)</title><rect x="7.3276%" y="885" width="0.0157%" height="15" fill="rgb(207,120,37)" fg:x="932" fg:w="2"/><text x="7.5776%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,alloc::string::String)&gt; (2 samples, 0.02%)</title><rect x="7.3276%" y="869" width="0.0157%" height="15" fill="rgb(227,98,0)" fg:x="932" fg:w="2"/><text x="7.5776%" y="879.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_name (5 samples, 0.04%)</title><rect x="7.3119%" y="901" width="0.0393%" height="15" fill="rgb(207,7,3)" fg:x="930" fg:w="5"/><text x="7.5619%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="7.3512%" y="885" width="0.0157%" height="15" fill="rgb(206,98,19)" fg:x="935" fg:w="2"/><text x="7.6012%" y="895.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_scheme (3 samples, 0.02%)</title><rect x="7.3512%" y="901" width="0.0236%" height="15" fill="rgb(217,5,26)" fg:x="935" fg:w="3"/><text x="7.6012%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (2 samples, 0.02%)</title><rect x="7.3827%" y="901" width="0.0157%" height="15" fill="rgb(235,190,38)" fg:x="939" fg:w="2"/><text x="7.6327%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (2 samples, 0.02%)</title><rect x="7.3827%" y="885" width="0.0157%" height="15" fill="rgb(247,86,24)" fg:x="939" fg:w="2"/><text x="7.6327%" y="895.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="7.3827%" y="869" width="0.0157%" height="15" fill="rgb(205,101,16)" fg:x="939" fg:w="2"/><text x="7.6327%" y="879.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font (28 samples, 0.22%)</title><rect x="7.1861%" y="917" width="0.2201%" height="15" fill="rgb(246,168,33)" fg:x="914" fg:w="28"/><text x="7.4361%" y="927.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (3 samples, 0.02%)</title><rect x="7.4220%" y="901" width="0.0236%" height="15" fill="rgb(231,114,1)" fg:x="944" fg:w="3"/><text x="7.6720%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (3 samples, 0.02%)</title><rect x="7.4220%" y="885" width="0.0236%" height="15" fill="rgb(207,184,53)" fg:x="944" fg:w="3"/><text x="7.6720%" y="895.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.02%)</title><rect x="7.4220%" y="869" width="0.0236%" height="15" fill="rgb(224,95,51)" fg:x="944" fg:w="3"/><text x="7.6720%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.02%)</title><rect x="7.4220%" y="853" width="0.0236%" height="15" fill="rgb(212,188,45)" fg:x="944" fg:w="3"/><text x="7.6720%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.02%)</title><rect x="7.4220%" y="837" width="0.0236%" height="15" fill="rgb(223,154,38)" fg:x="944" fg:w="3"/><text x="7.6720%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.02%)</title><rect x="7.4220%" y="821" width="0.0236%" height="15" fill="rgb(251,22,52)" fg:x="944" fg:w="3"/><text x="7.6720%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.02%)</title><rect x="7.4220%" y="805" width="0.0236%" height="15" fill="rgb(229,209,22)" fg:x="944" fg:w="3"/><text x="7.6720%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.02%)</title><rect x="7.4220%" y="789" width="0.0236%" height="15" fill="rgb(234,138,34)" fg:x="944" fg:w="3"/><text x="7.6720%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.02%)</title><rect x="7.4220%" y="773" width="0.0236%" height="15" fill="rgb(212,95,11)" fg:x="944" fg:w="3"/><text x="7.6720%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="7.4220%" y="757" width="0.0236%" height="15" fill="rgb(240,179,47)" fg:x="944" fg:w="3"/><text x="7.6720%" y="767.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="7.4298%" y="741" width="0.0157%" height="15" fill="rgb(240,163,11)" fg:x="945" fg:w="2"/><text x="7.6798%" y="751.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::read_to_string (7 samples, 0.06%)</title><rect x="7.4062%" y="917" width="0.0550%" height="15" fill="rgb(236,37,12)" fg:x="942" fg:w="7"/><text x="7.6562%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="7.4849%" y="901" width="0.0157%" height="15" fill="rgb(232,164,16)" fg:x="952" fg:w="2"/><text x="7.7349%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_data_element (8 samples, 0.06%)</title><rect x="7.4613%" y="917" width="0.0629%" height="15" fill="rgb(244,205,15)" fg:x="949" fg:w="8"/><text x="7.7113%" y="927.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (2 samples, 0.02%)</title><rect x="7.5085%" y="901" width="0.0157%" height="15" fill="rgb(223,117,47)" fg:x="955" fg:w="2"/><text x="7.7585%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (4 samples, 0.03%)</title><rect x="7.5242%" y="917" width="0.0314%" height="15" fill="rgb(244,107,35)" fg:x="957" fg:w="4"/><text x="7.7742%" y="927.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.02%)</title><rect x="7.5320%" y="901" width="0.0236%" height="15" fill="rgb(205,140,8)" fg:x="958" fg:w="3"/><text x="7.7820%" y="911.50"></text></g><g><title>core::fmt::write (3 samples, 0.02%)</title><rect x="7.5320%" y="885" width="0.0236%" height="15" fill="rgb(228,84,46)" fg:x="958" fg:w="3"/><text x="7.7820%" y="895.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="7.5399%" y="869" width="0.0157%" height="15" fill="rgb(254,188,9)" fg:x="959" fg:w="2"/><text x="7.7899%" y="879.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (4 samples, 0.03%)</title><rect x="7.5949%" y="853" width="0.0314%" height="15" fill="rgb(206,112,54)" fg:x="966" fg:w="4"/><text x="7.8449%" y="863.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_rich_string (136 samples, 1.07%)</title><rect x="6.5728%" y="933" width="1.0693%" height="15" fill="rgb(216,84,49)" fg:x="836" fg:w="136"/><text x="6.8228%" y="943.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (11 samples, 0.09%)</title><rect x="7.5556%" y="917" width="0.0865%" height="15" fill="rgb(214,194,35)" fg:x="961" fg:w="11"/><text x="7.8056%" y="927.50"></text></g><g><title>std::io::Write::write_fmt (10 samples, 0.08%)</title><rect x="7.5635%" y="901" width="0.0786%" height="15" fill="rgb(249,28,3)" fg:x="962" fg:w="10"/><text x="7.8135%" y="911.50"></text></g><g><title>core::fmt::write (9 samples, 0.07%)</title><rect x="7.5713%" y="885" width="0.0708%" height="15" fill="rgb(222,56,52)" fg:x="963" fg:w="9"/><text x="7.8213%" y="895.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (7 samples, 0.06%)</title><rect x="7.5871%" y="869" width="0.0550%" height="15" fill="rgb(245,217,50)" fg:x="965" fg:w="7"/><text x="7.8371%" y="879.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.02%)</title><rect x="7.6264%" y="853" width="0.0157%" height="15" fill="rgb(213,201,24)" fg:x="970" fg:w="2"/><text x="7.8764%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::initialize_arcinner (3 samples, 0.02%)</title><rect x="7.6814%" y="821" width="0.0236%" height="15" fill="rgb(248,116,28)" fg:x="977" fg:w="3"/><text x="7.9314%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::{{closure}} (2 samples, 0.02%)</title><rect x="7.6893%" y="805" width="0.0157%" height="15" fill="rgb(219,72,43)" fg:x="978" fg:w="2"/><text x="7.9393%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (7 samples, 0.06%)</title><rect x="7.6736%" y="837" width="0.0550%" height="15" fill="rgb(209,138,14)" fg:x="976" fg:w="7"/><text x="7.9236%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (9 samples, 0.07%)</title><rect x="7.6657%" y="853" width="0.0708%" height="15" fill="rgb(222,18,33)" fg:x="975" fg:w="9"/><text x="7.9157%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (13 samples, 0.10%)</title><rect x="7.6500%" y="901" width="0.1022%" height="15" fill="rgb(213,199,7)" fg:x="973" fg:w="13"/><text x="7.9000%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (13 samples, 0.10%)</title><rect x="7.6500%" y="885" width="0.1022%" height="15" fill="rgb(250,110,10)" fg:x="973" fg:w="13"/><text x="7.9000%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (13 samples, 0.10%)</title><rect x="7.6500%" y="869" width="0.1022%" height="15" fill="rgb(248,123,6)" fg:x="973" fg:w="13"/><text x="7.9000%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="7.7365%" y="853" width="0.0157%" height="15" fill="rgb(206,91,31)" fg:x="984" fg:w="2"/><text x="7.9865%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (14 samples, 0.11%)</title><rect x="7.6500%" y="917" width="0.1101%" height="15" fill="rgb(211,154,13)" fg:x="973" fg:w="14"/><text x="7.9000%" y="927.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (3 samples, 0.02%)</title><rect x="7.7600%" y="917" width="0.0236%" height="15" fill="rgb(225,148,7)" fg:x="987" fg:w="3"/><text x="8.0100%" y="927.50"></text></g><g><title>core::str::count::count_chars (3 samples, 0.02%)</title><rect x="7.7600%" y="901" width="0.0236%" height="15" fill="rgb(220,160,43)" fg:x="987" fg:w="3"/><text x="8.0100%" y="911.50"></text></g><g><title>core::str::count::do_count_chars (2 samples, 0.02%)</title><rect x="7.7679%" y="885" width="0.0157%" height="15" fill="rgb(213,52,39)" fg:x="988" fg:w="2"/><text x="8.0179%" y="895.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="7.8151%" y="901" width="0.0157%" height="15" fill="rgb(243,137,7)" fg:x="994" fg:w="2"/><text x="8.0651%" y="911.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="7.8151%" y="885" width="0.0157%" height="15" fill="rgb(230,79,13)" fg:x="994" fg:w="2"/><text x="8.0651%" y="895.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="7.8151%" y="869" width="0.0157%" height="15" fill="rgb(247,105,23)" fg:x="994" fg:w="2"/><text x="8.0651%" y="879.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::check_dimensions (10 samples, 0.08%)</title><rect x="7.7915%" y="917" width="0.0786%" height="15" fill="rgb(223,179,41)" fg:x="991" fg:w="10"/><text x="8.0415%" y="927.50"></text></g><g><title>core::cmp::min (5 samples, 0.04%)</title><rect x="7.8308%" y="901" width="0.0393%" height="15" fill="rgb(218,9,34)" fg:x="996" fg:w="5"/><text x="8.0808%" y="911.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.04%)</title><rect x="7.8308%" y="885" width="0.0393%" height="15" fill="rgb(222,106,8)" fg:x="996" fg:w="5"/><text x="8.0808%" y="895.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.02%)</title><rect x="7.8465%" y="869" width="0.0236%" height="15" fill="rgb(211,220,0)" fg:x="998" fg:w="3"/><text x="8.0965%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="7.8544%" y="853" width="0.0157%" height="15" fill="rgb(229,52,16)" fg:x="999" fg:w="2"/><text x="8.1044%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (5 samples, 0.04%)</title><rect x="7.8858%" y="901" width="0.0393%" height="15" fill="rgb(212,155,18)" fg:x="1003" fg:w="5"/><text x="8.1358%" y="911.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_rich_string (186 samples, 1.46%)</title><rect x="6.4706%" y="949" width="1.4624%" height="15" fill="rgb(242,21,14)" fg:x="823" fg:w="186"/><text x="6.7206%" y="959.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_rich_string (37 samples, 0.29%)</title><rect x="7.6421%" y="933" width="0.2909%" height="15" fill="rgb(222,19,48)" fg:x="972" fg:w="37"/><text x="7.8921%" y="943.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (8 samples, 0.06%)</title><rect x="7.8701%" y="917" width="0.0629%" height="15" fill="rgb(232,45,27)" fg:x="1001" fg:w="8"/><text x="8.1201%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from (2 samples, 0.02%)</title><rect x="7.9487%" y="917" width="0.0157%" height="15" fill="rgb(249,103,42)" fg:x="1011" fg:w="2"/><text x="8.1987%" y="927.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::check_dimensions (2 samples, 0.02%)</title><rect x="7.9723%" y="917" width="0.0157%" height="15" fill="rgb(246,81,33)" fg:x="1014" fg:w="2"/><text x="8.2223%" y="927.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (2 samples, 0.02%)</title><rect x="7.9959%" y="901" width="0.0157%" height="15" fill="rgb(252,33,42)" fg:x="1017" fg:w="2"/><text x="8.2459%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="7.9959%" y="885" width="0.0157%" height="15" fill="rgb(209,212,41)" fg:x="1017" fg:w="2"/><text x="8.2459%" y="895.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::{{closure}} (381 samples, 3.00%)</title><rect x="5.0240%" y="997" width="2.9955%" height="15" fill="rgb(207,154,6)" fg:x="639" fg:w="381"/><text x="5.2740%" y="1007.50">&lt;F ..</text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (381 samples, 3.00%)</title><rect x="5.0240%" y="981" width="2.9955%" height="15" fill="rgb(223,64,47)" fg:x="639" fg:w="381"/><text x="5.2740%" y="991.50">exc..</text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (381 samples, 3.00%)</title><rect x="5.0240%" y="965" width="2.9955%" height="15" fill="rgb(211,161,38)" fg:x="639" fg:w="381"/><text x="5.2740%" y="975.50">exc..</text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string (11 samples, 0.09%)</title><rect x="7.9330%" y="949" width="0.0865%" height="15" fill="rgb(219,138,40)" fg:x="1009" fg:w="11"/><text x="8.1830%" y="959.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_string (10 samples, 0.08%)</title><rect x="7.9409%" y="933" width="0.0786%" height="15" fill="rgb(241,228,46)" fg:x="1010" fg:w="10"/><text x="8.1909%" y="943.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (4 samples, 0.03%)</title><rect x="7.9880%" y="917" width="0.0314%" height="15" fill="rgb(223,209,38)" fg:x="1016" fg:w="4"/><text x="8.2380%" y="927.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5 samples, 0.04%)</title><rect x="8.0274%" y="997" width="0.0393%" height="15" fill="rgb(236,164,45)" fg:x="1021" fg:w="5"/><text x="8.2774%" y="1007.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.02%)</title><rect x="8.0667%" y="997" width="0.0236%" height="15" fill="rgb(231,15,5)" fg:x="1026" fg:w="3"/><text x="8.3167%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.06%)</title><rect x="8.0903%" y="997" width="0.0629%" height="15" fill="rgb(252,35,15)" fg:x="1029" fg:w="8"/><text x="8.3403%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="8.1532%" y="997" width="0.0393%" height="15" fill="rgb(248,181,18)" fg:x="1037" fg:w="5"/><text x="8.4032%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="8.1925%" y="997" width="0.0314%" height="15" fill="rgb(233,39,42)" fg:x="1042" fg:w="4"/><text x="8.4425%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="8.2318%" y="997" width="0.0157%" height="15" fill="rgb(238,110,33)" fg:x="1047" fg:w="2"/><text x="8.4818%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (5 samples, 0.04%)</title><rect x="8.2475%" y="741" width="0.0393%" height="15" fill="rgb(233,195,10)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.04%)</title><rect x="8.2475%" y="725" width="0.0393%" height="15" fill="rgb(254,105,3)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="8.2475%" y="709" width="0.0393%" height="15" fill="rgb(221,225,9)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5 samples, 0.04%)</title><rect x="8.2475%" y="693" width="0.0393%" height="15" fill="rgb(224,227,45)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="703.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (5 samples, 0.04%)</title><rect x="8.2475%" y="677" width="0.0393%" height="15" fill="rgb(229,198,43)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="687.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (5 samples, 0.04%)</title><rect x="8.2475%" y="661" width="0.0393%" height="15" fill="rgb(206,209,35)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="671.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (5 samples, 0.04%)</title><rect x="8.2475%" y="645" width="0.0393%" height="15" fill="rgb(245,195,53)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.04%)</title><rect x="8.2475%" y="629" width="0.0393%" height="15" fill="rgb(240,92,26)" fg:x="1049" fg:w="5"/><text x="8.4975%" y="639.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (9 samples, 0.07%)</title><rect x="8.2475%" y="805" width="0.0708%" height="15" fill="rgb(207,40,23)" fg:x="1049" fg:w="9"/><text x="8.4975%" y="815.50"></text></g><g><title>calamine::xlsx::get_attribute (9 samples, 0.07%)</title><rect x="8.2475%" y="789" width="0.0708%" height="15" fill="rgb(223,111,35)" fg:x="1049" fg:w="9"/><text x="8.4975%" y="799.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.07%)</title><rect x="8.2475%" y="773" width="0.0708%" height="15" fill="rgb(229,147,28)" fg:x="1049" fg:w="9"/><text x="8.4975%" y="783.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (9 samples, 0.07%)</title><rect x="8.2475%" y="757" width="0.0708%" height="15" fill="rgb(211,29,28)" fg:x="1049" fg:w="9"/><text x="8.4975%" y="767.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (4 samples, 0.03%)</title><rect x="8.2868%" y="741" width="0.0314%" height="15" fill="rgb(228,72,33)" fg:x="1054" fg:w="4"/><text x="8.5368%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.03%)</title><rect x="8.2868%" y="725" width="0.0314%" height="15" fill="rgb(205,214,31)" fg:x="1054" fg:w="4"/><text x="8.5368%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="8.2868%" y="709" width="0.0314%" height="15" fill="rgb(224,111,15)" fg:x="1054" fg:w="4"/><text x="8.5368%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="8.2868%" y="693" width="0.0314%" height="15" fill="rgb(253,21,26)" fg:x="1054" fg:w="4"/><text x="8.5368%" y="703.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="8.3025%" y="677" width="0.0157%" height="15" fill="rgb(245,139,43)" fg:x="1056" fg:w="2"/><text x="8.5525%" y="687.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="8.3025%" y="661" width="0.0157%" height="15" fill="rgb(252,170,7)" fg:x="1056" fg:w="2"/><text x="8.5525%" y="671.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="8.3025%" y="645" width="0.0157%" height="15" fill="rgb(231,118,14)" fg:x="1056" fg:w="2"/><text x="8.5525%" y="655.50"></text></g><g><title>quick_xml::events::BytesText::unescape (2 samples, 0.02%)</title><rect x="8.3183%" y="789" width="0.0157%" height="15" fill="rgb(238,83,0)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="799.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (2 samples, 0.02%)</title><rect x="8.3183%" y="773" width="0.0157%" height="15" fill="rgb(221,39,39)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="783.50"></text></g><g><title>quick_xml::escapei::unescape_with (2 samples, 0.02%)</title><rect x="8.3183%" y="757" width="0.0157%" height="15" fill="rgb(222,119,46)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.02%)</title><rect x="8.3183%" y="741" width="0.0157%" height="15" fill="rgb(222,165,49)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.02%)</title><rect x="8.3183%" y="725" width="0.0157%" height="15" fill="rgb(219,113,52)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="735.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="8.3183%" y="709" width="0.0157%" height="15" fill="rgb(214,7,15)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (2 samples, 0.02%)</title><rect x="8.3183%" y="693" width="0.0157%" height="15" fill="rgb(235,32,4)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="703.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.02%)</title><rect x="8.3183%" y="677" width="0.0157%" height="15" fill="rgb(238,90,54)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="687.50"></text></g><g><title>memchr::memchr::memchr2_raw (2 samples, 0.02%)</title><rect x="8.3183%" y="661" width="0.0157%" height="15" fill="rgb(213,208,19)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (2 samples, 0.02%)</title><rect x="8.3183%" y="645" width="0.0157%" height="15" fill="rgb(233,156,4)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="655.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (2 samples, 0.02%)</title><rect x="8.3183%" y="629" width="0.0157%" height="15" fill="rgb(207,194,5)" fg:x="1058" fg:w="2"/><text x="8.5683%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="8.3340%" y="725" width="0.0157%" height="15" fill="rgb(206,111,30)" fg:x="1060" fg:w="2"/><text x="8.5840%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="8.3340%" y="709" width="0.0157%" height="15" fill="rgb(243,70,54)" fg:x="1060" fg:w="2"/><text x="8.5840%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="8.3340%" y="693" width="0.0157%" height="15" fill="rgb(242,28,8)" fg:x="1060" fg:w="2"/><text x="8.5840%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (3 samples, 0.02%)</title><rect x="8.3340%" y="741" width="0.0236%" height="15" fill="rgb(219,106,18)" fg:x="1060" fg:w="3"/><text x="8.5840%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="8.3733%" y="677" width="0.0157%" height="15" fill="rgb(244,222,10)" fg:x="1065" fg:w="2"/><text x="8.6233%" y="687.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="8.3733%" y="709" width="0.0314%" height="15" fill="rgb(236,179,52)" fg:x="1065" fg:w="4"/><text x="8.6233%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (4 samples, 0.03%)</title><rect x="8.3733%" y="693" width="0.0314%" height="15" fill="rgb(213,23,39)" fg:x="1065" fg:w="4"/><text x="8.6233%" y="703.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.02%)</title><rect x="8.3890%" y="677" width="0.0157%" height="15" fill="rgb(238,48,10)" fg:x="1067" fg:w="2"/><text x="8.6390%" y="687.50"></text></g><g><title>memchr::memchr::memchr3_raw (2 samples, 0.02%)</title><rect x="8.3890%" y="661" width="0.0157%" height="15" fill="rgb(251,196,23)" fg:x="1067" fg:w="2"/><text x="8.6390%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (2 samples, 0.02%)</title><rect x="8.3890%" y="645" width="0.0157%" height="15" fill="rgb(250,152,24)" fg:x="1067" fg:w="2"/><text x="8.6390%" y="655.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (7 samples, 0.06%)</title><rect x="8.3576%" y="741" width="0.0550%" height="15" fill="rgb(209,150,17)" fg:x="1063" fg:w="7"/><text x="8.6076%" y="751.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (5 samples, 0.04%)</title><rect x="8.3733%" y="725" width="0.0393%" height="15" fill="rgb(234,202,34)" fg:x="1065" fg:w="5"/><text x="8.6233%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (2 samples, 0.02%)</title><rect x="8.4126%" y="725" width="0.0157%" height="15" fill="rgb(253,148,53)" fg:x="1070" fg:w="2"/><text x="8.6626%" y="735.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end::{{closure}} (2 samples, 0.02%)</title><rect x="8.4126%" y="709" width="0.0157%" height="15" fill="rgb(218,129,16)" fg:x="1070" fg:w="2"/><text x="8.6626%" y="719.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (4 samples, 0.03%)</title><rect x="8.4126%" y="741" width="0.0314%" height="15" fill="rgb(216,85,19)" fg:x="1070" fg:w="4"/><text x="8.6626%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="8.4283%" y="725" width="0.0157%" height="15" fill="rgb(235,228,7)" fg:x="1072" fg:w="2"/><text x="8.6783%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="8.4283%" y="709" width="0.0157%" height="15" fill="rgb(245,175,0)" fg:x="1072" fg:w="2"/><text x="8.6783%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="8.4283%" y="693" width="0.0157%" height="15" fill="rgb(208,168,36)" fg:x="1072" fg:w="2"/><text x="8.6783%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (2 samples, 0.02%)</title><rect x="8.4283%" y="677" width="0.0157%" height="15" fill="rgb(246,171,24)" fg:x="1072" fg:w="2"/><text x="8.6783%" y="687.50"></text></g><g><title>core::ptr::metadata::metadata (2 samples, 0.02%)</title><rect x="8.4283%" y="661" width="0.0157%" height="15" fill="rgb(215,142,24)" fg:x="1072" fg:w="2"/><text x="8.6783%" y="671.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (15 samples, 0.12%)</title><rect x="8.3340%" y="789" width="0.1179%" height="15" fill="rgb(250,187,7)" fg:x="1060" fg:w="15"/><text x="8.5840%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (15 samples, 0.12%)</title><rect x="8.3340%" y="773" width="0.1179%" height="15" fill="rgb(228,66,33)" fg:x="1060" fg:w="15"/><text x="8.5840%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (15 samples, 0.12%)</title><rect x="8.3340%" y="757" width="0.1179%" height="15" fill="rgb(234,215,21)" fg:x="1060" fg:w="15"/><text x="8.5840%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.02%)</title><rect x="8.4519%" y="757" width="0.0236%" height="15" fill="rgb(222,191,20)" fg:x="1075" fg:w="3"/><text x="8.7019%" y="767.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="8.4598%" y="741" width="0.0157%" height="15" fill="rgb(245,79,54)" fg:x="1076" fg:w="2"/><text x="8.7098%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.24%)</title><rect x="8.2475%" y="997" width="0.2359%" height="15" fill="rgb(240,10,37)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.24%)</title><rect x="8.2475%" y="981" width="0.2359%" height="15" fill="rgb(214,192,32)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (30 samples, 0.24%)</title><rect x="8.2475%" y="965" width="0.2359%" height="15" fill="rgb(209,36,54)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30 samples, 0.24%)</title><rect x="8.2475%" y="949" width="0.2359%" height="15" fill="rgb(220,10,11)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (30 samples, 0.24%)</title><rect x="8.2475%" y="933" width="0.2359%" height="15" fill="rgb(221,106,17)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (30 samples, 0.24%)</title><rect x="8.2475%" y="917" width="0.2359%" height="15" fill="rgb(251,142,44)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="927.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (30 samples, 0.24%)</title><rect x="8.2475%" y="901" width="0.2359%" height="15" fill="rgb(238,13,15)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="911.50"></text></g><g><title>calamine::xlsx::worksheet (30 samples, 0.24%)</title><rect x="8.2475%" y="885" width="0.2359%" height="15" fill="rgb(208,107,27)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="895.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (30 samples, 0.24%)</title><rect x="8.2475%" y="869" width="0.2359%" height="15" fill="rgb(205,136,37)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="879.50"></text></g><g><title>calamine::xlsx::read_sheet_data (30 samples, 0.24%)</title><rect x="8.2475%" y="853" width="0.2359%" height="15" fill="rgb(250,205,27)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="863.50"></text></g><g><title>calamine::xlsx::read_sheet (30 samples, 0.24%)</title><rect x="8.2475%" y="837" width="0.2359%" height="15" fill="rgb(210,80,43)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="847.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (30 samples, 0.24%)</title><rect x="8.2475%" y="821" width="0.2359%" height="15" fill="rgb(247,160,36)" fg:x="1049" fg:w="30"/><text x="8.4975%" y="831.50"></text></g><g><title>calamine::xlsx::read_string (21 samples, 0.17%)</title><rect x="8.3183%" y="805" width="0.1651%" height="15" fill="rgb(234,13,49)" fg:x="1058" fg:w="21"/><text x="8.5683%" y="815.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (4 samples, 0.03%)</title><rect x="8.4519%" y="789" width="0.0314%" height="15" fill="rgb(234,122,0)" fg:x="1075" fg:w="4"/><text x="8.7019%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (4 samples, 0.03%)</title><rect x="8.4519%" y="773" width="0.0314%" height="15" fill="rgb(207,146,38)" fg:x="1075" fg:w="4"/><text x="8.7019%" y="783.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (6 samples, 0.05%)</title><rect x="8.4834%" y="773" width="0.0472%" height="15" fill="rgb(207,177,25)" fg:x="1079" fg:w="6"/><text x="8.7334%" y="783.50"></text></g><g><title>calamine::xlsx::get_attribute (6 samples, 0.05%)</title><rect x="8.4834%" y="757" width="0.0472%" height="15" fill="rgb(211,178,42)" fg:x="1079" fg:w="6"/><text x="8.7334%" y="767.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="8.4834%" y="741" width="0.0472%" height="15" fill="rgb(230,69,54)" fg:x="1079" fg:w="6"/><text x="8.7334%" y="751.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (6 samples, 0.05%)</title><rect x="8.4834%" y="725" width="0.0472%" height="15" fill="rgb(214,135,41)" fg:x="1079" fg:w="6"/><text x="8.7334%" y="735.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (4 samples, 0.03%)</title><rect x="8.4991%" y="709" width="0.0314%" height="15" fill="rgb(237,67,25)" fg:x="1081" fg:w="4"/><text x="8.7491%" y="719.50"></text></g><g><title>__memcpy_sse2_unaligned (3 samples, 0.02%)</title><rect x="8.5070%" y="693" width="0.0236%" height="15" fill="rgb(222,189,50)" fg:x="1082" fg:w="3"/><text x="8.7570%" y="703.50"></text></g><g><title>quick_xml::events::BytesText::unescape (2 samples, 0.02%)</title><rect x="8.5305%" y="757" width="0.0157%" height="15" fill="rgb(245,148,34)" fg:x="1085" fg:w="2"/><text x="8.7805%" y="767.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (2 samples, 0.02%)</title><rect x="8.5305%" y="741" width="0.0157%" height="15" fill="rgb(222,29,6)" fg:x="1085" fg:w="2"/><text x="8.7805%" y="751.50"></text></g><g><title>quick_xml::escapei::unescape_with (2 samples, 0.02%)</title><rect x="8.5305%" y="725" width="0.0157%" height="15" fill="rgb(221,189,43)" fg:x="1085" fg:w="2"/><text x="8.7805%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.08%)</title><rect x="8.4834%" y="997" width="0.0786%" height="15" fill="rgb(207,36,27)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="1007.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 0.08%)</title><rect x="8.4834%" y="981" width="0.0786%" height="15" fill="rgb(217,90,24)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.08%)</title><rect x="8.4834%" y="965" width="0.0786%" height="15" fill="rgb(224,66,35)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.08%)</title><rect x="8.4834%" y="949" width="0.0786%" height="15" fill="rgb(221,13,50)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (10 samples, 0.08%)</title><rect x="8.4834%" y="933" width="0.0786%" height="15" fill="rgb(236,68,49)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.08%)</title><rect x="8.4834%" y="917" width="0.0786%" height="15" fill="rgb(229,146,28)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (10 samples, 0.08%)</title><rect x="8.4834%" y="901" width="0.0786%" height="15" fill="rgb(225,31,38)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="911.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10 samples, 0.08%)</title><rect x="8.4834%" y="885" width="0.0786%" height="15" fill="rgb(250,208,3)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="895.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (10 samples, 0.08%)</title><rect x="8.4834%" y="869" width="0.0786%" height="15" fill="rgb(246,54,23)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="879.50"></text></g><g><title>calamine::xlsx::worksheet (10 samples, 0.08%)</title><rect x="8.4834%" y="853" width="0.0786%" height="15" fill="rgb(243,76,11)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="863.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (10 samples, 0.08%)</title><rect x="8.4834%" y="837" width="0.0786%" height="15" fill="rgb(245,21,50)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="847.50"></text></g><g><title>calamine::xlsx::read_sheet_data (10 samples, 0.08%)</title><rect x="8.4834%" y="821" width="0.0786%" height="15" fill="rgb(228,9,43)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="831.50"></text></g><g><title>calamine::xlsx::read_sheet (10 samples, 0.08%)</title><rect x="8.4834%" y="805" width="0.0786%" height="15" fill="rgb(208,100,47)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="815.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (10 samples, 0.08%)</title><rect x="8.4834%" y="789" width="0.0786%" height="15" fill="rgb(232,26,8)" fg:x="1079" fg:w="10"/><text x="8.7334%" y="799.50"></text></g><g><title>calamine::xlsx::read_string (4 samples, 0.03%)</title><rect x="8.5305%" y="773" width="0.0314%" height="15" fill="rgb(216,166,38)" fg:x="1085" fg:w="4"/><text x="8.7805%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (2 samples, 0.02%)</title><rect x="8.5463%" y="757" width="0.0157%" height="15" fill="rgb(251,202,51)" fg:x="1087" fg:w="2"/><text x="8.7963%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (2 samples, 0.02%)</title><rect x="8.5463%" y="741" width="0.0157%" height="15" fill="rgb(254,216,34)" fg:x="1087" fg:w="2"/><text x="8.7963%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (2 samples, 0.02%)</title><rect x="8.5463%" y="725" width="0.0157%" height="15" fill="rgb(251,32,27)" fg:x="1087" fg:w="2"/><text x="8.7963%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (2 samples, 0.02%)</title><rect x="8.5463%" y="709" width="0.0157%" height="15" fill="rgb(208,127,28)" fg:x="1087" fg:w="2"/><text x="8.7963%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (2 samples, 0.02%)</title><rect x="8.5463%" y="693" width="0.0157%" height="15" fill="rgb(224,137,22)" fg:x="1087" fg:w="2"/><text x="8.7963%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (2 samples, 0.02%)</title><rect x="8.5699%" y="805" width="0.0157%" height="15" fill="rgb(254,70,32)" fg:x="1090" fg:w="2"/><text x="8.8199%" y="815.50"></text></g><g><title>inflate_fast (3 samples, 0.02%)</title><rect x="8.5856%" y="517" width="0.0236%" height="15" fill="rgb(229,75,37)" fg:x="1092" fg:w="3"/><text x="8.8356%" y="527.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (6 samples, 0.05%)</title><rect x="8.5856%" y="789" width="0.0472%" height="15" fill="rgb(252,64,23)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="799.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (6 samples, 0.05%)</title><rect x="8.5856%" y="773" width="0.0472%" height="15" fill="rgb(232,162,48)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (6 samples, 0.05%)</title><rect x="8.5856%" y="757" width="0.0472%" height="15" fill="rgb(246,160,12)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (6 samples, 0.05%)</title><rect x="8.5856%" y="741" width="0.0472%" height="15" fill="rgb(247,166,0)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="751.50"></text></g><g><title>std::io::Read::read_buf (6 samples, 0.05%)</title><rect x="8.5856%" y="725" width="0.0472%" height="15" fill="rgb(249,219,21)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="735.50"></text></g><g><title>std::io::default_read_buf (6 samples, 0.05%)</title><rect x="8.5856%" y="709" width="0.0472%" height="15" fill="rgb(205,209,3)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="719.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (6 samples, 0.05%)</title><rect x="8.5856%" y="693" width="0.0472%" height="15" fill="rgb(243,44,1)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="8.5856%" y="677" width="0.0472%" height="15" fill="rgb(206,159,16)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="687.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="8.5856%" y="661" width="0.0472%" height="15" fill="rgb(244,77,30)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="671.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="8.5856%" y="645" width="0.0472%" height="15" fill="rgb(218,69,12)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="655.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="8.5856%" y="629" width="0.0472%" height="15" fill="rgb(212,87,7)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="639.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="8.5856%" y="613" width="0.0472%" height="15" fill="rgb(245,114,25)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="623.50"></text></g><g><title>flate2::zio::read (6 samples, 0.05%)</title><rect x="8.5856%" y="597" width="0.0472%" height="15" fill="rgb(210,61,42)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="607.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (6 samples, 0.05%)</title><rect x="8.5856%" y="581" width="0.0472%" height="15" fill="rgb(211,52,33)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="591.50"></text></g><g><title>flate2::mem::Decompress::decompress (6 samples, 0.05%)</title><rect x="8.5856%" y="565" width="0.0472%" height="15" fill="rgb(234,58,33)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="575.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (6 samples, 0.05%)</title><rect x="8.5856%" y="549" width="0.0472%" height="15" fill="rgb(220,115,36)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="559.50"></text></g><g><title>inflate (6 samples, 0.05%)</title><rect x="8.5856%" y="533" width="0.0472%" height="15" fill="rgb(243,153,54)" fg:x="1092" fg:w="6"/><text x="8.8356%" y="543.50"></text></g><g><title>updatewindow (3 samples, 0.02%)</title><rect x="8.6092%" y="517" width="0.0236%" height="15" fill="rgb(251,47,18)" fg:x="1095" fg:w="3"/><text x="8.8592%" y="527.50"></text></g><g><title>zmemcpy (3 samples, 0.02%)</title><rect x="8.6092%" y="501" width="0.0236%" height="15" fill="rgb(242,102,42)" fg:x="1095" fg:w="3"/><text x="8.8592%" y="511.50"></text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (9 samples, 0.07%)</title><rect x="8.5699%" y="997" width="0.0708%" height="15" fill="rgb(234,31,38)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="1007.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (9 samples, 0.07%)</title><rect x="8.5699%" y="981" width="0.0708%" height="15" fill="rgb(221,117,51)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.07%)</title><rect x="8.5699%" y="965" width="0.0708%" height="15" fill="rgb(212,20,18)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="975.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (9 samples, 0.07%)</title><rect x="8.5699%" y="949" width="0.0708%" height="15" fill="rgb(245,133,36)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="959.50"></text></g><g><title>calamine::xlsx::worksheet (9 samples, 0.07%)</title><rect x="8.5699%" y="933" width="0.0708%" height="15" fill="rgb(212,6,19)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (9 samples, 0.07%)</title><rect x="8.5699%" y="917" width="0.0708%" height="15" fill="rgb(218,1,36)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet_data (9 samples, 0.07%)</title><rect x="8.5699%" y="901" width="0.0708%" height="15" fill="rgb(246,84,54)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet (9 samples, 0.07%)</title><rect x="8.5699%" y="885" width="0.0708%" height="15" fill="rgb(242,110,6)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (9 samples, 0.07%)</title><rect x="8.5699%" y="869" width="0.0708%" height="15" fill="rgb(214,47,5)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="879.50"></text></g><g><title>calamine::xlsx::read_string (9 samples, 0.07%)</title><rect x="8.5699%" y="853" width="0.0708%" height="15" fill="rgb(218,159,25)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (9 samples, 0.07%)</title><rect x="8.5699%" y="837" width="0.0708%" height="15" fill="rgb(215,211,28)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (9 samples, 0.07%)</title><rect x="8.5699%" y="821" width="0.0708%" height="15" fill="rgb(238,59,32)" fg:x="1090" fg:w="9"/><text x="8.8199%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (7 samples, 0.06%)</title><rect x="8.5856%" y="805" width="0.0550%" height="15" fill="rgb(226,82,3)" fg:x="1092" fg:w="7"/><text x="8.8356%" y="815.50"></text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (3 samples, 0.02%)</title><rect x="8.6406%" y="997" width="0.0236%" height="15" fill="rgb(240,164,32)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="1007.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (3 samples, 0.02%)</title><rect x="8.6406%" y="981" width="0.0236%" height="15" fill="rgb(232,46,7)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="8.6406%" y="965" width="0.0236%" height="15" fill="rgb(229,129,53)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="8.6406%" y="949" width="0.0236%" height="15" fill="rgb(234,188,29)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="959.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="8.6406%" y="933" width="0.0236%" height="15" fill="rgb(246,141,4)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="8.6406%" y="917" width="0.0236%" height="15" fill="rgb(229,23,39)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="8.6406%" y="901" width="0.0236%" height="15" fill="rgb(206,12,3)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3 samples, 0.02%)</title><rect x="8.6406%" y="885" width="0.0236%" height="15" fill="rgb(252,226,20)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.02%)</title><rect x="8.6406%" y="869" width="0.0236%" height="15" fill="rgb(216,123,35)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 0.02%)</title><rect x="8.6406%" y="853" width="0.0236%" height="15" fill="rgb(212,68,40)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.02%)</title><rect x="8.6406%" y="837" width="0.0236%" height="15" fill="rgb(254,125,32)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="847.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (3 samples, 0.02%)</title><rect x="8.6406%" y="821" width="0.0236%" height="15" fill="rgb(253,97,22)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="831.50"></text></g><g><title>calamine::xlsx::worksheet (3 samples, 0.02%)</title><rect x="8.6406%" y="805" width="0.0236%" height="15" fill="rgb(241,101,14)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="815.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (3 samples, 0.02%)</title><rect x="8.6406%" y="789" width="0.0236%" height="15" fill="rgb(238,103,29)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet_data (3 samples, 0.02%)</title><rect x="8.6406%" y="773" width="0.0236%" height="15" fill="rgb(233,195,47)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="783.50"></text></g><g><title>calamine::xlsx::read_sheet (3 samples, 0.02%)</title><rect x="8.6406%" y="757" width="0.0236%" height="15" fill="rgb(246,218,30)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="767.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (3 samples, 0.02%)</title><rect x="8.6406%" y="741" width="0.0236%" height="15" fill="rgb(219,145,47)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="751.50"></text></g><g><title>calamine::xlsx::read_string (3 samples, 0.02%)</title><rect x="8.6406%" y="725" width="0.0236%" height="15" fill="rgb(243,12,26)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (3 samples, 0.02%)</title><rect x="8.6406%" y="709" width="0.0236%" height="15" fill="rgb(214,87,16)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.02%)</title><rect x="8.6406%" y="693" width="0.0236%" height="15" fill="rgb(208,99,42)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (3 samples, 0.02%)</title><rect x="8.6406%" y="677" width="0.0236%" height="15" fill="rgb(253,99,2)" fg:x="1099" fg:w="3"/><text x="8.8906%" y="687.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_text (2 samples, 0.02%)</title><rect x="8.6485%" y="661" width="0.0157%" height="15" fill="rgb(220,168,23)" fg:x="1100" fg:w="2"/><text x="8.8985%" y="671.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (5 samples, 0.04%)</title><rect x="8.6878%" y="661" width="0.0393%" height="15" fill="rgb(242,38,24)" fg:x="1105" fg:w="5"/><text x="8.9378%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_unchecked (4 samples, 0.03%)</title><rect x="8.6957%" y="645" width="0.0314%" height="15" fill="rgb(225,182,9)" fg:x="1106" fg:w="4"/><text x="8.9457%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (3 samples, 0.02%)</title><rect x="8.7821%" y="645" width="0.0236%" height="15" fill="rgb(243,178,37)" fg:x="1117" fg:w="3"/><text x="9.0321%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (27 samples, 0.21%)</title><rect x="8.8136%" y="645" width="0.2123%" height="15" fill="rgb(232,139,19)" fg:x="1121" fg:w="27"/><text x="9.0636%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.20%)</title><rect x="8.8293%" y="629" width="0.1966%" height="15" fill="rgb(225,201,24)" fg:x="1123" fg:w="25"/><text x="9.0793%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (4 samples, 0.03%)</title><rect x="8.9944%" y="613" width="0.0314%" height="15" fill="rgb(221,47,46)" fg:x="1144" fg:w="4"/><text x="9.2444%" y="623.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (46 samples, 0.36%)</title><rect x="8.6721%" y="997" width="0.3617%" height="15" fill="rgb(249,23,13)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (46 samples, 0.36%)</title><rect x="8.6721%" y="981" width="0.3617%" height="15" fill="rgb(219,9,5)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="991.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (46 samples, 0.36%)</title><rect x="8.6721%" y="965" width="0.3617%" height="15" fill="rgb(254,171,16)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="975.50"></text></g><g><title>calamine::xlsx::worksheet (46 samples, 0.36%)</title><rect x="8.6721%" y="949" width="0.3617%" height="15" fill="rgb(230,171,20)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (46 samples, 0.36%)</title><rect x="8.6721%" y="933" width="0.3617%" height="15" fill="rgb(210,71,41)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="943.50"></text></g><g><title>calamine::xlsx::read_sheet_data (46 samples, 0.36%)</title><rect x="8.6721%" y="917" width="0.3617%" height="15" fill="rgb(206,173,20)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet (46 samples, 0.36%)</title><rect x="8.6721%" y="901" width="0.3617%" height="15" fill="rgb(233,88,34)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="911.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (46 samples, 0.36%)</title><rect x="8.6721%" y="885" width="0.3617%" height="15" fill="rgb(223,209,46)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="895.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (46 samples, 0.36%)</title><rect x="8.6721%" y="869" width="0.3617%" height="15" fill="rgb(250,43,18)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (46 samples, 0.36%)</title><rect x="8.6721%" y="853" width="0.3617%" height="15" fill="rgb(208,13,10)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (46 samples, 0.36%)</title><rect x="8.6721%" y="837" width="0.3617%" height="15" fill="rgb(212,200,36)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="847.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (46 samples, 0.36%)</title><rect x="8.6721%" y="821" width="0.3617%" height="15" fill="rgb(225,90,30)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="831.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.36%)</title><rect x="8.6721%" y="805" width="0.3617%" height="15" fill="rgb(236,182,39)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (46 samples, 0.36%)</title><rect x="8.6721%" y="789" width="0.3617%" height="15" fill="rgb(212,144,35)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="799.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (46 samples, 0.36%)</title><rect x="8.6721%" y="773" width="0.3617%" height="15" fill="rgb(228,63,44)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="783.50"></text></g><g><title>memchr::memchr::memchr3_raw (46 samples, 0.36%)</title><rect x="8.6721%" y="757" width="0.3617%" height="15" fill="rgb(228,109,6)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (46 samples, 0.36%)</title><rect x="8.6721%" y="741" width="0.3617%" height="15" fill="rgb(238,117,24)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (46 samples, 0.36%)</title><rect x="8.6721%" y="725" width="0.3617%" height="15" fill="rgb(242,26,26)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (46 samples, 0.36%)</title><rect x="8.6721%" y="709" width="0.3617%" height="15" fill="rgb(221,92,48)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (46 samples, 0.36%)</title><rect x="8.6721%" y="693" width="0.3617%" height="15" fill="rgb(209,209,32)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (46 samples, 0.36%)</title><rect x="8.6721%" y="677" width="0.3617%" height="15" fill="rgb(221,70,22)" fg:x="1103" fg:w="46"/><text x="8.9221%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (39 samples, 0.31%)</title><rect x="8.7271%" y="661" width="0.3066%" height="15" fill="rgb(248,145,5)" fg:x="1110" fg:w="39"/><text x="8.9771%" y="671.50"></text></g><g><title>quick_xml::events::BytesText::unescape (2 samples, 0.02%)</title><rect x="9.0337%" y="885" width="0.0157%" height="15" fill="rgb(226,116,26)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="895.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (2 samples, 0.02%)</title><rect x="9.0337%" y="869" width="0.0157%" height="15" fill="rgb(244,5,17)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="879.50"></text></g><g><title>quick_xml::escapei::unescape_with (2 samples, 0.02%)</title><rect x="9.0337%" y="853" width="0.0157%" height="15" fill="rgb(252,159,33)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.02%)</title><rect x="9.0337%" y="837" width="0.0157%" height="15" fill="rgb(206,71,0)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.02%)</title><rect x="9.0337%" y="821" width="0.0157%" height="15" fill="rgb(233,118,54)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="831.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="9.0337%" y="805" width="0.0157%" height="15" fill="rgb(234,83,48)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (2 samples, 0.02%)</title><rect x="9.0337%" y="789" width="0.0157%" height="15" fill="rgb(228,3,54)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="799.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.02%)</title><rect x="9.0337%" y="773" width="0.0157%" height="15" fill="rgb(226,155,13)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="783.50"></text></g><g><title>memchr::memchr::memchr2_raw (2 samples, 0.02%)</title><rect x="9.0337%" y="757" width="0.0157%" height="15" fill="rgb(241,28,37)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (2 samples, 0.02%)</title><rect x="9.0337%" y="741" width="0.0157%" height="15" fill="rgb(233,93,10)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (2 samples, 0.02%)</title><rect x="9.0337%" y="725" width="0.0157%" height="15" fill="rgb(225,113,19)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw (2 samples, 0.02%)</title><rect x="9.0337%" y="709" width="0.0157%" height="15" fill="rgb(241,2,18)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw_impl (2 samples, 0.02%)</title><rect x="9.0337%" y="693" width="0.0157%" height="15" fill="rgb(228,207,21)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::Two&lt;V&gt;::find_raw (2 samples, 0.02%)</title><rect x="9.0337%" y="677" width="0.0157%" height="15" fill="rgb(213,211,35)" fg:x="1149" fg:w="2"/><text x="9.2837%" y="687.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (4 samples, 0.03%)</title><rect x="9.0495%" y="853" width="0.0314%" height="15" fill="rgb(209,83,10)" fg:x="1151" fg:w="4"/><text x="9.2995%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (3 samples, 0.02%)</title><rect x="9.0573%" y="837" width="0.0236%" height="15" fill="rgb(209,164,1)" fg:x="1152" fg:w="3"/><text x="9.3073%" y="847.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="9.0652%" y="821" width="0.0157%" height="15" fill="rgb(213,184,43)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="9.0652%" y="805" width="0.0157%" height="15" fill="rgb(231,61,34)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="815.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="9.0652%" y="789" width="0.0157%" height="15" fill="rgb(235,75,3)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="799.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="9.0652%" y="773" width="0.0157%" height="15" fill="rgb(220,106,47)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="9.0652%" y="757" width="0.0157%" height="15" fill="rgb(210,196,33)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="9.0652%" y="741" width="0.0157%" height="15" fill="rgb(229,154,42)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="9.0652%" y="725" width="0.0157%" height="15" fill="rgb(228,114,26)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (2 samples, 0.02%)</title><rect x="9.0652%" y="709" width="0.0157%" height="15" fill="rgb(208,144,1)" fg:x="1153" fg:w="2"/><text x="9.3152%" y="719.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="9.0809%" y="821" width="0.0157%" height="15" fill="rgb(239,112,37)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="831.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.02%)</title><rect x="9.0809%" y="805" width="0.0157%" height="15" fill="rgb(210,96,50)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.02%)</title><rect x="9.0809%" y="789" width="0.0157%" height="15" fill="rgb(222,178,2)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="799.50"></text></g><g><title>std::io::Read::read_buf (2 samples, 0.02%)</title><rect x="9.0809%" y="773" width="0.0157%" height="15" fill="rgb(226,74,18)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="783.50"></text></g><g><title>std::io::default_read_buf (2 samples, 0.02%)</title><rect x="9.0809%" y="757" width="0.0157%" height="15" fill="rgb(225,67,54)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="767.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (2 samples, 0.02%)</title><rect x="9.0809%" y="741" width="0.0157%" height="15" fill="rgb(251,92,32)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="751.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.0809%" y="725" width="0.0157%" height="15" fill="rgb(228,149,22)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="735.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.0809%" y="709" width="0.0157%" height="15" fill="rgb(243,54,13)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="719.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.0809%" y="693" width="0.0157%" height="15" fill="rgb(243,180,28)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="703.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.0809%" y="677" width="0.0157%" height="15" fill="rgb(208,167,24)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="687.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="9.0809%" y="661" width="0.0157%" height="15" fill="rgb(245,73,45)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="671.50"></text></g><g><title>flate2::zio::read (2 samples, 0.02%)</title><rect x="9.0809%" y="645" width="0.0157%" height="15" fill="rgb(237,203,48)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="655.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (2 samples, 0.02%)</title><rect x="9.0809%" y="629" width="0.0157%" height="15" fill="rgb(211,197,16)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="639.50"></text></g><g><title>flate2::mem::Decompress::decompress (2 samples, 0.02%)</title><rect x="9.0809%" y="613" width="0.0157%" height="15" fill="rgb(243,99,51)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="623.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2 samples, 0.02%)</title><rect x="9.0809%" y="597" width="0.0157%" height="15" fill="rgb(215,123,29)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="607.50"></text></g><g><title>inflate (2 samples, 0.02%)</title><rect x="9.0809%" y="581" width="0.0157%" height="15" fill="rgb(239,186,37)" fg:x="1155" fg:w="2"/><text x="9.3309%" y="591.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (3 samples, 0.02%)</title><rect x="9.1045%" y="677" width="0.0236%" height="15" fill="rgb(252,136,39)" fg:x="1158" fg:w="3"/><text x="9.3545%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (7 samples, 0.06%)</title><rect x="9.0809%" y="837" width="0.0550%" height="15" fill="rgb(223,213,32)" fg:x="1155" fg:w="7"/><text x="9.3309%" y="847.50"></text></g><g><title>memchr::memchr::memchr (5 samples, 0.04%)</title><rect x="9.0966%" y="821" width="0.0393%" height="15" fill="rgb(233,115,5)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (5 samples, 0.04%)</title><rect x="9.0966%" y="805" width="0.0393%" height="15" fill="rgb(207,226,44)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="815.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (5 samples, 0.04%)</title><rect x="9.0966%" y="789" width="0.0393%" height="15" fill="rgb(208,126,0)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="799.50"></text></g><g><title>memchr::memchr::memchr_raw (5 samples, 0.04%)</title><rect x="9.0966%" y="773" width="0.0393%" height="15" fill="rgb(244,66,21)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (5 samples, 0.04%)</title><rect x="9.0966%" y="757" width="0.0393%" height="15" fill="rgb(222,97,12)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.04%)</title><rect x="9.0966%" y="741" width="0.0393%" height="15" fill="rgb(219,213,19)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (5 samples, 0.04%)</title><rect x="9.0966%" y="725" width="0.0393%" height="15" fill="rgb(252,169,30)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (5 samples, 0.04%)</title><rect x="9.0966%" y="709" width="0.0393%" height="15" fill="rgb(206,32,51)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (5 samples, 0.04%)</title><rect x="9.0966%" y="693" width="0.0393%" height="15" fill="rgb(250,172,42)" fg:x="1157" fg:w="5"/><text x="9.3466%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (12 samples, 0.09%)</title><rect x="9.0495%" y="885" width="0.0943%" height="15" fill="rgb(209,34,43)" fg:x="1151" fg:w="12"/><text x="9.2995%" y="895.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (12 samples, 0.09%)</title><rect x="9.0495%" y="869" width="0.0943%" height="15" fill="rgb(223,11,35)" fg:x="1151" fg:w="12"/><text x="9.2995%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (8 samples, 0.06%)</title><rect x="9.0809%" y="853" width="0.0629%" height="15" fill="rgb(251,219,26)" fg:x="1155" fg:w="8"/><text x="9.3309%" y="863.50"></text></g><g><title>calamine::xlsx::read_string (17 samples, 0.13%)</title><rect x="9.0337%" y="901" width="0.1337%" height="15" fill="rgb(231,119,3)" fg:x="1149" fg:w="17"/><text x="9.2837%" y="911.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (3 samples, 0.02%)</title><rect x="9.1438%" y="885" width="0.0236%" height="15" fill="rgb(216,97,11)" fg:x="1163" fg:w="3"/><text x="9.3938%" y="895.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.02%)</title><rect x="9.1438%" y="869" width="0.0236%" height="15" fill="rgb(223,59,9)" fg:x="1163" fg:w="3"/><text x="9.3938%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.02%)</title><rect x="9.1438%" y="853" width="0.0236%" height="15" fill="rgb(233,93,31)" fg:x="1163" fg:w="3"/><text x="9.3938%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="9.1517%" y="837" width="0.0157%" height="15" fill="rgb(239,81,33)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="847.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="9.1517%" y="821" width="0.0157%" height="15" fill="rgb(213,120,34)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="9.1517%" y="805" width="0.0157%" height="15" fill="rgb(243,49,53)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="815.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="9.1517%" y="789" width="0.0157%" height="15" fill="rgb(247,216,33)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="799.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="9.1517%" y="773" width="0.0157%" height="15" fill="rgb(226,26,14)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="9.1517%" y="757" width="0.0157%" height="15" fill="rgb(215,49,53)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="9.1517%" y="741" width="0.0157%" height="15" fill="rgb(245,162,40)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="9.1517%" y="725" width="0.0157%" height="15" fill="rgb(229,68,17)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (2 samples, 0.02%)</title><rect x="9.1517%" y="709" width="0.0157%" height="15" fill="rgb(213,182,10)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (2 samples, 0.02%)</title><rect x="9.1517%" y="693" width="0.0157%" height="15" fill="rgb(245,125,30)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (2 samples, 0.02%)</title><rect x="9.1517%" y="677" width="0.0157%" height="15" fill="rgb(232,202,2)" fg:x="1164" fg:w="2"/><text x="9.4017%" y="687.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (18 samples, 0.14%)</title><rect x="9.0337%" y="917" width="0.1415%" height="15" fill="rgb(237,140,51)" fg:x="1149" fg:w="18"/><text x="9.2837%" y="927.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (7 samples, 0.06%)</title><rect x="9.2539%" y="677" width="0.0550%" height="15" fill="rgb(236,157,25)" fg:x="1177" fg:w="7"/><text x="9.5039%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (6 samples, 0.05%)</title><rect x="9.2617%" y="661" width="0.0472%" height="15" fill="rgb(219,209,0)" fg:x="1178" fg:w="6"/><text x="9.5117%" y="671.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::load_unaligned (5 samples, 0.04%)</title><rect x="9.3089%" y="677" width="0.0393%" height="15" fill="rgb(240,116,54)" fg:x="1184" fg:w="5"/><text x="9.5589%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.03%)</title><rect x="9.3168%" y="661" width="0.0314%" height="15" fill="rgb(216,10,36)" fg:x="1185" fg:w="4"/><text x="9.5668%" y="671.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (21 samples, 0.17%)</title><rect x="9.3482%" y="677" width="0.1651%" height="15" fill="rgb(222,72,44)" fg:x="1189" fg:w="21"/><text x="9.5982%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.12%)</title><rect x="9.3954%" y="661" width="0.1179%" height="15" fill="rgb(232,159,9)" fg:x="1195" fg:w="15"/><text x="9.6454%" y="671.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (63 samples, 0.50%)</title><rect x="9.0337%" y="997" width="0.4953%" height="15" fill="rgb(210,39,32)" fg:x="1149" fg:w="63"/><text x="9.2837%" y="1007.50"></text></g><g><title>calamine::xlsx::worksheet (63 samples, 0.50%)</title><rect x="9.0337%" y="981" width="0.4953%" height="15" fill="rgb(216,194,45)" fg:x="1149" fg:w="63"/><text x="9.2837%" y="991.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (63 samples, 0.50%)</title><rect x="9.0337%" y="965" width="0.4953%" height="15" fill="rgb(218,18,35)" fg:x="1149" fg:w="63"/><text x="9.2837%" y="975.50"></text></g><g><title>calamine::xlsx::read_sheet_data (63 samples, 0.50%)</title><rect x="9.0337%" y="949" width="0.4953%" height="15" fill="rgb(207,83,51)" fg:x="1149" fg:w="63"/><text x="9.2837%" y="959.50"></text></g><g><title>calamine::xlsx::read_sheet (63 samples, 0.50%)</title><rect x="9.0337%" y="933" width="0.4953%" height="15" fill="rgb(225,63,43)" fg:x="1149" fg:w="63"/><text x="9.2837%" y="943.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (45 samples, 0.35%)</title><rect x="9.1752%" y="917" width="0.3538%" height="15" fill="rgb(207,57,36)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="927.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (45 samples, 0.35%)</title><rect x="9.1752%" y="901" width="0.3538%" height="15" fill="rgb(216,99,33)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="911.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (45 samples, 0.35%)</title><rect x="9.1752%" y="885" width="0.3538%" height="15" fill="rgb(225,42,16)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (45 samples, 0.35%)</title><rect x="9.1752%" y="869" width="0.3538%" height="15" fill="rgb(220,201,45)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="879.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (45 samples, 0.35%)</title><rect x="9.1752%" y="853" width="0.3538%" height="15" fill="rgb(225,33,4)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="863.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.35%)</title><rect x="9.1752%" y="837" width="0.3538%" height="15" fill="rgb(224,33,50)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="847.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (45 samples, 0.35%)</title><rect x="9.1752%" y="821" width="0.3538%" height="15" fill="rgb(246,198,51)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="831.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (45 samples, 0.35%)</title><rect x="9.1752%" y="805" width="0.3538%" height="15" fill="rgb(205,22,4)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="815.50"></text></g><g><title>memchr::memchr::memchr3_raw (45 samples, 0.35%)</title><rect x="9.1752%" y="789" width="0.3538%" height="15" fill="rgb(206,3,8)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="799.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (45 samples, 0.35%)</title><rect x="9.1752%" y="773" width="0.3538%" height="15" fill="rgb(251,23,15)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (45 samples, 0.35%)</title><rect x="9.1752%" y="757" width="0.3538%" height="15" fill="rgb(252,88,28)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="767.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (45 samples, 0.35%)</title><rect x="9.1752%" y="741" width="0.3538%" height="15" fill="rgb(212,127,14)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (45 samples, 0.35%)</title><rect x="9.1752%" y="725" width="0.3538%" height="15" fill="rgb(247,145,37)" fg:x="1167" fg:w="45"/><text x="9.4252%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (44 samples, 0.35%)</title><rect x="9.1831%" y="709" width="0.3459%" height="15" fill="rgb(209,117,53)" fg:x="1168" fg:w="44"/><text x="9.4331%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (43 samples, 0.34%)</title><rect x="9.1910%" y="693" width="0.3381%" height="15" fill="rgb(212,90,42)" fg:x="1169" fg:w="43"/><text x="9.4410%" y="703.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (2 samples, 0.02%)</title><rect x="9.5133%" y="677" width="0.0157%" height="15" fill="rgb(218,164,37)" fg:x="1210" fg:w="2"/><text x="9.7633%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (2 samples, 0.02%)</title><rect x="9.5133%" y="661" width="0.0157%" height="15" fill="rgb(246,65,34)" fg:x="1210" fg:w="2"/><text x="9.7633%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.02%)</title><rect x="9.5605%" y="677" width="0.0157%" height="15" fill="rgb(231,100,33)" fg:x="1216" fg:w="2"/><text x="9.8105%" y="687.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (11 samples, 0.09%)</title><rect x="9.5291%" y="741" width="0.0865%" height="15" fill="rgb(228,126,14)" fg:x="1212" fg:w="11"/><text x="9.7791%" y="751.50"></text></g><g><title>calamine::xlsx::get_attribute (11 samples, 0.09%)</title><rect x="9.5291%" y="725" width="0.0865%" height="15" fill="rgb(215,173,21)" fg:x="1212" fg:w="11"/><text x="9.7791%" y="735.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="9.5291%" y="709" width="0.0865%" height="15" fill="rgb(210,6,40)" fg:x="1212" fg:w="11"/><text x="9.7791%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (11 samples, 0.09%)</title><rect x="9.5291%" y="693" width="0.0865%" height="15" fill="rgb(212,48,18)" fg:x="1212" fg:w="11"/><text x="9.7791%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (4 samples, 0.03%)</title><rect x="9.5841%" y="677" width="0.0314%" height="15" fill="rgb(230,214,11)" fg:x="1219" fg:w="4"/><text x="9.8341%" y="687.50"></text></g><g><title>calamine::xlsx::read_string (2 samples, 0.02%)</title><rect x="9.6155%" y="741" width="0.0157%" height="15" fill="rgb(254,105,39)" fg:x="1223" fg:w="2"/><text x="9.8655%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (2 samples, 0.02%)</title><rect x="9.6155%" y="725" width="0.0157%" height="15" fill="rgb(245,158,5)" fg:x="1223" fg:w="2"/><text x="9.8655%" y="735.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (2 samples, 0.02%)</title><rect x="9.6155%" y="709" width="0.0157%" height="15" fill="rgb(249,208,11)" fg:x="1223" fg:w="2"/><text x="9.8655%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (2 samples, 0.02%)</title><rect x="9.6155%" y="693" width="0.0157%" height="15" fill="rgb(210,39,28)" fg:x="1223" fg:w="2"/><text x="9.8655%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="9.6155%" y="677" width="0.0157%" height="15" fill="rgb(211,56,53)" fg:x="1223" fg:w="2"/><text x="9.8655%" y="687.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (14 samples, 0.11%)</title><rect x="9.5291%" y="997" width="0.1101%" height="15" fill="rgb(226,201,30)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.11%)</title><rect x="9.5291%" y="981" width="0.1101%" height="15" fill="rgb(239,101,34)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.11%)</title><rect x="9.5291%" y="965" width="0.1101%" height="15" fill="rgb(226,209,5)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="975.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 0.11%)</title><rect x="9.5291%" y="949" width="0.1101%" height="15" fill="rgb(250,105,47)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.11%)</title><rect x="9.5291%" y="933" width="0.1101%" height="15" fill="rgb(230,72,3)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="9.5291%" y="917" width="0.1101%" height="15" fill="rgb(232,218,39)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (14 samples, 0.11%)</title><rect x="9.5291%" y="901" width="0.1101%" height="15" fill="rgb(248,166,6)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.11%)</title><rect x="9.5291%" y="885" width="0.1101%" height="15" fill="rgb(247,89,20)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (14 samples, 0.11%)</title><rect x="9.5291%" y="869" width="0.1101%" height="15" fill="rgb(248,130,54)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.11%)</title><rect x="9.5291%" y="853" width="0.1101%" height="15" fill="rgb(234,196,4)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="863.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (14 samples, 0.11%)</title><rect x="9.5291%" y="837" width="0.1101%" height="15" fill="rgb(250,143,31)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="847.50"></text></g><g><title>calamine::xlsx::worksheet (14 samples, 0.11%)</title><rect x="9.5291%" y="821" width="0.1101%" height="15" fill="rgb(211,110,34)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="831.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (14 samples, 0.11%)</title><rect x="9.5291%" y="805" width="0.1101%" height="15" fill="rgb(215,124,48)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="815.50"></text></g><g><title>calamine::xlsx::read_sheet_data (14 samples, 0.11%)</title><rect x="9.5291%" y="789" width="0.1101%" height="15" fill="rgb(216,46,13)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet (14 samples, 0.11%)</title><rect x="9.5291%" y="773" width="0.1101%" height="15" fill="rgb(205,184,25)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="783.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (14 samples, 0.11%)</title><rect x="9.5291%" y="757" width="0.1101%" height="15" fill="rgb(228,1,10)" fg:x="1212" fg:w="14"/><text x="9.7791%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="9.6391%" y="997" width="0.0157%" height="15" fill="rgb(213,116,27)" fg:x="1226" fg:w="2"/><text x="9.8891%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="997" width="0.0472%" height="15" fill="rgb(241,95,50)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="1007.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="981" width="0.0472%" height="15" fill="rgb(238,48,32)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="991.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="965" width="0.0472%" height="15" fill="rgb(235,113,49)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="975.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="949" width="0.0472%" height="15" fill="rgb(205,127,43)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="959.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="933" width="0.0472%" height="15" fill="rgb(250,162,2)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="943.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="917" width="0.0472%" height="15" fill="rgb(220,13,41)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="927.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (6 samples, 0.05%)</title><rect x="9.6706%" y="901" width="0.0472%" height="15" fill="rgb(249,221,25)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="911.50"></text></g><g><title>&lt;tower_http::services::fs::serve_dir::InfallibleResponseFuture&lt;ReqBody,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="885" width="0.0472%" height="15" fill="rgb(215,208,19)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="869" width="0.0472%" height="15" fill="rgb(236,175,2)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="853" width="0.0472%" height="15" fill="rgb(241,52,2)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="863.50"></text></g><g><title>&lt;tower_http::services::fs::serve_dir::future::ResponseFuture&lt;ReqBody,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="9.6706%" y="837" width="0.0472%" height="15" fill="rgb(248,140,14)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="847.50"></text></g><g><title>tower_http::services::fs::serve_dir::future::build_response (6 samples, 0.05%)</title><rect x="9.6706%" y="821" width="0.0472%" height="15" fill="rgb(253,22,42)" fg:x="1230" fg:w="6"/><text x="9.9206%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="9.7177%" y="997" width="0.0314%" height="15" fill="rgb(234,61,47)" fg:x="1236" fg:w="4"/><text x="9.9677%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="9.7492%" y="997" width="0.0472%" height="15" fill="rgb(208,226,15)" fg:x="1240" fg:w="6"/><text x="9.9992%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (2 samples, 0.02%)</title><rect x="9.7964%" y="997" width="0.0157%" height="15" fill="rgb(217,221,4)" fg:x="1246" fg:w="2"/><text x="10.0464%" y="1007.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.02%)</title><rect x="9.8121%" y="997" width="0.0236%" height="15" fill="rgb(212,174,34)" fg:x="1248" fg:w="3"/><text x="10.0621%" y="1007.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="9.8357%" y="997" width="0.0157%" height="15" fill="rgb(253,83,4)" fg:x="1251" fg:w="2"/><text x="10.0857%" y="1007.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="997" width="0.0157%" height="15" fill="rgb(250,195,49)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="1007.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="981" width="0.0157%" height="15" fill="rgb(241,192,25)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="991.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="965" width="0.0157%" height="15" fill="rgb(208,124,10)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="975.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="949" width="0.0157%" height="15" fill="rgb(222,33,0)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="959.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (2 samples, 0.02%)</title><rect x="9.8593%" y="933" width="0.0157%" height="15" fill="rgb(234,209,28)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="943.50"></text></g><g><title>&lt;tower::util::map_err::MapErrFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="917" width="0.0157%" height="15" fill="rgb(224,11,23)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="901" width="0.0157%" height="15" fill="rgb(232,99,1)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="911.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="885" width="0.0157%" height="15" fill="rgb(237,95,45)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="869" width="0.0157%" height="15" fill="rgb(208,109,11)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="879.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="853" width="0.0157%" height="15" fill="rgb(216,190,48)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="863.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (2 samples, 0.02%)</title><rect x="9.8593%" y="837" width="0.0157%" height="15" fill="rgb(251,171,36)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="847.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="821" width="0.0157%" height="15" fill="rgb(230,62,22)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="831.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="805" width="0.0157%" height="15" fill="rgb(225,114,35)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="789" width="0.0157%" height="15" fill="rgb(215,118,42)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="773" width="0.0157%" height="15" fill="rgb(243,119,21)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="757" width="0.0157%" height="15" fill="rgb(252,177,53)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="767.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (2 samples, 0.02%)</title><rect x="9.8593%" y="741" width="0.0157%" height="15" fill="rgb(237,209,29)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="751.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="725" width="0.0157%" height="15" fill="rgb(212,65,23)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="735.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.8593%" y="709" width="0.0157%" height="15" fill="rgb(230,222,46)" fg:x="1254" fg:w="2"/><text x="10.1093%" y="719.50"></text></g><g><title>tracing_subscriber::fmt::format::Format&lt;F,T&gt;::format_timestamp (2 samples, 0.02%)</title><rect x="9.8829%" y="773" width="0.0157%" height="15" fill="rgb(215,135,32)" fg:x="1257" fg:w="2"/><text x="10.1329%" y="783.50"></text></g><g><title>tracing_subscriber::fmt::format::Writer::write_fmt (2 samples, 0.02%)</title><rect x="9.8829%" y="757" width="0.0157%" height="15" fill="rgb(246,101,22)" fg:x="1257" fg:w="2"/><text x="10.1329%" y="767.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse::{{closure}} (5 samples, 0.04%)</title><rect x="9.8750%" y="981" width="0.0393%" height="15" fill="rgb(206,107,13)" fg:x="1256" fg:w="5"/><text x="10.1250%" y="991.50"></text></g><g><title>tracing_core::event::Event::dispatch (4 samples, 0.03%)</title><rect x="9.8829%" y="965" width="0.0314%" height="15" fill="rgb(250,100,44)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="975.50"></text></g><g><title>tracing_core::dispatcher::get_default (4 samples, 0.03%)</title><rect x="9.8829%" y="949" width="0.0314%" height="15" fill="rgb(231,147,38)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="959.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (4 samples, 0.03%)</title><rect x="9.8829%" y="933" width="0.0314%" height="15" fill="rgb(229,8,40)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="943.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (4 samples, 0.03%)</title><rect x="9.8829%" y="917" width="0.0314%" height="15" fill="rgb(221,135,30)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="927.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.03%)</title><rect x="9.8829%" y="901" width="0.0314%" height="15" fill="rgb(249,193,18)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="911.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.03%)</title><rect x="9.8829%" y="885" width="0.0314%" height="15" fill="rgb(209,133,39)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="895.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.03%)</title><rect x="9.8829%" y="869" width="0.0314%" height="15" fill="rgb(232,100,14)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (4 samples, 0.03%)</title><rect x="9.8829%" y="853" width="0.0314%" height="15" fill="rgb(224,185,1)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.03%)</title><rect x="9.8829%" y="837" width="0.0314%" height="15" fill="rgb(223,139,8)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.03%)</title><rect x="9.8829%" y="821" width="0.0314%" height="15" fill="rgb(232,213,38)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (4 samples, 0.03%)</title><rect x="9.8829%" y="805" width="0.0314%" height="15" fill="rgb(207,94,22)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (4 samples, 0.03%)</title><rect x="9.8829%" y="789" width="0.0314%" height="15" fill="rgb(219,183,54)" fg:x="1257" fg:w="4"/><text x="10.1329%" y="799.50"></text></g><g><title>tracing_subscriber::fmt::format::Writer::write_fmt (2 samples, 0.02%)</title><rect x="9.8986%" y="773" width="0.0157%" height="15" fill="rgb(216,185,54)" fg:x="1259" fg:w="2"/><text x="10.1486%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_fmt (2 samples, 0.02%)</title><rect x="9.8986%" y="757" width="0.0157%" height="15" fill="rgb(254,217,39)" fg:x="1259" fg:w="2"/><text x="10.1486%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.02%)</title><rect x="9.8986%" y="741" width="0.0157%" height="15" fill="rgb(240,178,23)" fg:x="1259" fg:w="2"/><text x="10.1486%" y="751.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="9.8986%" y="725" width="0.0157%" height="15" fill="rgb(218,11,47)" fg:x="1259" fg:w="2"/><text x="10.1486%" y="735.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (10 samples, 0.08%)</title><rect x="9.8750%" y="997" width="0.0786%" height="15" fill="rgb(218,51,51)" fg:x="1256" fg:w="10"/><text x="10.1250%" y="1007.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="9.9536%" y="997" width="0.0236%" height="15" fill="rgb(238,126,27)" fg:x="1266" fg:w="3"/><text x="10.2036%" y="1007.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.9615%" y="981" width="0.0157%" height="15" fill="rgb(249,202,22)" fg:x="1267" fg:w="2"/><text x="10.2115%" y="991.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="9.9615%" y="965" width="0.0157%" height="15" fill="rgb(254,195,49)" fg:x="1267" fg:w="2"/><text x="10.2115%" y="975.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2 samples, 0.02%)</title><rect x="9.9615%" y="949" width="0.0157%" height="15" fill="rgb(208,123,14)" fg:x="1267" fg:w="2"/><text x="10.2115%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (2 samples, 0.02%)</title><rect x="9.9615%" y="933" width="0.0157%" height="15" fill="rgb(224,200,8)" fg:x="1267" fg:w="2"/><text x="10.2115%" y="943.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (2 samples, 0.02%)</title><rect x="9.9615%" y="917" width="0.0157%" height="15" fill="rgb(217,61,36)" fg:x="1267" fg:w="2"/><text x="10.2115%" y="927.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::FmtContext&lt;S,N&gt; as tracing_subscriber::fmt::format::FormatFields&gt;::format_fields (2 samples, 0.02%)</title><rect x="9.9851%" y="645" width="0.0157%" height="15" fill="rgb(206,35,45)" fg:x="1270" fg:w="2"/><text x="10.2351%" y="655.50"></text></g><g><title>&lt;M as tracing_subscriber::fmt::format::FormatFields&gt;::format_fields (2 samples, 0.02%)</title><rect x="9.9851%" y="629" width="0.0157%" height="15" fill="rgb(217,65,33)" fg:x="1270" fg:w="2"/><text x="10.2351%" y="639.50"></text></g><g><title>tracing_subscriber::fmt::format::Format&lt;F,T&gt;::format_timestamp (2 samples, 0.02%)</title><rect x="10.0086%" y="645" width="0.0157%" height="15" fill="rgb(222,158,48)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="655.50"></text></g><g><title>tracing_subscriber::fmt::format::Writer::write_fmt (2 samples, 0.02%)</title><rect x="10.0086%" y="629" width="0.0157%" height="15" fill="rgb(254,2,54)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_fmt (2 samples, 0.02%)</title><rect x="10.0086%" y="613" width="0.0157%" height="15" fill="rgb(250,143,38)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.02%)</title><rect x="10.0086%" y="597" width="0.0157%" height="15" fill="rgb(248,25,0)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="10.0086%" y="581" width="0.0157%" height="15" fill="rgb(206,152,27)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="591.50"></text></g><g><title>&lt;nu_ansi_term::ansi::Prefix as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="10.0086%" y="565" width="0.0157%" height="15" fill="rgb(240,77,30)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="575.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (2 samples, 0.02%)</title><rect x="10.0086%" y="549" width="0.0157%" height="15" fill="rgb(231,5,3)" fg:x="1273" fg:w="2"/><text x="10.2586%" y="559.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush::{{closure}} (6 samples, 0.05%)</title><rect x="9.9851%" y="853" width="0.0472%" height="15" fill="rgb(207,226,32)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="863.50"></text></g><g><title>tracing_core::event::Event::dispatch (6 samples, 0.05%)</title><rect x="9.9851%" y="837" width="0.0472%" height="15" fill="rgb(222,207,47)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="847.50"></text></g><g><title>tracing_core::dispatcher::get_default (6 samples, 0.05%)</title><rect x="9.9851%" y="821" width="0.0472%" height="15" fill="rgb(229,115,45)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="831.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (6 samples, 0.05%)</title><rect x="9.9851%" y="805" width="0.0472%" height="15" fill="rgb(224,191,6)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="815.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (6 samples, 0.05%)</title><rect x="9.9851%" y="789" width="0.0472%" height="15" fill="rgb(230,227,24)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="9.9851%" y="773" width="0.0472%" height="15" fill="rgb(228,80,19)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="783.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="9.9851%" y="757" width="0.0472%" height="15" fill="rgb(247,229,0)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="9.9851%" y="741" width="0.0472%" height="15" fill="rgb(237,194,15)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (6 samples, 0.05%)</title><rect x="9.9851%" y="725" width="0.0472%" height="15" fill="rgb(219,203,20)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.05%)</title><rect x="9.9851%" y="709" width="0.0472%" height="15" fill="rgb(234,128,8)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="9.9851%" y="693" width="0.0472%" height="15" fill="rgb(248,202,8)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="703.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (6 samples, 0.05%)</title><rect x="9.9851%" y="677" width="0.0472%" height="15" fill="rgb(206,104,37)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (6 samples, 0.05%)</title><rect x="9.9851%" y="661" width="0.0472%" height="15" fill="rgb(223,8,27)" fg:x="1270" fg:w="6"/><text x="10.2351%" y="671.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.03%)</title><rect x="10.0322%" y="837" width="0.0314%" height="15" fill="rgb(216,217,28)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="847.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.03%)</title><rect x="10.0322%" y="821" width="0.0314%" height="15" fill="rgb(249,199,1)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="831.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (4 samples, 0.03%)</title><rect x="10.0322%" y="805" width="0.0314%" height="15" fill="rgb(240,85,17)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="815.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored (4 samples, 0.03%)</title><rect x="10.0322%" y="789" width="0.0314%" height="15" fill="rgb(206,108,45)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="799.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_io (4 samples, 0.03%)</title><rect x="10.0322%" y="773" width="0.0314%" height="15" fill="rgb(245,210,41)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="783.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (4 samples, 0.03%)</title><rect x="10.0322%" y="757" width="0.0314%" height="15" fill="rgb(206,13,37)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="767.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored::{{closure}} (4 samples, 0.03%)</title><rect x="10.0322%" y="741" width="0.0314%" height="15" fill="rgb(250,61,18)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="751.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (4 samples, 0.03%)</title><rect x="10.0322%" y="725" width="0.0314%" height="15" fill="rgb(235,172,48)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="735.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4 samples, 0.03%)</title><rect x="10.0322%" y="709" width="0.0314%" height="15" fill="rgb(249,201,17)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="719.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (4 samples, 0.03%)</title><rect x="10.0322%" y="693" width="0.0314%" height="15" fill="rgb(219,208,6)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="703.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored::{{closure}} (4 samples, 0.03%)</title><rect x="10.0322%" y="677" width="0.0314%" height="15" fill="rgb(248,31,23)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="687.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write_vectored (4 samples, 0.03%)</title><rect x="10.0322%" y="661" width="0.0314%" height="15" fill="rgb(245,15,42)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="671.50"></text></g><g><title>__GI___writev (4 samples, 0.03%)</title><rect x="10.0322%" y="645" width="0.0314%" height="15" fill="rgb(222,217,39)" fg:x="1276" fg:w="4"/><text x="10.2822%" y="655.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (12 samples, 0.09%)</title><rect x="9.9851%" y="885" width="0.0943%" height="15" fill="rgb(210,219,27)" fg:x="1270" fg:w="12"/><text x="10.2351%" y="895.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (12 samples, 0.09%)</title><rect x="9.9851%" y="869" width="0.0943%" height="15" fill="rgb(252,166,36)" fg:x="1270" fg:w="12"/><text x="10.2351%" y="879.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (6 samples, 0.05%)</title><rect x="10.0322%" y="853" width="0.0472%" height="15" fill="rgb(245,132,34)" fg:x="1276" fg:w="6"/><text x="10.2822%" y="863.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush::{{closure}} (2 samples, 0.02%)</title><rect x="10.0637%" y="837" width="0.0157%" height="15" fill="rgb(236,54,3)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="847.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="10.0637%" y="821" width="0.0157%" height="15" fill="rgb(241,173,43)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="831.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="10.0637%" y="805" width="0.0157%" height="15" fill="rgb(215,190,9)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="815.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="10.0637%" y="789" width="0.0157%" height="15" fill="rgb(242,101,16)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="799.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="10.0637%" y="773" width="0.0157%" height="15" fill="rgb(223,190,21)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="783.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.0637%" y="757" width="0.0157%" height="15" fill="rgb(215,228,25)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.0637%" y="741" width="0.0157%" height="15" fill="rgb(225,36,22)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.0637%" y="725" width="0.0157%" height="15" fill="rgb(251,106,46)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="735.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="10.0637%" y="709" width="0.0157%" height="15" fill="rgb(208,90,1)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="10.0637%" y="693" width="0.0157%" height="15" fill="rgb(243,10,4)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="10.0637%" y="677" width="0.0157%" height="15" fill="rgb(212,137,27)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="10.0637%" y="661" width="0.0157%" height="15" fill="rgb(231,220,49)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="671.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="10.0637%" y="645" width="0.0157%" height="15" fill="rgb(237,96,20)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="655.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="10.0637%" y="629" width="0.0157%" height="15" fill="rgb(239,229,30)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="639.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="10.0637%" y="613" width="0.0157%" height="15" fill="rgb(219,65,33)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="10.0637%" y="597" width="0.0157%" height="15" fill="rgb(243,134,7)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="607.50"></text></g><g><title>__GI___write (2 samples, 0.02%)</title><rect x="10.0637%" y="581" width="0.0157%" height="15" fill="rgb(216,177,54)" fg:x="1280" fg:w="2"/><text x="10.3137%" y="591.50"></text></g><g><title>&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_data (3 samples, 0.02%)</title><rect x="10.0794%" y="869" width="0.0236%" height="15" fill="rgb(211,160,20)" fg:x="1282" fg:w="3"/><text x="10.3294%" y="879.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_data (3 samples, 0.02%)</title><rect x="10.0794%" y="853" width="0.0236%" height="15" fill="rgb(239,85,39)" fg:x="1282" fg:w="3"/><text x="10.3294%" y="863.50"></text></g><g><title>&lt;tower_http::services::fs::serve_dir::ResponseBody as http_body::Body&gt;::poll_data (3 samples, 0.02%)</title><rect x="10.0794%" y="837" width="0.0236%" height="15" fill="rgb(232,125,22)" fg:x="1282" fg:w="3"/><text x="10.3294%" y="847.50"></text></g><g><title>&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::poll_data (3 samples, 0.02%)</title><rect x="10.0794%" y="821" width="0.0236%" height="15" fill="rgb(244,57,34)" fg:x="1282" fg:w="3"/><text x="10.3294%" y="831.50"></text></g><g><title>&lt;tower_http::services::fs::AsyncReadBody&lt;T&gt; as http_body::Body&gt;::poll_data (2 samples, 0.02%)</title><rect x="10.0873%" y="805" width="0.0157%" height="15" fill="rgb(214,203,32)" fg:x="1283" fg:w="2"/><text x="10.3373%" y="815.50"></text></g><g><title>&lt;tokio_util::io::reader_stream::ReaderStream&lt;R&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.02%)</title><rect x="10.0873%" y="789" width="0.0157%" height="15" fill="rgb(207,58,43)" fg:x="1283" fg:w="2"/><text x="10.3373%" y="799.50"></text></g><g><title>tokio_util::util::poll_buf::poll_read_buf (2 samples, 0.02%)</title><rect x="10.0873%" y="773" width="0.0157%" height="15" fill="rgb(215,193,15)" fg:x="1283" fg:w="2"/><text x="10.3373%" y="783.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.02%)</title><rect x="10.0873%" y="757" width="0.0157%" height="15" fill="rgb(232,15,44)" fg:x="1283" fg:w="2"/><text x="10.3373%" y="767.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (16 samples, 0.13%)</title><rect x="9.9851%" y="997" width="0.1258%" height="15" fill="rgb(212,3,48)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="1007.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (16 samples, 0.13%)</title><rect x="9.9851%" y="981" width="0.1258%" height="15" fill="rgb(218,128,7)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="991.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (16 samples, 0.13%)</title><rect x="9.9851%" y="965" width="0.1258%" height="15" fill="rgb(226,216,39)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="975.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.13%)</title><rect x="9.9851%" y="949" width="0.1258%" height="15" fill="rgb(243,47,51)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (16 samples, 0.13%)</title><rect x="9.9851%" y="933" width="0.1258%" height="15" fill="rgb(241,183,40)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="943.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (16 samples, 0.13%)</title><rect x="9.9851%" y="917" width="0.1258%" height="15" fill="rgb(231,217,32)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="927.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (16 samples, 0.13%)</title><rect x="9.9851%" y="901" width="0.1258%" height="15" fill="rgb(229,61,38)" fg:x="1270" fg:w="16"/><text x="10.2351%" y="911.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (4 samples, 0.03%)</title><rect x="10.0794%" y="885" width="0.0314%" height="15" fill="rgb(225,210,5)" fg:x="1282" fg:w="4"/><text x="10.3294%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="10.1344%" y="581" width="0.0236%" height="15" fill="rgb(231,79,45)" fg:x="1289" fg:w="3"/><text x="10.3844%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="10.1344%" y="565" width="0.0236%" height="15" fill="rgb(224,100,7)" fg:x="1289" fg:w="3"/><text x="10.3844%" y="575.50"></text></g><g><title>__free (3 samples, 0.02%)</title><rect x="10.1344%" y="549" width="0.0236%" height="15" fill="rgb(241,198,18)" fg:x="1289" fg:w="3"/><text x="10.3844%" y="559.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="10.1344%" y="533" width="0.0236%" height="15" fill="rgb(252,97,53)" fg:x="1289" fg:w="3"/><text x="10.3844%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="10.1344%" y="677" width="0.0314%" height="15" fill="rgb(220,88,7)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (4 samples, 0.03%)</title><rect x="10.1344%" y="661" width="0.0314%" height="15" fill="rgb(213,176,14)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.03%)</title><rect x="10.1344%" y="645" width="0.0314%" height="15" fill="rgb(246,73,7)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="10.1344%" y="629" width="0.0314%" height="15" fill="rgb(245,64,36)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="10.1344%" y="613" width="0.0314%" height="15" fill="rgb(245,80,10)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="10.1344%" y="597" width="0.0314%" height="15" fill="rgb(232,107,50)" fg:x="1289" fg:w="4"/><text x="10.3844%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;excel_merge::search::SearchFiles&gt; (10 samples, 0.08%)</title><rect x="10.1344%" y="773" width="0.0786%" height="15" fill="rgb(253,3,0)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;,alloc::vec::Vec&lt;alloc::string::String&gt;)&gt; (10 samples, 0.08%)</title><rect x="10.1344%" y="757" width="0.0786%" height="15" fill="rgb(212,99,53)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (10 samples, 0.08%)</title><rect x="10.1344%" y="741" width="0.0786%" height="15" fill="rgb(249,111,54)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.08%)</title><rect x="10.1344%" y="725" width="0.0786%" height="15" fill="rgb(249,55,30)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (10 samples, 0.08%)</title><rect x="10.1344%" y="709" width="0.0786%" height="15" fill="rgb(237,47,42)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (10 samples, 0.08%)</title><rect x="10.1344%" y="693" width="0.0786%" height="15" fill="rgb(211,20,18)" fg:x="1289" fg:w="10"/><text x="10.3844%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (6 samples, 0.05%)</title><rect x="10.1659%" y="677" width="0.0472%" height="15" fill="rgb(231,203,46)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="10.1659%" y="661" width="0.0472%" height="15" fill="rgb(237,142,3)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="10.1659%" y="645" width="0.0472%" height="15" fill="rgb(241,107,1)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="10.1659%" y="629" width="0.0472%" height="15" fill="rgb(229,83,13)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="639.50"></text></g><g><title>__free (6 samples, 0.05%)</title><rect x="10.1659%" y="613" width="0.0472%" height="15" fill="rgb(241,91,40)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="623.50"></text></g><g><title>_int_free (6 samples, 0.05%)</title><rect x="10.1659%" y="597" width="0.0472%" height="15" fill="rgb(225,3,45)" fg:x="1293" fg:w="6"/><text x="10.4159%" y="607.50"></text></g><g><title>malloc_consolidate (5 samples, 0.04%)</title><rect x="10.1738%" y="581" width="0.0393%" height="15" fill="rgb(244,223,14)" fg:x="1294" fg:w="5"/><text x="10.4238%" y="591.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="10.1973%" y="565" width="0.0157%" height="15" fill="rgb(224,124,37)" fg:x="1297" fg:w="2"/><text x="10.4473%" y="575.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="997" width="0.0865%" height="15" fill="rgb(251,171,30)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="981" width="0.0865%" height="15" fill="rgb(236,46,54)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="991.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="965" width="0.0865%" height="15" fill="rgb(245,213,5)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="975.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="949" width="0.0865%" height="15" fill="rgb(230,144,27)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="959.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="933" width="0.0865%" height="15" fill="rgb(220,86,6)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="943.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="917" width="0.0865%" height="15" fill="rgb(240,20,13)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="901" width="0.0865%" height="15" fill="rgb(217,89,34)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="911.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (11 samples, 0.09%)</title><rect x="10.1344%" y="885" width="0.0865%" height="15" fill="rgb(229,13,5)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="895.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="869" width="0.0865%" height="15" fill="rgb(244,67,35)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="853" width="0.0865%" height="15" fill="rgb(221,40,2)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="863.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="837" width="0.0865%" height="15" fill="rgb(237,157,21)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="847.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 0.09%)</title><rect x="10.1344%" y="821" width="0.0865%" height="15" fill="rgb(222,94,11)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="831.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::{{closure}} (11 samples, 0.09%)</title><rect x="10.1344%" y="805" width="0.0865%" height="15" fill="rgb(249,113,6)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="815.50"></text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (11 samples, 0.09%)</title><rect x="10.1344%" y="789" width="0.0865%" height="15" fill="rgb(238,137,36)" fg:x="1289" fg:w="11"/><text x="10.3844%" y="799.50"></text></g><g><title>tokio::fs::file::File::metadata::{{closure}} (2 samples, 0.02%)</title><rect x="10.2209%" y="949" width="0.0157%" height="15" fill="rgb(210,102,26)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="959.50"></text></g><g><title>tokio::fs::asyncify::{{closure}} (2 samples, 0.02%)</title><rect x="10.2209%" y="933" width="0.0157%" height="15" fill="rgb(218,30,30)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="943.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.02%)</title><rect x="10.2209%" y="917" width="0.0157%" height="15" fill="rgb(214,67,26)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="927.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (2 samples, 0.02%)</title><rect x="10.2209%" y="901" width="0.0157%" height="15" fill="rgb(251,9,53)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.02%)</title><rect x="10.2209%" y="885" width="0.0157%" height="15" fill="rgb(228,204,25)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (2 samples, 0.02%)</title><rect x="10.2209%" y="869" width="0.0157%" height="15" fill="rgb(207,153,8)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.02%)</title><rect x="10.2209%" y="853" width="0.0157%" height="15" fill="rgb(242,9,16)" fg:x="1300" fg:w="2"/><text x="10.4709%" y="863.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="10.2602%" y="805" width="0.0472%" height="15" fill="rgb(217,211,10)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="815.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.05%)</title><rect x="10.2602%" y="789" width="0.0472%" height="15" fill="rgb(219,228,52)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="799.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.05%)</title><rect x="10.2602%" y="773" width="0.0472%" height="15" fill="rgb(231,92,29)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="783.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.05%)</title><rect x="10.2602%" y="757" width="0.0472%" height="15" fill="rgb(232,8,23)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 0.05%)</title><rect x="10.2602%" y="741" width="0.0472%" height="15" fill="rgb(216,211,34)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 0.05%)</title><rect x="10.2602%" y="725" width="0.0472%" height="15" fill="rgb(236,151,0)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 0.05%)</title><rect x="10.2602%" y="709" width="0.0472%" height="15" fill="rgb(209,168,3)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="719.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.05%)</title><rect x="10.2602%" y="693" width="0.0472%" height="15" fill="rgb(208,129,28)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.05%)</title><rect x="10.2602%" y="677" width="0.0472%" height="15" fill="rgb(229,78,22)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="687.50"></text></g><g><title>syscall (6 samples, 0.05%)</title><rect x="10.2602%" y="661" width="0.0472%" height="15" fill="rgb(228,187,13)" fg:x="1305" fg:w="6"/><text x="10.5102%" y="671.50"></text></g><g><title>tower_http::services::fs::serve_dir::open_file::maybe_redirect_or_append_path::{{closure}} (15 samples, 0.12%)</title><rect x="10.2367%" y="949" width="0.1179%" height="15" fill="rgb(240,119,24)" fg:x="1302" fg:w="15"/><text x="10.4867%" y="959.50"></text></g><g><title>tower_http::services::fs::serve_dir::open_file::is_dir::{{closure}} (15 samples, 0.12%)</title><rect x="10.2367%" y="933" width="0.1179%" height="15" fill="rgb(209,194,42)" fg:x="1302" fg:w="15"/><text x="10.4867%" y="943.50"></text></g><g><title>tokio::fs::metadata::metadata::{{closure}} (15 samples, 0.12%)</title><rect x="10.2367%" y="917" width="0.1179%" height="15" fill="rgb(247,200,46)" fg:x="1302" fg:w="15"/><text x="10.4867%" y="927.50"></text></g><g><title>tokio::fs::asyncify::{{closure}} (15 samples, 0.12%)</title><rect x="10.2367%" y="901" width="0.1179%" height="15" fill="rgb(218,76,16)" fg:x="1302" fg:w="15"/><text x="10.4867%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (13 samples, 0.10%)</title><rect x="10.2524%" y="885" width="0.1022%" height="15" fill="rgb(225,21,48)" fg:x="1304" fg:w="13"/><text x="10.5024%" y="895.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (13 samples, 0.10%)</title><rect x="10.2524%" y="869" width="0.1022%" height="15" fill="rgb(239,223,50)" fg:x="1304" fg:w="13"/><text x="10.5024%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (13 samples, 0.10%)</title><rect x="10.2524%" y="853" width="0.1022%" height="15" fill="rgb(244,45,21)" fg:x="1304" fg:w="13"/><text x="10.5024%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (13 samples, 0.10%)</title><rect x="10.2524%" y="837" width="0.1022%" height="15" fill="rgb(232,33,43)" fg:x="1304" fg:w="13"/><text x="10.5024%" y="847.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (13 samples, 0.10%)</title><rect x="10.2524%" y="821" width="0.1022%" height="15" fill="rgb(209,8,3)" fg:x="1304" fg:w="13"/><text x="10.5024%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (6 samples, 0.05%)</title><rect x="10.3074%" y="805" width="0.0472%" height="15" fill="rgb(214,25,53)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="815.50"></text></g><g><title>std::thread::Builder::spawn (6 samples, 0.05%)</title><rect x="10.3074%" y="789" width="0.0472%" height="15" fill="rgb(254,186,54)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (6 samples, 0.05%)</title><rect x="10.3074%" y="773" width="0.0472%" height="15" fill="rgb(208,174,49)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (6 samples, 0.05%)</title><rect x="10.3074%" y="757" width="0.0472%" height="15" fill="rgb(233,191,51)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="767.50"></text></g><g><title>std::sys::unix::thread::Thread::new (6 samples, 0.05%)</title><rect x="10.3074%" y="741" width="0.0472%" height="15" fill="rgb(222,134,10)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="751.50"></text></g><g><title>__pthread_create_2_1 (6 samples, 0.05%)</title><rect x="10.3074%" y="725" width="0.0472%" height="15" fill="rgb(230,226,20)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="735.50"></text></g><g><title>__GI___mprotect (6 samples, 0.05%)</title><rect x="10.3074%" y="709" width="0.0472%" height="15" fill="rgb(251,111,25)" fg:x="1311" fg:w="6"/><text x="10.5574%" y="719.50"></text></g><g><title>tokio::fs::asyncify::{{closure}} (7 samples, 0.06%)</title><rect x="10.3546%" y="917" width="0.0550%" height="15" fill="rgb(224,40,46)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="927.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (7 samples, 0.06%)</title><rect x="10.3546%" y="901" width="0.0550%" height="15" fill="rgb(236,108,47)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="911.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (7 samples, 0.06%)</title><rect x="10.3546%" y="885" width="0.0550%" height="15" fill="rgb(234,93,0)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (7 samples, 0.06%)</title><rect x="10.3546%" y="869" width="0.0550%" height="15" fill="rgb(224,213,32)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (7 samples, 0.06%)</title><rect x="10.3546%" y="853" width="0.0550%" height="15" fill="rgb(251,11,48)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (7 samples, 0.06%)</title><rect x="10.3546%" y="837" width="0.0550%" height="15" fill="rgb(236,173,5)" fg:x="1317" fg:w="7"/><text x="10.6046%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.05%)</title><rect x="10.3624%" y="821" width="0.0472%" height="15" fill="rgb(230,95,12)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="831.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.05%)</title><rect x="10.3624%" y="805" width="0.0472%" height="15" fill="rgb(232,209,1)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.05%)</title><rect x="10.3624%" y="789" width="0.0472%" height="15" fill="rgb(232,6,1)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="799.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.05%)</title><rect x="10.3624%" y="773" width="0.0472%" height="15" fill="rgb(210,224,50)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 0.05%)</title><rect x="10.3624%" y="757" width="0.0472%" height="15" fill="rgb(228,127,35)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 0.05%)</title><rect x="10.3624%" y="741" width="0.0472%" height="15" fill="rgb(245,102,45)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (6 samples, 0.05%)</title><rect x="10.3624%" y="725" width="0.0472%" height="15" fill="rgb(214,1,49)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="735.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.05%)</title><rect x="10.3624%" y="709" width="0.0472%" height="15" fill="rgb(226,163,40)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="719.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.05%)</title><rect x="10.3624%" y="693" width="0.0472%" height="15" fill="rgb(239,212,28)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="703.50"></text></g><g><title>syscall (6 samples, 0.05%)</title><rect x="10.3624%" y="677" width="0.0472%" height="15" fill="rgb(220,20,13)" fg:x="1318" fg:w="6"/><text x="10.6124%" y="687.50"></text></g><g><title>&lt;tower_http::services::fs::serve_dir::future::ResponseFuture&lt;ReqBody,F&gt; as core::future::future::Future&gt;::poll (25 samples, 0.20%)</title><rect x="10.2209%" y="997" width="0.1966%" height="15" fill="rgb(210,164,35)" fg:x="1300" fg:w="25"/><text x="10.4709%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (25 samples, 0.20%)</title><rect x="10.2209%" y="981" width="0.1966%" height="15" fill="rgb(248,109,41)" fg:x="1300" fg:w="25"/><text x="10.4709%" y="991.50"></text></g><g><title>tower_http::services::fs::serve_dir::open_file::open_file::{{closure}} (25 samples, 0.20%)</title><rect x="10.2209%" y="965" width="0.1966%" height="15" fill="rgb(238,23,50)" fg:x="1300" fg:w="25"/><text x="10.4709%" y="975.50"></text></g><g><title>tower_http::services::fs::serve_dir::open_file::open_file_with_fallback::{{closure}} (8 samples, 0.06%)</title><rect x="10.3546%" y="949" width="0.0629%" height="15" fill="rgb(211,48,49)" fg:x="1317" fg:w="8"/><text x="10.6046%" y="959.50"></text></g><g><title>tokio::fs::file::File::open::{{closure}} (8 samples, 0.06%)</title><rect x="10.3546%" y="933" width="0.0629%" height="15" fill="rgb(223,36,21)" fg:x="1317" fg:w="8"/><text x="10.6046%" y="943.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.13%)</title><rect x="10.4253%" y="997" width="0.1337%" height="15" fill="rgb(207,123,46)" fg:x="1326" fg:w="17"/><text x="10.6753%" y="1007.50"></text></g><g><title>__rdl_alloc (13 samples, 0.10%)</title><rect x="10.5590%" y="997" width="0.1022%" height="15" fill="rgb(240,218,32)" fg:x="1343" fg:w="13"/><text x="10.8090%" y="1007.50"></text></g><g><title>__rust_try (2 samples, 0.02%)</title><rect x="10.6612%" y="997" width="0.0157%" height="15" fill="rgb(252,5,43)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.02%)</title><rect x="10.6612%" y="981" width="0.0157%" height="15" fill="rgb(252,84,19)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="991.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.02%)</title><rect x="10.6612%" y="965" width="0.0157%" height="15" fill="rgb(243,152,39)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 0.02%)</title><rect x="10.6612%" y="949" width="0.0157%" height="15" fill="rgb(234,160,15)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="959.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.02%)</title><rect x="10.6612%" y="933" width="0.0157%" height="15" fill="rgb(237,34,20)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="943.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.02%)</title><rect x="10.6612%" y="917" width="0.0157%" height="15" fill="rgb(229,97,13)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="927.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (2 samples, 0.02%)</title><rect x="10.6612%" y="901" width="0.0157%" height="15" fill="rgb(234,71,50)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="911.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="10.6612%" y="885" width="0.0157%" height="15" fill="rgb(253,155,4)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="895.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="10.6612%" y="869" width="0.0157%" height="15" fill="rgb(222,185,37)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="879.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="10.6612%" y="853" width="0.0157%" height="15" fill="rgb(251,177,13)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="863.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="10.6612%" y="837" width="0.0157%" height="15" fill="rgb(250,179,40)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="847.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2 samples, 0.02%)</title><rect x="10.6612%" y="821" width="0.0157%" height="15" fill="rgb(242,44,2)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="831.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (2 samples, 0.02%)</title><rect x="10.6612%" y="805" width="0.0157%" height="15" fill="rgb(216,177,13)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="815.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (2 samples, 0.02%)</title><rect x="10.6612%" y="789" width="0.0157%" height="15" fill="rgb(216,106,43)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="799.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 0.02%)</title><rect x="10.6612%" y="773" width="0.0157%" height="15" fill="rgb(216,183,2)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="783.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 0.02%)</title><rect x="10.6612%" y="757" width="0.0157%" height="15" fill="rgb(249,75,3)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="767.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush::{{closure}} (2 samples, 0.02%)</title><rect x="10.6612%" y="741" width="0.0157%" height="15" fill="rgb(219,67,39)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="751.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="10.6612%" y="725" width="0.0157%" height="15" fill="rgb(253,228,2)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="735.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="10.6612%" y="709" width="0.0157%" height="15" fill="rgb(235,138,27)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="719.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="10.6612%" y="693" width="0.0157%" height="15" fill="rgb(236,97,51)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="10.6612%" y="677" width="0.0157%" height="15" fill="rgb(240,80,30)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="687.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.6612%" y="661" width="0.0157%" height="15" fill="rgb(230,178,19)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="671.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.6612%" y="645" width="0.0157%" height="15" fill="rgb(210,190,27)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="655.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="10.6612%" y="629" width="0.0157%" height="15" fill="rgb(222,107,31)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="639.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="10.6612%" y="613" width="0.0157%" height="15" fill="rgb(216,127,34)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="10.6612%" y="597" width="0.0157%" height="15" fill="rgb(234,116,52)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="10.6612%" y="581" width="0.0157%" height="15" fill="rgb(222,124,15)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="591.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="10.6612%" y="565" width="0.0157%" height="15" fill="rgb(231,179,28)" fg:x="1356" fg:w="2"/><text x="10.9112%" y="575.50"></text></g><g><title>_int_free (11 samples, 0.09%)</title><rect x="10.6769%" y="997" width="0.0865%" height="15" fill="rgb(226,93,45)" fg:x="1358" fg:w="11"/><text x="10.9269%" y="1007.50"></text></g><g><title>_int_malloc (13 samples, 0.10%)</title><rect x="10.7634%" y="997" width="0.1022%" height="15" fill="rgb(215,8,51)" fg:x="1369" fg:w="13"/><text x="11.0134%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="10.8656%" y="997" width="0.0236%" height="15" fill="rgb(223,106,5)" fg:x="1382" fg:w="3"/><text x="11.1156%" y="1007.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.06%)</title><rect x="10.9207%" y="997" width="0.0629%" height="15" fill="rgb(250,191,5)" fg:x="1389" fg:w="8"/><text x="11.1707%" y="1007.50"></text></g><g><title>alloc::fmt::format::{{closure}} (6 samples, 0.05%)</title><rect x="10.9836%" y="997" width="0.0472%" height="15" fill="rgb(242,132,44)" fg:x="1397" fg:w="6"/><text x="11.2336%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.05%)</title><rect x="11.0307%" y="997" width="0.0472%" height="15" fill="rgb(251,152,29)" fg:x="1403" fg:w="6"/><text x="11.2807%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="11.0779%" y="997" width="0.0314%" height="15" fill="rgb(218,179,5)" fg:x="1409" fg:w="4"/><text x="11.3279%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="11.1094%" y="997" width="0.0157%" height="15" fill="rgb(227,67,19)" fg:x="1413" fg:w="2"/><text x="11.3594%" y="1007.50"></text></g><g><title>alloc::raw_vec::handle_reserve (5 samples, 0.04%)</title><rect x="11.1330%" y="997" width="0.0393%" height="15" fill="rgb(233,119,31)" fg:x="1416" fg:w="5"/><text x="11.3830%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (2 samples, 0.02%)</title><rect x="11.1723%" y="997" width="0.0157%" height="15" fill="rgb(241,120,22)" fg:x="1421" fg:w="2"/><text x="11.4223%" y="1007.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.04%)</title><rect x="11.3295%" y="661" width="0.0393%" height="15" fill="rgb(224,102,30)" fg:x="1441" fg:w="5"/><text x="11.5795%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="11.3688%" y="661" width="0.0157%" height="15" fill="rgb(210,164,37)" fg:x="1446" fg:w="2"/><text x="11.6188%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="11.2902%" y="693" width="0.1022%" height="15" fill="rgb(226,191,16)" fg:x="1436" fg:w="13"/><text x="11.5402%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (12 samples, 0.09%)</title><rect x="11.2981%" y="677" width="0.0943%" height="15" fill="rgb(214,40,45)" fg:x="1437" fg:w="12"/><text x="11.5481%" y="687.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (2 samples, 0.02%)</title><rect x="11.3924%" y="693" width="0.0157%" height="15" fill="rgb(244,29,26)" fg:x="1449" fg:w="2"/><text x="11.6424%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (30 samples, 0.24%)</title><rect x="11.2116%" y="725" width="0.2359%" height="15" fill="rgb(216,16,5)" fg:x="1426" fg:w="30"/><text x="11.4616%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30 samples, 0.24%)</title><rect x="11.2116%" y="709" width="0.2359%" height="15" fill="rgb(249,76,35)" fg:x="1426" fg:w="30"/><text x="11.4616%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (4 samples, 0.03%)</title><rect x="11.4160%" y="693" width="0.0314%" height="15" fill="rgb(207,11,44)" fg:x="1452" fg:w="4"/><text x="11.6660%" y="703.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (4 samples, 0.03%)</title><rect x="11.4160%" y="677" width="0.0314%" height="15" fill="rgb(228,190,49)" fg:x="1452" fg:w="4"/><text x="11.6660%" y="687.50"></text></g><g><title>quick_xml::reader::is_whitespace (2 samples, 0.02%)</title><rect x="11.4317%" y="661" width="0.0157%" height="15" fill="rgb(214,173,12)" fg:x="1454" fg:w="2"/><text x="11.6817%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (5 samples, 0.04%)</title><rect x="11.4474%" y="709" width="0.0393%" height="15" fill="rgb(218,26,35)" fg:x="1456" fg:w="5"/><text x="11.6974%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates::{{closure}} (4 samples, 0.03%)</title><rect x="11.4553%" y="693" width="0.0314%" height="15" fill="rgb(220,200,19)" fg:x="1457" fg:w="4"/><text x="11.7053%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="11.4710%" y="677" width="0.0157%" height="15" fill="rgb(239,95,49)" fg:x="1459" fg:w="2"/><text x="11.7210%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="11.4710%" y="661" width="0.0157%" height="15" fill="rgb(235,85,53)" fg:x="1459" fg:w="2"/><text x="11.7210%" y="671.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (36 samples, 0.28%)</title><rect x="11.2116%" y="789" width="0.2830%" height="15" fill="rgb(233,133,31)" fg:x="1426" fg:w="36"/><text x="11.4616%" y="799.50"></text></g><g><title>calamine::xlsx::get_attribute (36 samples, 0.28%)</title><rect x="11.2116%" y="773" width="0.2830%" height="15" fill="rgb(218,25,20)" fg:x="1426" fg:w="36"/><text x="11.4616%" y="783.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.28%)</title><rect x="11.2116%" y="757" width="0.2830%" height="15" fill="rgb(252,210,38)" fg:x="1426" fg:w="36"/><text x="11.4616%" y="767.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (36 samples, 0.28%)</title><rect x="11.2116%" y="741" width="0.2830%" height="15" fill="rgb(242,134,21)" fg:x="1426" fg:w="36"/><text x="11.4616%" y="751.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (6 samples, 0.05%)</title><rect x="11.4474%" y="725" width="0.0472%" height="15" fill="rgb(213,28,48)" fg:x="1456" fg:w="6"/><text x="11.6974%" y="735.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.04%)</title><rect x="11.4946%" y="773" width="0.0393%" height="15" fill="rgb(250,196,2)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.04%)</title><rect x="11.4946%" y="757" width="0.0393%" height="15" fill="rgb(227,5,17)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="11.4946%" y="741" width="0.0393%" height="15" fill="rgb(221,226,24)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.04%)</title><rect x="11.4946%" y="725" width="0.0393%" height="15" fill="rgb(211,5,48)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.04%)</title><rect x="11.4946%" y="709" width="0.0393%" height="15" fill="rgb(219,150,6)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.04%)</title><rect x="11.4946%" y="693" width="0.0393%" height="15" fill="rgb(251,46,16)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.04%)</title><rect x="11.4946%" y="677" width="0.0393%" height="15" fill="rgb(220,204,40)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.04%)</title><rect x="11.4946%" y="661" width="0.0393%" height="15" fill="rgb(211,85,2)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="11.4946%" y="645" width="0.0393%" height="15" fill="rgb(229,17,7)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="11.4946%" y="629" width="0.0393%" height="15" fill="rgb(239,72,28)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="11.4946%" y="613" width="0.0393%" height="15" fill="rgb(230,47,54)" fg:x="1462" fg:w="5"/><text x="11.7446%" y="623.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="11.5103%" y="597" width="0.0236%" height="15" fill="rgb(214,50,8)" fg:x="1464" fg:w="3"/><text x="11.7603%" y="607.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="11.5103%" y="581" width="0.0236%" height="15" fill="rgb(216,198,43)" fg:x="1464" fg:w="3"/><text x="11.7603%" y="591.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="11.5182%" y="565" width="0.0157%" height="15" fill="rgb(234,20,35)" fg:x="1465" fg:w="2"/><text x="11.7682%" y="575.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="11.5497%" y="725" width="0.0157%" height="15" fill="rgb(254,45,19)" fg:x="1469" fg:w="2"/><text x="11.7997%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (6 samples, 0.05%)</title><rect x="11.5654%" y="725" width="0.0472%" height="15" fill="rgb(219,14,44)" fg:x="1471" fg:w="6"/><text x="11.8154%" y="735.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (3 samples, 0.02%)</title><rect x="11.5890%" y="709" width="0.0236%" height="15" fill="rgb(217,220,26)" fg:x="1474" fg:w="3"/><text x="11.8390%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (13 samples, 0.10%)</title><rect x="11.5418%" y="741" width="0.1022%" height="15" fill="rgb(213,158,28)" fg:x="1468" fg:w="13"/><text x="11.7918%" y="751.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (3 samples, 0.02%)</title><rect x="11.6204%" y="725" width="0.0236%" height="15" fill="rgb(252,51,52)" fg:x="1478" fg:w="3"/><text x="11.8704%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.02%)</title><rect x="11.6204%" y="709" width="0.0236%" height="15" fill="rgb(246,89,16)" fg:x="1478" fg:w="3"/><text x="11.8704%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (15 samples, 0.12%)</title><rect x="11.5418%" y="773" width="0.1179%" height="15" fill="rgb(216,158,49)" fg:x="1468" fg:w="15"/><text x="11.7918%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (15 samples, 0.12%)</title><rect x="11.5418%" y="757" width="0.1179%" height="15" fill="rgb(236,107,19)" fg:x="1468" fg:w="15"/><text x="11.7918%" y="767.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (2 samples, 0.02%)</title><rect x="11.6440%" y="741" width="0.0157%" height="15" fill="rgb(228,185,30)" fg:x="1481" fg:w="2"/><text x="11.8940%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="11.6440%" y="725" width="0.0157%" height="15" fill="rgb(246,134,8)" fg:x="1481" fg:w="2"/><text x="11.8940%" y="735.50"></text></g><g><title>calamine::xlsx::read_string (22 samples, 0.17%)</title><rect x="11.4946%" y="789" width="0.1730%" height="15" fill="rgb(214,143,50)" fg:x="1462" fg:w="22"/><text x="11.7446%" y="799.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (59 samples, 0.46%)</title><rect x="11.2116%" y="805" width="0.4639%" height="15" fill="rgb(228,75,8)" fg:x="1426" fg:w="59"/><text x="11.4616%" y="815.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (63 samples, 0.50%)</title><rect x="11.2116%" y="997" width="0.4953%" height="15" fill="rgb(207,175,4)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (63 samples, 0.50%)</title><rect x="11.2116%" y="981" width="0.4953%" height="15" fill="rgb(205,108,24)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.50%)</title><rect x="11.2116%" y="965" width="0.4953%" height="15" fill="rgb(244,120,49)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (63 samples, 0.50%)</title><rect x="11.2116%" y="949" width="0.4953%" height="15" fill="rgb(223,47,38)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (63 samples, 0.50%)</title><rect x="11.2116%" y="933" width="0.4953%" height="15" fill="rgb(229,179,11)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (63 samples, 0.50%)</title><rect x="11.2116%" y="917" width="0.4953%" height="15" fill="rgb(231,122,1)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (63 samples, 0.50%)</title><rect x="11.2116%" y="901" width="0.4953%" height="15" fill="rgb(245,119,9)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="911.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (63 samples, 0.50%)</title><rect x="11.2116%" y="885" width="0.4953%" height="15" fill="rgb(241,163,25)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="895.50"></text></g><g><title>calamine::xlsx::worksheet (63 samples, 0.50%)</title><rect x="11.2116%" y="869" width="0.4953%" height="15" fill="rgb(217,214,3)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="879.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (63 samples, 0.50%)</title><rect x="11.2116%" y="853" width="0.4953%" height="15" fill="rgb(240,86,28)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="863.50"></text></g><g><title>calamine::xlsx::read_sheet_data (63 samples, 0.50%)</title><rect x="11.2116%" y="837" width="0.4953%" height="15" fill="rgb(215,47,9)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="847.50"></text></g><g><title>calamine::xlsx::read_sheet (63 samples, 0.50%)</title><rect x="11.2116%" y="821" width="0.4953%" height="15" fill="rgb(252,25,45)" fg:x="1426" fg:w="63"/><text x="11.4616%" y="831.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (4 samples, 0.03%)</title><rect x="11.6754%" y="805" width="0.0314%" height="15" fill="rgb(251,164,9)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (4 samples, 0.03%)</title><rect x="11.6754%" y="789" width="0.0314%" height="15" fill="rgb(233,194,0)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (4 samples, 0.03%)</title><rect x="11.6754%" y="773" width="0.0314%" height="15" fill="rgb(249,111,24)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="783.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (4 samples, 0.03%)</title><rect x="11.6754%" y="757" width="0.0314%" height="15" fill="rgb(250,223,3)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="767.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.03%)</title><rect x="11.6754%" y="741" width="0.0314%" height="15" fill="rgb(236,178,37)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="751.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.03%)</title><rect x="11.6754%" y="725" width="0.0314%" height="15" fill="rgb(241,158,50)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="735.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.03%)</title><rect x="11.6754%" y="709" width="0.0314%" height="15" fill="rgb(213,121,41)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="719.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.03%)</title><rect x="11.6754%" y="693" width="0.0314%" height="15" fill="rgb(240,92,3)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (4 samples, 0.03%)</title><rect x="11.6754%" y="677" width="0.0314%" height="15" fill="rgb(205,123,3)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (4 samples, 0.03%)</title><rect x="11.6754%" y="661" width="0.0314%" height="15" fill="rgb(205,97,47)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (4 samples, 0.03%)</title><rect x="11.6754%" y="645" width="0.0314%" height="15" fill="rgb(247,152,14)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="655.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (4 samples, 0.03%)</title><rect x="11.6754%" y="629" width="0.0314%" height="15" fill="rgb(248,195,53)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (4 samples, 0.03%)</title><rect x="11.6754%" y="613" width="0.0314%" height="15" fill="rgb(226,201,16)" fg:x="1485" fg:w="4"/><text x="11.9254%" y="623.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (3 samples, 0.02%)</title><rect x="11.6833%" y="597" width="0.0236%" height="15" fill="rgb(205,98,0)" fg:x="1486" fg:w="3"/><text x="11.9333%" y="607.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (3 samples, 0.02%)</title><rect x="11.7226%" y="981" width="0.0236%" height="15" fill="rgb(214,191,48)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="991.50"></text></g><g><title>calamine::xlsx::read_sheet_data (3 samples, 0.02%)</title><rect x="11.7226%" y="965" width="0.0236%" height="15" fill="rgb(237,112,39)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="975.50"></text></g><g><title>calamine::xlsx::read_sheet (3 samples, 0.02%)</title><rect x="11.7226%" y="949" width="0.0236%" height="15" fill="rgb(247,203,27)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="959.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (3 samples, 0.02%)</title><rect x="11.7226%" y="933" width="0.0236%" height="15" fill="rgb(235,124,28)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="943.50"></text></g><g><title>calamine::xlsx::read_string (3 samples, 0.02%)</title><rect x="11.7226%" y="917" width="0.0236%" height="15" fill="rgb(208,207,46)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="927.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (3 samples, 0.02%)</title><rect x="11.7226%" y="901" width="0.0236%" height="15" fill="rgb(234,176,4)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="911.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.02%)</title><rect x="11.7226%" y="885" width="0.0236%" height="15" fill="rgb(230,133,28)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="895.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.02%)</title><rect x="11.7226%" y="869" width="0.0236%" height="15" fill="rgb(211,137,40)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="879.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (3 samples, 0.02%)</title><rect x="11.7226%" y="853" width="0.0236%" height="15" fill="rgb(254,35,13)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="863.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (3 samples, 0.02%)</title><rect x="11.7226%" y="837" width="0.0236%" height="15" fill="rgb(225,49,51)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="847.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="11.7226%" y="821" width="0.0236%" height="15" fill="rgb(251,10,15)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (3 samples, 0.02%)</title><rect x="11.7226%" y="805" width="0.0236%" height="15" fill="rgb(228,207,15)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="815.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.02%)</title><rect x="11.7226%" y="789" width="0.0236%" height="15" fill="rgb(241,99,19)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="799.50"></text></g><g><title>memchr::memchr::memchr3_raw (3 samples, 0.02%)</title><rect x="11.7226%" y="773" width="0.0236%" height="15" fill="rgb(207,104,49)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (3 samples, 0.02%)</title><rect x="11.7226%" y="757" width="0.0236%" height="15" fill="rgb(234,99,18)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (3 samples, 0.02%)</title><rect x="11.7226%" y="741" width="0.0236%" height="15" fill="rgb(213,191,49)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (3 samples, 0.02%)</title><rect x="11.7226%" y="725" width="0.0236%" height="15" fill="rgb(210,226,19)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (3 samples, 0.02%)</title><rect x="11.7226%" y="709" width="0.0236%" height="15" fill="rgb(229,97,18)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (3 samples, 0.02%)</title><rect x="11.7226%" y="693" width="0.0236%" height="15" fill="rgb(211,167,15)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (3 samples, 0.02%)</title><rect x="11.7226%" y="677" width="0.0236%" height="15" fill="rgb(210,169,34)" fg:x="1491" fg:w="3"/><text x="11.9726%" y="687.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (2 samples, 0.02%)</title><rect x="11.7305%" y="661" width="0.0157%" height="15" fill="rgb(241,121,31)" fg:x="1492" fg:w="2"/><text x="11.9805%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="11.7305%" y="645" width="0.0157%" height="15" fill="rgb(232,40,11)" fg:x="1492" fg:w="2"/><text x="11.9805%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (3 samples, 0.02%)</title><rect x="11.7619%" y="661" width="0.0236%" height="15" fill="rgb(205,86,26)" fg:x="1496" fg:w="3"/><text x="12.0119%" y="671.50"></text></g><g><title>calamine::xlsx::worksheet (9 samples, 0.07%)</title><rect x="11.7226%" y="997" width="0.0708%" height="15" fill="rgb(231,126,28)" fg:x="1491" fg:w="9"/><text x="11.9726%" y="1007.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (6 samples, 0.05%)</title><rect x="11.7462%" y="981" width="0.0472%" height="15" fill="rgb(219,221,18)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="991.50"></text></g><g><title>calamine::xlsx::read_sheet_data (6 samples, 0.05%)</title><rect x="11.7462%" y="965" width="0.0472%" height="15" fill="rgb(211,40,0)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="975.50"></text></g><g><title>calamine::xlsx::read_sheet (6 samples, 0.05%)</title><rect x="11.7462%" y="949" width="0.0472%" height="15" fill="rgb(239,85,43)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="959.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (6 samples, 0.05%)</title><rect x="11.7462%" y="933" width="0.0472%" height="15" fill="rgb(231,55,21)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="943.50"></text></g><g><title>calamine::xlsx::read_string (6 samples, 0.05%)</title><rect x="11.7462%" y="917" width="0.0472%" height="15" fill="rgb(225,184,43)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="927.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (6 samples, 0.05%)</title><rect x="11.7462%" y="901" width="0.0472%" height="15" fill="rgb(251,158,41)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="911.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (6 samples, 0.05%)</title><rect x="11.7462%" y="885" width="0.0472%" height="15" fill="rgb(234,159,37)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="895.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (6 samples, 0.05%)</title><rect x="11.7462%" y="869" width="0.0472%" height="15" fill="rgb(216,204,22)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="879.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (6 samples, 0.05%)</title><rect x="11.7462%" y="853" width="0.0472%" height="15" fill="rgb(214,17,3)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="863.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (6 samples, 0.05%)</title><rect x="11.7462%" y="837" width="0.0472%" height="15" fill="rgb(212,111,17)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="847.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="11.7462%" y="821" width="0.0472%" height="15" fill="rgb(221,157,24)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="831.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (6 samples, 0.05%)</title><rect x="11.7462%" y="805" width="0.0472%" height="15" fill="rgb(252,16,13)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="815.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (6 samples, 0.05%)</title><rect x="11.7462%" y="789" width="0.0472%" height="15" fill="rgb(221,62,2)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="799.50"></text></g><g><title>memchr::memchr::memchr3_raw (6 samples, 0.05%)</title><rect x="11.7462%" y="773" width="0.0472%" height="15" fill="rgb(247,87,22)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="783.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (6 samples, 0.05%)</title><rect x="11.7462%" y="757" width="0.0472%" height="15" fill="rgb(215,73,9)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (6 samples, 0.05%)</title><rect x="11.7462%" y="741" width="0.0472%" height="15" fill="rgb(207,175,33)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="751.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (6 samples, 0.05%)</title><rect x="11.7462%" y="725" width="0.0472%" height="15" fill="rgb(243,129,54)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw_impl (6 samples, 0.05%)</title><rect x="11.7462%" y="709" width="0.0472%" height="15" fill="rgb(227,119,45)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="719.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::find_raw (6 samples, 0.05%)</title><rect x="11.7462%" y="693" width="0.0472%" height="15" fill="rgb(205,109,36)" fg:x="1494" fg:w="6"/><text x="11.9962%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::search_chunk (5 samples, 0.04%)</title><rect x="11.7541%" y="677" width="0.0393%" height="15" fill="rgb(205,6,39)" fg:x="1495" fg:w="5"/><text x="12.0041%" y="687.50"></text></g><g><title>core::cmp::max_by (8 samples, 0.06%)</title><rect x="11.8170%" y="997" width="0.0629%" height="15" fill="rgb(221,32,16)" fg:x="1503" fg:w="8"/><text x="12.0670%" y="1007.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.02%)</title><rect x="11.8799%" y="997" width="0.0157%" height="15" fill="rgb(228,144,50)" fg:x="1511" fg:w="2"/><text x="12.1299%" y="1007.50"></text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.02%)</title><rect x="11.8956%" y="997" width="0.0157%" height="15" fill="rgb(229,201,53)" fg:x="1513" fg:w="2"/><text x="12.1456%" y="1007.50"></text></g><g><title>core::fmt::Formatter::pad_integral (8 samples, 0.06%)</title><rect x="11.9113%" y="997" width="0.0629%" height="15" fill="rgb(249,153,27)" fg:x="1515" fg:w="8"/><text x="12.1613%" y="1007.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (26 samples, 0.20%)</title><rect x="11.9742%" y="997" width="0.2044%" height="15" fill="rgb(227,106,25)" fg:x="1523" fg:w="26"/><text x="12.2242%" y="1007.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.02%)</title><rect x="12.1786%" y="997" width="0.0157%" height="15" fill="rgb(230,65,29)" fg:x="1549" fg:w="2"/><text x="12.4286%" y="1007.50"></text></g><g><title>core::fmt::write (5 samples, 0.04%)</title><rect x="12.1944%" y="997" width="0.0393%" height="15" fill="rgb(221,57,46)" fg:x="1551" fg:w="5"/><text x="12.4444%" y="1007.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.02%)</title><rect x="12.2337%" y="997" width="0.0157%" height="15" fill="rgb(229,161,17)" fg:x="1556" fg:w="2"/><text x="12.4837%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (4 samples, 0.03%)</title><rect x="12.2730%" y="997" width="0.0314%" height="15" fill="rgb(222,213,11)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="1007.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.03%)</title><rect x="12.2730%" y="981" width="0.0314%" height="15" fill="rgb(235,35,13)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="991.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (4 samples, 0.03%)</title><rect x="12.2730%" y="965" width="0.0314%" height="15" fill="rgb(233,158,34)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="975.50"></text></g><g><title>calamine::xlsx::worksheet (4 samples, 0.03%)</title><rect x="12.2730%" y="949" width="0.0314%" height="15" fill="rgb(215,151,48)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (4 samples, 0.03%)</title><rect x="12.2730%" y="933" width="0.0314%" height="15" fill="rgb(229,84,14)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="943.50"></text></g><g><title>calamine::xlsx::read_sheet_data (4 samples, 0.03%)</title><rect x="12.2730%" y="917" width="0.0314%" height="15" fill="rgb(229,68,14)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet (4 samples, 0.03%)</title><rect x="12.2730%" y="901" width="0.0314%" height="15" fill="rgb(243,106,26)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (4 samples, 0.03%)</title><rect x="12.2730%" y="885" width="0.0314%" height="15" fill="rgb(206,45,38)" fg:x="1561" fg:w="4"/><text x="12.5230%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (2 samples, 0.02%)</title><rect x="12.2887%" y="869" width="0.0157%" height="15" fill="rgb(226,6,15)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (2 samples, 0.02%)</title><rect x="12.2887%" y="853" width="0.0157%" height="15" fill="rgb(232,22,54)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (2 samples, 0.02%)</title><rect x="12.2887%" y="837" width="0.0157%" height="15" fill="rgb(229,222,32)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="12.2887%" y="821" width="0.0157%" height="15" fill="rgb(228,62,29)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="831.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="12.2887%" y="805" width="0.0157%" height="15" fill="rgb(251,103,34)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="12.2887%" y="789" width="0.0157%" height="15" fill="rgb(233,12,30)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="799.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="12.2887%" y="773" width="0.0157%" height="15" fill="rgb(238,52,0)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="783.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="12.2887%" y="757" width="0.0157%" height="15" fill="rgb(223,98,5)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="12.2887%" y="741" width="0.0157%" height="15" fill="rgb(228,75,37)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="12.2887%" y="725" width="0.0157%" height="15" fill="rgb(205,115,49)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="12.2887%" y="709" width="0.0157%" height="15" fill="rgb(250,154,43)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (2 samples, 0.02%)</title><rect x="12.2887%" y="693" width="0.0157%" height="15" fill="rgb(226,43,29)" fg:x="1563" fg:w="2"/><text x="12.5387%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 0.03%)</title><rect x="12.3044%" y="997" width="0.0314%" height="15" fill="rgb(249,228,39)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.03%)</title><rect x="12.3044%" y="981" width="0.0314%" height="15" fill="rgb(216,79,43)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (4 samples, 0.03%)</title><rect x="12.3044%" y="965" width="0.0314%" height="15" fill="rgb(228,95,12)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.03%)</title><rect x="12.3044%" y="949" width="0.0314%" height="15" fill="rgb(249,221,15)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="959.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (4 samples, 0.03%)</title><rect x="12.3044%" y="933" width="0.0314%" height="15" fill="rgb(233,34,13)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="943.50"></text></g><g><title>calamine::xlsx::worksheet (4 samples, 0.03%)</title><rect x="12.3044%" y="917" width="0.0314%" height="15" fill="rgb(214,103,39)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="927.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (4 samples, 0.03%)</title><rect x="12.3044%" y="901" width="0.0314%" height="15" fill="rgb(251,126,39)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet_data (4 samples, 0.03%)</title><rect x="12.3044%" y="885" width="0.0314%" height="15" fill="rgb(214,216,36)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet (4 samples, 0.03%)</title><rect x="12.3044%" y="869" width="0.0314%" height="15" fill="rgb(220,221,8)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="879.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (4 samples, 0.03%)</title><rect x="12.3044%" y="853" width="0.0314%" height="15" fill="rgb(240,216,3)" fg:x="1565" fg:w="4"/><text x="12.5544%" y="863.50"></text></g><g><title>calamine::xlsx::read_string (3 samples, 0.02%)</title><rect x="12.3123%" y="837" width="0.0236%" height="15" fill="rgb(232,218,17)" fg:x="1566" fg:w="3"/><text x="12.5623%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.05%)</title><rect x="12.3359%" y="997" width="0.0472%" height="15" fill="rgb(229,163,45)" fg:x="1569" fg:w="6"/><text x="12.5859%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 0.02%)</title><rect x="12.3595%" y="981" width="0.0236%" height="15" fill="rgb(231,110,42)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="991.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.02%)</title><rect x="12.3595%" y="965" width="0.0236%" height="15" fill="rgb(208,170,48)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="975.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (3 samples, 0.02%)</title><rect x="12.3595%" y="949" width="0.0236%" height="15" fill="rgb(239,116,25)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="959.50"></text></g><g><title>calamine::xlsx::worksheet (3 samples, 0.02%)</title><rect x="12.3595%" y="933" width="0.0236%" height="15" fill="rgb(219,200,50)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="943.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (3 samples, 0.02%)</title><rect x="12.3595%" y="917" width="0.0236%" height="15" fill="rgb(245,200,0)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet_data (3 samples, 0.02%)</title><rect x="12.3595%" y="901" width="0.0236%" height="15" fill="rgb(245,119,33)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="911.50"></text></g><g><title>calamine::xlsx::read_sheet (3 samples, 0.02%)</title><rect x="12.3595%" y="885" width="0.0236%" height="15" fill="rgb(231,125,12)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="895.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (3 samples, 0.02%)</title><rect x="12.3595%" y="869" width="0.0236%" height="15" fill="rgb(216,96,41)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="879.50"></text></g><g><title>calamine::xlsx::read_string (3 samples, 0.02%)</title><rect x="12.3595%" y="853" width="0.0236%" height="15" fill="rgb(248,43,45)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="863.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (3 samples, 0.02%)</title><rect x="12.3595%" y="837" width="0.0236%" height="15" fill="rgb(217,222,7)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (3 samples, 0.02%)</title><rect x="12.3595%" y="821" width="0.0236%" height="15" fill="rgb(233,28,6)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (3 samples, 0.02%)</title><rect x="12.3595%" y="805" width="0.0236%" height="15" fill="rgb(231,218,15)" fg:x="1572" fg:w="3"/><text x="12.6095%" y="815.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (2 samples, 0.02%)</title><rect x="12.3673%" y="789" width="0.0157%" height="15" fill="rgb(226,171,48)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.02%)</title><rect x="12.3673%" y="773" width="0.0157%" height="15" fill="rgb(235,201,9)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.02%)</title><rect x="12.3673%" y="757" width="0.0157%" height="15" fill="rgb(217,80,15)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="767.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.02%)</title><rect x="12.3673%" y="741" width="0.0157%" height="15" fill="rgb(219,152,8)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="12.3673%" y="725" width="0.0157%" height="15" fill="rgb(243,107,38)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="735.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.02%)</title><rect x="12.3673%" y="709" width="0.0157%" height="15" fill="rgb(231,17,5)" fg:x="1573" fg:w="2"/><text x="12.6173%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (2 samples, 0.02%)</title><rect x="12.3988%" y="837" width="0.0157%" height="15" fill="rgb(209,25,54)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (2 samples, 0.02%)</title><rect x="12.3988%" y="821" width="0.0157%" height="15" fill="rgb(219,0,2)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="831.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="12.3988%" y="805" width="0.0157%" height="15" fill="rgb(246,9,5)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="12.3988%" y="789" width="0.0157%" height="15" fill="rgb(226,159,4)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="799.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="12.3988%" y="773" width="0.0157%" height="15" fill="rgb(219,175,34)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="783.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="12.3988%" y="757" width="0.0157%" height="15" fill="rgb(236,10,46)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="12.3988%" y="741" width="0.0157%" height="15" fill="rgb(240,211,16)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="12.3988%" y="725" width="0.0157%" height="15" fill="rgb(205,3,43)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="12.3988%" y="709" width="0.0157%" height="15" fill="rgb(245,7,22)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (2 samples, 0.02%)</title><rect x="12.3988%" y="693" width="0.0157%" height="15" fill="rgb(239,132,32)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (2 samples, 0.02%)</title><rect x="12.3988%" y="677" width="0.0157%" height="15" fill="rgb(228,202,34)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (2 samples, 0.02%)</title><rect x="12.3988%" y="661" width="0.0157%" height="15" fill="rgb(254,200,22)" fg:x="1577" fg:w="2"/><text x="12.6488%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.04%)</title><rect x="12.3988%" y="997" width="0.0393%" height="15" fill="rgb(219,10,39)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="1007.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (5 samples, 0.04%)</title><rect x="12.3988%" y="981" width="0.0393%" height="15" fill="rgb(226,210,39)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="991.50"></text></g><g><title>calamine::xlsx::worksheet (5 samples, 0.04%)</title><rect x="12.3988%" y="965" width="0.0393%" height="15" fill="rgb(208,219,16)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="975.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (5 samples, 0.04%)</title><rect x="12.3988%" y="949" width="0.0393%" height="15" fill="rgb(216,158,51)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="959.50"></text></g><g><title>calamine::xlsx::read_sheet_data (5 samples, 0.04%)</title><rect x="12.3988%" y="933" width="0.0393%" height="15" fill="rgb(233,14,44)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="943.50"></text></g><g><title>calamine::xlsx::read_sheet (5 samples, 0.04%)</title><rect x="12.3988%" y="917" width="0.0393%" height="15" fill="rgb(237,97,39)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="927.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (5 samples, 0.04%)</title><rect x="12.3988%" y="901" width="0.0393%" height="15" fill="rgb(218,198,43)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="911.50"></text></g><g><title>calamine::xlsx::read_string (5 samples, 0.04%)</title><rect x="12.3988%" y="885" width="0.0393%" height="15" fill="rgb(231,104,20)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="895.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (5 samples, 0.04%)</title><rect x="12.3988%" y="869" width="0.0393%" height="15" fill="rgb(254,36,13)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="879.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (5 samples, 0.04%)</title><rect x="12.3988%" y="853" width="0.0393%" height="15" fill="rgb(248,14,50)" fg:x="1577" fg:w="5"/><text x="12.6488%" y="863.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (3 samples, 0.02%)</title><rect x="12.4145%" y="837" width="0.0236%" height="15" fill="rgb(217,107,29)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (3 samples, 0.02%)</title><rect x="12.4145%" y="821" width="0.0236%" height="15" fill="rgb(251,169,33)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="831.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.02%)</title><rect x="12.4145%" y="805" width="0.0236%" height="15" fill="rgb(217,108,32)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="815.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.02%)</title><rect x="12.4145%" y="789" width="0.0236%" height="15" fill="rgb(219,66,42)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="799.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.02%)</title><rect x="12.4145%" y="773" width="0.0236%" height="15" fill="rgb(206,180,7)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="783.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="12.4145%" y="757" width="0.0236%" height="15" fill="rgb(208,226,31)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="767.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="12.4145%" y="741" width="0.0236%" height="15" fill="rgb(218,26,49)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.02%)</title><rect x="12.4145%" y="725" width="0.0236%" height="15" fill="rgb(233,197,48)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (3 samples, 0.02%)</title><rect x="12.4145%" y="709" width="0.0236%" height="15" fill="rgb(252,181,51)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (3 samples, 0.02%)</title><rect x="12.4145%" y="693" width="0.0236%" height="15" fill="rgb(253,90,19)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="703.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (3 samples, 0.02%)</title><rect x="12.4145%" y="677" width="0.0236%" height="15" fill="rgb(215,171,30)" fg:x="1579" fg:w="3"/><text x="12.6645%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;alloc::string::String&gt;&gt; (2 samples, 0.02%)</title><rect x="12.4617%" y="997" width="0.0157%" height="15" fill="rgb(214,222,9)" fg:x="1585" fg:w="2"/><text x="12.7117%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attribute&gt; (2 samples, 0.02%)</title><rect x="12.4931%" y="997" width="0.0157%" height="15" fill="rgb(223,3,22)" fg:x="1589" fg:w="2"/><text x="12.7431%" y="1007.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (7 samples, 0.06%)</title><rect x="12.5167%" y="997" width="0.0550%" height="15" fill="rgb(225,196,46)" fg:x="1592" fg:w="7"/><text x="12.7667%" y="1007.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="12.6818%" y="725" width="0.0236%" height="15" fill="rgb(209,110,37)" fg:x="1613" fg:w="3"/><text x="12.9318%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (2 samples, 0.02%)</title><rect x="12.7054%" y="725" width="0.0157%" height="15" fill="rgb(249,89,12)" fg:x="1616" fg:w="2"/><text x="12.9554%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.02%)</title><rect x="12.7054%" y="709" width="0.0157%" height="15" fill="rgb(226,27,33)" fg:x="1616" fg:w="2"/><text x="12.9554%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.02%)</title><rect x="12.7054%" y="693" width="0.0157%" height="15" fill="rgb(213,82,22)" fg:x="1616" fg:w="2"/><text x="12.9554%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="12.7369%" y="693" width="0.0157%" height="15" fill="rgb(248,140,0)" fg:x="1620" fg:w="2"/><text x="12.9869%" y="703.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="12.7526%" y="693" width="0.0157%" height="15" fill="rgb(228,106,3)" fg:x="1622" fg:w="2"/><text x="13.0026%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="12.8941%" y="613" width="0.0157%" height="15" fill="rgb(209,23,37)" fg:x="1640" fg:w="2"/><text x="13.1441%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.07%)</title><rect x="12.8626%" y="645" width="0.0708%" height="15" fill="rgb(241,93,50)" fg:x="1636" fg:w="9"/><text x="13.1126%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.07%)</title><rect x="12.8626%" y="629" width="0.0708%" height="15" fill="rgb(253,46,43)" fg:x="1636" fg:w="9"/><text x="13.1126%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (3 samples, 0.02%)</title><rect x="12.9098%" y="613" width="0.0236%" height="15" fill="rgb(226,206,43)" fg:x="1642" fg:w="3"/><text x="13.1598%" y="623.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="12.9413%" y="645" width="0.0236%" height="15" fill="rgb(217,54,7)" fg:x="1646" fg:w="3"/><text x="13.1913%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.17%)</title><rect x="12.8155%" y="677" width="0.1651%" height="15" fill="rgb(223,5,52)" fg:x="1630" fg:w="21"/><text x="13.0655%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.15%)</title><rect x="12.8312%" y="661" width="0.1494%" height="15" fill="rgb(206,52,46)" fg:x="1632" fg:w="19"/><text x="13.0812%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (2 samples, 0.02%)</title><rect x="12.9649%" y="645" width="0.0157%" height="15" fill="rgb(253,136,11)" fg:x="1649" fg:w="2"/><text x="13.2149%" y="655.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (2 samples, 0.02%)</title><rect x="12.9649%" y="629" width="0.0157%" height="15" fill="rgb(208,106,33)" fg:x="1649" fg:w="2"/><text x="13.2149%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="13.0199%" y="597" width="0.0236%" height="15" fill="rgb(206,54,4)" fg:x="1656" fg:w="3"/><text x="13.2699%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="13.0199%" y="581" width="0.0236%" height="15" fill="rgb(213,3,15)" fg:x="1656" fg:w="3"/><text x="13.2699%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.05%)</title><rect x="13.0120%" y="613" width="0.0472%" height="15" fill="rgb(252,211,39)" fg:x="1655" fg:w="6"/><text x="13.2620%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.02%)</title><rect x="13.0592%" y="613" width="0.0236%" height="15" fill="rgb(223,6,36)" fg:x="1661" fg:w="3"/><text x="13.3092%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.02%)</title><rect x="13.0592%" y="597" width="0.0236%" height="15" fill="rgb(252,169,45)" fg:x="1661" fg:w="3"/><text x="13.3092%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.10%)</title><rect x="12.9963%" y="629" width="0.1022%" height="15" fill="rgb(212,48,26)" fg:x="1653" fg:w="13"/><text x="13.2463%" y="639.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="13.0828%" y="613" width="0.0157%" height="15" fill="rgb(251,102,48)" fg:x="1664" fg:w="2"/><text x="13.3328%" y="623.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="13.0828%" y="597" width="0.0157%" height="15" fill="rgb(243,208,16)" fg:x="1664" fg:w="2"/><text x="13.3328%" y="607.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="13.0828%" y="581" width="0.0157%" height="15" fill="rgb(219,96,24)" fg:x="1664" fg:w="2"/><text x="13.3328%" y="591.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (16 samples, 0.13%)</title><rect x="12.9884%" y="677" width="0.1258%" height="15" fill="rgb(219,33,29)" fg:x="1652" fg:w="16"/><text x="13.2384%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.12%)</title><rect x="12.9963%" y="661" width="0.1179%" height="15" fill="rgb(223,176,5)" fg:x="1653" fg:w="15"/><text x="13.2463%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.12%)</title><rect x="12.9963%" y="645" width="0.1179%" height="15" fill="rgb(228,140,14)" fg:x="1653" fg:w="15"/><text x="13.2463%" y="655.50"></text></g><g><title>alloc::raw_vec::handle_reserve (2 samples, 0.02%)</title><rect x="13.0985%" y="629" width="0.0157%" height="15" fill="rgb(217,179,31)" fg:x="1666" fg:w="2"/><text x="13.3485%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="13.0985%" y="613" width="0.0157%" height="15" fill="rgb(230,9,30)" fg:x="1666" fg:w="2"/><text x="13.3485%" y="623.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (2 samples, 0.02%)</title><rect x="13.1142%" y="677" width="0.0157%" height="15" fill="rgb(230,136,20)" fg:x="1668" fg:w="2"/><text x="13.3642%" y="687.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.41%)</title><rect x="12.7290%" y="709" width="0.4088%" height="15" fill="rgb(215,210,22)" fg:x="1619" fg:w="52"/><text x="12.9790%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (46 samples, 0.36%)</title><rect x="12.7762%" y="693" width="0.3617%" height="15" fill="rgb(218,43,5)" fg:x="1625" fg:w="46"/><text x="13.0262%" y="703.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="13.1457%" y="709" width="0.0157%" height="15" fill="rgb(216,11,5)" fg:x="1672" fg:w="2"/><text x="13.3957%" y="719.50"></text></g><g><title>calamine::xlsx::get_attribute (57 samples, 0.45%)</title><rect x="12.7211%" y="725" width="0.4481%" height="15" fill="rgb(209,82,29)" fg:x="1618" fg:w="57"/><text x="12.9711%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="13.2243%" y="693" width="0.0157%" height="15" fill="rgb(244,115,12)" fg:x="1682" fg:w="2"/><text x="13.4743%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (4 samples, 0.03%)</title><rect x="13.2558%" y="693" width="0.0314%" height="15" fill="rgb(222,82,18)" fg:x="1686" fg:w="4"/><text x="13.5058%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::xlsx::XlsxError&gt; (3 samples, 0.02%)</title><rect x="13.2636%" y="677" width="0.0236%" height="15" fill="rgb(249,227,8)" fg:x="1687" fg:w="3"/><text x="13.5136%" y="687.50"></text></g><g><title>calamine::xlsx::get_row_column (16 samples, 0.13%)</title><rect x="13.1771%" y="725" width="0.1258%" height="15" fill="rgb(253,141,45)" fg:x="1676" fg:w="16"/><text x="13.4271%" y="735.50"></text></g><g><title>calamine::xlsx::get_row_and_optional_column (15 samples, 0.12%)</title><rect x="13.1850%" y="709" width="0.1179%" height="15" fill="rgb(234,184,4)" fg:x="1677" fg:w="15"/><text x="13.4350%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.02%)</title><rect x="13.2872%" y="693" width="0.0157%" height="15" fill="rgb(218,194,23)" fg:x="1690" fg:w="2"/><text x="13.5372%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="13.3658%" y="581" width="0.0236%" height="15" fill="rgb(235,66,41)" fg:x="1700" fg:w="3"/><text x="13.6158%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="13.3658%" y="565" width="0.0236%" height="15" fill="rgb(245,217,1)" fg:x="1700" fg:w="3"/><text x="13.6158%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="13.3658%" y="549" width="0.0236%" height="15" fill="rgb(229,91,1)" fg:x="1700" fg:w="3"/><text x="13.6158%" y="559.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="13.3658%" y="533" width="0.0236%" height="15" fill="rgb(207,101,30)" fg:x="1700" fg:w="3"/><text x="13.6158%" y="543.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="13.3658%" y="517" width="0.0236%" height="15" fill="rgb(223,82,49)" fg:x="1700" fg:w="3"/><text x="13.6158%" y="527.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.04%)</title><rect x="13.3658%" y="709" width="0.0393%" height="15" fill="rgb(218,167,17)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.04%)</title><rect x="13.3658%" y="693" width="0.0393%" height="15" fill="rgb(208,103,14)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.04%)</title><rect x="13.3658%" y="677" width="0.0393%" height="15" fill="rgb(238,20,8)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.04%)</title><rect x="13.3658%" y="661" width="0.0393%" height="15" fill="rgb(218,80,54)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.04%)</title><rect x="13.3658%" y="645" width="0.0393%" height="15" fill="rgb(240,144,17)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.04%)</title><rect x="13.3658%" y="629" width="0.0393%" height="15" fill="rgb(245,27,50)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.04%)</title><rect x="13.3658%" y="613" width="0.0393%" height="15" fill="rgb(251,51,7)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.04%)</title><rect x="13.3658%" y="597" width="0.0393%" height="15" fill="rgb(245,217,29)" fg:x="1700" fg:w="5"/><text x="13.6158%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="13.4051%" y="709" width="0.0236%" height="15" fill="rgb(221,176,29)" fg:x="1705" fg:w="3"/><text x="13.6551%" y="719.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="13.4130%" y="693" width="0.0157%" height="15" fill="rgb(212,180,24)" fg:x="1706" fg:w="2"/><text x="13.6630%" y="703.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="13.4130%" y="677" width="0.0157%" height="15" fill="rgb(254,24,2)" fg:x="1706" fg:w="2"/><text x="13.6630%" y="687.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="13.4445%" y="677" width="0.0314%" height="15" fill="rgb(230,100,2)" fg:x="1710" fg:w="4"/><text x="13.6945%" y="687.50"></text></g><g><title>quick_xml::events::attributes::Attr&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="13.4523%" y="661" width="0.0236%" height="15" fill="rgb(219,142,25)" fg:x="1711" fg:w="3"/><text x="13.7023%" y="671.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.02%)</title><rect x="13.4523%" y="645" width="0.0236%" height="15" fill="rgb(240,73,43)" fg:x="1711" fg:w="3"/><text x="13.7023%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="13.4523%" y="629" width="0.0236%" height="15" fill="rgb(214,114,15)" fg:x="1711" fg:w="3"/><text x="13.7023%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="13.4523%" y="613" width="0.0236%" height="15" fill="rgb(207,130,4)" fg:x="1711" fg:w="3"/><text x="13.7023%" y="623.50"></text></g><g><title>calamine::xlsx::get_attribute (7 samples, 0.06%)</title><rect x="13.4445%" y="693" width="0.0550%" height="15" fill="rgb(221,25,40)" fg:x="1710" fg:w="7"/><text x="13.6945%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (2 samples, 0.02%)</title><rect x="13.4838%" y="677" width="0.0157%" height="15" fill="rgb(241,184,7)" fg:x="1715" fg:w="2"/><text x="13.7338%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (2 samples, 0.02%)</title><rect x="13.4838%" y="661" width="0.0157%" height="15" fill="rgb(235,159,4)" fg:x="1715" fg:w="2"/><text x="13.7338%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="13.4838%" y="645" width="0.0157%" height="15" fill="rgb(214,87,48)" fg:x="1715" fg:w="2"/><text x="13.7338%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="13.4995%" y="693" width="0.0157%" height="15" fill="rgb(246,198,24)" fg:x="1717" fg:w="2"/><text x="13.7495%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="13.4995%" y="677" width="0.0157%" height="15" fill="rgb(209,66,40)" fg:x="1717" fg:w="2"/><text x="13.7495%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="13.4995%" y="661" width="0.0157%" height="15" fill="rgb(233,147,39)" fg:x="1717" fg:w="2"/><text x="13.7495%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.02%)</title><rect x="13.5152%" y="693" width="0.0157%" height="15" fill="rgb(231,145,52)" fg:x="1719" fg:w="2"/><text x="13.7652%" y="703.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (13 samples, 0.10%)</title><rect x="13.4366%" y="709" width="0.1022%" height="15" fill="rgb(206,20,26)" fg:x="1709" fg:w="13"/><text x="13.6866%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="13.5781%" y="693" width="0.0157%" height="15" fill="rgb(238,220,4)" fg:x="1727" fg:w="2"/><text x="13.8281%" y="703.50"></text></g><g><title>&lt;quick_xml::name::QName as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="13.5938%" y="693" width="0.0157%" height="15" fill="rgb(252,195,42)" fg:x="1729" fg:w="2"/><text x="13.8438%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="13.5938%" y="677" width="0.0157%" height="15" fill="rgb(209,10,6)" fg:x="1729" fg:w="2"/><text x="13.8438%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="13.5938%" y="661" width="0.0157%" height="15" fill="rgb(229,3,52)" fg:x="1729" fg:w="2"/><text x="13.8438%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="13.6096%" y="581" width="0.0157%" height="15" fill="rgb(253,49,37)" fg:x="1731" fg:w="2"/><text x="13.8596%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="13.6096%" y="645" width="0.0236%" height="15" fill="rgb(240,103,49)" fg:x="1731" fg:w="3"/><text x="13.8596%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="13.6096%" y="629" width="0.0236%" height="15" fill="rgb(250,182,30)" fg:x="1731" fg:w="3"/><text x="13.8596%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="13.6096%" y="613" width="0.0236%" height="15" fill="rgb(248,8,30)" fg:x="1731" fg:w="3"/><text x="13.8596%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.02%)</title><rect x="13.6096%" y="597" width="0.0236%" height="15" fill="rgb(237,120,30)" fg:x="1731" fg:w="3"/><text x="13.8596%" y="607.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.03%)</title><rect x="13.6096%" y="693" width="0.0314%" height="15" fill="rgb(221,146,34)" fg:x="1731" fg:w="4"/><text x="13.8596%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="13.6096%" y="677" width="0.0314%" height="15" fill="rgb(242,55,13)" fg:x="1731" fg:w="4"/><text x="13.8596%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="13.6096%" y="661" width="0.0314%" height="15" fill="rgb(242,112,31)" fg:x="1731" fg:w="4"/><text x="13.8596%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="13.6489%" y="693" width="0.0157%" height="15" fill="rgb(249,192,27)" fg:x="1736" fg:w="2"/><text x="13.8989%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;quick_xml::events::Event,quick_xml::errors::Error&gt;&gt; (2 samples, 0.02%)</title><rect x="13.6646%" y="693" width="0.0157%" height="15" fill="rgb(208,204,44)" fg:x="1738" fg:w="2"/><text x="13.9146%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::Event&gt; (2 samples, 0.02%)</title><rect x="13.6646%" y="677" width="0.0157%" height="15" fill="rgb(208,93,54)" fg:x="1738" fg:w="2"/><text x="13.9146%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.02%)</title><rect x="13.7196%" y="549" width="0.0157%" height="15" fill="rgb(242,1,31)" fg:x="1745" fg:w="2"/><text x="13.9696%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="13.7196%" y="533" width="0.0157%" height="15" fill="rgb(241,83,25)" fg:x="1745" fg:w="2"/><text x="13.9696%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (8 samples, 0.06%)</title><rect x="13.6960%" y="677" width="0.0629%" height="15" fill="rgb(205,169,50)" fg:x="1742" fg:w="8"/><text x="13.9460%" y="687.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (8 samples, 0.06%)</title><rect x="13.6960%" y="661" width="0.0629%" height="15" fill="rgb(239,186,37)" fg:x="1742" fg:w="8"/><text x="13.9460%" y="671.50"></text></g><g><title>quick_xml::name::QName::index (8 samples, 0.06%)</title><rect x="13.6960%" y="645" width="0.0629%" height="15" fill="rgb(205,221,10)" fg:x="1742" fg:w="8"/><text x="13.9460%" y="655.50"></text></g><g><title>memchr::memchr::memchr (8 samples, 0.06%)</title><rect x="13.6960%" y="629" width="0.0629%" height="15" fill="rgb(218,196,15)" fg:x="1742" fg:w="8"/><text x="13.9460%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (8 samples, 0.06%)</title><rect x="13.6960%" y="613" width="0.0629%" height="15" fill="rgb(218,196,35)" fg:x="1742" fg:w="8"/><text x="13.9460%" y="623.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (5 samples, 0.04%)</title><rect x="13.7196%" y="597" width="0.0393%" height="15" fill="rgb(233,63,24)" fg:x="1745" fg:w="5"/><text x="13.9696%" y="607.50"></text></g><g><title>memchr::memchr::memchr_raw (5 samples, 0.04%)</title><rect x="13.7196%" y="581" width="0.0393%" height="15" fill="rgb(225,8,4)" fg:x="1745" fg:w="5"/><text x="13.9696%" y="591.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (5 samples, 0.04%)</title><rect x="13.7196%" y="565" width="0.0393%" height="15" fill="rgb(234,105,35)" fg:x="1745" fg:w="5"/><text x="13.9696%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.02%)</title><rect x="13.7354%" y="549" width="0.0236%" height="15" fill="rgb(236,21,32)" fg:x="1747" fg:w="3"/><text x="13.9854%" y="559.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (3 samples, 0.02%)</title><rect x="13.7354%" y="533" width="0.0236%" height="15" fill="rgb(228,109,6)" fg:x="1747" fg:w="3"/><text x="13.9854%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (2 samples, 0.02%)</title><rect x="13.7432%" y="517" width="0.0157%" height="15" fill="rgb(229,215,31)" fg:x="1748" fg:w="2"/><text x="13.9932%" y="527.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (11 samples, 0.09%)</title><rect x="13.6803%" y="693" width="0.0865%" height="15" fill="rgb(221,52,54)" fg:x="1740" fg:w="11"/><text x="13.9303%" y="703.50"></text></g><g><title>quick_xml::events::BytesText::unescape (4 samples, 0.03%)</title><rect x="13.7668%" y="693" width="0.0314%" height="15" fill="rgb(252,129,43)" fg:x="1751" fg:w="4"/><text x="14.0168%" y="703.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (4 samples, 0.03%)</title><rect x="13.7668%" y="677" width="0.0314%" height="15" fill="rgb(248,183,27)" fg:x="1751" fg:w="4"/><text x="14.0168%" y="687.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (3 samples, 0.02%)</title><rect x="13.7747%" y="661" width="0.0236%" height="15" fill="rgb(250,0,22)" fg:x="1752" fg:w="3"/><text x="14.0247%" y="671.50"></text></g><g><title>quick_xml::encoding::decode (2 samples, 0.02%)</title><rect x="13.7825%" y="645" width="0.0157%" height="15" fill="rgb(213,166,10)" fg:x="1753" fg:w="2"/><text x="14.0325%" y="655.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (6 samples, 0.05%)</title><rect x="13.7983%" y="693" width="0.0472%" height="15" fill="rgb(207,163,36)" fg:x="1755" fg:w="6"/><text x="14.0483%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (6 samples, 0.05%)</title><rect x="13.7983%" y="677" width="0.0472%" height="15" fill="rgb(208,122,22)" fg:x="1755" fg:w="6"/><text x="14.0483%" y="687.50"></text></g><g><title>calamine::xlsx::read_string (42 samples, 0.33%)</title><rect x="13.5388%" y="709" width="0.3302%" height="15" fill="rgb(207,104,49)" fg:x="1722" fg:w="42"/><text x="13.7888%" y="719.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (3 samples, 0.02%)</title><rect x="13.8454%" y="693" width="0.0236%" height="15" fill="rgb(248,211,50)" fg:x="1761" fg:w="3"/><text x="14.0954%" y="703.50"></text></g><g><title>quick_xml::events::BytesEnd::name (2 samples, 0.02%)</title><rect x="13.8690%" y="709" width="0.0157%" height="15" fill="rgb(217,13,45)" fg:x="1764" fg:w="2"/><text x="14.1190%" y="719.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (2 samples, 0.02%)</title><rect x="13.8847%" y="709" width="0.0157%" height="15" fill="rgb(211,216,49)" fg:x="1766" fg:w="2"/><text x="14.1347%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.02%)</title><rect x="13.8847%" y="693" width="0.0157%" height="15" fill="rgb(221,58,53)" fg:x="1766" fg:w="2"/><text x="14.1347%" y="703.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (2 samples, 0.02%)</title><rect x="13.8847%" y="677" width="0.0157%" height="15" fill="rgb(220,112,41)" fg:x="1766" fg:w="2"/><text x="14.1347%" y="687.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (5 samples, 0.04%)</title><rect x="13.9162%" y="677" width="0.0393%" height="15" fill="rgb(236,38,28)" fg:x="1770" fg:w="5"/><text x="14.1662%" y="687.50"></text></g><g><title>quick_xml::encoding::decode (4 samples, 0.03%)</title><rect x="13.9241%" y="661" width="0.0314%" height="15" fill="rgb(227,195,22)" fg:x="1771" fg:w="4"/><text x="14.1741%" y="671.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling_and_without_replacement (3 samples, 0.02%)</title><rect x="13.9319%" y="645" width="0.0236%" height="15" fill="rgb(214,55,33)" fg:x="1772" fg:w="3"/><text x="14.1819%" y="655.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (3 samples, 0.02%)</title><rect x="13.9319%" y="629" width="0.0236%" height="15" fill="rgb(248,80,13)" fg:x="1772" fg:w="3"/><text x="14.1819%" y="639.50"></text></g><g><title>encoding_rs::ascii::validate_ascii (2 samples, 0.02%)</title><rect x="13.9398%" y="613" width="0.0157%" height="15" fill="rgb(238,52,6)" fg:x="1773" fg:w="2"/><text x="14.1898%" y="623.50"></text></g><g><title>quick_xml::events::BytesText::unescape (11 samples, 0.09%)</title><rect x="13.9083%" y="709" width="0.0865%" height="15" fill="rgb(224,198,47)" fg:x="1769" fg:w="11"/><text x="14.1583%" y="719.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (11 samples, 0.09%)</title><rect x="13.9083%" y="693" width="0.0865%" height="15" fill="rgb(233,171,20)" fg:x="1769" fg:w="11"/><text x="14.1583%" y="703.50"></text></g><g><title>quick_xml::escapei::unescape_with (5 samples, 0.04%)</title><rect x="13.9555%" y="677" width="0.0393%" height="15" fill="rgb(241,30,25)" fg:x="1775" fg:w="5"/><text x="14.2055%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (5 samples, 0.04%)</title><rect x="13.9555%" y="661" width="0.0393%" height="15" fill="rgb(207,171,38)" fg:x="1775" fg:w="5"/><text x="14.2055%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.04%)</title><rect x="13.9555%" y="645" width="0.0393%" height="15" fill="rgb(234,70,1)" fg:x="1775" fg:w="5"/><text x="14.2055%" y="655.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="13.9634%" y="629" width="0.0314%" height="15" fill="rgb(232,178,18)" fg:x="1776" fg:w="4"/><text x="14.2134%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (4 samples, 0.03%)</title><rect x="13.9634%" y="613" width="0.0314%" height="15" fill="rgb(241,78,40)" fg:x="1776" fg:w="4"/><text x="14.2134%" y="623.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.03%)</title><rect x="13.9634%" y="597" width="0.0314%" height="15" fill="rgb(222,35,25)" fg:x="1776" fg:w="4"/><text x="14.2134%" y="607.50"></text></g><g><title>memchr::memchr::memchr2_raw (4 samples, 0.03%)</title><rect x="13.9634%" y="581" width="0.0314%" height="15" fill="rgb(207,92,16)" fg:x="1776" fg:w="4"/><text x="14.2134%" y="591.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (3 samples, 0.02%)</title><rect x="13.9712%" y="565" width="0.0236%" height="15" fill="rgb(216,59,51)" fg:x="1777" fg:w="3"/><text x="14.2212%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (2 samples, 0.02%)</title><rect x="13.9791%" y="549" width="0.0157%" height="15" fill="rgb(213,80,28)" fg:x="1778" fg:w="2"/><text x="14.2291%" y="559.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw (2 samples, 0.02%)</title><rect x="13.9791%" y="533" width="0.0157%" height="15" fill="rgb(220,93,7)" fg:x="1778" fg:w="2"/><text x="14.2291%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (2 samples, 0.02%)</title><rect x="13.9791%" y="517" width="0.0157%" height="15" fill="rgb(225,24,44)" fg:x="1778" fg:w="2"/><text x="14.2291%" y="527.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (2 samples, 0.02%)</title><rect x="14.0105%" y="677" width="0.0157%" height="15" fill="rgb(243,74,40)" fg:x="1782" fg:w="2"/><text x="14.2605%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.04%)</title><rect x="14.0577%" y="549" width="0.0393%" height="15" fill="rgb(228,39,7)" fg:x="1788" fg:w="5"/><text x="14.3077%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7 samples, 0.06%)</title><rect x="14.0498%" y="645" width="0.0550%" height="15" fill="rgb(227,79,8)" fg:x="1787" fg:w="7"/><text x="14.2998%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.06%)</title><rect x="14.0498%" y="629" width="0.0550%" height="15" fill="rgb(236,58,11)" fg:x="1787" fg:w="7"/><text x="14.2998%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.06%)</title><rect x="14.0498%" y="613" width="0.0550%" height="15" fill="rgb(249,63,35)" fg:x="1787" fg:w="7"/><text x="14.2998%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.06%)</title><rect x="14.0498%" y="597" width="0.0550%" height="15" fill="rgb(252,114,16)" fg:x="1787" fg:w="7"/><text x="14.2998%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.05%)</title><rect x="14.0577%" y="581" width="0.0472%" height="15" fill="rgb(254,151,24)" fg:x="1788" fg:w="6"/><text x="14.3077%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.05%)</title><rect x="14.0577%" y="565" width="0.0472%" height="15" fill="rgb(253,54,39)" fg:x="1788" fg:w="6"/><text x="14.3077%" y="575.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (9 samples, 0.07%)</title><rect x="14.0420%" y="661" width="0.0708%" height="15" fill="rgb(243,25,45)" fg:x="1786" fg:w="9"/><text x="14.2920%" y="671.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (104 samples, 0.82%)</title><rect x="13.3029%" y="725" width="0.8177%" height="15" fill="rgb(234,134,9)" fg:x="1692" fg:w="104"/><text x="13.5529%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (16 samples, 0.13%)</title><rect x="13.9948%" y="709" width="0.1258%" height="15" fill="rgb(227,166,31)" fg:x="1780" fg:w="16"/><text x="14.2448%" y="719.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (15 samples, 0.12%)</title><rect x="14.0027%" y="693" width="0.1179%" height="15" fill="rgb(245,143,41)" fg:x="1781" fg:w="15"/><text x="14.2527%" y="703.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (12 samples, 0.09%)</title><rect x="14.0263%" y="677" width="0.0943%" height="15" fill="rgb(238,181,32)" fg:x="1784" fg:w="12"/><text x="14.2763%" y="687.50"></text></g><g><title>quick_xml::events::BytesEnd::local_name (2 samples, 0.02%)</title><rect x="14.1363%" y="725" width="0.0157%" height="15" fill="rgb(224,113,18)" fg:x="1798" fg:w="2"/><text x="14.3863%" y="735.50"></text></g><g><title>quick_xml::events::BytesStart::attributes (2 samples, 0.02%)</title><rect x="14.1521%" y="725" width="0.0157%" height="15" fill="rgb(240,229,28)" fg:x="1800" fg:w="2"/><text x="14.4021%" y="735.50"></text></g><g><title>quick_xml::events::attributes::Attributes::wrap (2 samples, 0.02%)</title><rect x="14.1521%" y="709" width="0.0157%" height="15" fill="rgb(250,185,3)" fg:x="1800" fg:w="2"/><text x="14.4021%" y="719.50"></text></g><g><title>quick_xml::events::attributes::IterState::new (2 samples, 0.02%)</title><rect x="14.1521%" y="693" width="0.0157%" height="15" fill="rgb(212,59,25)" fg:x="1800" fg:w="2"/><text x="14.4021%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.03%)</title><rect x="14.1678%" y="709" width="0.0314%" height="15" fill="rgb(221,87,20)" fg:x="1802" fg:w="4"/><text x="14.4178%" y="719.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (4 samples, 0.03%)</title><rect x="14.1678%" y="693" width="0.0314%" height="15" fill="rgb(213,74,28)" fg:x="1802" fg:w="4"/><text x="14.4178%" y="703.50"></text></g><g><title>quick_xml::name::QName::index (4 samples, 0.03%)</title><rect x="14.1678%" y="677" width="0.0314%" height="15" fill="rgb(224,132,34)" fg:x="1802" fg:w="4"/><text x="14.4178%" y="687.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.03%)</title><rect x="14.1678%" y="661" width="0.0314%" height="15" fill="rgb(222,101,24)" fg:x="1802" fg:w="4"/><text x="14.4178%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.03%)</title><rect x="14.1678%" y="645" width="0.0314%" height="15" fill="rgb(254,142,4)" fg:x="1802" fg:w="4"/><text x="14.4178%" y="655.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.02%)</title><rect x="14.1756%" y="629" width="0.0236%" height="15" fill="rgb(230,229,49)" fg:x="1803" fg:w="3"/><text x="14.4256%" y="639.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="14.1756%" y="613" width="0.0236%" height="15" fill="rgb(238,70,47)" fg:x="1803" fg:w="3"/><text x="14.4256%" y="623.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="14.1756%" y="597" width="0.0236%" height="15" fill="rgb(231,160,17)" fg:x="1803" fg:w="3"/><text x="14.4256%" y="607.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="14.1835%" y="581" width="0.0157%" height="15" fill="rgb(218,68,53)" fg:x="1804" fg:w="2"/><text x="14.4335%" y="591.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (2 samples, 0.02%)</title><rect x="14.1835%" y="565" width="0.0157%" height="15" fill="rgb(236,111,10)" fg:x="1804" fg:w="2"/><text x="14.4335%" y="575.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (5 samples, 0.04%)</title><rect x="14.1678%" y="725" width="0.0393%" height="15" fill="rgb(224,34,41)" fg:x="1802" fg:w="5"/><text x="14.4178%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (7 samples, 0.06%)</title><rect x="14.2543%" y="677" width="0.0550%" height="15" fill="rgb(241,118,19)" fg:x="1813" fg:w="7"/><text x="14.5043%" y="687.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.03%)</title><rect x="14.2779%" y="661" width="0.0314%" height="15" fill="rgb(238,129,25)" fg:x="1816" fg:w="4"/><text x="14.5279%" y="671.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (4 samples, 0.03%)</title><rect x="14.2779%" y="645" width="0.0314%" height="15" fill="rgb(238,22,31)" fg:x="1816" fg:w="4"/><text x="14.5279%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.02%)</title><rect x="14.2936%" y="629" width="0.0157%" height="15" fill="rgb(222,174,48)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="639.50"></text></g><g><title>std::io::Read::read_buf (2 samples, 0.02%)</title><rect x="14.2936%" y="613" width="0.0157%" height="15" fill="rgb(206,152,40)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="623.50"></text></g><g><title>std::io::default_read_buf (2 samples, 0.02%)</title><rect x="14.2936%" y="597" width="0.0157%" height="15" fill="rgb(218,99,54)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="607.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (2 samples, 0.02%)</title><rect x="14.2936%" y="581" width="0.0157%" height="15" fill="rgb(220,174,26)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="591.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="14.2936%" y="565" width="0.0157%" height="15" fill="rgb(245,116,9)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="575.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="14.2936%" y="549" width="0.0157%" height="15" fill="rgb(209,72,35)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="559.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="14.2936%" y="533" width="0.0157%" height="15" fill="rgb(226,126,21)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="543.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="14.2936%" y="517" width="0.0157%" height="15" fill="rgb(227,192,1)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="527.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="14.2936%" y="501" width="0.0157%" height="15" fill="rgb(237,180,29)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="511.50"></text></g><g><title>flate2::zio::read (2 samples, 0.02%)</title><rect x="14.2936%" y="485" width="0.0157%" height="15" fill="rgb(230,197,35)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="495.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (2 samples, 0.02%)</title><rect x="14.2936%" y="469" width="0.0157%" height="15" fill="rgb(246,193,31)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="479.50"></text></g><g><title>flate2::mem::Decompress::decompress (2 samples, 0.02%)</title><rect x="14.2936%" y="453" width="0.0157%" height="15" fill="rgb(241,36,4)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="463.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2 samples, 0.02%)</title><rect x="14.2936%" y="437" width="0.0157%" height="15" fill="rgb(241,130,17)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="447.50"></text></g><g><title>inflate (2 samples, 0.02%)</title><rect x="14.2936%" y="421" width="0.0157%" height="15" fill="rgb(206,137,32)" fg:x="1818" fg:w="2"/><text x="14.5436%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="14.3329%" y="661" width="0.0314%" height="15" fill="rgb(237,228,51)" fg:x="1823" fg:w="4"/><text x="14.5829%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="14.3408%" y="645" width="0.0236%" height="15" fill="rgb(243,6,42)" fg:x="1824" fg:w="3"/><text x="14.5908%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.02%)</title><rect x="14.3486%" y="629" width="0.0157%" height="15" fill="rgb(251,74,28)" fg:x="1825" fg:w="2"/><text x="14.5986%" y="639.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 0.02%)</title><rect x="14.3486%" y="613" width="0.0157%" height="15" fill="rgb(218,20,49)" fg:x="1825" fg:w="2"/><text x="14.5986%" y="623.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (11 samples, 0.09%)</title><rect x="14.3093%" y="677" width="0.0865%" height="15" fill="rgb(238,28,14)" fg:x="1820" fg:w="11"/><text x="14.5593%" y="687.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.02%)</title><rect x="14.3722%" y="661" width="0.0236%" height="15" fill="rgb(229,40,46)" fg:x="1828" fg:w="3"/><text x="14.6222%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.02%)</title><rect x="14.3722%" y="645" width="0.0236%" height="15" fill="rgb(244,195,20)" fg:x="1828" fg:w="3"/><text x="14.6222%" y="655.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="14.3801%" y="629" width="0.0157%" height="15" fill="rgb(253,56,35)" fg:x="1829" fg:w="2"/><text x="14.6301%" y="639.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="14.3801%" y="613" width="0.0157%" height="15" fill="rgb(210,149,44)" fg:x="1829" fg:w="2"/><text x="14.6301%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="14.4194%" y="661" width="0.0236%" height="15" fill="rgb(240,135,12)" fg:x="1834" fg:w="3"/><text x="14.6694%" y="671.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="14.4272%" y="645" width="0.0157%" height="15" fill="rgb(251,24,50)" fg:x="1835" fg:w="2"/><text x="14.6772%" y="655.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="14.4272%" y="629" width="0.0157%" height="15" fill="rgb(243,200,47)" fg:x="1835" fg:w="2"/><text x="14.6772%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.02%)</title><rect x="14.4430%" y="661" width="0.0236%" height="15" fill="rgb(224,166,26)" fg:x="1837" fg:w="3"/><text x="14.6930%" y="671.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (2 samples, 0.02%)</title><rect x="14.4508%" y="645" width="0.0157%" height="15" fill="rgb(233,0,47)" fg:x="1838" fg:w="2"/><text x="14.7008%" y="655.50"></text></g><g><title>inflate_fast (5 samples, 0.04%)</title><rect x="14.4665%" y="405" width="0.0393%" height="15" fill="rgb(253,80,5)" fg:x="1840" fg:w="5"/><text x="14.7165%" y="415.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.07%)</title><rect x="14.4665%" y="517" width="0.0708%" height="15" fill="rgb(214,133,25)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="527.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.07%)</title><rect x="14.4665%" y="501" width="0.0708%" height="15" fill="rgb(209,27,14)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="511.50"></text></g><g><title>flate2::zio::read (9 samples, 0.07%)</title><rect x="14.4665%" y="485" width="0.0708%" height="15" fill="rgb(219,102,51)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="495.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (9 samples, 0.07%)</title><rect x="14.4665%" y="469" width="0.0708%" height="15" fill="rgb(237,18,16)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="479.50"></text></g><g><title>flate2::mem::Decompress::decompress (9 samples, 0.07%)</title><rect x="14.4665%" y="453" width="0.0708%" height="15" fill="rgb(241,85,17)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="463.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (9 samples, 0.07%)</title><rect x="14.4665%" y="437" width="0.0708%" height="15" fill="rgb(236,90,42)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="447.50"></text></g><g><title>inflate (9 samples, 0.07%)</title><rect x="14.4665%" y="421" width="0.0708%" height="15" fill="rgb(249,57,21)" fg:x="1840" fg:w="9"/><text x="14.7165%" y="431.50"></text></g><g><title>updatewindow (3 samples, 0.02%)</title><rect x="14.5137%" y="405" width="0.0236%" height="15" fill="rgb(243,12,36)" fg:x="1846" fg:w="3"/><text x="14.7637%" y="415.50"></text></g><g><title>zmemcpy (3 samples, 0.02%)</title><rect x="14.5137%" y="389" width="0.0236%" height="15" fill="rgb(253,128,47)" fg:x="1846" fg:w="3"/><text x="14.7637%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (12 samples, 0.09%)</title><rect x="14.4665%" y="661" width="0.0943%" height="15" fill="rgb(207,33,20)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="671.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (12 samples, 0.09%)</title><rect x="14.4665%" y="645" width="0.0943%" height="15" fill="rgb(233,215,35)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (12 samples, 0.09%)</title><rect x="14.4665%" y="629" width="0.0943%" height="15" fill="rgb(249,188,52)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="639.50"></text></g><g><title>std::io::Read::read_buf (12 samples, 0.09%)</title><rect x="14.4665%" y="613" width="0.0943%" height="15" fill="rgb(225,12,32)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="623.50"></text></g><g><title>std::io::default_read_buf (12 samples, 0.09%)</title><rect x="14.4665%" y="597" width="0.0943%" height="15" fill="rgb(247,98,14)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="607.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (12 samples, 0.09%)</title><rect x="14.4665%" y="581" width="0.0943%" height="15" fill="rgb(247,219,48)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="591.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (12 samples, 0.09%)</title><rect x="14.4665%" y="565" width="0.0943%" height="15" fill="rgb(253,60,48)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="575.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (12 samples, 0.09%)</title><rect x="14.4665%" y="549" width="0.0943%" height="15" fill="rgb(245,15,52)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="559.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (12 samples, 0.09%)</title><rect x="14.4665%" y="533" width="0.0943%" height="15" fill="rgb(220,133,28)" fg:x="1840" fg:w="12"/><text x="14.7165%" y="543.50"></text></g><g><title>crc32fast::Hasher::update (3 samples, 0.02%)</title><rect x="14.5373%" y="517" width="0.0236%" height="15" fill="rgb(217,180,4)" fg:x="1849" fg:w="3"/><text x="14.7873%" y="527.50"></text></g><g><title>crc32fast::baseline::State::update (3 samples, 0.02%)</title><rect x="14.5373%" y="501" width="0.0236%" height="15" fill="rgb(251,24,1)" fg:x="1849" fg:w="3"/><text x="14.7873%" y="511.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (3 samples, 0.02%)</title><rect x="14.5373%" y="485" width="0.0236%" height="15" fill="rgb(212,185,49)" fg:x="1849" fg:w="3"/><text x="14.7873%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.04%)</title><rect x="14.5609%" y="661" width="0.0393%" height="15" fill="rgb(215,175,22)" fg:x="1852" fg:w="5"/><text x="14.8109%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="14.5766%" y="645" width="0.0236%" height="15" fill="rgb(250,205,14)" fg:x="1854" fg:w="3"/><text x="14.8266%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="14.5766%" y="629" width="0.0236%" height="15" fill="rgb(225,211,22)" fg:x="1854" fg:w="3"/><text x="14.8266%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="14.5845%" y="613" width="0.0157%" height="15" fill="rgb(251,179,42)" fg:x="1855" fg:w="2"/><text x="14.8345%" y="623.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (4 samples, 0.03%)</title><rect x="14.6474%" y="613" width="0.0314%" height="15" fill="rgb(208,216,51)" fg:x="1863" fg:w="4"/><text x="14.8974%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.02%)</title><rect x="14.7260%" y="565" width="0.0157%" height="15" fill="rgb(235,36,11)" fg:x="1873" fg:w="2"/><text x="14.9760%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="14.7260%" y="549" width="0.0157%" height="15" fill="rgb(213,189,28)" fg:x="1873" fg:w="2"/><text x="14.9760%" y="559.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (3 samples, 0.02%)</title><rect x="14.7653%" y="549" width="0.0236%" height="15" fill="rgb(227,203,42)" fg:x="1878" fg:w="3"/><text x="15.0153%" y="559.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (2 samples, 0.02%)</title><rect x="14.7732%" y="533" width="0.0157%" height="15" fill="rgb(244,72,36)" fg:x="1879" fg:w="2"/><text x="15.0232%" y="543.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.32%)</title><rect x="14.6238%" y="645" width="0.3224%" height="15" fill="rgb(213,53,17)" fg:x="1860" fg:w="41"/><text x="14.8738%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (41 samples, 0.32%)</title><rect x="14.6238%" y="629" width="0.3224%" height="15" fill="rgb(207,167,3)" fg:x="1860" fg:w="41"/><text x="14.8738%" y="639.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (33 samples, 0.26%)</title><rect x="14.6867%" y="613" width="0.2595%" height="15" fill="rgb(216,98,30)" fg:x="1868" fg:w="33"/><text x="14.9367%" y="623.50"></text></g><g><title>memchr::memchr::memchr3_raw (30 samples, 0.24%)</title><rect x="14.7103%" y="597" width="0.2359%" height="15" fill="rgb(236,123,15)" fg:x="1871" fg:w="30"/><text x="14.9603%" y="607.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (28 samples, 0.22%)</title><rect x="14.7260%" y="581" width="0.2201%" height="15" fill="rgb(248,81,50)" fg:x="1873" fg:w="28"/><text x="14.9760%" y="591.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (26 samples, 0.20%)</title><rect x="14.7417%" y="565" width="0.2044%" height="15" fill="rgb(214,120,4)" fg:x="1875" fg:w="26"/><text x="14.9917%" y="575.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (20 samples, 0.16%)</title><rect x="14.7889%" y="549" width="0.1572%" height="15" fill="rgb(208,179,34)" fg:x="1881" fg:w="20"/><text x="15.0389%" y="559.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (17 samples, 0.13%)</title><rect x="14.8125%" y="533" width="0.1337%" height="15" fill="rgb(227,140,7)" fg:x="1884" fg:w="17"/><text x="15.0625%" y="543.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (15 samples, 0.12%)</title><rect x="14.8282%" y="517" width="0.1179%" height="15" fill="rgb(214,22,6)" fg:x="1886" fg:w="15"/><text x="15.0782%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (14 samples, 0.11%)</title><rect x="14.8361%" y="501" width="0.1101%" height="15" fill="rgb(207,137,27)" fg:x="1887" fg:w="14"/><text x="15.0861%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (13 samples, 0.10%)</title><rect x="14.8439%" y="485" width="0.1022%" height="15" fill="rgb(210,8,46)" fg:x="1888" fg:w="13"/><text x="15.0939%" y="495.50"></text></g><g><title>core::core_arch::simd::i8x16::new (7 samples, 0.06%)</title><rect x="14.8911%" y="469" width="0.0550%" height="15" fill="rgb(240,16,54)" fg:x="1894" fg:w="7"/><text x="15.1411%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="14.9461%" y="645" width="0.0157%" height="15" fill="rgb(211,209,29)" fg:x="1901" fg:w="2"/><text x="15.1961%" y="655.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="14.9461%" y="629" width="0.0157%" height="15" fill="rgb(226,228,24)" fg:x="1901" fg:w="2"/><text x="15.1961%" y="639.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (74 samples, 0.58%)</title><rect x="14.3958%" y="677" width="0.5818%" height="15" fill="rgb(222,84,9)" fg:x="1831" fg:w="74"/><text x="14.6458%" y="687.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (48 samples, 0.38%)</title><rect x="14.6002%" y="661" width="0.3774%" height="15" fill="rgb(234,203,30)" fg:x="1857" fg:w="48"/><text x="14.8502%" y="671.50"></text></g><g><title>memchr::memchr::memchr3_iter (2 samples, 0.02%)</title><rect x="14.9619%" y="645" width="0.0157%" height="15" fill="rgb(238,109,14)" fg:x="1903" fg:w="2"/><text x="15.2119%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.02%)</title><rect x="14.9776%" y="661" width="0.0157%" height="15" fill="rgb(233,206,34)" fg:x="1905" fg:w="2"/><text x="15.2276%" y="671.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (3 samples, 0.02%)</title><rect x="14.9776%" y="677" width="0.0236%" height="15" fill="rgb(220,167,47)" fg:x="1905" fg:w="3"/><text x="15.2276%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (3 samples, 0.02%)</title><rect x="15.0169%" y="661" width="0.0236%" height="15" fill="rgb(238,105,10)" fg:x="1910" fg:w="3"/><text x="15.2669%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="15.0641%" y="645" width="0.0314%" height="15" fill="rgb(213,227,17)" fg:x="1916" fg:w="4"/><text x="15.3141%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (10 samples, 0.08%)</title><rect x="15.0405%" y="661" width="0.0786%" height="15" fill="rgb(217,132,38)" fg:x="1913" fg:w="10"/><text x="15.2905%" y="671.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start::{{closure}} (3 samples, 0.02%)</title><rect x="15.0955%" y="645" width="0.0236%" height="15" fill="rgb(242,146,4)" fg:x="1920" fg:w="3"/><text x="15.3455%" y="655.50"></text></g><g><title>quick_xml::reader::is_whitespace (2 samples, 0.02%)</title><rect x="15.1034%" y="629" width="0.0157%" height="15" fill="rgb(212,61,9)" fg:x="1921" fg:w="2"/><text x="15.3534%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.03%)</title><rect x="15.1348%" y="661" width="0.0314%" height="15" fill="rgb(247,126,22)" fg:x="1925" fg:w="4"/><text x="15.3848%" y="671.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (122 samples, 0.96%)</title><rect x="14.2307%" y="693" width="0.9592%" height="15" fill="rgb(220,196,2)" fg:x="1810" fg:w="122"/><text x="14.4807%" y="703.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (24 samples, 0.19%)</title><rect x="15.0012%" y="677" width="0.1887%" height="15" fill="rgb(208,46,4)" fg:x="1908" fg:w="24"/><text x="15.2512%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="15.1663%" y="661" width="0.0236%" height="15" fill="rgb(252,104,46)" fg:x="1929" fg:w="3"/><text x="15.4163%" y="671.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.03%)</title><rect x="15.2135%" y="661" width="0.0314%" height="15" fill="rgb(237,152,48)" fg:x="1935" fg:w="4"/><text x="15.4635%" y="671.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.03%)</title><rect x="15.2135%" y="645" width="0.0314%" height="15" fill="rgb(221,59,37)" fg:x="1935" fg:w="4"/><text x="15.4635%" y="655.50"></text></g><g><title>core::cmp::min (4 samples, 0.03%)</title><rect x="15.2135%" y="629" width="0.0314%" height="15" fill="rgb(209,202,51)" fg:x="1935" fg:w="4"/><text x="15.4635%" y="639.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.03%)</title><rect x="15.2135%" y="613" width="0.0314%" height="15" fill="rgb(228,81,30)" fg:x="1935" fg:w="4"/><text x="15.4635%" y="623.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.03%)</title><rect x="15.2135%" y="597" width="0.0314%" height="15" fill="rgb(227,42,39)" fg:x="1935" fg:w="4"/><text x="15.4635%" y="607.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (12 samples, 0.09%)</title><rect x="15.1899%" y="693" width="0.0943%" height="15" fill="rgb(221,26,2)" fg:x="1932" fg:w="12"/><text x="15.4399%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (12 samples, 0.09%)</title><rect x="15.1899%" y="677" width="0.0943%" height="15" fill="rgb(254,61,31)" fg:x="1932" fg:w="12"/><text x="15.4399%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (5 samples, 0.04%)</title><rect x="15.2449%" y="661" width="0.0393%" height="15" fill="rgb(222,173,38)" fg:x="1939" fg:w="5"/><text x="15.4949%" y="671.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}}::{{closure}} (340 samples, 2.67%)</title><rect x="12.6189%" y="773" width="2.6732%" height="15" fill="rgb(218,50,12)" fg:x="1605" fg:w="340"/><text x="12.8689%" y="783.50">&lt;c..</text></g><g><title>calamine::xlsx::read_sheet_data (340 samples, 2.67%)</title><rect x="12.6189%" y="757" width="2.6732%" height="15" fill="rgb(223,88,40)" fg:x="1605" fg:w="340"/><text x="12.8689%" y="767.50">ca..</text></g><g><title>calamine::xlsx::read_sheet (340 samples, 2.67%)</title><rect x="12.6189%" y="741" width="2.6732%" height="15" fill="rgb(237,54,19)" fg:x="1605" fg:w="340"/><text x="12.8689%" y="751.50">ca..</text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (138 samples, 1.08%)</title><rect x="14.2071%" y="725" width="1.0850%" height="15" fill="rgb(251,129,25)" fg:x="1807" fg:w="138"/><text x="14.4571%" y="735.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (138 samples, 1.08%)</title><rect x="14.2071%" y="709" width="1.0850%" height="15" fill="rgb(238,97,19)" fg:x="1807" fg:w="138"/><text x="14.4571%" y="719.50"></text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (343 samples, 2.70%)</title><rect x="12.6189%" y="981" width="2.6968%" height="15" fill="rgb(240,169,18)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="991.50">&lt;c..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets (343 samples, 2.70%)</title><rect x="12.6189%" y="965" width="2.6968%" height="15" fill="rgb(230,187,49)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="975.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (343 samples, 2.70%)</title><rect x="12.6189%" y="949" width="2.6968%" height="15" fill="rgb(209,44,26)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="959.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (343 samples, 2.70%)</title><rect x="12.6189%" y="933" width="2.6968%" height="15" fill="rgb(244,0,6)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="943.50">&lt;a..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (343 samples, 2.70%)</title><rect x="12.6189%" y="917" width="2.6968%" height="15" fill="rgb(248,18,21)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="927.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (343 samples, 2.70%)</title><rect x="12.6189%" y="901" width="2.6968%" height="15" fill="rgb(245,180,19)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="911.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 2.70%)</title><rect x="12.6189%" y="885" width="2.6968%" height="15" fill="rgb(252,118,36)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="895.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (343 samples, 2.70%)</title><rect x="12.6189%" y="869" width="2.6968%" height="15" fill="rgb(210,224,19)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="879.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (343 samples, 2.70%)</title><rect x="12.6189%" y="853" width="2.6968%" height="15" fill="rgb(218,30,24)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="863.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (343 samples, 2.70%)</title><rect x="12.6189%" y="837" width="2.6968%" height="15" fill="rgb(219,75,50)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="847.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (343 samples, 2.70%)</title><rect x="12.6189%" y="821" width="2.6968%" height="15" fill="rgb(234,72,50)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="831.50">co..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheets::{{closure}} (343 samples, 2.70%)</title><rect x="12.6189%" y="805" width="2.6968%" height="15" fill="rgb(219,100,48)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="815.50">&lt;c..</text></g><g><title>calamine::xlsx::worksheet (343 samples, 2.70%)</title><rect x="12.6189%" y="789" width="2.6968%" height="15" fill="rgb(253,5,41)" fg:x="1605" fg:w="343"/><text x="12.8689%" y="799.50">ca..</text></g><g><title>calamine::Range&lt;T&gt;::from_sparse (3 samples, 0.02%)</title><rect x="15.2921%" y="773" width="0.0236%" height="15" fill="rgb(247,181,11)" fg:x="1945" fg:w="3"/><text x="15.5421%" y="783.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.02%)</title><rect x="15.2999%" y="757" width="0.0157%" height="15" fill="rgb(222,223,25)" fg:x="1946" fg:w="2"/><text x="15.5499%" y="767.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.02%)</title><rect x="15.2999%" y="741" width="0.0157%" height="15" fill="rgb(214,198,28)" fg:x="1946" fg:w="2"/><text x="15.5499%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="15.2999%" y="725" width="0.0157%" height="15" fill="rgb(230,46,43)" fg:x="1946" fg:w="2"/><text x="15.5499%" y="735.50"></text></g><g><title>axum::extract::multipart::Field::bytes::{{closure}} (6 samples, 0.05%)</title><rect x="15.3157%" y="981" width="0.0472%" height="15" fill="rgb(233,65,53)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="991.50"></text></g><g><title>multer::field::Field::bytes::{{closure}} (6 samples, 0.05%)</title><rect x="15.3157%" y="965" width="0.0472%" height="15" fill="rgb(221,121,27)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="975.50"></text></g><g><title>multer::field::Field::chunk::{{closure}} (6 samples, 0.05%)</title><rect x="15.3157%" y="949" width="0.0472%" height="15" fill="rgb(247,70,47)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="959.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="15.3157%" y="933" width="0.0472%" height="15" fill="rgb(228,85,35)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="943.50"></text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (6 samples, 0.05%)</title><rect x="15.3157%" y="917" width="0.0472%" height="15" fill="rgb(209,50,18)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="927.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (6 samples, 0.05%)</title><rect x="15.3157%" y="901" width="0.0472%" height="15" fill="rgb(250,19,35)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="911.50"></text></g><g><title>&lt;multer::field::Field as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.05%)</title><rect x="15.3157%" y="885" width="0.0472%" height="15" fill="rgb(253,107,29)" fg:x="1948" fg:w="6"/><text x="15.5657%" y="895.50"></text></g><g><title>multer::buffer::StreamBuffer::read_field_data (5 samples, 0.04%)</title><rect x="15.3235%" y="869" width="0.0393%" height="15" fill="rgb(252,179,29)" fg:x="1949" fg:w="5"/><text x="15.5735%" y="879.50"></text></g><g><title>memchr::memmem::find (4 samples, 0.03%)</title><rect x="15.3314%" y="853" width="0.0314%" height="15" fill="rgb(238,194,6)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="863.50"></text></g><g><title>memchr::memmem::Finder::find (4 samples, 0.03%)</title><rect x="15.3314%" y="837" width="0.0314%" height="15" fill="rgb(238,164,29)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="847.50"></text></g><g><title>memchr::memmem::searcher::Searcher::find (4 samples, 0.03%)</title><rect x="15.3314%" y="821" width="0.0314%" height="15" fill="rgb(224,25,9)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="831.50"></text></g><g><title>memchr::memmem::searcher::searcher_kind_two_way_with_prefilter (4 samples, 0.03%)</title><rect x="15.3314%" y="805" width="0.0314%" height="15" fill="rgb(244,153,23)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="815.50"></text></g><g><title>memchr::arch::all::twoway::Finder::find_with_prefilter (4 samples, 0.03%)</title><rect x="15.3314%" y="789" width="0.0314%" height="15" fill="rgb(212,203,14)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="799.50"></text></g><g><title>memchr::arch::all::twoway::Finder::find_large_imp (4 samples, 0.03%)</title><rect x="15.3314%" y="773" width="0.0314%" height="15" fill="rgb(220,164,20)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="783.50"></text></g><g><title>memchr::memmem::searcher::Pre::find (4 samples, 0.03%)</title><rect x="15.3314%" y="757" width="0.0314%" height="15" fill="rgb(222,203,48)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="767.50"></text></g><g><title>memchr::memmem::searcher::Prefilter::find (4 samples, 0.03%)</title><rect x="15.3314%" y="741" width="0.0314%" height="15" fill="rgb(215,159,22)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="751.50"></text></g><g><title>memchr::memmem::searcher::prefilter_kind_sse2 (4 samples, 0.03%)</title><rect x="15.3314%" y="725" width="0.0314%" height="15" fill="rgb(216,183,47)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="735.50"></text></g><g><title>memchr::arch::x86_64::sse2::packedpair::Finder::find_prefilter (4 samples, 0.03%)</title><rect x="15.3314%" y="709" width="0.0314%" height="15" fill="rgb(229,195,25)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="719.50"></text></g><g><title>memchr::arch::x86_64::sse2::packedpair::Finder::find_prefilter_impl (4 samples, 0.03%)</title><rect x="15.3314%" y="693" width="0.0314%" height="15" fill="rgb(224,132,51)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="703.50"></text></g><g><title>memchr::arch::generic::packedpair::Finder&lt;V&gt;::find_prefilter (4 samples, 0.03%)</title><rect x="15.3314%" y="677" width="0.0314%" height="15" fill="rgb(240,63,7)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="687.50"></text></g><g><title>memchr::arch::generic::packedpair::Finder&lt;V&gt;::find_prefilter_in_chunk (4 samples, 0.03%)</title><rect x="15.3314%" y="661" width="0.0314%" height="15" fill="rgb(249,182,41)" fg:x="1950" fg:w="4"/><text x="15.5814%" y="671.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (2 samples, 0.02%)</title><rect x="15.3471%" y="645" width="0.0157%" height="15" fill="rgb(243,47,26)" fg:x="1952" fg:w="2"/><text x="15.5971%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.02%)</title><rect x="15.3471%" y="629" width="0.0157%" height="15" fill="rgb(233,48,2)" fg:x="1952" fg:w="2"/><text x="15.5971%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (3 samples, 0.02%)</title><rect x="15.4179%" y="837" width="0.0236%" height="15" fill="rgb(244,165,34)" fg:x="1961" fg:w="3"/><text x="15.6679%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.02%)</title><rect x="15.4257%" y="821" width="0.0157%" height="15" fill="rgb(207,89,7)" fg:x="1962" fg:w="2"/><text x="15.6757%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.02%)</title><rect x="15.4257%" y="805" width="0.0157%" height="15" fill="rgb(244,117,36)" fg:x="1962" fg:w="2"/><text x="15.6757%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="15.4651%" y="805" width="0.0236%" height="15" fill="rgb(226,144,34)" fg:x="1967" fg:w="3"/><text x="15.7151%" y="815.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attribute as core::convert::From&lt;quick_xml::events::attributes::Attr&lt;&amp;[u8]&gt;&gt;&gt;::from (3 samples, 0.02%)</title><rect x="15.4651%" y="789" width="0.0236%" height="15" fill="rgb(213,23,19)" fg:x="1967" fg:w="3"/><text x="15.7151%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="15.5908%" y="725" width="0.0393%" height="15" fill="rgb(217,75,12)" fg:x="1983" fg:w="5"/><text x="15.8408%" y="735.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (2 samples, 0.02%)</title><rect x="15.6302%" y="709" width="0.0157%" height="15" fill="rgb(224,159,17)" fg:x="1988" fg:w="2"/><text x="15.8802%" y="719.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (2 samples, 0.02%)</title><rect x="15.6302%" y="693" width="0.0157%" height="15" fill="rgb(217,118,1)" fg:x="1988" fg:w="2"/><text x="15.8802%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.02%)</title><rect x="15.6302%" y="677" width="0.0157%" height="15" fill="rgb(232,180,48)" fg:x="1988" fg:w="2"/><text x="15.8802%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="15.5673%" y="757" width="0.0865%" height="15" fill="rgb(230,27,33)" fg:x="1980" fg:w="11"/><text x="15.8173%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10 samples, 0.08%)</title><rect x="15.5751%" y="741" width="0.0786%" height="15" fill="rgb(205,31,21)" fg:x="1981" fg:w="10"/><text x="15.8251%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (3 samples, 0.02%)</title><rect x="15.6302%" y="725" width="0.0236%" height="15" fill="rgb(253,59,4)" fg:x="1988" fg:w="3"/><text x="15.8802%" y="735.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="15.6537%" y="757" width="0.0314%" height="15" fill="rgb(224,201,9)" fg:x="1991" fg:w="4"/><text x="15.9037%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (26 samples, 0.20%)</title><rect x="15.5201%" y="789" width="0.2044%" height="15" fill="rgb(229,206,30)" fg:x="1974" fg:w="26"/><text x="15.7701%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24 samples, 0.19%)</title><rect x="15.5358%" y="773" width="0.1887%" height="15" fill="rgb(212,67,47)" fg:x="1976" fg:w="24"/><text x="15.7858%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (5 samples, 0.04%)</title><rect x="15.6852%" y="757" width="0.0393%" height="15" fill="rgb(211,96,50)" fg:x="1995" fg:w="5"/><text x="15.9352%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (4 samples, 0.03%)</title><rect x="15.7245%" y="789" width="0.0314%" height="15" fill="rgb(252,114,18)" fg:x="2000" fg:w="4"/><text x="15.9745%" y="799.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (2 samples, 0.02%)</title><rect x="15.7402%" y="773" width="0.0157%" height="15" fill="rgb(223,58,37)" fg:x="2002" fg:w="2"/><text x="15.9902%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (2 samples, 0.02%)</title><rect x="15.7402%" y="757" width="0.0157%" height="15" fill="rgb(237,70,4)" fg:x="2002" fg:w="2"/><text x="15.9902%" y="767.50"></text></g><g><title>core::cmp::max (4 samples, 0.03%)</title><rect x="15.7638%" y="725" width="0.0314%" height="15" fill="rgb(244,85,46)" fg:x="2005" fg:w="4"/><text x="16.0138%" y="735.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.02%)</title><rect x="15.7717%" y="709" width="0.0236%" height="15" fill="rgb(223,39,52)" fg:x="2006" fg:w="3"/><text x="16.0217%" y="719.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="15.7795%" y="693" width="0.0157%" height="15" fill="rgb(218,200,14)" fg:x="2007" fg:w="2"/><text x="16.0295%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.05%)</title><rect x="15.7560%" y="741" width="0.0472%" height="15" fill="rgb(208,171,16)" fg:x="2004" fg:w="6"/><text x="16.0060%" y="751.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (7 samples, 0.06%)</title><rect x="15.7560%" y="789" width="0.0550%" height="15" fill="rgb(234,200,18)" fg:x="2004" fg:w="7"/><text x="16.0060%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.06%)</title><rect x="15.7560%" y="773" width="0.0550%" height="15" fill="rgb(228,45,11)" fg:x="2004" fg:w="7"/><text x="16.0060%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.06%)</title><rect x="15.7560%" y="757" width="0.0550%" height="15" fill="rgb(237,182,11)" fg:x="2004" fg:w="7"/><text x="16.0060%" y="767.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.35%)</title><rect x="15.4651%" y="821" width="0.3538%" height="15" fill="rgb(241,175,49)" fg:x="1967" fg:w="45"/><text x="15.7151%" y="831.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (42 samples, 0.33%)</title><rect x="15.4886%" y="805" width="0.3302%" height="15" fill="rgb(247,38,35)" fg:x="1970" fg:w="42"/><text x="15.7386%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="15.8267%" y="741" width="0.0157%" height="15" fill="rgb(228,39,49)" fg:x="2013" fg:w="2"/><text x="16.0767%" y="751.50"></text></g><g><title>calamine::xlsx::get_attribute (52 samples, 0.41%)</title><rect x="15.4415%" y="837" width="0.4088%" height="15" fill="rgb(226,101,26)" fg:x="1964" fg:w="52"/><text x="15.6915%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::Attributes&gt; (3 samples, 0.02%)</title><rect x="15.8267%" y="821" width="0.0236%" height="15" fill="rgb(206,141,19)" fg:x="2013" fg:w="3"/><text x="16.0767%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;quick_xml::events::attributes::IterState&gt; (3 samples, 0.02%)</title><rect x="15.8267%" y="805" width="0.0236%" height="15" fill="rgb(211,200,13)" fg:x="2013" fg:w="3"/><text x="16.0767%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="15.8267%" y="789" width="0.0236%" height="15" fill="rgb(241,121,6)" fg:x="2013" fg:w="3"/><text x="16.0767%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::ops::range::Range&lt;usize&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="15.8267%" y="773" width="0.0236%" height="15" fill="rgb(234,221,29)" fg:x="2013" fg:w="3"/><text x="16.0767%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="15.8267%" y="757" width="0.0236%" height="15" fill="rgb(229,136,5)" fg:x="2013" fg:w="3"/><text x="16.0767%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="15.8896%" y="805" width="0.0157%" height="15" fill="rgb(238,36,11)" fg:x="2021" fg:w="2"/><text x="16.1396%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.02%)</title><rect x="15.8896%" y="789" width="0.0157%" height="15" fill="rgb(251,55,41)" fg:x="2021" fg:w="2"/><text x="16.1396%" y="799.50"></text></g><g><title>calamine::xlsx::get_row_and_optional_column (8 samples, 0.06%)</title><rect x="15.8660%" y="821" width="0.0629%" height="15" fill="rgb(242,34,40)" fg:x="2018" fg:w="8"/><text x="16.1160%" y="831.50"></text></g><g><title>calamine::xlsx::get_row_column (11 samples, 0.09%)</title><rect x="15.8503%" y="837" width="0.0865%" height="15" fill="rgb(215,42,17)" fg:x="2016" fg:w="11"/><text x="16.1003%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="15.9604%" y="821" width="0.0157%" height="15" fill="rgb(207,44,46)" fg:x="2030" fg:w="2"/><text x="16.2104%" y="831.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.03%)</title><rect x="15.9761%" y="821" width="0.0314%" height="15" fill="rgb(211,206,28)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="15.9761%" y="805" width="0.0314%" height="15" fill="rgb(237,167,16)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="15.9761%" y="789" width="0.0314%" height="15" fill="rgb(233,66,6)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.03%)</title><rect x="15.9761%" y="773" width="0.0314%" height="15" fill="rgb(246,123,29)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="15.9761%" y="757" width="0.0314%" height="15" fill="rgb(209,62,40)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="15.9761%" y="741" width="0.0314%" height="15" fill="rgb(218,4,25)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="15.9761%" y="725" width="0.0314%" height="15" fill="rgb(253,91,49)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="15.9761%" y="709" width="0.0314%" height="15" fill="rgb(228,155,29)" fg:x="2032" fg:w="4"/><text x="16.2261%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="16.0075%" y="821" width="0.0236%" height="15" fill="rgb(243,57,37)" fg:x="2036" fg:w="3"/><text x="16.2575%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="16.2591%" y="693" width="0.0393%" height="15" fill="rgb(244,167,17)" fg:x="2068" fg:w="5"/><text x="16.5091%" y="703.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.02%)</title><rect x="16.2749%" y="677" width="0.0236%" height="15" fill="rgb(207,181,38)" fg:x="2070" fg:w="3"/><text x="16.5249%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.14%)</title><rect x="16.2120%" y="725" width="0.1415%" height="15" fill="rgb(211,8,23)" fg:x="2062" fg:w="18"/><text x="16.4620%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (18 samples, 0.14%)</title><rect x="16.2120%" y="709" width="0.1415%" height="15" fill="rgb(235,11,44)" fg:x="2062" fg:w="18"/><text x="16.4620%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeFrom&lt;A&gt;&gt;::next (7 samples, 0.06%)</title><rect x="16.2985%" y="693" width="0.0550%" height="15" fill="rgb(248,18,52)" fg:x="2073" fg:w="7"/><text x="16.5485%" y="703.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward (4 samples, 0.03%)</title><rect x="16.3220%" y="677" width="0.0314%" height="15" fill="rgb(208,4,7)" fg:x="2076" fg:w="4"/><text x="16.5720%" y="687.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_checked (3 samples, 0.02%)</title><rect x="16.3299%" y="661" width="0.0236%" height="15" fill="rgb(240,17,39)" fg:x="2077" fg:w="3"/><text x="16.5799%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.02%)</title><rect x="16.3299%" y="645" width="0.0236%" height="15" fill="rgb(207,170,3)" fg:x="2077" fg:w="3"/><text x="16.5799%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.02%)</title><rect x="16.3299%" y="629" width="0.0236%" height="15" fill="rgb(236,100,52)" fg:x="2077" fg:w="3"/><text x="16.5799%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 0.27%)</title><rect x="16.1648%" y="741" width="0.2673%" height="15" fill="rgb(246,78,51)" fg:x="2056" fg:w="34"/><text x="16.4148%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (9 samples, 0.07%)</title><rect x="16.3613%" y="725" width="0.0708%" height="15" fill="rgb(211,17,15)" fg:x="2081" fg:w="9"/><text x="16.6113%" y="735.50"></text></g><g><title>quick_xml::events::attributes::IterState::next::{{closure}} (7 samples, 0.06%)</title><rect x="16.3771%" y="709" width="0.0550%" height="15" fill="rgb(209,59,46)" fg:x="2083" fg:w="7"/><text x="16.6271%" y="719.50"></text></g><g><title>quick_xml::reader::is_whitespace (4 samples, 0.03%)</title><rect x="16.4007%" y="693" width="0.0314%" height="15" fill="rgb(210,92,25)" fg:x="2086" fg:w="4"/><text x="16.6507%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (39 samples, 0.31%)</title><rect x="16.1412%" y="757" width="0.3066%" height="15" fill="rgb(238,174,52)" fg:x="2053" fg:w="39"/><text x="16.3912%" y="767.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (2 samples, 0.02%)</title><rect x="16.4321%" y="741" width="0.0157%" height="15" fill="rgb(230,73,7)" fg:x="2090" fg:w="2"/><text x="16.6821%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (2 samples, 0.02%)</title><rect x="16.4478%" y="757" width="0.0157%" height="15" fill="rgb(243,124,40)" fg:x="2092" fg:w="2"/><text x="16.6978%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (6 samples, 0.05%)</title><rect x="16.4871%" y="741" width="0.0472%" height="15" fill="rgb(244,170,11)" fg:x="2097" fg:w="6"/><text x="16.7371%" y="751.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates::{{closure}} (4 samples, 0.03%)</title><rect x="16.5029%" y="725" width="0.0314%" height="15" fill="rgb(207,114,54)" fg:x="2099" fg:w="4"/><text x="16.7529%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="16.5186%" y="709" width="0.0157%" height="15" fill="rgb(205,42,20)" fg:x="2101" fg:w="2"/><text x="16.7686%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="16.5422%" y="693" width="0.0314%" height="15" fill="rgb(230,30,28)" fg:x="2104" fg:w="4"/><text x="16.7922%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="16.5500%" y="677" width="0.0236%" height="15" fill="rgb(205,73,54)" fg:x="2105" fg:w="3"/><text x="16.8000%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="16.5500%" y="661" width="0.0236%" height="15" fill="rgb(254,227,23)" fg:x="2105" fg:w="3"/><text x="16.8000%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.06%)</title><rect x="16.5343%" y="741" width="0.0550%" height="15" fill="rgb(228,202,34)" fg:x="2103" fg:w="7"/><text x="16.7843%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.06%)</title><rect x="16.5343%" y="725" width="0.0550%" height="15" fill="rgb(222,225,37)" fg:x="2103" fg:w="7"/><text x="16.7843%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.05%)</title><rect x="16.5422%" y="709" width="0.0472%" height="15" fill="rgb(221,14,54)" fg:x="2104" fg:w="6"/><text x="16.7922%" y="719.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="16.5736%" y="693" width="0.0157%" height="15" fill="rgb(254,102,2)" fg:x="2108" fg:w="2"/><text x="16.8236%" y="703.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="16.5736%" y="677" width="0.0157%" height="15" fill="rgb(232,104,17)" fg:x="2108" fg:w="2"/><text x="16.8236%" y="687.50"></text></g><g><title>quick_xml::events::attributes::IterState::check_for_duplicates (16 samples, 0.13%)</title><rect x="16.4714%" y="757" width="0.1258%" height="15" fill="rgb(250,220,14)" fg:x="2095" fg:w="16"/><text x="16.7214%" y="767.50"></text></g><g><title>__memcpy_sse2_unaligned (3 samples, 0.02%)</title><rect x="16.6208%" y="741" width="0.0236%" height="15" fill="rgb(241,158,9)" fg:x="2114" fg:w="3"/><text x="16.8708%" y="751.50"></text></g><g><title>&lt;quick_xml::events::attributes::Attributes as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.61%)</title><rect x="16.0469%" y="789" width="0.6054%" height="15" fill="rgb(246,9,43)" fg:x="2041" fg:w="77"/><text x="16.2969%" y="799.50"></text></g><g><title>quick_xml::events::attributes::IterState::next (71 samples, 0.56%)</title><rect x="16.0940%" y="773" width="0.5582%" height="15" fill="rgb(206,73,33)" fg:x="2047" fg:w="71"/><text x="16.3440%" y="783.50"></text></g><g><title>quick_xml::events::attributes::IterState::double_q (7 samples, 0.06%)</title><rect x="16.5972%" y="757" width="0.0550%" height="15" fill="rgb(222,79,8)" fg:x="2111" fg:w="7"/><text x="16.8472%" y="767.50"></text></g><g><title>calamine::xlsx::get_attribute (82 samples, 0.64%)</title><rect x="16.0311%" y="805" width="0.6447%" height="15" fill="rgb(234,8,54)" fg:x="2039" fg:w="82"/><text x="16.2811%" y="815.50"></text></g><g><title>calamine::xlsx::read_sheet_data::read_value (86 samples, 0.68%)</title><rect x="16.0311%" y="821" width="0.6762%" height="15" fill="rgb(209,134,38)" fg:x="2039" fg:w="86"/><text x="16.2811%" y="831.50"></text></g><g><title>quick_xml::events::BytesStart::attributes (2 samples, 0.02%)</title><rect x="16.6916%" y="805" width="0.0157%" height="15" fill="rgb(230,127,29)" fg:x="2123" fg:w="2"/><text x="16.9416%" y="815.50"></text></g><g><title>quick_xml::events::attributes::Attributes::wrap (2 samples, 0.02%)</title><rect x="16.6916%" y="789" width="0.0157%" height="15" fill="rgb(242,44,41)" fg:x="2123" fg:w="2"/><text x="16.9416%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="16.7780%" y="677" width="0.0236%" height="15" fill="rgb(222,56,43)" fg:x="2134" fg:w="3"/><text x="17.0280%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="16.7859%" y="661" width="0.0157%" height="15" fill="rgb(238,39,47)" fg:x="2135" fg:w="2"/><text x="17.0359%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="16.7859%" y="645" width="0.0157%" height="15" fill="rgb(226,79,43)" fg:x="2135" fg:w="2"/><text x="17.0359%" y="655.50"></text></g><g><title>core::cmp::max (4 samples, 0.03%)</title><rect x="16.8095%" y="677" width="0.0314%" height="15" fill="rgb(242,105,53)" fg:x="2138" fg:w="4"/><text x="17.0595%" y="687.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.03%)</title><rect x="16.8095%" y="661" width="0.0314%" height="15" fill="rgb(251,132,46)" fg:x="2138" fg:w="4"/><text x="17.0595%" y="671.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.02%)</title><rect x="16.8174%" y="645" width="0.0236%" height="15" fill="rgb(231,77,14)" fg:x="2139" fg:w="3"/><text x="17.0674%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.09%)</title><rect x="16.7545%" y="693" width="0.0943%" height="15" fill="rgb(240,135,9)" fg:x="2131" fg:w="12"/><text x="17.0045%" y="703.50"></text></g><g><title>alloc::string::String::push_str (13 samples, 0.10%)</title><rect x="16.7545%" y="805" width="0.1022%" height="15" fill="rgb(248,109,14)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (13 samples, 0.10%)</title><rect x="16.7545%" y="789" width="0.1022%" height="15" fill="rgb(227,146,52)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13 samples, 0.10%)</title><rect x="16.7545%" y="773" width="0.1022%" height="15" fill="rgb(232,54,3)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (13 samples, 0.10%)</title><rect x="16.7545%" y="757" width="0.1022%" height="15" fill="rgb(229,201,43)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.10%)</title><rect x="16.7545%" y="741" width="0.1022%" height="15" fill="rgb(252,161,33)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.10%)</title><rect x="16.7545%" y="725" width="0.1022%" height="15" fill="rgb(226,146,40)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.10%)</title><rect x="16.7545%" y="709" width="0.1022%" height="15" fill="rgb(219,47,25)" fg:x="2131" fg:w="13"/><text x="17.0045%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="16.8645%" y="741" width="0.0314%" height="15" fill="rgb(250,135,13)" fg:x="2145" fg:w="4"/><text x="17.1145%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="16.8645%" y="725" width="0.0314%" height="15" fill="rgb(219,229,18)" fg:x="2145" fg:w="4"/><text x="17.1145%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.05%)</title><rect x="16.8567%" y="805" width="0.0472%" height="15" fill="rgb(217,152,27)" fg:x="2144" fg:w="6"/><text x="17.1067%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="16.8567%" y="789" width="0.0472%" height="15" fill="rgb(225,71,47)" fg:x="2144" fg:w="6"/><text x="17.1067%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="16.8567%" y="773" width="0.0472%" height="15" fill="rgb(220,139,14)" fg:x="2144" fg:w="6"/><text x="17.1067%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="16.8567%" y="757" width="0.0472%" height="15" fill="rgb(247,54,32)" fg:x="2144" fg:w="6"/><text x="17.1067%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="16.9117%" y="805" width="0.0157%" height="15" fill="rgb(252,131,39)" fg:x="2151" fg:w="2"/><text x="17.1617%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="16.9117%" y="789" width="0.0157%" height="15" fill="rgb(210,108,39)" fg:x="2151" fg:w="2"/><text x="17.1617%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="16.9117%" y="773" width="0.0157%" height="15" fill="rgb(205,23,29)" fg:x="2151" fg:w="2"/><text x="17.1617%" y="783.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="16.9353%" y="789" width="0.0236%" height="15" fill="rgb(246,139,46)" fg:x="2154" fg:w="3"/><text x="17.1853%" y="799.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (3 samples, 0.02%)</title><rect x="16.9353%" y="773" width="0.0236%" height="15" fill="rgb(250,81,26)" fg:x="2154" fg:w="3"/><text x="17.1853%" y="783.50"></text></g><g><title>quick_xml::name::QName::index (2 samples, 0.02%)</title><rect x="16.9432%" y="757" width="0.0157%" height="15" fill="rgb(214,104,7)" fg:x="2155" fg:w="2"/><text x="17.1932%" y="767.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="16.9432%" y="741" width="0.0157%" height="15" fill="rgb(233,189,8)" fg:x="2155" fg:w="2"/><text x="17.1932%" y="751.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="16.9432%" y="725" width="0.0157%" height="15" fill="rgb(228,141,17)" fg:x="2155" fg:w="2"/><text x="17.1932%" y="735.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (5 samples, 0.04%)</title><rect x="16.9353%" y="805" width="0.0393%" height="15" fill="rgb(247,157,1)" fg:x="2154" fg:w="5"/><text x="17.1853%" y="815.50"></text></g><g><title>quick_xml::events::BytesStart::name (2 samples, 0.02%)</title><rect x="16.9589%" y="789" width="0.0157%" height="15" fill="rgb(249,225,5)" fg:x="2157" fg:w="2"/><text x="17.2089%" y="799.50"></text></g><g><title>quick_xml::encoding::Decoder::decode (2 samples, 0.02%)</title><rect x="16.9903%" y="773" width="0.0157%" height="15" fill="rgb(242,55,13)" fg:x="2161" fg:w="2"/><text x="17.2403%" y="783.50"></text></g><g><title>quick_xml::encoding::decode (2 samples, 0.02%)</title><rect x="16.9903%" y="757" width="0.0157%" height="15" fill="rgb(230,49,50)" fg:x="2161" fg:w="2"/><text x="17.2403%" y="767.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling_and_without_replacement (2 samples, 0.02%)</title><rect x="16.9903%" y="741" width="0.0157%" height="15" fill="rgb(241,111,38)" fg:x="2161" fg:w="2"/><text x="17.2403%" y="751.50"></text></g><g><title>quick_xml::events::BytesText::unescape (12 samples, 0.09%)</title><rect x="16.9746%" y="805" width="0.0943%" height="15" fill="rgb(252,155,4)" fg:x="2159" fg:w="12"/><text x="17.2246%" y="815.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (12 samples, 0.09%)</title><rect x="16.9746%" y="789" width="0.0943%" height="15" fill="rgb(212,69,32)" fg:x="2159" fg:w="12"/><text x="17.2246%" y="799.50"></text></g><g><title>quick_xml::escapei::unescape_with (8 samples, 0.06%)</title><rect x="17.0061%" y="773" width="0.0629%" height="15" fill="rgb(243,107,47)" fg:x="2163" fg:w="8"/><text x="17.2561%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (6 samples, 0.05%)</title><rect x="17.0218%" y="757" width="0.0472%" height="15" fill="rgb(247,130,12)" fg:x="2165" fg:w="6"/><text x="17.2718%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.05%)</title><rect x="17.0218%" y="741" width="0.0472%" height="15" fill="rgb(233,74,16)" fg:x="2165" fg:w="6"/><text x="17.2718%" y="751.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="17.0375%" y="725" width="0.0314%" height="15" fill="rgb(208,58,18)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (4 samples, 0.03%)</title><rect x="17.0375%" y="709" width="0.0314%" height="15" fill="rgb(242,225,1)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="719.50"></text></g><g><title>&lt;memchr::memchr::Memchr2 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.03%)</title><rect x="17.0375%" y="693" width="0.0314%" height="15" fill="rgb(249,39,40)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="703.50"></text></g><g><title>memchr::memchr::memchr2_raw (4 samples, 0.03%)</title><rect x="17.0375%" y="677" width="0.0314%" height="15" fill="rgb(207,72,44)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw (4 samples, 0.03%)</title><rect x="17.0375%" y="661" width="0.0314%" height="15" fill="rgb(215,193,12)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr2_raw::find_sse2 (4 samples, 0.03%)</title><rect x="17.0375%" y="645" width="0.0314%" height="15" fill="rgb(248,41,39)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="655.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw (4 samples, 0.03%)</title><rect x="17.0375%" y="629" width="0.0314%" height="15" fill="rgb(253,85,4)" fg:x="2167" fg:w="4"/><text x="17.2875%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::fwd_byte_by_byte (3 samples, 0.02%)</title><rect x="17.0454%" y="613" width="0.0236%" height="15" fill="rgb(243,70,31)" fg:x="2168" fg:w="3"/><text x="17.2954%" y="623.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Two::find_raw::{{closure}} (3 samples, 0.02%)</title><rect x="17.0454%" y="597" width="0.0236%" height="15" fill="rgb(253,195,26)" fg:x="2168" fg:w="3"/><text x="17.2954%" y="607.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (6 samples, 0.05%)</title><rect x="17.0925%" y="757" width="0.0472%" height="15" fill="rgb(243,42,11)" fg:x="2174" fg:w="6"/><text x="17.3425%" y="767.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="17.1633%" y="725" width="0.0472%" height="15" fill="rgb(239,66,17)" fg:x="2183" fg:w="6"/><text x="17.4133%" y="735.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (6 samples, 0.05%)</title><rect x="17.1633%" y="709" width="0.0472%" height="15" fill="rgb(217,132,21)" fg:x="2183" fg:w="6"/><text x="17.4133%" y="719.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.03%)</title><rect x="17.1790%" y="693" width="0.0314%" height="15" fill="rgb(252,202,21)" fg:x="2185" fg:w="4"/><text x="17.4290%" y="703.50"></text></g><g><title>memchr::memchr::memchr3_raw (4 samples, 0.03%)</title><rect x="17.1790%" y="677" width="0.0314%" height="15" fill="rgb(233,98,36)" fg:x="2185" fg:w="4"/><text x="17.4290%" y="687.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (4 samples, 0.03%)</title><rect x="17.1790%" y="661" width="0.0314%" height="15" fill="rgb(216,153,54)" fg:x="2185" fg:w="4"/><text x="17.4290%" y="671.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (4 samples, 0.03%)</title><rect x="17.1790%" y="645" width="0.0314%" height="15" fill="rgb(250,99,7)" fg:x="2185" fg:w="4"/><text x="17.4290%" y="655.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (4 samples, 0.03%)</title><rect x="17.1790%" y="629" width="0.0314%" height="15" fill="rgb(207,56,50)" fg:x="2185" fg:w="4"/><text x="17.4290%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (3 samples, 0.02%)</title><rect x="17.1869%" y="613" width="0.0236%" height="15" fill="rgb(244,61,34)" fg:x="2186" fg:w="3"/><text x="17.4369%" y="623.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (3 samples, 0.02%)</title><rect x="17.1869%" y="597" width="0.0236%" height="15" fill="rgb(241,50,38)" fg:x="2186" fg:w="3"/><text x="17.4369%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.02%)</title><rect x="17.1869%" y="581" width="0.0236%" height="15" fill="rgb(212,166,30)" fg:x="2186" fg:w="3"/><text x="17.4369%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.02%)</title><rect x="17.1869%" y="565" width="0.0236%" height="15" fill="rgb(249,127,32)" fg:x="2186" fg:w="3"/><text x="17.4369%" y="575.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (10 samples, 0.08%)</title><rect x="17.1397%" y="757" width="0.0786%" height="15" fill="rgb(209,103,0)" fg:x="2180" fg:w="10"/><text x="17.3897%" y="767.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (7 samples, 0.06%)</title><rect x="17.1633%" y="741" width="0.0550%" height="15" fill="rgb(238,209,51)" fg:x="2183" fg:w="7"/><text x="17.4133%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.02%)</title><rect x="17.2183%" y="741" width="0.0236%" height="15" fill="rgb(237,56,23)" fg:x="2190" fg:w="3"/><text x="17.4683%" y="751.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (5 samples, 0.04%)</title><rect x="17.2183%" y="757" width="0.0393%" height="15" fill="rgb(215,153,46)" fg:x="2190" fg:w="5"/><text x="17.4683%" y="767.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="17.2419%" y="741" width="0.0157%" height="15" fill="rgb(224,49,31)" fg:x="2193" fg:w="2"/><text x="17.4919%" y="751.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (27 samples, 0.21%)</title><rect x="17.0768%" y="773" width="0.2123%" height="15" fill="rgb(250,18,42)" fg:x="2172" fg:w="27"/><text x="17.3268%" y="783.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (4 samples, 0.03%)</title><rect x="17.2576%" y="757" width="0.0314%" height="15" fill="rgb(215,176,39)" fg:x="2195" fg:w="4"/><text x="17.5076%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.02%)</title><rect x="17.2655%" y="741" width="0.0236%" height="15" fill="rgb(223,77,29)" fg:x="2196" fg:w="3"/><text x="17.5155%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="17.2655%" y="725" width="0.0236%" height="15" fill="rgb(234,94,52)" fg:x="2196" fg:w="3"/><text x="17.5155%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="17.3048%" y="741" width="0.0157%" height="15" fill="rgb(220,154,50)" fg:x="2201" fg:w="2"/><text x="17.5548%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="17.3048%" y="725" width="0.0157%" height="15" fill="rgb(212,11,10)" fg:x="2201" fg:w="2"/><text x="17.5548%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="17.3048%" y="709" width="0.0157%" height="15" fill="rgb(205,166,19)" fg:x="2201" fg:w="2"/><text x="17.5548%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="17.3048%" y="693" width="0.0157%" height="15" fill="rgb(244,198,16)" fg:x="2201" fg:w="2"/><text x="17.5548%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="17.3048%" y="677" width="0.0157%" height="15" fill="rgb(219,69,12)" fg:x="2201" fg:w="2"/><text x="17.5548%" y="687.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (6 samples, 0.05%)</title><rect x="17.3048%" y="757" width="0.0472%" height="15" fill="rgb(245,30,7)" fg:x="2201" fg:w="6"/><text x="17.5548%" y="767.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="17.3677%" y="725" width="0.0157%" height="15" fill="rgb(218,221,48)" fg:x="2209" fg:w="2"/><text x="17.6177%" y="735.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (5 samples, 0.04%)</title><rect x="17.3520%" y="757" width="0.0393%" height="15" fill="rgb(216,66,15)" fg:x="2207" fg:w="5"/><text x="17.6020%" y="767.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (3 samples, 0.02%)</title><rect x="17.3677%" y="741" width="0.0236%" height="15" fill="rgb(226,122,50)" fg:x="2209" fg:w="3"/><text x="17.6177%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (43 samples, 0.34%)</title><rect x="17.0690%" y="805" width="0.3381%" height="15" fill="rgb(239,156,16)" fg:x="2171" fg:w="43"/><text x="17.3190%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (43 samples, 0.34%)</title><rect x="17.0690%" y="789" width="0.3381%" height="15" fill="rgb(224,27,38)" fg:x="2171" fg:w="43"/><text x="17.3190%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (15 samples, 0.12%)</title><rect x="17.2891%" y="773" width="0.1179%" height="15" fill="rgb(224,39,27)" fg:x="2199" fg:w="15"/><text x="17.5391%" y="783.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_text (2 samples, 0.02%)</title><rect x="17.3913%" y="757" width="0.0157%" height="15" fill="rgb(215,92,29)" fg:x="2212" fg:w="2"/><text x="17.6413%" y="767.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (4 samples, 0.03%)</title><rect x="17.4149%" y="757" width="0.0314%" height="15" fill="rgb(207,159,16)" fg:x="2215" fg:w="4"/><text x="17.6649%" y="767.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="17.4306%" y="741" width="0.0157%" height="15" fill="rgb(238,163,47)" fg:x="2217" fg:w="2"/><text x="17.6806%" y="751.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="17.4306%" y="725" width="0.0157%" height="15" fill="rgb(219,91,49)" fg:x="2217" fg:w="2"/><text x="17.6806%" y="735.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (5 samples, 0.04%)</title><rect x="17.4149%" y="773" width="0.0393%" height="15" fill="rgb(227,167,31)" fg:x="2215" fg:w="5"/><text x="17.6649%" y="783.50"></text></g><g><title>calamine::xlsx::read_string (101 samples, 0.79%)</title><rect x="16.7073%" y="821" width="0.7941%" height="15" fill="rgb(234,80,54)" fg:x="2125" fg:w="101"/><text x="16.9573%" y="831.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_to_end_into (12 samples, 0.09%)</title><rect x="17.4070%" y="805" width="0.0943%" height="15" fill="rgb(212,114,2)" fg:x="2214" fg:w="12"/><text x="17.6570%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (11 samples, 0.09%)</title><rect x="17.4149%" y="789" width="0.0865%" height="15" fill="rgb(234,50,24)" fg:x="2215" fg:w="11"/><text x="17.6649%" y="799.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (6 samples, 0.05%)</title><rect x="17.4542%" y="773" width="0.0472%" height="15" fill="rgb(221,68,8)" fg:x="2220" fg:w="6"/><text x="17.7042%" y="783.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (3 samples, 0.02%)</title><rect x="17.5014%" y="821" width="0.0236%" height="15" fill="rgb(254,180,31)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="17.5014%" y="805" width="0.0236%" height="15" fill="rgb(247,130,50)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="815.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (3 samples, 0.02%)</title><rect x="17.5014%" y="789" width="0.0236%" height="15" fill="rgb(211,109,4)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="799.50"></text></g><g><title>quick_xml::name::QName::index (3 samples, 0.02%)</title><rect x="17.5014%" y="773" width="0.0236%" height="15" fill="rgb(238,50,21)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="783.50"></text></g><g><title>memchr::memchr::memchr (3 samples, 0.02%)</title><rect x="17.5014%" y="757" width="0.0236%" height="15" fill="rgb(225,57,45)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3 samples, 0.02%)</title><rect x="17.5014%" y="741" width="0.0236%" height="15" fill="rgb(209,196,50)" fg:x="2226" fg:w="3"/><text x="17.7514%" y="751.50"></text></g><g><title>quick_xml::events::BytesText::unescape (2 samples, 0.02%)</title><rect x="17.5328%" y="821" width="0.0157%" height="15" fill="rgb(242,140,13)" fg:x="2230" fg:w="2"/><text x="17.7828%" y="831.50"></text></g><g><title>quick_xml::events::BytesText::unescape_with (2 samples, 0.02%)</title><rect x="17.5328%" y="805" width="0.0157%" height="15" fill="rgb(217,111,7)" fg:x="2230" fg:w="2"/><text x="17.7828%" y="815.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3 samples, 0.02%)</title><rect x="17.5721%" y="757" width="0.0236%" height="15" fill="rgb(253,193,51)" fg:x="2235" fg:w="3"/><text x="17.8221%" y="767.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.02%)</title><rect x="17.5800%" y="741" width="0.0157%" height="15" fill="rgb(252,70,29)" fg:x="2236" fg:w="2"/><text x="17.8300%" y="751.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (5 samples, 0.04%)</title><rect x="17.5721%" y="773" width="0.0393%" height="15" fill="rgb(232,127,12)" fg:x="2235" fg:w="5"/><text x="17.8221%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (6 samples, 0.05%)</title><rect x="17.5721%" y="789" width="0.0472%" height="15" fill="rgb(211,180,21)" fg:x="2235" fg:w="6"/><text x="17.8221%" y="799.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="17.6272%" y="757" width="0.0157%" height="15" fill="rgb(229,72,13)" fg:x="2242" fg:w="2"/><text x="17.8772%" y="767.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="17.6429%" y="645" width="0.0236%" height="15" fill="rgb(240,211,49)" fg:x="2244" fg:w="3"/><text x="17.8929%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="17.6508%" y="629" width="0.0157%" height="15" fill="rgb(219,149,40)" fg:x="2245" fg:w="2"/><text x="17.9008%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="17.6508%" y="613" width="0.0157%" height="15" fill="rgb(210,127,46)" fg:x="2245" fg:w="2"/><text x="17.9008%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="17.6429%" y="757" width="0.0314%" height="15" fill="rgb(220,106,7)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="17.6429%" y="741" width="0.0314%" height="15" fill="rgb(249,31,22)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.03%)</title><rect x="17.6429%" y="725" width="0.0314%" height="15" fill="rgb(253,1,49)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="17.6429%" y="709" width="0.0314%" height="15" fill="rgb(227,144,33)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="17.6429%" y="693" width="0.0314%" height="15" fill="rgb(249,163,44)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="17.6429%" y="677" width="0.0314%" height="15" fill="rgb(234,15,39)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="17.6429%" y="661" width="0.0314%" height="15" fill="rgb(207,66,16)" fg:x="2244" fg:w="4"/><text x="17.8929%" y="671.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (9 samples, 0.07%)</title><rect x="17.6193%" y="773" width="0.0708%" height="15" fill="rgb(233,112,24)" fg:x="2241" fg:w="9"/><text x="17.8693%" y="783.50"></text></g><g><title>memchr::memchr::memchr (2 samples, 0.02%)</title><rect x="17.6743%" y="757" width="0.0157%" height="15" fill="rgb(230,90,22)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2 samples, 0.02%)</title><rect x="17.6743%" y="741" width="0.0157%" height="15" fill="rgb(229,61,13)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="751.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (2 samples, 0.02%)</title><rect x="17.6743%" y="725" width="0.0157%" height="15" fill="rgb(225,57,24)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="735.50"></text></g><g><title>memchr::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="17.6743%" y="709" width="0.0157%" height="15" fill="rgb(208,169,48)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2 samples, 0.02%)</title><rect x="17.6743%" y="693" width="0.0157%" height="15" fill="rgb(244,218,51)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="17.6743%" y="677" width="0.0157%" height="15" fill="rgb(214,148,10)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="17.6743%" y="661" width="0.0157%" height="15" fill="rgb(225,174,27)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="671.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (2 samples, 0.02%)</title><rect x="17.6743%" y="645" width="0.0157%" height="15" fill="rgb(230,96,26)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="655.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (2 samples, 0.02%)</title><rect x="17.6743%" y="629" width="0.0157%" height="15" fill="rgb(232,10,30)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="639.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (2 samples, 0.02%)</title><rect x="17.6743%" y="613" width="0.0157%" height="15" fill="rgb(222,8,50)" fg:x="2248" fg:w="2"/><text x="17.9243%" y="623.50"></text></g><g><title>calamine::xlsx::read_sheet_data::{{closure}} (224 samples, 1.76%)</title><rect x="15.9368%" y="837" width="1.7611%" height="15" fill="rgb(213,81,27)" fg:x="2027" fg:w="224"/><text x="16.1868%" y="847.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (19 samples, 0.15%)</title><rect x="17.5485%" y="821" width="0.1494%" height="15" fill="rgb(245,50,10)" fg:x="2232" fg:w="19"/><text x="17.7985%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (19 samples, 0.15%)</title><rect x="17.5485%" y="805" width="0.1494%" height="15" fill="rgb(216,100,18)" fg:x="2232" fg:w="19"/><text x="17.7985%" y="815.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (10 samples, 0.08%)</title><rect x="17.6193%" y="789" width="0.0786%" height="15" fill="rgb(236,147,54)" fg:x="2241" fg:w="10"/><text x="17.8693%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.04%)</title><rect x="17.6979%" y="837" width="0.0393%" height="15" fill="rgb(205,143,26)" fg:x="2251" fg:w="5"/><text x="17.9479%" y="847.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[A: N]&gt; for [B]&gt;::eq (4 samples, 0.03%)</title><rect x="17.7058%" y="821" width="0.0314%" height="15" fill="rgb(236,26,9)" fg:x="2252" fg:w="4"/><text x="17.9558%" y="831.50"></text></g><g><title>quick_xml::events::BytesEnd::local_name (4 samples, 0.03%)</title><rect x="17.7372%" y="837" width="0.0314%" height="15" fill="rgb(221,165,53)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.03%)</title><rect x="17.7372%" y="821" width="0.0314%" height="15" fill="rgb(214,110,17)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="831.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (4 samples, 0.03%)</title><rect x="17.7372%" y="805" width="0.0314%" height="15" fill="rgb(237,197,12)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="815.50"></text></g><g><title>quick_xml::name::QName::index (4 samples, 0.03%)</title><rect x="17.7372%" y="789" width="0.0314%" height="15" fill="rgb(205,84,17)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="799.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.03%)</title><rect x="17.7372%" y="773" width="0.0314%" height="15" fill="rgb(237,18,45)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.03%)</title><rect x="17.7372%" y="757" width="0.0314%" height="15" fill="rgb(221,87,14)" fg:x="2256" fg:w="4"/><text x="17.9872%" y="767.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.02%)</title><rect x="17.7451%" y="741" width="0.0236%" height="15" fill="rgb(238,186,15)" fg:x="2257" fg:w="3"/><text x="17.9951%" y="751.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="17.7451%" y="725" width="0.0236%" height="15" fill="rgb(208,115,11)" fg:x="2257" fg:w="3"/><text x="17.9951%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="17.7451%" y="709" width="0.0236%" height="15" fill="rgb(254,175,0)" fg:x="2257" fg:w="3"/><text x="17.9951%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.02%)</title><rect x="17.7451%" y="693" width="0.0236%" height="15" fill="rgb(227,24,42)" fg:x="2257" fg:w="3"/><text x="17.9951%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (2 samples, 0.02%)</title><rect x="17.7530%" y="677" width="0.0157%" height="15" fill="rgb(223,211,37)" fg:x="2258" fg:w="2"/><text x="18.0030%" y="687.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (2 samples, 0.02%)</title><rect x="17.7530%" y="661" width="0.0157%" height="15" fill="rgb(235,49,27)" fg:x="2258" fg:w="2"/><text x="18.0030%" y="671.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (2 samples, 0.02%)</title><rect x="17.7530%" y="645" width="0.0157%" height="15" fill="rgb(254,97,51)" fg:x="2258" fg:w="2"/><text x="18.0030%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.02%)</title><rect x="17.7530%" y="629" width="0.0157%" height="15" fill="rgb(249,51,40)" fg:x="2258" fg:w="2"/><text x="18.0030%" y="639.50"></text></g><g><title>quick_xml::events::BytesStart::attributes (2 samples, 0.02%)</title><rect x="17.7687%" y="837" width="0.0157%" height="15" fill="rgb(210,128,45)" fg:x="2260" fg:w="2"/><text x="18.0187%" y="847.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2 samples, 0.02%)</title><rect x="17.8001%" y="677" width="0.0157%" height="15" fill="rgb(224,137,50)" fg:x="2264" fg:w="2"/><text x="18.0501%" y="687.50"></text></g><g><title>quick_xml::events::BytesStart::local_name (5 samples, 0.04%)</title><rect x="17.7844%" y="837" width="0.0393%" height="15" fill="rgb(242,15,9)" fg:x="2262" fg:w="5"/><text x="18.0344%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.04%)</title><rect x="17.7844%" y="821" width="0.0393%" height="15" fill="rgb(233,187,41)" fg:x="2262" fg:w="5"/><text x="18.0344%" y="831.50"></text></g><g><title>&lt;quick_xml::name::LocalName as core::convert::From&lt;quick_xml::name::QName&gt;&gt;::from (5 samples, 0.04%)</title><rect x="17.7844%" y="805" width="0.0393%" height="15" fill="rgb(227,2,29)" fg:x="2262" fg:w="5"/><text x="18.0344%" y="815.50"></text></g><g><title>quick_xml::name::QName::index (5 samples, 0.04%)</title><rect x="17.7844%" y="789" width="0.0393%" height="15" fill="rgb(222,70,3)" fg:x="2262" fg:w="5"/><text x="18.0344%" y="799.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.03%)</title><rect x="17.7923%" y="773" width="0.0314%" height="15" fill="rgb(213,11,42)" fg:x="2263" fg:w="4"/><text x="18.0423%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.03%)</title><rect x="17.7923%" y="757" width="0.0314%" height="15" fill="rgb(225,150,9)" fg:x="2263" fg:w="4"/><text x="18.0423%" y="767.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (4 samples, 0.03%)</title><rect x="17.7923%" y="741" width="0.0314%" height="15" fill="rgb(230,162,45)" fg:x="2263" fg:w="4"/><text x="18.0423%" y="751.50"></text></g><g><title>memchr::memchr::memchr_raw (4 samples, 0.03%)</title><rect x="17.7923%" y="725" width="0.0314%" height="15" fill="rgb(222,14,52)" fg:x="2263" fg:w="4"/><text x="18.0423%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="17.8001%" y="709" width="0.0236%" height="15" fill="rgb(254,198,14)" fg:x="2264" fg:w="3"/><text x="18.0501%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (3 samples, 0.02%)</title><rect x="17.8001%" y="693" width="0.0236%" height="15" fill="rgb(220,217,30)" fg:x="2264" fg:w="3"/><text x="18.0501%" y="703.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (6 samples, 0.05%)</title><rect x="17.9102%" y="789" width="0.0472%" height="15" fill="rgb(215,146,41)" fg:x="2278" fg:w="6"/><text x="18.1602%" y="799.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="17.9417%" y="773" width="0.0157%" height="15" fill="rgb(217,27,36)" fg:x="2282" fg:w="2"/><text x="18.1917%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.02%)</title><rect x="17.9417%" y="757" width="0.0157%" height="15" fill="rgb(219,218,39)" fg:x="2282" fg:w="2"/><text x="18.1917%" y="767.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.02%)</title><rect x="17.9574%" y="773" width="0.0157%" height="15" fill="rgb(219,4,42)" fg:x="2284" fg:w="2"/><text x="18.2074%" y="783.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.02%)</title><rect x="17.9731%" y="773" width="0.0157%" height="15" fill="rgb(249,119,36)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.02%)</title><rect x="17.9731%" y="757" width="0.0157%" height="15" fill="rgb(209,23,33)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2 samples, 0.02%)</title><rect x="17.9731%" y="741" width="0.0157%" height="15" fill="rgb(211,10,0)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="751.50"></text></g><g><title>std::io::Read::read_buf (2 samples, 0.02%)</title><rect x="17.9731%" y="725" width="0.0157%" height="15" fill="rgb(208,99,37)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="735.50"></text></g><g><title>std::io::default_read_buf (2 samples, 0.02%)</title><rect x="17.9731%" y="709" width="0.0157%" height="15" fill="rgb(213,132,31)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="719.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (2 samples, 0.02%)</title><rect x="17.9731%" y="693" width="0.0157%" height="15" fill="rgb(243,129,40)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="17.9731%" y="677" width="0.0157%" height="15" fill="rgb(210,66,33)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="687.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="17.9731%" y="661" width="0.0157%" height="15" fill="rgb(209,189,4)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="671.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="17.9731%" y="645" width="0.0157%" height="15" fill="rgb(214,107,37)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="655.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="17.9731%" y="629" width="0.0157%" height="15" fill="rgb(245,88,54)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="639.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="17.9731%" y="613" width="0.0157%" height="15" fill="rgb(205,146,20)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="623.50"></text></g><g><title>flate2::zio::read (2 samples, 0.02%)</title><rect x="17.9731%" y="597" width="0.0157%" height="15" fill="rgb(220,161,25)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="607.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (2 samples, 0.02%)</title><rect x="17.9731%" y="581" width="0.0157%" height="15" fill="rgb(215,152,15)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="591.50"></text></g><g><title>flate2::mem::Decompress::decompress (2 samples, 0.02%)</title><rect x="17.9731%" y="565" width="0.0157%" height="15" fill="rgb(233,192,44)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="575.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2 samples, 0.02%)</title><rect x="17.9731%" y="549" width="0.0157%" height="15" fill="rgb(240,170,46)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="559.50"></text></g><g><title>inflate (2 samples, 0.02%)</title><rect x="17.9731%" y="533" width="0.0157%" height="15" fill="rgb(207,104,33)" fg:x="2286" fg:w="2"/><text x="18.2231%" y="543.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (2 samples, 0.02%)</title><rect x="18.0439%" y="629" width="0.0157%" height="15" fill="rgb(219,21,39)" fg:x="2295" fg:w="2"/><text x="18.2939%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (2 samples, 0.02%)</title><rect x="18.0439%" y="613" width="0.0157%" height="15" fill="rgb(214,133,29)" fg:x="2295" fg:w="2"/><text x="18.2939%" y="623.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (5 samples, 0.04%)</title><rect x="18.0281%" y="677" width="0.0393%" height="15" fill="rgb(226,93,6)" fg:x="2293" fg:w="5"/><text x="18.2781%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (4 samples, 0.03%)</title><rect x="18.0360%" y="661" width="0.0314%" height="15" fill="rgb(252,222,34)" fg:x="2294" fg:w="4"/><text x="18.2860%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (3 samples, 0.02%)</title><rect x="18.0439%" y="645" width="0.0236%" height="15" fill="rgb(252,92,48)" fg:x="2295" fg:w="3"/><text x="18.2939%" y="655.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_bytes_until (16 samples, 0.13%)</title><rect x="17.9574%" y="789" width="0.1258%" height="15" fill="rgb(245,223,24)" fg:x="2284" fg:w="16"/><text x="18.2074%" y="799.50"></text></g><g><title>memchr::memchr::memchr (10 samples, 0.08%)</title><rect x="18.0046%" y="773" width="0.0786%" height="15" fill="rgb(205,176,3)" fg:x="2290" fg:w="10"/><text x="18.2546%" y="783.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (10 samples, 0.08%)</title><rect x="18.0046%" y="757" width="0.0786%" height="15" fill="rgb(235,151,15)" fg:x="2290" fg:w="10"/><text x="18.2546%" y="767.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (9 samples, 0.07%)</title><rect x="18.0124%" y="741" width="0.0708%" height="15" fill="rgb(237,209,11)" fg:x="2291" fg:w="9"/><text x="18.2624%" y="751.50"></text></g><g><title>memchr::memchr::memchr_raw (9 samples, 0.07%)</title><rect x="18.0124%" y="725" width="0.0708%" height="15" fill="rgb(243,227,24)" fg:x="2291" fg:w="9"/><text x="18.2624%" y="735.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (7 samples, 0.06%)</title><rect x="18.0281%" y="709" width="0.0550%" height="15" fill="rgb(239,193,16)" fg:x="2293" fg:w="7"/><text x="18.2781%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (7 samples, 0.06%)</title><rect x="18.0281%" y="693" width="0.0550%" height="15" fill="rgb(231,27,9)" fg:x="2293" fg:w="7"/><text x="18.2781%" y="703.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::new_unchecked (2 samples, 0.02%)</title><rect x="18.0675%" y="677" width="0.0157%" height="15" fill="rgb(219,169,10)" fg:x="2298" fg:w="2"/><text x="18.3175%" y="687.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.02%)</title><rect x="18.1068%" y="773" width="0.0157%" height="15" fill="rgb(244,229,43)" fg:x="2303" fg:w="2"/><text x="18.3568%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (2 samples, 0.02%)</title><rect x="18.1068%" y="757" width="0.0157%" height="15" fill="rgb(254,38,20)" fg:x="2303" fg:w="2"/><text x="18.3568%" y="767.50"></text></g><g><title>core::cmp::min (2 samples, 0.02%)</title><rect x="18.1068%" y="741" width="0.0157%" height="15" fill="rgb(250,47,30)" fg:x="2303" fg:w="2"/><text x="18.3568%" y="751.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.02%)</title><rect x="18.1068%" y="725" width="0.0157%" height="15" fill="rgb(224,124,36)" fg:x="2303" fg:w="2"/><text x="18.3568%" y="735.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.02%)</title><rect x="18.1068%" y="709" width="0.0157%" height="15" fill="rgb(246,68,51)" fg:x="2303" fg:w="2"/><text x="18.3568%" y="719.50"></text></g><g><title>inflate_fast (3 samples, 0.02%)</title><rect x="18.1382%" y="517" width="0.0236%" height="15" fill="rgb(253,43,49)" fg:x="2307" fg:w="3"/><text x="18.3882%" y="527.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="18.1382%" y="629" width="0.0472%" height="15" fill="rgb(219,54,36)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="639.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="18.1382%" y="613" width="0.0472%" height="15" fill="rgb(227,133,34)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="623.50"></text></g><g><title>flate2::zio::read (6 samples, 0.05%)</title><rect x="18.1382%" y="597" width="0.0472%" height="15" fill="rgb(247,227,15)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="607.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (6 samples, 0.05%)</title><rect x="18.1382%" y="581" width="0.0472%" height="15" fill="rgb(229,96,14)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="591.50"></text></g><g><title>flate2::mem::Decompress::decompress (6 samples, 0.05%)</title><rect x="18.1382%" y="565" width="0.0472%" height="15" fill="rgb(220,79,17)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="575.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (6 samples, 0.05%)</title><rect x="18.1382%" y="549" width="0.0472%" height="15" fill="rgb(205,131,53)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="559.50"></text></g><g><title>inflate (6 samples, 0.05%)</title><rect x="18.1382%" y="533" width="0.0472%" height="15" fill="rgb(209,50,29)" fg:x="2307" fg:w="6"/><text x="18.3882%" y="543.50"></text></g><g><title>updatewindow (3 samples, 0.02%)</title><rect x="18.1618%" y="517" width="0.0236%" height="15" fill="rgb(245,86,46)" fg:x="2310" fg:w="3"/><text x="18.4118%" y="527.50"></text></g><g><title>zmemcpy (3 samples, 0.02%)</title><rect x="18.1618%" y="501" width="0.0236%" height="15" fill="rgb(235,66,46)" fg:x="2310" fg:w="3"/><text x="18.4118%" y="511.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (13 samples, 0.10%)</title><rect x="18.1382%" y="693" width="0.1022%" height="15" fill="rgb(232,148,31)" fg:x="2307" fg:w="13"/><text x="18.3882%" y="703.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (13 samples, 0.10%)</title><rect x="18.1382%" y="677" width="0.1022%" height="15" fill="rgb(217,149,8)" fg:x="2307" fg:w="13"/><text x="18.3882%" y="687.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (13 samples, 0.10%)</title><rect x="18.1382%" y="661" width="0.1022%" height="15" fill="rgb(209,183,11)" fg:x="2307" fg:w="13"/><text x="18.3882%" y="671.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (13 samples, 0.10%)</title><rect x="18.1382%" y="645" width="0.1022%" height="15" fill="rgb(208,55,20)" fg:x="2307" fg:w="13"/><text x="18.3882%" y="655.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.06%)</title><rect x="18.1854%" y="629" width="0.0550%" height="15" fill="rgb(218,39,14)" fg:x="2313" fg:w="7"/><text x="18.4354%" y="639.50"></text></g><g><title>crc32fast::baseline::State::update (7 samples, 0.06%)</title><rect x="18.1854%" y="613" width="0.0550%" height="15" fill="rgb(216,169,33)" fg:x="2313" fg:w="7"/><text x="18.4354%" y="623.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (7 samples, 0.06%)</title><rect x="18.1854%" y="597" width="0.0550%" height="15" fill="rgb(233,80,24)" fg:x="2313" fg:w="7"/><text x="18.4354%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="18.2090%" y="581" width="0.0314%" height="15" fill="rgb(213,179,31)" fg:x="2316" fg:w="4"/><text x="18.4590%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="18.2090%" y="565" width="0.0314%" height="15" fill="rgb(209,19,5)" fg:x="2316" fg:w="4"/><text x="18.4590%" y="575.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="18.2090%" y="549" width="0.0314%" height="15" fill="rgb(219,18,35)" fg:x="2316" fg:w="4"/><text x="18.4590%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="18.2090%" y="533" width="0.0314%" height="15" fill="rgb(209,169,16)" fg:x="2316" fg:w="4"/><text x="18.4590%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts (3 samples, 0.02%)</title><rect x="18.2168%" y="517" width="0.0236%" height="15" fill="rgb(245,90,51)" fg:x="2317" fg:w="3"/><text x="18.4668%" y="527.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (3 samples, 0.02%)</title><rect x="18.2168%" y="501" width="0.0236%" height="15" fill="rgb(220,99,45)" fg:x="2317" fg:w="3"/><text x="18.4668%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (16 samples, 0.13%)</title><rect x="18.1225%" y="773" width="0.1258%" height="15" fill="rgb(249,89,25)" fg:x="2305" fg:w="16"/><text x="18.3725%" y="783.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (15 samples, 0.12%)</title><rect x="18.1304%" y="757" width="0.1179%" height="15" fill="rgb(239,193,0)" fg:x="2306" fg:w="15"/><text x="18.3804%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (14 samples, 0.11%)</title><rect x="18.1382%" y="741" width="0.1101%" height="15" fill="rgb(231,126,1)" fg:x="2307" fg:w="14"/><text x="18.3882%" y="751.50"></text></g><g><title>std::io::Read::read_buf (14 samples, 0.11%)</title><rect x="18.1382%" y="725" width="0.1101%" height="15" fill="rgb(243,166,3)" fg:x="2307" fg:w="14"/><text x="18.3882%" y="735.50"></text></g><g><title>std::io::default_read_buf (14 samples, 0.11%)</title><rect x="18.1382%" y="709" width="0.1101%" height="15" fill="rgb(223,22,34)" fg:x="2307" fg:w="14"/><text x="18.3882%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="18.2483%" y="773" width="0.0236%" height="15" fill="rgb(251,52,51)" fg:x="2321" fg:w="3"/><text x="18.4983%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="18.2562%" y="757" width="0.0157%" height="15" fill="rgb(221,165,28)" fg:x="2322" fg:w="2"/><text x="18.5062%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="18.2562%" y="741" width="0.0157%" height="15" fill="rgb(218,121,47)" fg:x="2322" fg:w="2"/><text x="18.5062%" y="751.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (4 samples, 0.03%)</title><rect x="18.3741%" y="725" width="0.0314%" height="15" fill="rgb(209,120,9)" fg:x="2337" fg:w="4"/><text x="18.6241%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (2 samples, 0.02%)</title><rect x="18.3898%" y="709" width="0.0157%" height="15" fill="rgb(236,68,12)" fg:x="2339" fg:w="2"/><text x="18.6398%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="18.4055%" y="725" width="0.0236%" height="15" fill="rgb(225,194,26)" fg:x="2341" fg:w="3"/><text x="18.6555%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.03%)</title><rect x="18.4448%" y="677" width="0.0314%" height="15" fill="rgb(231,84,39)" fg:x="2346" fg:w="4"/><text x="18.6948%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.03%)</title><rect x="18.4448%" y="661" width="0.0314%" height="15" fill="rgb(210,11,45)" fg:x="2346" fg:w="4"/><text x="18.6948%" y="671.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (3 samples, 0.02%)</title><rect x="18.4763%" y="645" width="0.0236%" height="15" fill="rgb(224,54,52)" fg:x="2350" fg:w="3"/><text x="18.7263%" y="655.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::find_raw (4 samples, 0.03%)</title><rect x="18.4763%" y="661" width="0.0314%" height="15" fill="rgb(238,102,14)" fg:x="2350" fg:w="4"/><text x="18.7263%" y="671.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.31%)</title><rect x="18.3269%" y="757" width="0.3066%" height="15" fill="rgb(243,160,52)" fg:x="2331" fg:w="39"/><text x="18.5769%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::Iter::next (37 samples, 0.29%)</title><rect x="18.3426%" y="741" width="0.2909%" height="15" fill="rgb(216,114,19)" fg:x="2333" fg:w="37"/><text x="18.5926%" y="751.50"></text></g><g><title>&lt;memchr::memchr::Memchr3 as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (26 samples, 0.20%)</title><rect x="18.4291%" y="725" width="0.2044%" height="15" fill="rgb(244,166,37)" fg:x="2344" fg:w="26"/><text x="18.6791%" y="735.50"></text></g><g><title>memchr::memchr::memchr3_raw (26 samples, 0.20%)</title><rect x="18.4291%" y="709" width="0.2044%" height="15" fill="rgb(246,29,44)" fg:x="2344" fg:w="26"/><text x="18.6791%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw (24 samples, 0.19%)</title><rect x="18.4448%" y="693" width="0.1887%" height="15" fill="rgb(215,56,53)" fg:x="2346" fg:w="24"/><text x="18.6948%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr3_raw::find_sse2 (20 samples, 0.16%)</title><rect x="18.4763%" y="677" width="0.1572%" height="15" fill="rgb(217,60,2)" fg:x="2350" fg:w="20"/><text x="18.7263%" y="687.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::Three::new_unchecked (16 samples, 0.13%)</title><rect x="18.5077%" y="661" width="0.1258%" height="15" fill="rgb(207,26,24)" fg:x="2354" fg:w="16"/><text x="18.7577%" y="671.50"></text></g><g><title>memchr::arch::generic::memchr::Three&lt;V&gt;::new (13 samples, 0.10%)</title><rect x="18.5313%" y="645" width="0.1022%" height="15" fill="rgb(252,210,15)" fg:x="2357" fg:w="13"/><text x="18.7813%" y="655.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::splat (13 samples, 0.10%)</title><rect x="18.5313%" y="629" width="0.1022%" height="15" fill="rgb(253,209,26)" fg:x="2357" fg:w="13"/><text x="18.7813%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.09%)</title><rect x="18.5392%" y="613" width="0.0943%" height="15" fill="rgb(238,170,14)" fg:x="2358" fg:w="12"/><text x="18.7892%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (11 samples, 0.09%)</title><rect x="18.5471%" y="597" width="0.0865%" height="15" fill="rgb(216,178,15)" fg:x="2359" fg:w="11"/><text x="18.7971%" y="607.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 0.03%)</title><rect x="18.6021%" y="581" width="0.0314%" height="15" fill="rgb(250,197,2)" fg:x="2366" fg:w="4"/><text x="18.8521%" y="591.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_element (72 samples, 0.57%)</title><rect x="18.0832%" y="789" width="0.5661%" height="15" fill="rgb(212,70,42)" fg:x="2300" fg:w="72"/><text x="18.3332%" y="799.50"></text></g><g><title>quick_xml::reader::ReadElementState::change (47 samples, 0.37%)</title><rect x="18.2797%" y="773" width="0.3695%" height="15" fill="rgb(227,213,9)" fg:x="2325" fg:w="47"/><text x="18.5297%" y="783.50"></text></g><g><title>memchr::memchr::memchr3_iter (2 samples, 0.02%)</title><rect x="18.6335%" y="757" width="0.0157%" height="15" fill="rgb(245,99,25)" fg:x="2370" fg:w="2"/><text x="18.8835%" y="767.50"></text></g><g><title>memchr::memchr::Memchr3::new (2 samples, 0.02%)</title><rect x="18.6335%" y="741" width="0.0157%" height="15" fill="rgb(250,82,29)" fg:x="2370" fg:w="2"/><text x="18.8835%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (2 samples, 0.02%)</title><rect x="18.6650%" y="773" width="0.0157%" height="15" fill="rgb(241,226,54)" fg:x="2374" fg:w="2"/><text x="18.9150%" y="783.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end::{{closure}} (2 samples, 0.02%)</title><rect x="18.6650%" y="757" width="0.0157%" height="15" fill="rgb(221,99,41)" fg:x="2374" fg:w="2"/><text x="18.9150%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.02%)</title><rect x="18.6807%" y="773" width="0.0157%" height="15" fill="rgb(213,90,21)" fg:x="2376" fg:w="2"/><text x="18.9307%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.02%)</title><rect x="18.6964%" y="773" width="0.0157%" height="15" fill="rgb(205,208,24)" fg:x="2378" fg:w="2"/><text x="18.9464%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.02%)</title><rect x="18.6964%" y="757" width="0.0157%" height="15" fill="rgb(246,31,12)" fg:x="2378" fg:w="2"/><text x="18.9464%" y="767.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_end (9 samples, 0.07%)</title><rect x="18.6493%" y="789" width="0.0708%" height="15" fill="rgb(213,154,6)" fg:x="2372" fg:w="9"/><text x="18.8993%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.03%)</title><rect x="18.7357%" y="741" width="0.0314%" height="15" fill="rgb(222,163,29)" fg:x="2383" fg:w="4"/><text x="18.9857%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="18.7436%" y="725" width="0.0236%" height="15" fill="rgb(227,201,8)" fg:x="2384" fg:w="3"/><text x="18.9936%" y="735.50"></text></g><g><title>__memmove_sse2_unaligned_erms (3 samples, 0.02%)</title><rect x="18.7436%" y="709" width="0.0236%" height="15" fill="rgb(233,9,32)" fg:x="2384" fg:w="3"/><text x="18.9936%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.06%)</title><rect x="18.7279%" y="757" width="0.0550%" height="15" fill="rgb(217,54,24)" fg:x="2382" fg:w="7"/><text x="18.9779%" y="767.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.02%)</title><rect x="18.7672%" y="741" width="0.0157%" height="15" fill="rgb(235,192,0)" fg:x="2387" fg:w="2"/><text x="19.0172%" y="751.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 0.02%)</title><rect x="18.7672%" y="725" width="0.0157%" height="15" fill="rgb(235,45,9)" fg:x="2387" fg:w="2"/><text x="19.0172%" y="735.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.02%)</title><rect x="18.7672%" y="709" width="0.0157%" height="15" fill="rgb(246,42,40)" fg:x="2387" fg:w="2"/><text x="19.0172%" y="719.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="18.7672%" y="693" width="0.0157%" height="15" fill="rgb(248,111,24)" fg:x="2387" fg:w="2"/><text x="19.0172%" y="703.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.02%)</title><rect x="18.7672%" y="677" width="0.0157%" height="15" fill="rgb(249,65,22)" fg:x="2387" fg:w="2"/><text x="19.0172%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (8 samples, 0.06%)</title><rect x="18.7279%" y="773" width="0.0629%" height="15" fill="rgb(238,111,51)" fg:x="2382" fg:w="8"/><text x="18.9779%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.02%)</title><rect x="18.7908%" y="773" width="0.0157%" height="15" fill="rgb(250,118,22)" fg:x="2390" fg:w="2"/><text x="19.0408%" y="783.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_close (119 samples, 0.94%)</title><rect x="17.8866%" y="805" width="0.9356%" height="15" fill="rgb(234,84,26)" fg:x="2275" fg:w="119"/><text x="18.1366%" y="815.50"></text></g><g><title>quick_xml::reader::parser::Parser::emit_start (13 samples, 0.10%)</title><rect x="18.7200%" y="789" width="0.1022%" height="15" fill="rgb(243,172,12)" fg:x="2381" fg:w="13"/><text x="18.9700%" y="799.50"></text></g><g><title>&lt;flate2::deflate::read::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="18.8851%" y="613" width="0.0314%" height="15" fill="rgb(236,150,49)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="623.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="18.8851%" y="597" width="0.0314%" height="15" fill="rgb(225,197,26)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="607.50"></text></g><g><title>flate2::zio::read (4 samples, 0.03%)</title><rect x="18.8851%" y="581" width="0.0314%" height="15" fill="rgb(214,17,42)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="591.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (4 samples, 0.03%)</title><rect x="18.8851%" y="565" width="0.0314%" height="15" fill="rgb(224,165,40)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="575.50"></text></g><g><title>flate2::mem::Decompress::decompress (4 samples, 0.03%)</title><rect x="18.8851%" y="549" width="0.0314%" height="15" fill="rgb(246,100,4)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="559.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 0.03%)</title><rect x="18.8851%" y="533" width="0.0314%" height="15" fill="rgb(222,103,0)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="543.50"></text></g><g><title>inflate (4 samples, 0.03%)</title><rect x="18.8851%" y="517" width="0.0314%" height="15" fill="rgb(227,189,26)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="527.50"></text></g><g><title>inflate_fast (4 samples, 0.03%)</title><rect x="18.8851%" y="501" width="0.0314%" height="15" fill="rgb(214,202,17)" fg:x="2402" fg:w="4"/><text x="19.1351%" y="511.50"></text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}}::{{closure}} (454 samples, 3.57%)</title><rect x="15.3628%" y="885" width="3.5695%" height="15" fill="rgb(229,111,3)" fg:x="1954" fg:w="454"/><text x="15.6128%" y="895.50">&lt;cal..</text></g><g><title>calamine::xlsx::read_sheet_data (454 samples, 3.57%)</title><rect x="15.3628%" y="869" width="3.5695%" height="15" fill="rgb(229,172,15)" fg:x="1954" fg:w="454"/><text x="15.6128%" y="879.50">cala..</text></g><g><title>calamine::xlsx::read_sheet (454 samples, 3.57%)</title><rect x="15.3628%" y="853" width="3.5695%" height="15" fill="rgb(230,224,35)" fg:x="1954" fg:w="454"/><text x="15.6128%" y="863.50">cala..</text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::Reader&lt;R&gt;&gt;::read_event_into (141 samples, 1.11%)</title><rect x="17.8237%" y="837" width="1.1086%" height="15" fill="rgb(251,141,6)" fg:x="2267" fg:w="141"/><text x="18.0737%" y="847.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_event_impl (139 samples, 1.09%)</title><rect x="17.8395%" y="821" width="1.0929%" height="15" fill="rgb(225,208,6)" fg:x="2269" fg:w="139"/><text x="18.0895%" y="831.50"></text></g><g><title>quick_xml::reader::Reader&lt;R&gt;::read_until_open (14 samples, 0.11%)</title><rect x="18.8222%" y="805" width="0.1101%" height="15" fill="rgb(246,181,16)" fg:x="2394" fg:w="14"/><text x="19.0722%" y="815.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::skip_one (10 samples, 0.08%)</title><rect x="18.8537%" y="789" width="0.0786%" height="15" fill="rgb(227,129,36)" fg:x="2398" fg:w="10"/><text x="19.1037%" y="799.50"></text></g><g><title>quick_xml::reader::buffered_reader::&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::peek_one (9 samples, 0.07%)</title><rect x="18.8615%" y="773" width="0.0708%" height="15" fill="rgb(248,117,24)" fg:x="2399" fg:w="9"/><text x="19.1115%" y="783.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (8 samples, 0.06%)</title><rect x="18.8694%" y="757" width="0.0629%" height="15" fill="rgb(214,185,35)" fg:x="2400" fg:w="8"/><text x="19.1194%" y="767.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (7 samples, 0.06%)</title><rect x="18.8773%" y="741" width="0.0550%" height="15" fill="rgb(236,150,34)" fg:x="2401" fg:w="7"/><text x="19.1273%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (6 samples, 0.05%)</title><rect x="18.8851%" y="725" width="0.0472%" height="15" fill="rgb(243,228,27)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="735.50"></text></g><g><title>std::io::Read::read_buf (6 samples, 0.05%)</title><rect x="18.8851%" y="709" width="0.0472%" height="15" fill="rgb(245,77,44)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="719.50"></text></g><g><title>std::io::default_read_buf (6 samples, 0.05%)</title><rect x="18.8851%" y="693" width="0.0472%" height="15" fill="rgb(235,214,42)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="703.50"></text></g><g><title>std::io::Read::read_buf::{{closure}} (6 samples, 0.05%)</title><rect x="18.8851%" y="677" width="0.0472%" height="15" fill="rgb(221,74,3)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="687.50"></text></g><g><title>&lt;zip::read::ZipFile as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="18.8851%" y="661" width="0.0472%" height="15" fill="rgb(206,121,29)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="671.50"></text></g><g><title>&lt;zip::read::ZipFileReader as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="18.8851%" y="645" width="0.0472%" height="15" fill="rgb(249,131,53)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="655.50"></text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="18.8851%" y="629" width="0.0472%" height="15" fill="rgb(236,170,29)" fg:x="2402" fg:w="6"/><text x="19.1351%" y="639.50"></text></g><g><title>crc32fast::Hasher::update (2 samples, 0.02%)</title><rect x="18.9166%" y="613" width="0.0157%" height="15" fill="rgb(247,96,15)" fg:x="2406" fg:w="2"/><text x="19.1666%" y="623.50"></text></g><g><title>crc32fast::baseline::State::update (2 samples, 0.02%)</title><rect x="18.9166%" y="597" width="0.0157%" height="15" fill="rgb(211,210,7)" fg:x="2406" fg:w="2"/><text x="19.1666%" y="607.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (2 samples, 0.02%)</title><rect x="18.9166%" y="581" width="0.0157%" height="15" fill="rgb(240,88,50)" fg:x="2406" fg:w="2"/><text x="19.1666%" y="591.50"></text></g><g><title>calamine::Range&lt;T&gt;::from_sparse (4 samples, 0.03%)</title><rect x="18.9323%" y="885" width="0.0314%" height="15" fill="rgb(209,229,26)" fg:x="2408" fg:w="4"/><text x="19.1823%" y="895.50"></text></g><g><title>calamine::Reader::worksheet_range_at (459 samples, 3.61%)</title><rect x="15.3628%" y="981" width="3.6088%" height="15" fill="rgb(210,68,23)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="991.50">cala..</text></g><g><title>&lt;calamine::auto::Sheets&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (459 samples, 3.61%)</title><rect x="15.3628%" y="965" width="3.6088%" height="15" fill="rgb(229,180,13)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="975.50">&lt;cal..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range (459 samples, 3.61%)</title><rect x="15.3628%" y="949" width="3.6088%" height="15" fill="rgb(236,53,44)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="959.50">&lt;cal..</text></g><g><title>core::option::Option&lt;T&gt;::map (459 samples, 3.61%)</title><rect x="15.3628%" y="933" width="3.6088%" height="15" fill="rgb(244,214,29)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="943.50">core..</text></g><g><title>&lt;calamine::xlsx::Xlsx&lt;RS&gt; as calamine::Reader&lt;RS&gt;&gt;::worksheet_range::{{closure}} (459 samples, 3.61%)</title><rect x="15.3628%" y="917" width="3.6088%" height="15" fill="rgb(220,75,29)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="927.50">&lt;cal..</text></g><g><title>calamine::xlsx::worksheet (459 samples, 3.61%)</title><rect x="15.3628%" y="901" width="3.6088%" height="15" fill="rgb(214,183,37)" fg:x="1954" fg:w="459"/><text x="15.6128%" y="911.50">cala..</text></g><g><title>core::fmt::Formatter::write_formatted_parts (3 samples, 0.02%)</title><rect x="19.0188%" y="597" width="0.0236%" height="15" fill="rgb(239,117,29)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="19.0188%" y="581" width="0.0236%" height="15" fill="rgb(237,171,35)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="591.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.02%)</title><rect x="19.0188%" y="565" width="0.0236%" height="15" fill="rgb(229,178,53)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="19.0188%" y="549" width="0.0236%" height="15" fill="rgb(210,102,19)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="19.0188%" y="533" width="0.0236%" height="15" fill="rgb(235,127,22)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="19.0188%" y="517" width="0.0236%" height="15" fill="rgb(244,31,31)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="19.0188%" y="501" width="0.0236%" height="15" fill="rgb(231,43,21)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="19.0188%" y="485" width="0.0236%" height="15" fill="rgb(217,131,35)" fg:x="2419" fg:w="3"/><text x="19.2688%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="19.0267%" y="469" width="0.0157%" height="15" fill="rgb(221,149,4)" fg:x="2420" fg:w="2"/><text x="19.2767%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="19.0267%" y="453" width="0.0157%" height="15" fill="rgb(232,170,28)" fg:x="2420" fg:w="2"/><text x="19.2767%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.07%)</title><rect x="18.9795%" y="981" width="0.0708%" height="15" fill="rgb(238,56,10)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9 samples, 0.07%)</title><rect x="18.9795%" y="965" width="0.0708%" height="15" fill="rgb(235,196,14)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.07%)</title><rect x="18.9795%" y="949" width="0.0708%" height="15" fill="rgb(216,45,48)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.07%)</title><rect x="18.9795%" y="933" width="0.0708%" height="15" fill="rgb(238,213,17)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.07%)</title><rect x="18.9795%" y="917" width="0.0708%" height="15" fill="rgb(212,13,2)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9 samples, 0.07%)</title><rect x="18.9795%" y="901" width="0.0708%" height="15" fill="rgb(240,114,20)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.07%)</title><rect x="18.9795%" y="885" width="0.0708%" height="15" fill="rgb(228,41,40)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.07%)</title><rect x="18.9795%" y="869" width="0.0708%" height="15" fill="rgb(244,132,35)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 0.07%)</title><rect x="18.9795%" y="853" width="0.0708%" height="15" fill="rgb(253,189,4)" fg:x="2414" fg:w="9"/><text x="19.2295%" y="863.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}}::{{closure}} (8 samples, 0.06%)</title><rect x="18.9873%" y="837" width="0.0629%" height="15" fill="rgb(224,37,19)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="847.50"></text></g><g><title>itertools::Itertools::collect_vec (8 samples, 0.06%)</title><rect x="18.9873%" y="821" width="0.0629%" height="15" fill="rgb(235,223,18)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.06%)</title><rect x="18.9873%" y="805" width="0.0629%" height="15" fill="rgb(235,163,25)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="18.9873%" y="789" width="0.0629%" height="15" fill="rgb(217,145,28)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="18.9873%" y="773" width="0.0629%" height="15" fill="rgb(223,223,32)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="18.9873%" y="757" width="0.0629%" height="15" fill="rgb(227,189,39)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.06%)</title><rect x="18.9873%" y="741" width="0.0629%" height="15" fill="rgb(248,10,22)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8 samples, 0.06%)</title><rect x="18.9873%" y="725" width="0.0629%" height="15" fill="rgb(248,46,39)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.06%)</title><rect x="18.9873%" y="709" width="0.0629%" height="15" fill="rgb(248,113,48)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.06%)</title><rect x="18.9873%" y="693" width="0.0629%" height="15" fill="rgb(245,16,25)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.06%)</title><rect x="18.9873%" y="677" width="0.0629%" height="15" fill="rgb(249,152,16)" fg:x="2415" fg:w="8"/><text x="19.2373%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (7 samples, 0.06%)</title><rect x="18.9952%" y="661" width="0.0550%" height="15" fill="rgb(250,16,1)" fg:x="2416" fg:w="7"/><text x="19.2452%" y="671.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}}::{{closure}}::{{closure}} (6 samples, 0.05%)</title><rect x="19.0031%" y="645" width="0.0472%" height="15" fill="rgb(249,138,3)" fg:x="2417" fg:w="6"/><text x="19.2531%" y="655.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (4 samples, 0.03%)</title><rect x="19.0188%" y="629" width="0.0314%" height="15" fill="rgb(227,71,41)" fg:x="2419" fg:w="4"/><text x="19.2688%" y="639.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (4 samples, 0.03%)</title><rect x="19.0188%" y="613" width="0.0314%" height="15" fill="rgb(209,184,23)" fg:x="2419" fg:w="4"/><text x="19.2688%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,calamine::Range&lt;calamine::datatype::DataType&gt;)&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="981" width="0.0157%" height="15" fill="rgb(223,215,31)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0502%" y="965" width="0.0157%" height="15" fill="rgb(210,146,28)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,calamine::Range&lt;calamine::datatype::DataType&gt;)]&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="949" width="0.0157%" height="15" fill="rgb(209,183,41)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,calamine::Range&lt;calamine::datatype::DataType&gt;)&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="933" width="0.0157%" height="15" fill="rgb(209,224,45)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::Range&lt;calamine::datatype::DataType&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="917" width="0.0157%" height="15" fill="rgb(224,209,51)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;calamine::datatype::DataType&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="901" width="0.0157%" height="15" fill="rgb(223,17,39)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0502%" y="885" width="0.0157%" height="15" fill="rgb(234,204,37)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[calamine::datatype::DataType]&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="869" width="0.0157%" height="15" fill="rgb(236,120,5)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::datatype::DataType&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="853" width="0.0157%" height="15" fill="rgb(248,97,27)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="837" width="0.0157%" height="15" fill="rgb(240,66,17)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="821" width="0.0157%" height="15" fill="rgb(210,79,3)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0502%" y="805" width="0.0157%" height="15" fill="rgb(214,176,27)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0502%" y="789" width="0.0157%" height="15" fill="rgb(235,185,3)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="19.0502%" y="773" width="0.0157%" height="15" fill="rgb(227,24,12)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="19.0502%" y="757" width="0.0157%" height="15" fill="rgb(252,169,48)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="767.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="19.0502%" y="741" width="0.0157%" height="15" fill="rgb(212,65,1)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="751.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="19.0502%" y="725" width="0.0157%" height="15" fill="rgb(242,39,24)" fg:x="2423" fg:w="2"/><text x="19.3002%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;excel_merge::File&gt;&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="981" width="0.0236%" height="15" fill="rgb(249,32,23)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="19.0660%" y="965" width="0.0236%" height="15" fill="rgb(251,195,23)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;[excel_merge::File]&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="949" width="0.0236%" height="15" fill="rgb(236,174,8)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;excel_merge::File&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="933" width="0.0236%" height="15" fill="rgb(220,197,8)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="917" width="0.0236%" height="15" fill="rgb(240,108,37)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="19.0660%" y="901" width="0.0236%" height="15" fill="rgb(232,176,24)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="885" width="0.0236%" height="15" fill="rgb(243,35,29)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="869" width="0.0236%" height="15" fill="rgb(210,37,18)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="19.0660%" y="853" width="0.0236%" height="15" fill="rgb(224,184,40)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="837" width="0.0236%" height="15" fill="rgb(236,39,29)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="821" width="0.0236%" height="15" fill="rgb(232,48,39)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.02%)</title><rect x="19.0660%" y="805" width="0.0236%" height="15" fill="rgb(236,34,42)" fg:x="2425" fg:w="3"/><text x="19.3160%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0738%" y="789" width="0.0157%" height="15" fill="rgb(243,106,37)" fg:x="2426" fg:w="2"/><text x="19.3238%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0738%" y="773" width="0.0157%" height="15" fill="rgb(218,96,6)" fg:x="2426" fg:w="2"/><text x="19.3238%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::Range&lt;calamine::datatype::DataType&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="981" width="0.0157%" height="15" fill="rgb(235,130,12)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;calamine::datatype::DataType&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="965" width="0.0157%" height="15" fill="rgb(231,95,0)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0974%" y="949" width="0.0157%" height="15" fill="rgb(228,12,23)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[calamine::datatype::DataType]&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="933" width="0.0157%" height="15" fill="rgb(216,12,1)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;calamine::datatype::DataType&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="917" width="0.0157%" height="15" fill="rgb(219,59,3)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="901" width="0.0157%" height="15" fill="rgb(215,208,46)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="885" width="0.0157%" height="15" fill="rgb(254,224,29)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="19.0974%" y="869" width="0.0157%" height="15" fill="rgb(232,14,29)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="19.0974%" y="853" width="0.0157%" height="15" fill="rgb(208,45,52)" fg:x="2429" fg:w="2"/><text x="19.3474%" y="863.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="19.1289%" y="805" width="0.0157%" height="15" fill="rgb(234,191,28)" fg:x="2433" fg:w="2"/><text x="19.3789%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="19.1210%" y="821" width="0.0314%" height="15" fill="rgb(244,67,43)" fg:x="2432" fg:w="4"/><text x="19.3710%" y="831.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (5 samples, 0.04%)</title><rect x="19.1210%" y="965" width="0.0393%" height="15" fill="rgb(236,189,24)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="19.1210%" y="949" width="0.0393%" height="15" fill="rgb(239,214,33)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.04%)</title><rect x="19.1210%" y="933" width="0.0393%" height="15" fill="rgb(226,176,41)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.04%)</title><rect x="19.1210%" y="917" width="0.0393%" height="15" fill="rgb(248,47,8)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.04%)</title><rect x="19.1210%" y="901" width="0.0393%" height="15" fill="rgb(218,81,44)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="19.1210%" y="885" width="0.0393%" height="15" fill="rgb(213,98,6)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.04%)</title><rect x="19.1210%" y="869" width="0.0393%" height="15" fill="rgb(222,85,22)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.04%)</title><rect x="19.1210%" y="853" width="0.0393%" height="15" fill="rgb(239,46,39)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.04%)</title><rect x="19.1210%" y="837" width="0.0393%" height="15" fill="rgb(237,12,29)" fg:x="2432" fg:w="5"/><text x="19.3710%" y="847.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (4 samples, 0.03%)</title><rect x="19.1603%" y="965" width="0.0314%" height="15" fill="rgb(214,77,8)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="975.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.03%)</title><rect x="19.1603%" y="949" width="0.0314%" height="15" fill="rgb(217,168,37)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="959.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="19.1603%" y="933" width="0.0314%" height="15" fill="rgb(221,217,23)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="943.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.03%)</title><rect x="19.1603%" y="917" width="0.0314%" height="15" fill="rgb(243,229,36)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="19.1603%" y="901" width="0.0314%" height="15" fill="rgb(251,163,40)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="19.1603%" y="885" width="0.0314%" height="15" fill="rgb(237,222,12)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.03%)</title><rect x="19.1603%" y="869" width="0.0314%" height="15" fill="rgb(248,132,6)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="19.1603%" y="853" width="0.0314%" height="15" fill="rgb(227,167,50)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.03%)</title><rect x="19.1603%" y="837" width="0.0314%" height="15" fill="rgb(242,84,37)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="19.1603%" y="821" width="0.0314%" height="15" fill="rgb(212,4,50)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="19.1603%" y="805" width="0.0314%" height="15" fill="rgb(230,228,32)" fg:x="2437" fg:w="4"/><text x="19.4103%" y="815.50"></text></g><g><title>core::cmp::max (3 samples, 0.02%)</title><rect x="19.1682%" y="789" width="0.0236%" height="15" fill="rgb(248,217,23)" fg:x="2438" fg:w="3"/><text x="19.4182%" y="799.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.02%)</title><rect x="19.1682%" y="773" width="0.0236%" height="15" fill="rgb(238,197,32)" fg:x="2438" fg:w="3"/><text x="19.4182%" y="783.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.02%)</title><rect x="19.1682%" y="757" width="0.0236%" height="15" fill="rgb(236,106,1)" fg:x="2438" fg:w="3"/><text x="19.4182%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.02%)</title><rect x="19.1996%" y="965" width="0.0157%" height="15" fill="rgb(219,228,13)" fg:x="2442" fg:w="2"/><text x="19.4496%" y="975.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="19.2153%" y="885" width="0.0157%" height="15" fill="rgb(238,30,35)" fg:x="2444" fg:w="2"/><text x="19.4653%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="19.2547%" y="661" width="0.0393%" height="15" fill="rgb(236,70,23)" fg:x="2449" fg:w="5"/><text x="19.5047%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="19.2547%" y="645" width="0.0393%" height="15" fill="rgb(249,104,48)" fg:x="2449" fg:w="5"/><text x="19.5047%" y="655.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="19.2625%" y="629" width="0.0314%" height="15" fill="rgb(254,117,50)" fg:x="2450" fg:w="4"/><text x="19.5125%" y="639.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="19.2704%" y="613" width="0.0236%" height="15" fill="rgb(223,152,4)" fg:x="2451" fg:w="3"/><text x="19.5204%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="19.2547%" y="677" width="0.0550%" height="15" fill="rgb(245,6,2)" fg:x="2449" fg:w="7"/><text x="19.5047%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="19.2940%" y="661" width="0.0157%" height="15" fill="rgb(249,150,24)" fg:x="2454" fg:w="2"/><text x="19.5440%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.11%)</title><rect x="19.2311%" y="741" width="0.1101%" height="15" fill="rgb(228,185,42)" fg:x="2446" fg:w="14"/><text x="19.4811%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.11%)</title><rect x="19.2311%" y="725" width="0.1101%" height="15" fill="rgb(226,39,33)" fg:x="2446" fg:w="14"/><text x="19.4811%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.11%)</title><rect x="19.2311%" y="709" width="0.1101%" height="15" fill="rgb(221,166,19)" fg:x="2446" fg:w="14"/><text x="19.4811%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.11%)</title><rect x="19.2311%" y="693" width="0.1101%" height="15" fill="rgb(209,109,2)" fg:x="2446" fg:w="14"/><text x="19.4811%" y="703.50"></text></g><g><title>core::cmp::max (4 samples, 0.03%)</title><rect x="19.3097%" y="677" width="0.0314%" height="15" fill="rgb(252,216,26)" fg:x="2456" fg:w="4"/><text x="19.5597%" y="687.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.03%)</title><rect x="19.3097%" y="661" width="0.0314%" height="15" fill="rgb(227,173,36)" fg:x="2456" fg:w="4"/><text x="19.5597%" y="671.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.03%)</title><rect x="19.3097%" y="645" width="0.0314%" height="15" fill="rgb(209,90,7)" fg:x="2456" fg:w="4"/><text x="19.5597%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="19.3176%" y="629" width="0.0236%" height="15" fill="rgb(250,194,11)" fg:x="2457" fg:w="3"/><text x="19.5676%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.02%)</title><rect x="19.3254%" y="613" width="0.0157%" height="15" fill="rgb(220,72,50)" fg:x="2458" fg:w="2"/><text x="19.5754%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (15 samples, 0.12%)</title><rect x="19.2311%" y="757" width="0.1179%" height="15" fill="rgb(222,106,48)" fg:x="2446" fg:w="15"/><text x="19.4811%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (16 samples, 0.13%)</title><rect x="19.2311%" y="821" width="0.1258%" height="15" fill="rgb(216,220,45)" fg:x="2446" fg:w="16"/><text x="19.4811%" y="831.50"></text></g><g><title>alloc::string::String::push_str (16 samples, 0.13%)</title><rect x="19.2311%" y="805" width="0.1258%" height="15" fill="rgb(234,112,18)" fg:x="2446" fg:w="16"/><text x="19.4811%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 0.13%)</title><rect x="19.2311%" y="789" width="0.1258%" height="15" fill="rgb(206,179,9)" fg:x="2446" fg:w="16"/><text x="19.4811%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.13%)</title><rect x="19.2311%" y="773" width="0.1258%" height="15" fill="rgb(215,115,40)" fg:x="2446" fg:w="16"/><text x="19.4811%" y="783.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (17 samples, 0.13%)</title><rect x="19.2311%" y="869" width="0.1337%" height="15" fill="rgb(222,69,34)" fg:x="2446" fg:w="17"/><text x="19.4811%" y="879.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (17 samples, 0.13%)</title><rect x="19.2311%" y="853" width="0.1337%" height="15" fill="rgb(209,161,10)" fg:x="2446" fg:w="17"/><text x="19.4811%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (17 samples, 0.13%)</title><rect x="19.2311%" y="837" width="0.1337%" height="15" fill="rgb(217,6,38)" fg:x="2446" fg:w="17"/><text x="19.4811%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.06%)</title><rect x="19.3805%" y="805" width="0.0629%" height="15" fill="rgb(229,229,48)" fg:x="2465" fg:w="8"/><text x="19.6305%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.06%)</title><rect x="19.3883%" y="789" width="0.0550%" height="15" fill="rgb(225,21,28)" fg:x="2466" fg:w="7"/><text x="19.6383%" y="799.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.06%)</title><rect x="19.3883%" y="773" width="0.0550%" height="15" fill="rgb(206,33,13)" fg:x="2466" fg:w="7"/><text x="19.6383%" y="783.50"></text></g><g><title>__realloc (7 samples, 0.06%)</title><rect x="19.3883%" y="757" width="0.0550%" height="15" fill="rgb(242,178,17)" fg:x="2466" fg:w="7"/><text x="19.6383%" y="767.50"></text></g><g><title>_int_realloc (7 samples, 0.06%)</title><rect x="19.3883%" y="741" width="0.0550%" height="15" fill="rgb(220,162,5)" fg:x="2466" fg:w="7"/><text x="19.6383%" y="751.50"></text></g><g><title>_int_malloc (6 samples, 0.05%)</title><rect x="19.3962%" y="725" width="0.0472%" height="15" fill="rgb(210,33,43)" fg:x="2467" fg:w="6"/><text x="19.6462%" y="735.50"></text></g><g><title>sysmalloc (6 samples, 0.05%)</title><rect x="19.3962%" y="709" width="0.0472%" height="15" fill="rgb(216,116,54)" fg:x="2467" fg:w="6"/><text x="19.6462%" y="719.50"></text></g><g><title>__GI___mprotect (3 samples, 0.02%)</title><rect x="19.4198%" y="693" width="0.0236%" height="15" fill="rgb(249,92,24)" fg:x="2470" fg:w="3"/><text x="19.6698%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.07%)</title><rect x="19.3805%" y="821" width="0.0708%" height="15" fill="rgb(231,189,14)" fg:x="2465" fg:w="9"/><text x="19.6305%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.09%)</title><rect x="19.3647%" y="869" width="0.0943%" height="15" fill="rgb(230,8,41)" fg:x="2463" fg:w="12"/><text x="19.6147%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.09%)</title><rect x="19.3726%" y="853" width="0.0865%" height="15" fill="rgb(249,7,27)" fg:x="2464" fg:w="11"/><text x="19.6226%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.09%)</title><rect x="19.3726%" y="837" width="0.0865%" height="15" fill="rgb(232,86,5)" fg:x="2464" fg:w="11"/><text x="19.6226%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="19.4827%" y="789" width="0.0629%" height="15" fill="rgb(224,175,18)" fg:x="2478" fg:w="8"/><text x="19.7327%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="19.4827%" y="773" width="0.0629%" height="15" fill="rgb(220,129,12)" fg:x="2478" fg:w="8"/><text x="19.7327%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="19.4827%" y="757" width="0.0629%" height="15" fill="rgb(210,19,36)" fg:x="2478" fg:w="8"/><text x="19.7327%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.06%)</title><rect x="19.4905%" y="741" width="0.0550%" height="15" fill="rgb(219,96,14)" fg:x="2479" fg:w="7"/><text x="19.7405%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="19.5298%" y="725" width="0.0157%" height="15" fill="rgb(249,106,1)" fg:x="2484" fg:w="2"/><text x="19.7798%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="19.5456%" y="789" width="0.0157%" height="15" fill="rgb(249,155,20)" fg:x="2486" fg:w="2"/><text x="19.7956%" y="799.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="19.5456%" y="773" width="0.0157%" height="15" fill="rgb(244,168,9)" fg:x="2486" fg:w="2"/><text x="19.7956%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.02%)</title><rect x="19.6006%" y="677" width="0.0236%" height="15" fill="rgb(216,23,50)" fg:x="2493" fg:w="3"/><text x="19.8506%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.06%)</title><rect x="19.5691%" y="693" width="0.0629%" height="15" fill="rgb(224,219,20)" fg:x="2489" fg:w="8"/><text x="19.8191%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 0.18%)</title><rect x="19.4748%" y="821" width="0.1808%" height="15" fill="rgb(222,156,15)" fg:x="2477" fg:w="23"/><text x="19.7248%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.17%)</title><rect x="19.4827%" y="805" width="0.1730%" height="15" fill="rgb(231,97,17)" fg:x="2478" fg:w="22"/><text x="19.7327%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.09%)</title><rect x="19.5613%" y="789" width="0.0943%" height="15" fill="rgb(218,70,48)" fg:x="2488" fg:w="12"/><text x="19.8113%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12 samples, 0.09%)</title><rect x="19.5613%" y="773" width="0.0943%" height="15" fill="rgb(212,196,52)" fg:x="2488" fg:w="12"/><text x="19.8113%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12 samples, 0.09%)</title><rect x="19.5613%" y="757" width="0.0943%" height="15" fill="rgb(243,203,18)" fg:x="2488" fg:w="12"/><text x="19.8113%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (12 samples, 0.09%)</title><rect x="19.5613%" y="741" width="0.0943%" height="15" fill="rgb(252,125,41)" fg:x="2488" fg:w="12"/><text x="19.8113%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (11 samples, 0.09%)</title><rect x="19.5691%" y="725" width="0.0865%" height="15" fill="rgb(223,180,33)" fg:x="2489" fg:w="11"/><text x="19.8191%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (11 samples, 0.09%)</title><rect x="19.5691%" y="709" width="0.0865%" height="15" fill="rgb(254,159,46)" fg:x="2489" fg:w="11"/><text x="19.8191%" y="719.50"></text></g><g><title>core::hash::Hasher::write_u8 (3 samples, 0.02%)</title><rect x="19.6320%" y="693" width="0.0236%" height="15" fill="rgb(254,38,10)" fg:x="2497" fg:w="3"/><text x="19.8820%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="19.6320%" y="677" width="0.0236%" height="15" fill="rgb(208,217,32)" fg:x="2497" fg:w="3"/><text x="19.8820%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="19.6556%" y="773" width="0.0157%" height="15" fill="rgb(221,120,13)" fg:x="2500" fg:w="2"/><text x="19.9056%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="19.6556%" y="757" width="0.0157%" height="15" fill="rgb(246,54,52)" fg:x="2500" fg:w="2"/><text x="19.9056%" y="767.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.02%)</title><rect x="19.6714%" y="757" width="0.0157%" height="15" fill="rgb(242,34,25)" fg:x="2502" fg:w="2"/><text x="19.9214%" y="767.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.02%)</title><rect x="19.6714%" y="741" width="0.0157%" height="15" fill="rgb(247,209,9)" fg:x="2502" fg:w="2"/><text x="19.9214%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.02%)</title><rect x="19.6714%" y="725" width="0.0157%" height="15" fill="rgb(228,71,26)" fg:x="2502" fg:w="2"/><text x="19.9214%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.02%)</title><rect x="19.6714%" y="773" width="0.0236%" height="15" fill="rgb(222,145,49)" fg:x="2502" fg:w="3"/><text x="19.9214%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="19.6949%" y="773" width="0.0157%" height="15" fill="rgb(218,121,17)" fg:x="2505" fg:w="2"/><text x="19.9449%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (64 samples, 0.50%)</title><rect x="19.2153%" y="901" width="0.5032%" height="15" fill="rgb(244,50,7)" fg:x="2444" fg:w="64"/><text x="19.4653%" y="911.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}}::{{closure}}::{{closure}} (62 samples, 0.49%)</title><rect x="19.2311%" y="885" width="0.4875%" height="15" fill="rgb(246,229,37)" fg:x="2446" fg:w="62"/><text x="19.4811%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33 samples, 0.26%)</title><rect x="19.4591%" y="869" width="0.2595%" height="15" fill="rgb(225,18,5)" fg:x="2475" fg:w="33"/><text x="19.7091%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (32 samples, 0.25%)</title><rect x="19.4669%" y="853" width="0.2516%" height="15" fill="rgb(213,204,8)" fg:x="2476" fg:w="32"/><text x="19.7169%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (32 samples, 0.25%)</title><rect x="19.4669%" y="837" width="0.2516%" height="15" fill="rgb(238,103,6)" fg:x="2476" fg:w="32"/><text x="19.7169%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.06%)</title><rect x="19.6556%" y="821" width="0.0629%" height="15" fill="rgb(222,25,35)" fg:x="2500" fg:w="8"/><text x="19.9056%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.06%)</title><rect x="19.6556%" y="805" width="0.0629%" height="15" fill="rgb(213,203,35)" fg:x="2500" fg:w="8"/><text x="19.9056%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.06%)</title><rect x="19.6556%" y="789" width="0.0629%" height="15" fill="rgb(221,79,53)" fg:x="2500" fg:w="8"/><text x="19.9056%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="19.7185%" y="837" width="0.0157%" height="15" fill="rgb(243,200,35)" fg:x="2508" fg:w="2"/><text x="19.9685%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="19.7185%" y="821" width="0.0157%" height="15" fill="rgb(248,60,25)" fg:x="2508" fg:w="2"/><text x="19.9685%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="19.7185%" y="805" width="0.0157%" height="15" fill="rgb(227,53,46)" fg:x="2508" fg:w="2"/><text x="19.9685%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="19.7185%" y="869" width="0.0236%" height="15" fill="rgb(216,120,32)" fg:x="2508" fg:w="3"/><text x="19.9685%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.02%)</title><rect x="19.7185%" y="853" width="0.0236%" height="15" fill="rgb(220,134,1)" fg:x="2508" fg:w="3"/><text x="19.9685%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.03%)</title><rect x="19.7185%" y="901" width="0.0314%" height="15" fill="rgb(237,168,5)" fg:x="2508" fg:w="4"/><text x="19.9685%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="19.7185%" y="885" width="0.0314%" height="15" fill="rgb(231,100,33)" fg:x="2508" fg:w="4"/><text x="19.9685%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="19.7736%" y="613" width="0.0157%" height="15" fill="rgb(236,177,47)" fg:x="2515" fg:w="2"/><text x="20.0236%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.03%)</title><rect x="19.7736%" y="661" width="0.0314%" height="15" fill="rgb(235,7,49)" fg:x="2515" fg:w="4"/><text x="20.0236%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.03%)</title><rect x="19.7736%" y="645" width="0.0314%" height="15" fill="rgb(232,119,22)" fg:x="2515" fg:w="4"/><text x="20.0236%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.03%)</title><rect x="19.7736%" y="629" width="0.0314%" height="15" fill="rgb(254,73,53)" fg:x="2515" fg:w="4"/><text x="20.0236%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="19.7893%" y="613" width="0.0157%" height="15" fill="rgb(251,35,20)" fg:x="2517" fg:w="2"/><text x="20.0393%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.02%)</title><rect x="19.8050%" y="661" width="0.0236%" height="15" fill="rgb(241,119,20)" fg:x="2519" fg:w="3"/><text x="20.0550%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.02%)</title><rect x="19.8050%" y="645" width="0.0236%" height="15" fill="rgb(207,102,14)" fg:x="2519" fg:w="3"/><text x="20.0550%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.02%)</title><rect x="19.8050%" y="629" width="0.0236%" height="15" fill="rgb(248,201,50)" fg:x="2519" fg:w="3"/><text x="20.0550%" y="639.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="19.8129%" y="613" width="0.0157%" height="15" fill="rgb(222,185,44)" fg:x="2520" fg:w="2"/><text x="20.0629%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="19.8365%" y="533" width="0.0157%" height="15" fill="rgb(218,107,18)" fg:x="2523" fg:w="2"/><text x="20.0865%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="19.8365%" y="549" width="0.0393%" height="15" fill="rgb(237,177,39)" fg:x="2523" fg:w="5"/><text x="20.0865%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="19.8601%" y="533" width="0.0157%" height="15" fill="rgb(246,69,6)" fg:x="2526" fg:w="2"/><text x="20.1101%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.12%)</title><rect x="19.7736%" y="693" width="0.1179%" height="15" fill="rgb(234,208,37)" fg:x="2515" fg:w="15"/><text x="20.0236%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.12%)</title><rect x="19.7736%" y="677" width="0.1179%" height="15" fill="rgb(225,4,6)" fg:x="2515" fg:w="15"/><text x="20.0236%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.06%)</title><rect x="19.8286%" y="661" width="0.0629%" height="15" fill="rgb(233,45,0)" fg:x="2522" fg:w="8"/><text x="20.0786%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.06%)</title><rect x="19.8286%" y="645" width="0.0629%" height="15" fill="rgb(226,136,5)" fg:x="2522" fg:w="8"/><text x="20.0786%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="19.8365%" y="629" width="0.0550%" height="15" fill="rgb(211,91,47)" fg:x="2523" fg:w="7"/><text x="20.0865%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.06%)</title><rect x="19.8365%" y="613" width="0.0550%" height="15" fill="rgb(242,88,51)" fg:x="2523" fg:w="7"/><text x="20.0865%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="19.8365%" y="597" width="0.0550%" height="15" fill="rgb(230,91,28)" fg:x="2523" fg:w="7"/><text x="20.0865%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="19.8365%" y="581" width="0.0550%" height="15" fill="rgb(254,186,29)" fg:x="2523" fg:w="7"/><text x="20.0865%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="19.8365%" y="565" width="0.0550%" height="15" fill="rgb(238,6,4)" fg:x="2523" fg:w="7"/><text x="20.0865%" y="575.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.02%)</title><rect x="19.8758%" y="549" width="0.0157%" height="15" fill="rgb(221,151,16)" fg:x="2528" fg:w="2"/><text x="20.1258%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="19.8758%" y="533" width="0.0157%" height="15" fill="rgb(251,143,52)" fg:x="2528" fg:w="2"/><text x="20.1258%" y="543.50"></text></g><g><title>core::cmp::min (2 samples, 0.02%)</title><rect x="19.8758%" y="517" width="0.0157%" height="15" fill="rgb(206,90,15)" fg:x="2528" fg:w="2"/><text x="20.1258%" y="527.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.02%)</title><rect x="19.8758%" y="501" width="0.0157%" height="15" fill="rgb(218,35,8)" fg:x="2528" fg:w="2"/><text x="20.1258%" y="511.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.02%)</title><rect x="19.8758%" y="485" width="0.0157%" height="15" fill="rgb(239,215,6)" fg:x="2528" fg:w="2"/><text x="20.1258%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4 samples, 0.03%)</title><rect x="19.8915%" y="693" width="0.0314%" height="15" fill="rgb(245,116,39)" fg:x="2530" fg:w="4"/><text x="20.1415%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (3 samples, 0.02%)</title><rect x="19.8994%" y="677" width="0.0236%" height="15" fill="rgb(242,65,28)" fg:x="2531" fg:w="3"/><text x="20.1494%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 0.18%)</title><rect x="19.7500%" y="837" width="0.1808%" height="15" fill="rgb(252,132,53)" fg:x="2512" fg:w="23"/><text x="20.0000%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.18%)</title><rect x="19.7500%" y="821" width="0.1808%" height="15" fill="rgb(224,159,50)" fg:x="2512" fg:w="23"/><text x="20.0000%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.18%)</title><rect x="19.7500%" y="805" width="0.1808%" height="15" fill="rgb(224,93,4)" fg:x="2512" fg:w="23"/><text x="20.0000%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.18%)</title><rect x="19.7500%" y="789" width="0.1808%" height="15" fill="rgb(208,81,34)" fg:x="2512" fg:w="23"/><text x="20.0000%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (22 samples, 0.17%)</title><rect x="19.7578%" y="773" width="0.1730%" height="15" fill="rgb(233,92,54)" fg:x="2513" fg:w="22"/><text x="20.0078%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.17%)</title><rect x="19.7578%" y="757" width="0.1730%" height="15" fill="rgb(237,21,14)" fg:x="2513" fg:w="22"/><text x="20.0078%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (22 samples, 0.17%)</title><rect x="19.7578%" y="741" width="0.1730%" height="15" fill="rgb(249,128,51)" fg:x="2513" fg:w="22"/><text x="20.0078%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (22 samples, 0.17%)</title><rect x="19.7578%" y="725" width="0.1730%" height="15" fill="rgb(223,129,24)" fg:x="2513" fg:w="22"/><text x="20.0078%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.17%)</title><rect x="19.7578%" y="709" width="0.1730%" height="15" fill="rgb(231,168,25)" fg:x="2513" fg:w="22"/><text x="20.0078%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.02%)</title><rect x="19.9544%" y="741" width="0.0157%" height="15" fill="rgb(224,39,20)" fg:x="2538" fg:w="2"/><text x="20.2044%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.23%)</title><rect x="19.7500%" y="869" width="0.2280%" height="15" fill="rgb(225,152,53)" fg:x="2512" fg:w="29"/><text x="20.0000%" y="879.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.23%)</title><rect x="19.7500%" y="853" width="0.2280%" height="15" fill="rgb(252,17,24)" fg:x="2512" fg:w="29"/><text x="20.0000%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (6 samples, 0.05%)</title><rect x="19.9308%" y="837" width="0.0472%" height="15" fill="rgb(250,114,30)" fg:x="2535" fg:w="6"/><text x="20.1808%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.05%)</title><rect x="19.9308%" y="821" width="0.0472%" height="15" fill="rgb(229,5,4)" fg:x="2535" fg:w="6"/><text x="20.1808%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.05%)</title><rect x="19.9308%" y="805" width="0.0472%" height="15" fill="rgb(225,176,49)" fg:x="2535" fg:w="6"/><text x="20.1808%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (6 samples, 0.05%)</title><rect x="19.9308%" y="789" width="0.0472%" height="15" fill="rgb(224,221,49)" fg:x="2535" fg:w="6"/><text x="20.1808%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (6 samples, 0.05%)</title><rect x="19.9308%" y="773" width="0.0472%" height="15" fill="rgb(253,169,27)" fg:x="2535" fg:w="6"/><text x="20.1808%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (4 samples, 0.03%)</title><rect x="19.9465%" y="757" width="0.0314%" height="15" fill="rgb(211,206,16)" fg:x="2537" fg:w="4"/><text x="20.1965%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.24%)</title><rect x="19.7500%" y="901" width="0.2359%" height="15" fill="rgb(244,87,35)" fg:x="2512" fg:w="30"/><text x="20.0000%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (30 samples, 0.24%)</title><rect x="19.7500%" y="885" width="0.2359%" height="15" fill="rgb(246,28,10)" fg:x="2512" fg:w="30"/><text x="20.0000%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (4 samples, 0.03%)</title><rect x="19.9937%" y="901" width="0.0314%" height="15" fill="rgb(229,12,44)" fg:x="2543" fg:w="4"/><text x="20.2437%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="19.9937%" y="885" width="0.0314%" height="15" fill="rgb(210,145,37)" fg:x="2543" fg:w="4"/><text x="20.2437%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (4 samples, 0.03%)</title><rect x="19.9937%" y="869" width="0.0314%" height="15" fill="rgb(227,112,52)" fg:x="2543" fg:w="4"/><text x="20.2437%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.02%)</title><rect x="20.0016%" y="853" width="0.0236%" height="15" fill="rgb(238,155,34)" fg:x="2544" fg:w="3"/><text x="20.2516%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0016%" y="837" width="0.0236%" height="15" fill="rgb(239,226,36)" fg:x="2544" fg:w="3"/><text x="20.2516%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0016%" y="821" width="0.0236%" height="15" fill="rgb(230,16,23)" fg:x="2544" fg:w="3"/><text x="20.2516%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="20.0016%" y="805" width="0.0236%" height="15" fill="rgb(236,171,36)" fg:x="2544" fg:w="3"/><text x="20.2516%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="20.0094%" y="789" width="0.0157%" height="15" fill="rgb(221,22,14)" fg:x="2545" fg:w="2"/><text x="20.2594%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="20.0094%" y="773" width="0.0157%" height="15" fill="rgb(242,43,11)" fg:x="2545" fg:w="2"/><text x="20.2594%" y="783.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="20.0094%" y="757" width="0.0157%" height="15" fill="rgb(232,69,23)" fg:x="2545" fg:w="2"/><text x="20.2594%" y="767.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="20.0094%" y="741" width="0.0157%" height="15" fill="rgb(216,180,54)" fg:x="2545" fg:w="2"/><text x="20.2594%" y="751.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (106 samples, 0.83%)</title><rect x="19.2153%" y="965" width="0.8334%" height="15" fill="rgb(216,5,24)" fg:x="2444" fg:w="106"/><text x="19.4653%" y="975.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (106 samples, 0.83%)</title><rect x="19.2153%" y="949" width="0.8334%" height="15" fill="rgb(225,89,9)" fg:x="2444" fg:w="106"/><text x="19.4653%" y="959.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (106 samples, 0.83%)</title><rect x="19.2153%" y="933" width="0.8334%" height="15" fill="rgb(243,75,33)" fg:x="2444" fg:w="106"/><text x="19.4653%" y="943.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}}::{{closure}} (106 samples, 0.83%)</title><rect x="19.2153%" y="917" width="0.8334%" height="15" fill="rgb(247,141,45)" fg:x="2444" fg:w="106"/><text x="19.4653%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;alloc::string::String,&amp;alloc::string::String&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0252%" y="901" width="0.0236%" height="15" fill="rgb(232,177,36)" fg:x="2547" fg:w="3"/><text x="20.2752%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;alloc::string::String,&amp;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0252%" y="885" width="0.0236%" height="15" fill="rgb(219,125,36)" fg:x="2547" fg:w="3"/><text x="20.2752%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;alloc::string::String,&amp;alloc::string::String)&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0252%" y="869" width="0.0236%" height="15" fill="rgb(227,94,9)" fg:x="2547" fg:w="3"/><text x="20.2752%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="20.0252%" y="853" width="0.0236%" height="15" fill="rgb(240,34,52)" fg:x="2547" fg:w="3"/><text x="20.2752%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="20.0330%" y="837" width="0.0157%" height="15" fill="rgb(216,45,12)" fg:x="2548" fg:w="2"/><text x="20.2830%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="20.0330%" y="821" width="0.0157%" height="15" fill="rgb(246,21,19)" fg:x="2548" fg:w="2"/><text x="20.2830%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (2 samples, 0.02%)</title><rect x="20.0330%" y="805" width="0.0157%" height="15" fill="rgb(213,98,42)" fg:x="2548" fg:w="2"/><text x="20.2830%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.04%)</title><rect x="20.0645%" y="853" width="0.0393%" height="15" fill="rgb(250,136,47)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="20.0645%" y="837" width="0.0393%" height="15" fill="rgb(251,124,27)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.04%)</title><rect x="20.0645%" y="821" width="0.0393%" height="15" fill="rgb(229,180,14)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.04%)</title><rect x="20.0645%" y="805" width="0.0393%" height="15" fill="rgb(245,216,25)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="815.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.04%)</title><rect x="20.0645%" y="789" width="0.0393%" height="15" fill="rgb(251,43,5)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="799.50"></text></g><g><title>__realloc (5 samples, 0.04%)</title><rect x="20.0645%" y="773" width="0.0393%" height="15" fill="rgb(250,128,24)" fg:x="2552" fg:w="5"/><text x="20.3145%" y="783.50"></text></g><g><title>_int_realloc (4 samples, 0.03%)</title><rect x="20.0723%" y="757" width="0.0314%" height="15" fill="rgb(217,117,27)" fg:x="2553" fg:w="4"/><text x="20.3223%" y="767.50"></text></g><g><title>_int_malloc (4 samples, 0.03%)</title><rect x="20.0723%" y="741" width="0.0314%" height="15" fill="rgb(245,147,4)" fg:x="2553" fg:w="4"/><text x="20.3223%" y="751.50"></text></g><g><title>sysmalloc (4 samples, 0.03%)</title><rect x="20.0723%" y="725" width="0.0314%" height="15" fill="rgb(242,201,35)" fg:x="2553" fg:w="4"/><text x="20.3223%" y="735.50"></text></g><g><title>__GI___mprotect (4 samples, 0.03%)</title><rect x="20.0723%" y="709" width="0.0314%" height="15" fill="rgb(218,181,1)" fg:x="2553" fg:w="4"/><text x="20.3223%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.06%)</title><rect x="20.0566%" y="901" width="0.0550%" height="15" fill="rgb(222,6,29)" fg:x="2551" fg:w="7"/><text x="20.3066%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.06%)</title><rect x="20.0566%" y="885" width="0.0550%" height="15" fill="rgb(208,186,3)" fg:x="2551" fg:w="7"/><text x="20.3066%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.06%)</title><rect x="20.0566%" y="869" width="0.0550%" height="15" fill="rgb(216,36,26)" fg:x="2551" fg:w="7"/><text x="20.3066%" y="879.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="20.1274%" y="789" width="0.0393%" height="15" fill="rgb(248,201,23)" fg:x="2560" fg:w="5"/><text x="20.3774%" y="799.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="20.1274%" y="773" width="0.0393%" height="15" fill="rgb(251,170,31)" fg:x="2560" fg:w="5"/><text x="20.3774%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17 samples, 0.13%)</title><rect x="20.0566%" y="933" width="0.1337%" height="15" fill="rgb(207,110,25)" fg:x="2551" fg:w="17"/><text x="20.3066%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (17 samples, 0.13%)</title><rect x="20.0566%" y="917" width="0.1337%" height="15" fill="rgb(250,54,15)" fg:x="2551" fg:w="17"/><text x="20.3066%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.08%)</title><rect x="20.1116%" y="901" width="0.0786%" height="15" fill="rgb(227,68,33)" fg:x="2558" fg:w="10"/><text x="20.3616%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.08%)</title><rect x="20.1116%" y="885" width="0.0786%" height="15" fill="rgb(238,34,41)" fg:x="2558" fg:w="10"/><text x="20.3616%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.08%)</title><rect x="20.1116%" y="869" width="0.0786%" height="15" fill="rgb(220,11,15)" fg:x="2558" fg:w="10"/><text x="20.3616%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.07%)</title><rect x="20.1195%" y="853" width="0.0708%" height="15" fill="rgb(246,111,35)" fg:x="2559" fg:w="9"/><text x="20.3695%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (9 samples, 0.07%)</title><rect x="20.1195%" y="837" width="0.0708%" height="15" fill="rgb(209,88,53)" fg:x="2559" fg:w="9"/><text x="20.3695%" y="847.50"></text></g><g><title>core::ops::function::FnMut::call_mut (9 samples, 0.07%)</title><rect x="20.1195%" y="821" width="0.0708%" height="15" fill="rgb(231,185,47)" fg:x="2559" fg:w="9"/><text x="20.3695%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.07%)</title><rect x="20.1195%" y="805" width="0.0708%" height="15" fill="rgb(233,154,1)" fg:x="2559" fg:w="9"/><text x="20.3695%" y="815.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="20.1745%" y="789" width="0.0157%" height="15" fill="rgb(225,15,46)" fg:x="2566" fg:w="2"/><text x="20.4245%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18 samples, 0.14%)</title><rect x="20.0566%" y="965" width="0.1415%" height="15" fill="rgb(211,135,41)" fg:x="2551" fg:w="18"/><text x="20.3066%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (18 samples, 0.14%)</title><rect x="20.0566%" y="949" width="0.1415%" height="15" fill="rgb(208,54,0)" fg:x="2551" fg:w="18"/><text x="20.3066%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (14 samples, 0.11%)</title><rect x="21.4246%" y="805" width="0.1101%" height="15" fill="rgb(244,136,14)" fg:x="2725" fg:w="14"/><text x="21.6746%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14 samples, 0.11%)</title><rect x="21.4246%" y="789" width="0.1101%" height="15" fill="rgb(241,56,14)" fg:x="2725" fg:w="14"/><text x="21.6746%" y="799.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (39 samples, 0.31%)</title><rect x="21.5347%" y="789" width="0.3066%" height="15" fill="rgb(205,80,24)" fg:x="2739" fg:w="39"/><text x="21.7847%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.61%)</title><rect x="21.2595%" y="821" width="0.6133%" height="15" fill="rgb(220,57,4)" fg:x="2704" fg:w="78"/><text x="21.5095%" y="831.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (43 samples, 0.34%)</title><rect x="21.5347%" y="805" width="0.3381%" height="15" fill="rgb(226,193,50)" fg:x="2739" fg:w="43"/><text x="21.7847%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (4 samples, 0.03%)</title><rect x="21.8413%" y="789" width="0.0314%" height="15" fill="rgb(231,168,22)" fg:x="2778" fg:w="4"/><text x="22.0913%" y="799.50"></text></g><g><title>__free (773 samples, 6.08%)</title><rect x="23.7047%" y="757" width="6.0775%" height="15" fill="rgb(254,215,14)" fg:x="3015" fg:w="773"/><text x="23.9547%" y="767.50">__free</text></g><g><title>_int_free (590 samples, 4.64%)</title><rect x="25.1435%" y="741" width="4.6387%" height="15" fill="rgb(211,115,16)" fg:x="3198" fg:w="590"/><text x="25.3935%" y="751.50">_int_..</text></g><g><title>__rdl_dealloc (7 samples, 0.06%)</title><rect x="29.7822%" y="757" width="0.0550%" height="15" fill="rgb(236,210,16)" fg:x="3788" fg:w="7"/><text x="30.0322%" y="767.50"></text></g><g><title>__rust_dealloc (14 samples, 0.11%)</title><rect x="29.8373%" y="757" width="0.1101%" height="15" fill="rgb(221,94,12)" fg:x="3795" fg:w="14"/><text x="30.0873%" y="767.50"></text></g><g><title>core::alloc::layout::Layout::align (36 samples, 0.28%)</title><rect x="29.9473%" y="757" width="0.2830%" height="15" fill="rgb(235,218,49)" fg:x="3809" fg:w="36"/><text x="30.1973%" y="767.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (30 samples, 0.24%)</title><rect x="29.9945%" y="741" width="0.2359%" height="15" fill="rgb(217,114,14)" fg:x="3815" fg:w="30"/><text x="30.2445%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (853 samples, 6.71%)</title><rect x="23.5789%" y="773" width="6.7065%" height="15" fill="rgb(216,145,22)" fg:x="2999" fg:w="853"/><text x="23.8289%" y="783.50">alloc::al..</text></g><g><title>core::alloc::layout::Layout::size (7 samples, 0.06%)</title><rect x="30.2304%" y="757" width="0.0550%" height="15" fill="rgb(217,112,39)" fg:x="3845" fg:w="7"/><text x="30.4804%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (961 samples, 7.56%)</title><rect x="22.8713%" y="789" width="7.5556%" height="15" fill="rgb(225,85,32)" fg:x="2909" fg:w="961"/><text x="23.1213%" y="799.50">&lt;alloc::al..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (18 samples, 0.14%)</title><rect x="30.2854%" y="773" width="0.1415%" height="15" fill="rgb(245,209,47)" fg:x="3852" fg:w="18"/><text x="30.5354%" y="783.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (16 samples, 0.13%)</title><rect x="33.0529%" y="741" width="0.1258%" height="15" fill="rgb(218,220,15)" fg:x="4204" fg:w="16"/><text x="33.3029%" y="751.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (87 samples, 0.68%)</title><rect x="33.0529%" y="773" width="0.6840%" height="15" fill="rgb(222,202,31)" fg:x="4204" fg:w="87"/><text x="33.3029%" y="783.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (87 samples, 0.68%)</title><rect x="33.0529%" y="757" width="0.6840%" height="15" fill="rgb(243,203,4)" fg:x="4204" fg:w="87"/><text x="33.3029%" y="767.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (71 samples, 0.56%)</title><rect x="33.1787%" y="741" width="0.5582%" height="15" fill="rgb(237,92,17)" fg:x="4220" fg:w="71"/><text x="33.4287%" y="751.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (11 samples, 0.09%)</title><rect x="33.6504%" y="725" width="0.0865%" height="15" fill="rgb(231,119,7)" fg:x="4280" fg:w="11"/><text x="33.9004%" y="735.50"></text></g><g><title>core::mem::align_of (2 samples, 0.02%)</title><rect x="33.7448%" y="773" width="0.0157%" height="15" fill="rgb(237,82,41)" fg:x="4292" fg:w="2"/><text x="33.9948%" y="783.50"></text></g><g><title>core::mem::size_of (7 samples, 0.06%)</title><rect x="33.7605%" y="773" width="0.0550%" height="15" fill="rgb(226,81,48)" fg:x="4294" fg:w="7"/><text x="34.0105%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (11 samples, 0.09%)</title><rect x="33.8156%" y="773" width="0.0865%" height="15" fill="rgb(234,70,51)" fg:x="4301" fg:w="11"/><text x="34.0656%" y="783.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (33 samples, 0.26%)</title><rect x="33.9099%" y="757" width="0.2595%" height="15" fill="rgb(251,86,4)" fg:x="4313" fg:w="33"/><text x="34.1599%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,853 samples, 14.57%)</title><rect x="20.1981%" y="901" width="14.5688%" height="15" fill="rgb(244,144,28)" fg:x="2569" fg:w="1853"/><text x="20.4481%" y="911.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)]&gt; (1,853 samples, 14.57%)</title><rect x="20.1981%" y="885" width="14.5688%" height="15" fill="rgb(232,161,39)" fg:x="2569" fg:w="1853"/><text x="20.4481%" y="895.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt; (1,848 samples, 14.53%)</title><rect x="20.2374%" y="869" width="14.5294%" height="15" fill="rgb(247,34,51)" fg:x="2574" fg:w="1848"/><text x="20.4874%" y="879.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,821 samples, 14.32%)</title><rect x="20.4497%" y="853" width="14.3172%" height="15" fill="rgb(225,132,2)" fg:x="2601" fg:w="1821"/><text x="20.6997%" y="863.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,807 samples, 14.21%)</title><rect x="20.5598%" y="837" width="14.2071%" height="15" fill="rgb(209,159,44)" fg:x="2615" fg:w="1807"/><text x="20.8098%" y="847.50">core::ptr::drop_in_pla..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,640 samples, 12.89%)</title><rect x="21.8728%" y="821" width="12.8941%" height="15" fill="rgb(251,214,1)" fg:x="2782" fg:w="1640"/><text x="22.1228%" y="831.50">core::ptr::drop_in_..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,612 samples, 12.67%)</title><rect x="22.0929%" y="805" width="12.6740%" height="15" fill="rgb(247,84,47)" fg:x="2810" fg:w="1612"/><text x="22.3429%" y="815.50">&lt;alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (552 samples, 4.34%)</title><rect x="30.4269%" y="789" width="4.3400%" height="15" fill="rgb(240,111,43)" fg:x="3870" fg:w="552"/><text x="30.6769%" y="799.50">alloc..</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (110 samples, 0.86%)</title><rect x="33.9020%" y="773" width="0.8648%" height="15" fill="rgb(215,214,35)" fg:x="4312" fg:w="110"/><text x="34.1520%" y="783.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (75 samples, 0.59%)</title><rect x="34.1772%" y="757" width="0.5897%" height="15" fill="rgb(248,207,23)" fg:x="4347" fg:w="75"/><text x="34.4272%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 0.06%)</title><rect x="34.7118%" y="741" width="0.0550%" height="15" fill="rgb(214,186,4)" fg:x="4415" fg:w="7"/><text x="34.9618%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (407 samples, 3.20%)</title><rect x="34.7747%" y="869" width="3.1999%" height="15" fill="rgb(220,133,22)" fg:x="4423" fg:w="407"/><text x="35.0247%" y="879.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (407 samples, 3.20%)</title><rect x="34.7747%" y="853" width="3.1999%" height="15" fill="rgb(239,134,19)" fg:x="4423" fg:w="407"/><text x="35.0247%" y="863.50">all..</text></g><g><title>__free (407 samples, 3.20%)</title><rect x="34.7747%" y="837" width="3.1999%" height="15" fill="rgb(250,140,9)" fg:x="4423" fg:w="407"/><text x="35.0247%" y="847.50">__f..</text></g><g><title>_int_free (407 samples, 3.20%)</title><rect x="34.7747%" y="821" width="3.1999%" height="15" fill="rgb(225,59,14)" fg:x="4423" fg:w="407"/><text x="35.0247%" y="831.50">_in..</text></g><g><title>malloc_consolidate (406 samples, 3.19%)</title><rect x="34.7826%" y="805" width="3.1921%" height="15" fill="rgb(214,152,51)" fg:x="4424" fg:w="406"/><text x="35.0326%" y="815.50">mal..</text></g><g><title>unlink_chunk.constprop.0 (95 samples, 0.75%)</title><rect x="37.2278%" y="789" width="0.7469%" height="15" fill="rgb(251,227,43)" fg:x="4735" fg:w="95"/><text x="37.4778%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt;&gt; (2,262 samples, 17.78%)</title><rect x="20.1981%" y="965" width="17.7844%" height="15" fill="rgb(241,96,17)" fg:x="2569" fg:w="2262"/><text x="20.4481%" y="975.50">core::ptr::drop_in_place&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,262 samples, 17.78%)</title><rect x="20.1981%" y="949" width="17.7844%" height="15" fill="rgb(234,198,43)" fg:x="2569" fg:w="2262"/><text x="20.4481%" y="959.50">&lt;alloc::vec::Vec&lt;T,A&gt; as cor..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;]&gt; (2,262 samples, 17.78%)</title><rect x="20.1981%" y="933" width="17.7844%" height="15" fill="rgb(220,108,29)" fg:x="2569" fg:w="2262"/><text x="20.4481%" y="943.50">core::ptr::drop_in_place&lt;[al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt; (2,262 samples, 17.78%)</title><rect x="20.1981%" y="917" width="17.7844%" height="15" fill="rgb(226,163,33)" fg:x="2569" fg:w="2262"/><text x="20.4481%" y="927.50">core::ptr::drop_in_place&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String,alloc::string::String)&gt;&gt; (409 samples, 3.22%)</title><rect x="34.7669%" y="901" width="3.2157%" height="15" fill="rgb(205,194,45)" fg:x="4422" fg:w="409"/><text x="35.0169%" y="911.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (409 samples, 3.22%)</title><rect x="34.7669%" y="885" width="3.2157%" height="15" fill="rgb(206,143,44)" fg:x="4422" fg:w="409"/><text x="35.0169%" y="895.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="37.9825%" y="901" width="0.0157%" height="15" fill="rgb(236,136,36)" fg:x="4831" fg:w="2"/><text x="38.2325%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.02%)</title><rect x="37.9825%" y="885" width="0.0157%" height="15" fill="rgb(249,172,42)" fg:x="4831" fg:w="2"/><text x="38.2325%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="37.9825%" y="869" width="0.0157%" height="15" fill="rgb(216,139,23)" fg:x="4831" fg:w="2"/><text x="38.2325%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="37.9825%" y="853" width="0.0157%" height="15" fill="rgb(207,166,20)" fg:x="4831" fg:w="2"/><text x="38.2325%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="37.9825%" y="965" width="0.0236%" height="15" fill="rgb(210,209,22)" fg:x="4831" fg:w="3"/><text x="38.2325%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="37.9825%" y="949" width="0.0236%" height="15" fill="rgb(232,118,20)" fg:x="4831" fg:w="3"/><text x="38.2325%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::string::String&gt;]&gt; (3 samples, 0.02%)</title><rect x="37.9825%" y="933" width="0.0236%" height="15" fill="rgb(238,113,42)" fg:x="4831" fg:w="3"/><text x="38.2325%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (3 samples, 0.02%)</title><rect x="37.9825%" y="917" width="0.0236%" height="15" fill="rgb(231,42,5)" fg:x="4831" fg:w="3"/><text x="38.2325%" y="927.50"></text></g><g><title>alloc::string::String::new (100 samples, 0.79%)</title><rect x="42.6606%" y="629" width="0.7862%" height="15" fill="rgb(243,166,24)" fg:x="5426" fg:w="100"/><text x="42.9106%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (16 samples, 0.13%)</title><rect x="43.3210%" y="613" width="0.1258%" height="15" fill="rgb(237,226,12)" fg:x="5510" fg:w="16"/><text x="43.5710%" y="623.50"></text></g><g><title>core::fmt::Formatter::new (9 samples, 0.07%)</title><rect x="43.4468%" y="629" width="0.0708%" height="15" fill="rgb(229,133,24)" fg:x="5526" fg:w="9"/><text x="43.6968%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.04%)</title><rect x="44.8856%" y="533" width="0.0393%" height="15" fill="rgb(238,33,43)" fg:x="5709" fg:w="5"/><text x="45.1356%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="44.9092%" y="517" width="0.0157%" height="15" fill="rgb(227,59,38)" fg:x="5712" fg:w="2"/><text x="45.1592%" y="527.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="44.9092%" y="501" width="0.0157%" height="15" fill="rgb(230,97,0)" fg:x="5712" fg:w="2"/><text x="45.1592%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (17 samples, 0.13%)</title><rect x="45.0586%" y="485" width="0.1337%" height="15" fill="rgb(250,173,50)" fg:x="5731" fg:w="17"/><text x="45.3086%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (33 samples, 0.26%)</title><rect x="45.0428%" y="501" width="0.2595%" height="15" fill="rgb(240,15,50)" fg:x="5729" fg:w="33"/><text x="45.2928%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (14 samples, 0.11%)</title><rect x="45.1922%" y="485" width="0.1101%" height="15" fill="rgb(221,93,22)" fg:x="5748" fg:w="14"/><text x="45.4422%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (26 samples, 0.20%)</title><rect x="45.8055%" y="469" width="0.2044%" height="15" fill="rgb(245,180,53)" fg:x="5826" fg:w="26"/><text x="46.0555%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (29 samples, 0.23%)</title><rect x="46.0099%" y="469" width="0.2280%" height="15" fill="rgb(231,88,51)" fg:x="5852" fg:w="29"/><text x="46.2599%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (11 samples, 0.09%)</title><rect x="46.3323%" y="453" width="0.0865%" height="15" fill="rgb(240,58,21)" fg:x="5893" fg:w="11"/><text x="46.5823%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (4 samples, 0.03%)</title><rect x="46.4187%" y="453" width="0.0314%" height="15" fill="rgb(237,21,10)" fg:x="5904" fg:w="4"/><text x="46.6687%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.02%)</title><rect x="46.4266%" y="437" width="0.0236%" height="15" fill="rgb(218,43,11)" fg:x="5905" fg:w="3"/><text x="46.6766%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (40 samples, 0.31%)</title><rect x="46.2379%" y="469" width="0.3145%" height="15" fill="rgb(218,221,29)" fg:x="5881" fg:w="40"/><text x="46.4879%" y="479.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (13 samples, 0.10%)</title><rect x="46.4502%" y="453" width="0.1022%" height="15" fill="rgb(214,118,42)" fg:x="5908" fg:w="13"/><text x="46.7002%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.12%)</title><rect x="47.4959%" y="421" width="0.1179%" height="15" fill="rgb(251,200,26)" fg:x="6041" fg:w="15"/><text x="47.7459%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (8 samples, 0.06%)</title><rect x="47.6138%" y="421" width="0.0629%" height="15" fill="rgb(237,101,39)" fg:x="6056" fg:w="8"/><text x="47.8638%" y="431.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (8 samples, 0.06%)</title><rect x="47.6138%" y="405" width="0.0629%" height="15" fill="rgb(251,117,11)" fg:x="6056" fg:w="8"/><text x="47.8638%" y="415.50"></text></g><g><title>alloc_perturb (5 samples, 0.04%)</title><rect x="49.8545%" y="373" width="0.0393%" height="15" fill="rgb(216,223,23)" fg:x="6341" fg:w="5"/><text x="50.1045%" y="383.50"></text></g><g><title>__GI___libc_malloc (280 samples, 2.20%)</title><rect x="47.7160%" y="405" width="2.2014%" height="15" fill="rgb(251,54,12)" fg:x="6069" fg:w="280"/><text x="47.9660%" y="415.50">_..</text></g><g><title>_int_malloc (140 samples, 1.10%)</title><rect x="48.8167%" y="389" width="1.1007%" height="15" fill="rgb(254,176,54)" fg:x="6209" fg:w="140"/><text x="49.0667%" y="399.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.02%)</title><rect x="49.8939%" y="373" width="0.0236%" height="15" fill="rgb(210,32,8)" fg:x="6346" fg:w="3"/><text x="50.1439%" y="383.50"></text></g><g><title>__rdl_alloc (7 samples, 0.06%)</title><rect x="49.9174%" y="405" width="0.0550%" height="15" fill="rgb(235,52,38)" fg:x="6349" fg:w="7"/><text x="50.1674%" y="415.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="49.9725%" y="405" width="0.0157%" height="15" fill="rgb(231,4,44)" fg:x="6356" fg:w="2"/><text x="50.2225%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::align (11 samples, 0.09%)</title><rect x="49.9882%" y="405" width="0.0865%" height="15" fill="rgb(249,2,32)" fg:x="6358" fg:w="11"/><text x="50.2382%" y="415.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (8 samples, 0.06%)</title><rect x="50.0118%" y="389" width="0.0629%" height="15" fill="rgb(224,65,26)" fg:x="6361" fg:w="8"/><text x="50.2618%" y="399.50"></text></g><g><title>alloc::alloc::alloc (308 samples, 2.42%)</title><rect x="47.6767%" y="421" width="2.4216%" height="15" fill="rgb(250,73,40)" fg:x="6064" fg:w="308"/><text x="47.9267%" y="431.50">al..</text></g><g><title>core::ptr::read_volatile (3 samples, 0.02%)</title><rect x="50.0747%" y="405" width="0.0236%" height="15" fill="rgb(253,177,16)" fg:x="6369" fg:w="3"/><text x="50.3247%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::size (8 samples, 0.06%)</title><rect x="50.0983%" y="421" width="0.0629%" height="15" fill="rgb(217,32,34)" fg:x="6372" fg:w="8"/><text x="50.3483%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (19 samples, 0.15%)</title><rect x="50.1612%" y="421" width="0.1494%" height="15" fill="rgb(212,7,10)" fg:x="6380" fg:w="19"/><text x="50.4112%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="50.3735%" y="405" width="0.0236%" height="15" fill="rgb(245,89,8)" fg:x="6407" fg:w="3"/><text x="50.6235%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (12 samples, 0.09%)</title><rect x="50.3106%" y="421" width="0.0943%" height="15" fill="rgb(237,16,53)" fg:x="6399" fg:w="12"/><text x="50.5606%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.02%)</title><rect x="50.4206%" y="405" width="0.0157%" height="15" fill="rgb(250,204,30)" fg:x="6413" fg:w="2"/><text x="50.6706%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (28 samples, 0.22%)</title><rect x="50.4442%" y="389" width="0.2201%" height="15" fill="rgb(208,77,27)" fg:x="6416" fg:w="28"/><text x="50.6942%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (477 samples, 3.75%)</title><rect x="46.9219%" y="453" width="3.7503%" height="15" fill="rgb(250,204,28)" fg:x="5968" fg:w="477"/><text x="47.1719%" y="463.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (472 samples, 3.71%)</title><rect x="46.9612%" y="437" width="3.7110%" height="15" fill="rgb(244,63,21)" fg:x="5973" fg:w="472"/><text x="47.2112%" y="447.50">allo..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (34 samples, 0.27%)</title><rect x="50.4049%" y="421" width="0.2673%" height="15" fill="rgb(236,85,44)" fg:x="6411" fg:w="34"/><text x="50.6549%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (30 samples, 0.24%)</title><rect x="50.4364%" y="405" width="0.2359%" height="15" fill="rgb(215,98,4)" fg:x="6415" fg:w="30"/><text x="50.6864%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (40 samples, 0.31%)</title><rect x="50.6722%" y="453" width="0.3145%" height="15" fill="rgb(235,38,11)" fg:x="6445" fg:w="40"/><text x="50.9222%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (642 samples, 5.05%)</title><rect x="46.5524%" y="469" width="5.0476%" height="15" fill="rgb(254,186,25)" fg:x="5921" fg:w="642"/><text x="46.8024%" y="479.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (77 samples, 0.61%)</title><rect x="50.9946%" y="453" width="0.6054%" height="15" fill="rgb(225,55,31)" fg:x="6486" fg:w="77"/><text x="51.2446%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (18 samples, 0.14%)</title><rect x="52.9130%" y="437" width="0.1415%" height="15" fill="rgb(211,15,21)" fg:x="6730" fg:w="18"/><text x="53.1630%" y="447.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (7 samples, 0.06%)</title><rect x="52.9994%" y="421" width="0.0550%" height="15" fill="rgb(215,187,41)" fg:x="6741" fg:w="7"/><text x="53.2494%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (188 samples, 1.48%)</title><rect x="51.6000%" y="469" width="1.4781%" height="15" fill="rgb(248,69,32)" fg:x="6563" fg:w="188"/><text x="51.8500%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (173 samples, 1.36%)</title><rect x="51.7179%" y="453" width="1.3602%" height="15" fill="rgb(252,102,52)" fg:x="6578" fg:w="173"/><text x="51.9679%" y="463.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (3 samples, 0.02%)</title><rect x="53.0545%" y="437" width="0.0236%" height="15" fill="rgb(253,140,32)" fg:x="6748" fg:w="3"/><text x="53.3045%" y="447.50"></text></g><g><title>core::cmp::max (173 samples, 1.36%)</title><rect x="53.0781%" y="469" width="1.3602%" height="15" fill="rgb(216,56,42)" fg:x="6751" fg:w="173"/><text x="53.3281%" y="479.50"></text></g><g><title>core::cmp::Ord::max (173 samples, 1.36%)</title><rect x="53.0781%" y="453" width="1.3602%" height="15" fill="rgb(216,184,14)" fg:x="6751" fg:w="173"/><text x="53.3281%" y="463.50"></text></g><g><title>core::cmp::max_by (167 samples, 1.31%)</title><rect x="53.1252%" y="437" width="1.3130%" height="15" fill="rgb(237,187,27)" fg:x="6757" fg:w="167"/><text x="53.3752%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (81 samples, 0.64%)</title><rect x="53.8014%" y="421" width="0.6368%" height="15" fill="rgb(219,65,3)" fg:x="6843" fg:w="81"/><text x="54.0514%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (54 samples, 0.42%)</title><rect x="54.0137%" y="405" width="0.4246%" height="15" fill="rgb(245,83,25)" fg:x="6870" fg:w="54"/><text x="54.2637%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (48 samples, 0.38%)</title><rect x="54.4382%" y="469" width="0.3774%" height="15" fill="rgb(214,205,45)" fg:x="6924" fg:w="48"/><text x="54.6882%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (8 samples, 0.06%)</title><rect x="54.7527%" y="453" width="0.0629%" height="15" fill="rgb(241,20,18)" fg:x="6964" fg:w="8"/><text x="55.0027%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,201 samples, 9.44%)</title><rect x="45.4281%" y="485" width="9.4426%" height="15" fill="rgb(232,163,23)" fg:x="5778" fg:w="1201"/><text x="45.6781%" y="495.50">alloc::raw_vec..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (7 samples, 0.06%)</title><rect x="54.8156%" y="469" width="0.0550%" height="15" fill="rgb(214,5,46)" fg:x="6972" fg:w="7"/><text x="55.0656%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,316 samples, 10.35%)</title><rect x="44.9328%" y="533" width="10.3467%" height="15" fill="rgb(229,78,17)" fg:x="5715" fg:w="1316"/><text x="45.1828%" y="543.50">alloc::vec::Vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,305 samples, 10.26%)</title><rect x="45.0193%" y="517" width="10.2602%" height="15" fill="rgb(248,89,10)" fg:x="5726" fg:w="1305"/><text x="45.2693%" y="527.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,269 samples, 9.98%)</title><rect x="45.3023%" y="501" width="9.9772%" height="15" fill="rgb(248,54,15)" fg:x="5762" fg:w="1269"/><text x="45.5523%" y="511.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::handle_reserve (52 samples, 0.41%)</title><rect x="54.8707%" y="485" width="0.4088%" height="15" fill="rgb(223,116,6)" fg:x="6979" fg:w="52"/><text x="55.1207%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (27 samples, 0.21%)</title><rect x="55.0672%" y="469" width="0.2123%" height="15" fill="rgb(205,125,38)" fg:x="7004" fg:w="27"/><text x="55.3172%" y="479.50"></text></g><g><title>[main] (2 samples, 0.02%)</title><rect x="55.3031%" y="517" width="0.0157%" height="15" fill="rgb(251,78,38)" fg:x="7034" fg:w="2"/><text x="55.5531%" y="527.50"></text></g><g><title>__memcpy_sse2_unaligned (5 samples, 0.04%)</title><rect x="55.3188%" y="517" width="0.0393%" height="15" fill="rgb(253,78,28)" fg:x="7036" fg:w="5"/><text x="55.5688%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,389 samples, 10.92%)</title><rect x="44.7126%" y="549" width="10.9207%" height="15" fill="rgb(209,120,3)" fg:x="5687" fg:w="1389"/><text x="44.9626%" y="559.50">alloc::vec::Vec&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.35%)</title><rect x="55.2795%" y="533" width="0.3538%" height="15" fill="rgb(238,229,9)" fg:x="7031" fg:w="45"/><text x="55.5295%" y="543.50"></text></g><g><title>__memmove_sse2_unaligned_erms (35 samples, 0.28%)</title><rect x="55.3581%" y="517" width="0.2752%" height="15" fill="rgb(253,159,18)" fg:x="7041" fg:w="35"/><text x="55.6081%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (30 samples, 0.24%)</title><rect x="55.8770%" y="517" width="0.2359%" height="15" fill="rgb(244,42,34)" fg:x="7107" fg:w="30"/><text x="56.1270%" y="527.50"></text></g><g><title>core::mem::size_of (2 samples, 0.02%)</title><rect x="56.0972%" y="501" width="0.0157%" height="15" fill="rgb(224,8,7)" fg:x="7135" fg:w="2"/><text x="56.3472%" y="511.50"></text></g><g><title>core::ptr::slice_from_raw_parts (16 samples, 0.13%)</title><rect x="56.1129%" y="501" width="0.1258%" height="15" fill="rgb(210,201,45)" fg:x="7137" fg:w="16"/><text x="56.3629%" y="511.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (16 samples, 0.13%)</title><rect x="56.1129%" y="485" width="0.1258%" height="15" fill="rgb(252,185,21)" fg:x="7137" fg:w="16"/><text x="56.3629%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,484 samples, 11.67%)</title><rect x="44.6497%" y="565" width="11.6676%" height="15" fill="rgb(223,131,1)" fg:x="5679" fg:w="1484"/><text x="44.8997%" y="575.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (87 samples, 0.68%)</title><rect x="55.6333%" y="549" width="0.6840%" height="15" fill="rgb(245,141,16)" fg:x="7076" fg:w="87"/><text x="55.8833%" y="559.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (84 samples, 0.66%)</title><rect x="55.6569%" y="533" width="0.6604%" height="15" fill="rgb(229,55,45)" fg:x="7079" fg:w="84"/><text x="55.9069%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts (26 samples, 0.20%)</title><rect x="56.1129%" y="517" width="0.2044%" height="15" fill="rgb(208,92,15)" fg:x="7137" fg:w="26"/><text x="56.3629%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (10 samples, 0.08%)</title><rect x="56.2387%" y="501" width="0.0786%" height="15" fill="rgb(234,185,47)" fg:x="7153" fg:w="10"/><text x="56.4887%" y="511.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (10 samples, 0.08%)</title><rect x="56.2387%" y="485" width="0.0786%" height="15" fill="rgb(253,104,50)" fg:x="7153" fg:w="10"/><text x="56.4887%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.02%)</title><rect x="56.4353%" y="533" width="0.0236%" height="15" fill="rgb(205,70,7)" fg:x="7178" fg:w="3"/><text x="56.6853%" y="543.50"></text></g><g><title>core::ptr::invalid (3 samples, 0.02%)</title><rect x="56.4588%" y="533" width="0.0236%" height="15" fill="rgb(240,178,43)" fg:x="7181" fg:w="3"/><text x="56.7088%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,581 samples, 12.43%)</title><rect x="44.0837%" y="613" width="12.4302%" height="15" fill="rgb(214,112,2)" fg:x="5607" fg:w="1581"/><text x="44.3337%" y="623.50">&lt;alloc::string::Str..</text></g><g><title>alloc::string::String::push_str (1,538 samples, 12.09%)</title><rect x="44.4217%" y="597" width="12.0921%" height="15" fill="rgb(206,46,17)" fg:x="5650" fg:w="1538"/><text x="44.6717%" y="607.50">alloc::string::Str..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,538 samples, 12.09%)</title><rect x="44.4217%" y="581" width="12.0921%" height="15" fill="rgb(225,220,16)" fg:x="5650" fg:w="1538"/><text x="44.6717%" y="591.50">alloc::vec::Vec&lt;T,..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (25 samples, 0.20%)</title><rect x="56.3173%" y="565" width="0.1966%" height="15" fill="rgb(238,65,40)" fg:x="7163" fg:w="25"/><text x="56.5673%" y="575.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (25 samples, 0.20%)</title><rect x="56.3173%" y="549" width="0.1966%" height="15" fill="rgb(230,151,21)" fg:x="7163" fg:w="25"/><text x="56.5673%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (3 samples, 0.02%)</title><rect x="56.4903%" y="533" width="0.0236%" height="15" fill="rgb(218,58,49)" fg:x="7185" fg:w="3"/><text x="56.7403%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1,690 samples, 13.29%)</title><rect x="43.5176%" y="629" width="13.2872%" height="15" fill="rgb(219,179,14)" fg:x="5535" fg:w="1690"/><text x="43.7676%" y="639.50">core::fmt::num::imp:..</text></g><g><title>core::fmt::Formatter::pad_integral (37 samples, 0.29%)</title><rect x="56.5139%" y="613" width="0.2909%" height="15" fill="rgb(223,72,1)" fg:x="7188" fg:w="37"/><text x="56.7639%" y="623.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (6 samples, 0.05%)</title><rect x="56.7576%" y="597" width="0.0472%" height="15" fill="rgb(238,126,10)" fg:x="7219" fg:w="6"/><text x="57.0076%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.08%)</title><rect x="57.8190%" y="533" width="0.0786%" height="15" fill="rgb(224,206,38)" fg:x="7354" fg:w="10"/><text x="58.0690%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.06%)</title><rect x="57.8426%" y="517" width="0.0550%" height="15" fill="rgb(212,201,54)" fg:x="7357" fg:w="7"/><text x="58.0926%" y="527.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (7 samples, 0.06%)</title><rect x="57.8426%" y="501" width="0.0550%" height="15" fill="rgb(218,154,48)" fg:x="7357" fg:w="7"/><text x="58.0926%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="57.8819%" y="485" width="0.0157%" height="15" fill="rgb(232,93,24)" fg:x="7362" fg:w="2"/><text x="58.1319%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (5 samples, 0.04%)</title><rect x="58.1335%" y="485" width="0.0393%" height="15" fill="rgb(245,30,21)" fg:x="7394" fg:w="5"/><text x="58.3835%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (17 samples, 0.13%)</title><rect x="58.1099%" y="501" width="0.1337%" height="15" fill="rgb(242,148,29)" fg:x="7391" fg:w="17"/><text x="58.3599%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (9 samples, 0.07%)</title><rect x="58.1728%" y="485" width="0.0708%" height="15" fill="rgb(244,153,54)" fg:x="7399" fg:w="9"/><text x="58.4228%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.29%)</title><rect x="58.8254%" y="469" width="0.2909%" height="15" fill="rgb(252,87,22)" fg:x="7482" fg:w="37"/><text x="59.0754%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (27 samples, 0.21%)</title><rect x="59.1163%" y="469" width="0.2123%" height="15" fill="rgb(210,51,29)" fg:x="7519" fg:w="27"/><text x="59.3663%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (8 samples, 0.06%)</title><rect x="59.5173%" y="453" width="0.0629%" height="15" fill="rgb(242,136,47)" fg:x="7570" fg:w="8"/><text x="59.7673%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.02%)</title><rect x="59.5802%" y="453" width="0.0157%" height="15" fill="rgb(238,68,4)" fg:x="7578" fg:w="2"/><text x="59.8302%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (57 samples, 0.45%)</title><rect x="59.3286%" y="469" width="0.4481%" height="15" fill="rgb(242,161,30)" fg:x="7546" fg:w="57"/><text x="59.5786%" y="479.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (23 samples, 0.18%)</title><rect x="59.5959%" y="453" width="0.1808%" height="15" fill="rgb(218,58,44)" fg:x="7580" fg:w="23"/><text x="59.8459%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.02%)</title><rect x="59.7531%" y="437" width="0.0236%" height="15" fill="rgb(252,125,32)" fg:x="7600" fg:w="3"/><text x="60.0031%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22 samples, 0.17%)</title><rect x="61.2312%" y="421" width="0.1730%" height="15" fill="rgb(219,178,0)" fg:x="7788" fg:w="22"/><text x="61.4812%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (10 samples, 0.08%)</title><rect x="61.4042%" y="421" width="0.0786%" height="15" fill="rgb(213,152,7)" fg:x="7810" fg:w="10"/><text x="61.6542%" y="431.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (10 samples, 0.08%)</title><rect x="61.4042%" y="405" width="0.0786%" height="15" fill="rgb(249,109,34)" fg:x="7810" fg:w="10"/><text x="61.6542%" y="415.50"></text></g><g><title>alloc_perturb (4 samples, 0.03%)</title><rect x="63.7707%" y="373" width="0.0314%" height="15" fill="rgb(232,96,21)" fg:x="8111" fg:w="4"/><text x="64.0207%" y="383.50"></text></g><g><title>__GI___libc_malloc (293 samples, 2.30%)</title><rect x="61.5457%" y="405" width="2.3036%" height="15" fill="rgb(228,27,39)" fg:x="7828" fg:w="293"/><text x="61.7957%" y="415.50">_..</text></g><g><title>_int_malloc (145 samples, 1.14%)</title><rect x="62.7093%" y="389" width="1.1400%" height="15" fill="rgb(211,182,52)" fg:x="7976" fg:w="145"/><text x="62.9593%" y="399.50"></text></g><g><title>unlink_chunk.constprop.0 (6 samples, 0.05%)</title><rect x="63.8022%" y="373" width="0.0472%" height="15" fill="rgb(234,178,38)" fg:x="8115" fg:w="6"/><text x="64.0522%" y="383.50"></text></g><g><title>__rdl_alloc (11 samples, 0.09%)</title><rect x="63.8494%" y="405" width="0.0865%" height="15" fill="rgb(221,111,3)" fg:x="8121" fg:w="11"/><text x="64.0994%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::align (22 samples, 0.17%)</title><rect x="63.9437%" y="405" width="0.1730%" height="15" fill="rgb(228,175,21)" fg:x="8133" fg:w="22"/><text x="64.1937%" y="415.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (9 samples, 0.07%)</title><rect x="64.0459%" y="389" width="0.0708%" height="15" fill="rgb(228,174,43)" fg:x="8146" fg:w="9"/><text x="64.2959%" y="399.50"></text></g><g><title>alloc::alloc::alloc (339 samples, 2.67%)</title><rect x="61.4828%" y="421" width="2.6653%" height="15" fill="rgb(211,191,0)" fg:x="7820" fg:w="339"/><text x="61.7328%" y="431.50">al..</text></g><g><title>core::ptr::read_volatile (4 samples, 0.03%)</title><rect x="64.1167%" y="405" width="0.0314%" height="15" fill="rgb(253,117,3)" fg:x="8155" fg:w="4"/><text x="64.3667%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::size (9 samples, 0.07%)</title><rect x="64.1481%" y="421" width="0.0708%" height="15" fill="rgb(241,127,19)" fg:x="8159" fg:w="9"/><text x="64.3981%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (18 samples, 0.14%)</title><rect x="64.2189%" y="421" width="0.1415%" height="15" fill="rgb(218,103,12)" fg:x="8168" fg:w="18"/><text x="64.4689%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (17 samples, 0.13%)</title><rect x="64.3604%" y="421" width="0.1337%" height="15" fill="rgb(236,214,43)" fg:x="8186" fg:w="17"/><text x="64.6104%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (9 samples, 0.07%)</title><rect x="64.4233%" y="405" width="0.0708%" height="15" fill="rgb(244,144,19)" fg:x="8194" fg:w="9"/><text x="64.6733%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (5 samples, 0.04%)</title><rect x="64.4548%" y="389" width="0.0393%" height="15" fill="rgb(246,188,10)" fg:x="8198" fg:w="5"/><text x="64.7048%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="64.5570%" y="405" width="0.0157%" height="15" fill="rgb(212,193,33)" fg:x="8211" fg:w="2"/><text x="64.8070%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.02%)</title><rect x="64.5727%" y="405" width="0.0157%" height="15" fill="rgb(241,51,29)" fg:x="8213" fg:w="2"/><text x="64.8227%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (565 samples, 4.44%)</title><rect x="60.4136%" y="453" width="4.4422%" height="15" fill="rgb(211,58,19)" fg:x="7684" fg:w="565"/><text x="60.6636%" y="463.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (539 samples, 4.24%)</title><rect x="60.6180%" y="437" width="4.2378%" height="15" fill="rgb(229,111,26)" fg:x="7710" fg:w="539"/><text x="60.8680%" y="447.50">alloc..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (46 samples, 0.36%)</title><rect x="64.4941%" y="421" width="0.3617%" height="15" fill="rgb(213,115,40)" fg:x="8203" fg:w="46"/><text x="64.7441%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (34 samples, 0.27%)</title><rect x="64.5884%" y="405" width="0.2673%" height="15" fill="rgb(209,56,44)" fg:x="8215" fg:w="34"/><text x="64.8384%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (29 samples, 0.23%)</title><rect x="64.6277%" y="389" width="0.2280%" height="15" fill="rgb(230,108,32)" fg:x="8220" fg:w="29"/><text x="64.8777%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (37 samples, 0.29%)</title><rect x="64.8557%" y="453" width="0.2909%" height="15" fill="rgb(216,165,31)" fg:x="8249" fg:w="37"/><text x="65.1057%" y="463.50"></text></g><g><title>alloc::raw_vec::alloc_guard (4 samples, 0.03%)</title><rect x="65.1466%" y="453" width="0.0314%" height="15" fill="rgb(218,122,21)" fg:x="8286" fg:w="4"/><text x="65.3966%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (764 samples, 6.01%)</title><rect x="59.7767%" y="469" width="6.0068%" height="15" fill="rgb(223,224,47)" fg:x="7603" fg:w="764"/><text x="60.0267%" y="479.50">alloc::r..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (77 samples, 0.61%)</title><rect x="65.1781%" y="453" width="0.6054%" height="15" fill="rgb(238,102,44)" fg:x="8290" fg:w="77"/><text x="65.4281%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (15 samples, 0.12%)</title><rect x="66.9943%" y="437" width="0.1179%" height="15" fill="rgb(236,46,40)" fg:x="8521" fg:w="15"/><text x="67.2443%" y="447.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (5 samples, 0.04%)</title><rect x="67.0729%" y="421" width="0.0393%" height="15" fill="rgb(247,202,50)" fg:x="8531" fg:w="5"/><text x="67.3229%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (172 samples, 1.35%)</title><rect x="65.7835%" y="469" width="1.3523%" height="15" fill="rgb(209,99,20)" fg:x="8367" fg:w="172"/><text x="66.0335%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (159 samples, 1.25%)</title><rect x="65.8857%" y="453" width="1.2501%" height="15" fill="rgb(252,27,34)" fg:x="8380" fg:w="159"/><text x="66.1357%" y="463.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (3 samples, 0.02%)</title><rect x="67.1122%" y="437" width="0.0236%" height="15" fill="rgb(215,206,23)" fg:x="8536" fg:w="3"/><text x="67.3622%" y="447.50"></text></g><g><title>core::cmp::max (190 samples, 1.49%)</title><rect x="67.1358%" y="469" width="1.4938%" height="15" fill="rgb(212,135,36)" fg:x="8539" fg:w="190"/><text x="67.3858%" y="479.50"></text></g><g><title>core::cmp::Ord::max (190 samples, 1.49%)</title><rect x="67.1358%" y="453" width="1.4938%" height="15" fill="rgb(240,189,1)" fg:x="8539" fg:w="190"/><text x="67.3858%" y="463.50"></text></g><g><title>core::cmp::max_by (167 samples, 1.31%)</title><rect x="67.3166%" y="437" width="1.3130%" height="15" fill="rgb(242,56,20)" fg:x="8562" fg:w="167"/><text x="67.5666%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (71 samples, 0.56%)</title><rect x="68.0714%" y="421" width="0.5582%" height="15" fill="rgb(247,132,33)" fg:x="8658" fg:w="71"/><text x="68.3214%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (48 samples, 0.38%)</title><rect x="68.2522%" y="405" width="0.3774%" height="15" fill="rgb(208,149,11)" fg:x="8681" fg:w="48"/><text x="68.5022%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (50 samples, 0.39%)</title><rect x="68.6296%" y="469" width="0.3931%" height="15" fill="rgb(211,33,11)" fg:x="8729" fg:w="50"/><text x="68.8796%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (11 samples, 0.09%)</title><rect x="68.9362%" y="453" width="0.0865%" height="15" fill="rgb(221,29,38)" fg:x="8768" fg:w="11"/><text x="69.1862%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,366 samples, 10.74%)</title><rect x="58.3536%" y="485" width="10.7398%" height="15" fill="rgb(206,182,49)" fg:x="7422" fg:w="1366"/><text x="58.6036%" y="495.50">alloc::raw_vec::..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (9 samples, 0.07%)</title><rect x="69.0227%" y="469" width="0.0708%" height="15" fill="rgb(216,140,1)" fg:x="8779" fg:w="9"/><text x="69.2727%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,459 samples, 11.47%)</title><rect x="57.9055%" y="533" width="11.4710%" height="15" fill="rgb(232,57,40)" fg:x="7365" fg:w="1459"/><text x="58.1555%" y="543.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,438 samples, 11.31%)</title><rect x="58.0706%" y="517" width="11.3059%" height="15" fill="rgb(224,186,18)" fg:x="7386" fg:w="1438"/><text x="58.3206%" y="527.50">alloc::raw_vec::R..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,416 samples, 11.13%)</title><rect x="58.2436%" y="501" width="11.1330%" height="15" fill="rgb(215,121,11)" fg:x="7408" fg:w="1416"/><text x="58.4936%" y="511.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::handle_reserve (36 samples, 0.28%)</title><rect x="69.0935%" y="485" width="0.2830%" height="15" fill="rgb(245,147,10)" fg:x="8788" fg:w="36"/><text x="69.3435%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (19 samples, 0.15%)</title><rect x="69.2271%" y="469" width="0.1494%" height="15" fill="rgb(238,153,13)" fg:x="8805" fg:w="19"/><text x="69.4771%" y="479.50"></text></g><g><title>[main] (4 samples, 0.03%)</title><rect x="69.4158%" y="517" width="0.0314%" height="15" fill="rgb(233,108,0)" fg:x="8829" fg:w="4"/><text x="69.6658%" y="527.50"></text></g><g><title>__memcpy_sse2_unaligned (4 samples, 0.03%)</title><rect x="69.4473%" y="517" width="0.0314%" height="15" fill="rgb(212,157,17)" fg:x="8833" fg:w="4"/><text x="69.6973%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.20%)</title><rect x="69.3765%" y="533" width="0.2044%" height="15" fill="rgb(225,213,38)" fg:x="8824" fg:w="26"/><text x="69.6265%" y="543.50"></text></g><g><title>__memmove_sse2_unaligned_erms (13 samples, 0.10%)</title><rect x="69.4787%" y="517" width="0.1022%" height="15" fill="rgb(248,16,11)" fg:x="8837" fg:w="13"/><text x="69.7287%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,517 samples, 11.93%)</title><rect x="57.6696%" y="549" width="11.9270%" height="15" fill="rgb(241,33,4)" fg:x="7335" fg:w="1517"/><text x="57.9196%" y="559.50">alloc::vec::Vec&lt;T,..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="69.5809%" y="533" width="0.0157%" height="15" fill="rgb(222,26,43)" fg:x="8850" fg:w="2"/><text x="69.8309%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (16 samples, 0.13%)</title><rect x="69.7932%" y="517" width="0.1258%" height="15" fill="rgb(243,29,36)" fg:x="8877" fg:w="16"/><text x="70.0432%" y="527.50"></text></g><g><title>core::ptr::slice_from_raw_parts (24 samples, 0.19%)</title><rect x="69.9190%" y="501" width="0.1887%" height="15" fill="rgb(241,9,27)" fg:x="8893" fg:w="24"/><text x="70.1690%" y="511.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (24 samples, 0.19%)</title><rect x="69.9190%" y="485" width="0.1887%" height="15" fill="rgb(205,117,26)" fg:x="8893" fg:w="24"/><text x="70.1690%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,602 samples, 12.60%)</title><rect x="57.5831%" y="565" width="12.5953%" height="15" fill="rgb(209,80,39)" fg:x="7324" fg:w="1602"/><text x="57.8331%" y="575.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (74 samples, 0.58%)</title><rect x="69.5967%" y="549" width="0.5818%" height="15" fill="rgb(239,155,6)" fg:x="8852" fg:w="74"/><text x="69.8467%" y="559.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (70 samples, 0.55%)</title><rect x="69.6281%" y="533" width="0.5504%" height="15" fill="rgb(212,104,12)" fg:x="8856" fg:w="70"/><text x="69.8781%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts (33 samples, 0.26%)</title><rect x="69.9190%" y="517" width="0.2595%" height="15" fill="rgb(234,204,3)" fg:x="8893" fg:w="33"/><text x="70.1690%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (9 samples, 0.07%)</title><rect x="70.1077%" y="501" width="0.0708%" height="15" fill="rgb(251,218,7)" fg:x="8917" fg:w="9"/><text x="70.3577%" y="511.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (9 samples, 0.07%)</title><rect x="70.1077%" y="485" width="0.0708%" height="15" fill="rgb(221,81,32)" fg:x="8917" fg:w="9"/><text x="70.3577%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.03%)</title><rect x="70.2885%" y="533" width="0.0314%" height="15" fill="rgb(214,152,26)" fg:x="8940" fg:w="4"/><text x="70.5385%" y="543.50"></text></g><g><title>core::ptr::invalid (5 samples, 0.04%)</title><rect x="70.3200%" y="533" width="0.0393%" height="15" fill="rgb(223,22,3)" fg:x="8944" fg:w="5"/><text x="70.5700%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.02%)</title><rect x="70.3593%" y="533" width="0.0236%" height="15" fill="rgb(207,174,7)" fg:x="8949" fg:w="3"/><text x="70.6093%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,708 samples, 13.43%)</title><rect x="56.9777%" y="613" width="13.4287%" height="15" fill="rgb(224,19,52)" fg:x="7247" fg:w="1708"/><text x="57.2277%" y="623.50">&lt;alloc::string::Stri..</text></g><g><title>alloc::string::String::push_str (1,673 samples, 13.15%)</title><rect x="57.2529%" y="597" width="13.1535%" height="15" fill="rgb(228,24,14)" fg:x="7282" fg:w="1673"/><text x="57.5029%" y="607.50">alloc::string::Strin..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,673 samples, 13.15%)</title><rect x="57.2529%" y="581" width="13.1535%" height="15" fill="rgb(230,153,43)" fg:x="7282" fg:w="1673"/><text x="57.5029%" y="591.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (29 samples, 0.23%)</title><rect x="70.1785%" y="565" width="0.2280%" height="15" fill="rgb(231,106,12)" fg:x="8926" fg:w="29"/><text x="70.4285%" y="575.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (29 samples, 0.23%)</title><rect x="70.1785%" y="549" width="0.2280%" height="15" fill="rgb(215,92,2)" fg:x="8926" fg:w="29"/><text x="70.4285%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (3 samples, 0.02%)</title><rect x="70.3829%" y="533" width="0.0236%" height="15" fill="rgb(249,143,25)" fg:x="8952" fg:w="3"/><text x="70.6329%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (1,775 samples, 13.96%)</title><rect x="56.8048%" y="629" width="13.9555%" height="15" fill="rgb(252,7,35)" fg:x="7225" fg:w="1775"/><text x="57.0548%" y="639.50">core::fmt::num::imp::..</text></g><g><title>core::fmt::Formatter::pad_integral (45 samples, 0.35%)</title><rect x="70.4065%" y="613" width="0.3538%" height="15" fill="rgb(216,69,40)" fg:x="8955" fg:w="45"/><text x="70.6565%" y="623.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (7 samples, 0.06%)</title><rect x="70.7052%" y="597" width="0.0550%" height="15" fill="rgb(240,36,33)" fg:x="8993" fg:w="7"/><text x="70.9552%" y="607.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (3,764 samples, 29.59%)</title><rect x="41.5520%" y="645" width="29.5935%" height="15" fill="rgb(231,128,14)" fg:x="5285" fg:w="3764"/><text x="41.8020%" y="655.50">&lt;T as alloc::string::ToString&gt;::to_string</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (49 samples, 0.39%)</title><rect x="70.7603%" y="629" width="0.3853%" height="15" fill="rgb(245,143,14)" fg:x="9000" fg:w="49"/><text x="71.0103%" y="639.50"></text></g><g><title>alloc_perturb (9 samples, 0.07%)</title><rect x="75.6034%" y="597" width="0.0708%" height="15" fill="rgb(222,130,28)" fg:x="9616" fg:w="9"/><text x="75.8534%" y="607.50"></text></g><g><title>__GI___libc_malloc (526 samples, 4.14%)</title><rect x="71.5858%" y="629" width="4.1355%" height="15" fill="rgb(212,10,48)" fg:x="9105" fg:w="526"/><text x="71.8358%" y="639.50">__GI_..</text></g><g><title>_int_malloc (248 samples, 1.95%)</title><rect x="73.7715%" y="613" width="1.9498%" height="15" fill="rgb(254,118,45)" fg:x="9383" fg:w="248"/><text x="74.0215%" y="623.50">_..</text></g><g><title>unlink_chunk.constprop.0 (6 samples, 0.05%)</title><rect x="75.6742%" y="597" width="0.0472%" height="15" fill="rgb(228,6,45)" fg:x="9625" fg:w="6"/><text x="75.9242%" y="607.50"></text></g><g><title>__memcpy_sse2_unaligned (43 samples, 0.34%)</title><rect x="75.7214%" y="629" width="0.3381%" height="15" fill="rgb(241,18,35)" fg:x="9631" fg:w="43"/><text x="75.9714%" y="639.50"></text></g><g><title>__memmove_sse2_unaligned_erms (68 samples, 0.53%)</title><rect x="76.0594%" y="629" width="0.5346%" height="15" fill="rgb(227,214,53)" fg:x="9674" fg:w="68"/><text x="76.3094%" y="639.50"></text></g><g><title>__rdl_alloc (8 samples, 0.06%)</title><rect x="76.5941%" y="629" width="0.0629%" height="15" fill="rgb(224,107,51)" fg:x="9742" fg:w="8"/><text x="76.8441%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (710 samples, 5.58%)</title><rect x="71.1455%" y="645" width="5.5822%" height="15" fill="rgb(248,60,28)" fg:x="9049" fg:w="710"/><text x="71.3955%" y="655.50">&lt;alloc:..</text></g><g><title>__rust_alloc (9 samples, 0.07%)</title><rect x="76.6570%" y="629" width="0.0708%" height="15" fill="rgb(249,101,23)" fg:x="9750" fg:w="9"/><text x="76.9070%" y="639.50"></text></g><g><title>core::fmt::Arguments::as_str (60 samples, 0.47%)</title><rect x="77.0737%" y="629" width="0.4717%" height="15" fill="rgb(228,51,19)" fg:x="9803" fg:w="60"/><text x="77.3237%" y="639.50"></text></g><g><title>[main] (3 samples, 0.02%)</title><rect x="78.7247%" y="597" width="0.0236%" height="15" fill="rgb(213,20,6)" fg:x="10013" fg:w="3"/><text x="78.9747%" y="607.50"></text></g><g><title>__memcpy_sse2_unaligned (18 samples, 0.14%)</title><rect x="78.7483%" y="597" width="0.1415%" height="15" fill="rgb(212,124,10)" fg:x="10016" fg:w="18"/><text x="78.9983%" y="607.50"></text></g><g><title>__memmove_sse2_unaligned_erms (31 samples, 0.24%)</title><rect x="78.8898%" y="597" width="0.2437%" height="15" fill="rgb(248,3,40)" fg:x="10034" fg:w="31"/><text x="79.1398%" y="607.50"></text></g><g><title>__memcpy_sse2_unaligned (2 samples, 0.02%)</title><rect x="80.8082%" y="549" width="0.0157%" height="15" fill="rgb(223,178,23)" fg:x="10278" fg:w="2"/><text x="81.0582%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (44 samples, 0.35%)</title><rect x="80.5802%" y="565" width="0.3459%" height="15" fill="rgb(240,132,45)" fg:x="10249" fg:w="44"/><text x="80.8302%" y="575.50"></text></g><g><title>__memmove_sse2_unaligned_erms (13 samples, 0.10%)</title><rect x="80.8240%" y="549" width="0.1022%" height="15" fill="rgb(245,164,36)" fg:x="10280" fg:w="13"/><text x="81.0740%" y="559.50"></text></g><g><title>__memcpy_sse2_unaligned (7 samples, 0.06%)</title><rect x="82.1999%" y="533" width="0.0550%" height="15" fill="rgb(231,188,53)" fg:x="10455" fg:w="7"/><text x="82.4499%" y="543.50"></text></g><g><title>__memmove_sse2_unaligned_erms (40 samples, 0.31%)</title><rect x="82.2549%" y="533" width="0.3145%" height="15" fill="rgb(237,198,39)" fg:x="10462" fg:w="40"/><text x="82.5049%" y="543.50"></text></g><g><title>alloc_perturb (4 samples, 0.03%)</title><rect x="84.9988%" y="469" width="0.0314%" height="15" fill="rgb(223,120,35)" fg:x="10811" fg:w="4"/><text x="85.2488%" y="479.50"></text></g><g><title>__GI___libc_malloc (259 samples, 2.04%)</title><rect x="83.0490%" y="501" width="2.0363%" height="15" fill="rgb(253,107,49)" fg:x="10563" fg:w="259"/><text x="83.2990%" y="511.50">_..</text></g><g><title>_int_malloc (124 samples, 0.97%)</title><rect x="84.1104%" y="485" width="0.9749%" height="15" fill="rgb(216,44,31)" fg:x="10698" fg:w="124"/><text x="84.3604%" y="495.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.06%)</title><rect x="85.0303%" y="469" width="0.0550%" height="15" fill="rgb(253,87,21)" fg:x="10815" fg:w="7"/><text x="85.2803%" y="479.50"></text></g><g><title>__rdl_alloc (5 samples, 0.04%)</title><rect x="85.0853%" y="501" width="0.0393%" height="15" fill="rgb(226,18,2)" fg:x="10822" fg:w="5"/><text x="85.3353%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (440 samples, 3.46%)</title><rect x="81.6967%" y="549" width="3.4594%" height="15" fill="rgb(216,8,46)" fg:x="10391" fg:w="440"/><text x="81.9467%" y="559.50">&lt;&amp;m..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (329 samples, 2.59%)</title><rect x="82.5694%" y="533" width="2.5867%" height="15" fill="rgb(226,140,39)" fg:x="10502" fg:w="329"/><text x="82.8194%" y="543.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (277 samples, 2.18%)</title><rect x="82.9782%" y="517" width="2.1778%" height="15" fill="rgb(221,194,54)" fg:x="10554" fg:w="277"/><text x="83.2282%" y="527.50">a..</text></g><g><title>__rust_alloc (4 samples, 0.03%)</title><rect x="85.1246%" y="501" width="0.0314%" height="15" fill="rgb(213,92,11)" fg:x="10827" fg:w="4"/><text x="85.3746%" y="511.50"></text></g><g><title>alloc::fmt::format (1,184 samples, 9.31%)</title><rect x="76.7277%" y="645" width="9.3089%" height="15" fill="rgb(229,162,46)" fg:x="9759" fg:w="1184"/><text x="76.9777%" y="655.50">alloc::fmt::f..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1,080 samples, 8.49%)</title><rect x="77.5454%" y="629" width="8.4912%" height="15" fill="rgb(214,111,36)" fg:x="9863" fg:w="1080"/><text x="77.7954%" y="639.50">core::option..</text></g><g><title>alloc::fmt::format::{{closure}} (949 samples, 7.46%)</title><rect x="78.5754%" y="613" width="7.4613%" height="15" fill="rgb(207,6,21)" fg:x="9994" fg:w="949"/><text x="78.8254%" y="623.50">alloc::fmt..</text></g><g><title>alloc::fmt::format::format_inner (878 samples, 6.90%)</title><rect x="79.1336%" y="597" width="6.9031%" height="15" fill="rgb(213,127,38)" fg:x="10065" fg:w="878"/><text x="79.3836%" y="607.50">alloc::fm..</text></g><g><title>core::fmt::write (769 samples, 6.05%)</title><rect x="79.9906%" y="581" width="6.0461%" height="15" fill="rgb(238,118,32)" fg:x="10174" fg:w="769"/><text x="80.2406%" y="591.50">core::fm..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (650 samples, 5.11%)</title><rect x="80.9262%" y="565" width="5.1105%" height="15" fill="rgb(240,139,39)" fg:x="10293" fg:w="650"/><text x="81.1762%" y="575.50">core::..</text></g><g><title>core::fmt::Formatter::pad_integral (112 samples, 0.88%)</title><rect x="85.1561%" y="549" width="0.8806%" height="15" fill="rgb(235,10,37)" fg:x="10831" fg:w="112"/><text x="85.4061%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (21 samples, 0.17%)</title><rect x="85.8715%" y="533" width="0.1651%" height="15" fill="rgb(249,171,38)" fg:x="10922" fg:w="21"/><text x="86.1215%" y="543.50"></text></g><g><title>[main] (2 samples, 0.02%)</title><rect x="86.2961%" y="629" width="0.0157%" height="15" fill="rgb(242,144,32)" fg:x="10976" fg:w="2"/><text x="86.5461%" y="639.50"></text></g><g><title>__memcpy_sse2_unaligned (46 samples, 0.36%)</title><rect x="86.3118%" y="629" width="0.3617%" height="15" fill="rgb(217,117,21)" fg:x="10978" fg:w="46"/><text x="86.5618%" y="639.50"></text></g><g><title>__memmove_sse2_unaligned_erms (33 samples, 0.26%)</title><rect x="86.6735%" y="629" width="0.2595%" height="15" fill="rgb(249,87,1)" fg:x="11024" fg:w="33"/><text x="86.9235%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (25 samples, 0.20%)</title><rect x="86.9329%" y="629" width="0.1966%" height="15" fill="rgb(248,196,48)" fg:x="11057" fg:w="25"/><text x="87.1829%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="87.1531%" y="581" width="0.0236%" height="15" fill="rgb(251,206,33)" fg:x="11085" fg:w="3"/><text x="87.4031%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="87.1531%" y="565" width="0.0236%" height="15" fill="rgb(232,141,28)" fg:x="11085" fg:w="3"/><text x="87.4031%" y="575.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="87.1531%" y="549" width="0.0236%" height="15" fill="rgb(209,167,14)" fg:x="11085" fg:w="3"/><text x="87.4031%" y="559.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="87.1531%" y="533" width="0.0236%" height="15" fill="rgb(225,11,50)" fg:x="11085" fg:w="3"/><text x="87.4031%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="87.2553%" y="501" width="0.0157%" height="15" fill="rgb(209,50,20)" fg:x="11098" fg:w="2"/><text x="87.5053%" y="511.50"></text></g><g><title>__memmove_sse2_unaligned_erms (4 samples, 0.03%)</title><rect x="87.2789%" y="501" width="0.0314%" height="15" fill="rgb(212,17,46)" fg:x="11101" fg:w="4"/><text x="87.5289%" y="511.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="87.3103%" y="501" width="0.0157%" height="15" fill="rgb(216,101,39)" fg:x="11105" fg:w="2"/><text x="87.5603%" y="511.50"></text></g><g><title>alloc::alloc::realloc (30 samples, 0.24%)</title><rect x="87.2160%" y="549" width="0.2359%" height="15" fill="rgb(212,228,48)" fg:x="11093" fg:w="30"/><text x="87.4660%" y="559.50"></text></g><g><title>__realloc (29 samples, 0.23%)</title><rect x="87.2238%" y="533" width="0.2280%" height="15" fill="rgb(250,6,50)" fg:x="11094" fg:w="29"/><text x="87.4738%" y="543.50"></text></g><g><title>_int_realloc (25 samples, 0.20%)</title><rect x="87.2553%" y="517" width="0.1966%" height="15" fill="rgb(250,160,48)" fg:x="11098" fg:w="25"/><text x="87.5053%" y="527.50"></text></g><g><title>_int_malloc (16 samples, 0.13%)</title><rect x="87.3260%" y="501" width="0.1258%" height="15" fill="rgb(244,216,33)" fg:x="11107" fg:w="16"/><text x="87.5760%" y="511.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.02%)</title><rect x="87.4361%" y="485" width="0.0157%" height="15" fill="rgb(207,157,5)" fg:x="11121" fg:w="2"/><text x="87.6861%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 0.31%)</title><rect x="87.1531%" y="597" width="0.3145%" height="15" fill="rgb(228,199,8)" fg:x="11085" fg:w="40"/><text x="87.4031%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 0.29%)</title><rect x="87.1767%" y="581" width="0.2909%" height="15" fill="rgb(227,80,20)" fg:x="11088" fg:w="37"/><text x="87.4267%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 0.29%)</title><rect x="87.1767%" y="565" width="0.2909%" height="15" fill="rgb(222,9,33)" fg:x="11088" fg:w="37"/><text x="87.4267%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (48 samples, 0.38%)</title><rect x="87.1295%" y="629" width="0.3774%" height="15" fill="rgb(239,44,28)" fg:x="11082" fg:w="48"/><text x="87.3795%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (48 samples, 0.38%)</title><rect x="87.1295%" y="613" width="0.3774%" height="15" fill="rgb(249,187,43)" fg:x="11082" fg:w="48"/><text x="87.3795%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.04%)</title><rect x="87.4676%" y="597" width="0.0393%" height="15" fill="rgb(216,141,28)" fg:x="11125" fg:w="5"/><text x="87.7176%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.03%)</title><rect x="87.4754%" y="581" width="0.0314%" height="15" fill="rgb(230,154,53)" fg:x="11126" fg:w="4"/><text x="87.7254%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="87.5069%" y="629" width="0.0236%" height="15" fill="rgb(227,82,4)" fg:x="11130" fg:w="3"/><text x="87.7569%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="87.5069%" y="613" width="0.0236%" height="15" fill="rgb(220,107,16)" fg:x="11130" fg:w="3"/><text x="87.7569%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.03%)</title><rect x="87.5305%" y="629" width="0.0314%" height="15" fill="rgb(207,187,2)" fg:x="11133" fg:w="4"/><text x="87.7805%" y="639.50"></text></g><g><title>[main] (5 samples, 0.04%)</title><rect x="87.6170%" y="613" width="0.0393%" height="15" fill="rgb(210,162,52)" fg:x="11144" fg:w="5"/><text x="87.8670%" y="623.50"></text></g><g><title>__memcpy_sse2_unaligned (4 samples, 0.03%)</title><rect x="87.6563%" y="613" width="0.0314%" height="15" fill="rgb(217,216,49)" fg:x="11149" fg:w="4"/><text x="87.9063%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (247 samples, 1.94%)</title><rect x="86.0366%" y="645" width="1.9420%" height="15" fill="rgb(218,146,49)" fg:x="10943" fg:w="247"/><text x="86.2866%" y="655.50">a..</text></g><g><title>core::ptr::write (53 samples, 0.42%)</title><rect x="87.5619%" y="629" width="0.4167%" height="15" fill="rgb(216,55,40)" fg:x="11137" fg:w="53"/><text x="87.8119%" y="639.50"></text></g><g><title>__memmove_sse2_unaligned_erms (37 samples, 0.29%)</title><rect x="87.6877%" y="613" width="0.2909%" height="15" fill="rgb(208,196,21)" fg:x="11153" fg:w="37"/><text x="87.9377%" y="623.50"></text></g><g><title>core::fmt::Arguments::new_v1 (59 samples, 0.46%)</title><rect x="87.9786%" y="645" width="0.4639%" height="15" fill="rgb(242,117,42)" fg:x="11190" fg:w="59"/><text x="88.2286%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (6,354 samples, 49.96%)</title><rect x="38.5958%" y="693" width="49.9568%" height="15" fill="rgb(210,11,23)" fg:x="4909" fg:w="6354"/><text x="38.8458%" y="703.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::It..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6,285 samples, 49.41%)</title><rect x="39.1383%" y="677" width="49.4143%" height="15" fill="rgb(217,110,2)" fg:x="4978" fg:w="6285"/><text x="39.3883%" y="687.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}::{{closure}} (6,262 samples, 49.23%)</title><rect x="39.3191%" y="661" width="49.2334%" height="15" fill="rgb(229,77,54)" fg:x="5001" fg:w="6262"/><text x="39.5691%" y="671.50">excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>core::fmt::rt::Argument::new_display (14 samples, 0.11%)</title><rect x="88.4425%" y="645" width="0.1101%" height="15" fill="rgb(218,53,16)" fg:x="11249" fg:w="14"/><text x="88.6925%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::new (4 samples, 0.03%)</title><rect x="88.5211%" y="629" width="0.0314%" height="15" fill="rgb(215,38,13)" fg:x="11259" fg:w="4"/><text x="88.7711%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (5 samples, 0.04%)</title><rect x="88.5526%" y="693" width="0.0393%" height="15" fill="rgb(235,42,18)" fg:x="11263" fg:w="5"/><text x="88.8026%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.03%)</title><rect x="88.5604%" y="677" width="0.0314%" height="15" fill="rgb(219,66,54)" fg:x="11264" fg:w="4"/><text x="88.8104%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,442 samples, 50.65%)</title><rect x="38.0376%" y="741" width="50.6486%" height="15" fill="rgb(222,205,4)" fg:x="4838" fg:w="6442"/><text x="38.2876%" y="751.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,442 samples, 50.65%)</title><rect x="38.0376%" y="725" width="50.6486%" height="15" fill="rgb(227,213,46)" fg:x="4838" fg:w="6442"/><text x="38.2876%" y="735.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,442 samples, 50.65%)</title><rect x="38.0376%" y="709" width="50.6486%" height="15" fill="rgb(250,145,42)" fg:x="4838" fg:w="6442"/><text x="38.2876%" y="719.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (12 samples, 0.09%)</title><rect x="88.5919%" y="693" width="0.0943%" height="15" fill="rgb(219,15,2)" fg:x="11268" fg:w="12"/><text x="88.8419%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,445 samples, 50.67%)</title><rect x="38.0219%" y="885" width="50.6722%" height="15" fill="rgb(231,181,52)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="895.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6,445 samples, 50.67%)</title><rect x="38.0219%" y="869" width="50.6722%" height="15" fill="rgb(235,1,42)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="879.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,445 samples, 50.67%)</title><rect x="38.0219%" y="853" width="50.6722%" height="15" fill="rgb(249,88,27)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="863.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,445 samples, 50.67%)</title><rect x="38.0219%" y="837" width="50.6722%" height="15" fill="rgb(235,145,16)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="847.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fo..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,445 samples, 50.67%)</title><rect x="38.0219%" y="821" width="50.6722%" height="15" fill="rgb(237,114,19)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="831.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,445 samples, 50.67%)</title><rect x="38.0219%" y="805" width="50.6722%" height="15" fill="rgb(238,51,50)" fg:x="4836" fg:w="6445"/><text x="38.2719%" y="815.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (6,444 samples, 50.66%)</title><rect x="38.0297%" y="789" width="50.6644%" height="15" fill="rgb(205,194,25)" fg:x="4837" fg:w="6444"/><text x="38.2797%" y="799.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6,444 samples, 50.66%)</title><rect x="38.0297%" y="773" width="50.6644%" height="15" fill="rgb(215,203,17)" fg:x="4837" fg:w="6444"/><text x="38.2797%" y="783.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}} (6,443 samples, 50.66%)</title><rect x="38.0376%" y="757" width="50.6565%" height="15" fill="rgb(233,112,49)" fg:x="4838" fg:w="6443"/><text x="38.2876%" y="767.50">excel_merge::calc_file_row_num_infos::{{closure}}::{{closure}}</text></g><g><title>excel_merge::calc_file_row_num_infos::{{closure}} (6,449 samples, 50.70%)</title><rect x="38.0061%" y="965" width="50.7037%" height="15" fill="rgb(241,130,26)" fg:x="4834" fg:w="6449"/><text x="38.2561%" y="975.50">excel_merge::calc_file_row_num_infos::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,448 samples, 50.70%)</title><rect x="38.0140%" y="949" width="50.6958%" height="15" fill="rgb(252,223,19)" fg:x="4835" fg:w="6448"/><text x="38.2640%" y="959.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,448 samples, 50.70%)</title><rect x="38.0140%" y="933" width="50.6958%" height="15" fill="rgb(211,95,25)" fg:x="4835" fg:w="6448"/><text x="38.2640%" y="943.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,448 samples, 50.70%)</title><rect x="38.0140%" y="917" width="50.6958%" height="15" fill="rgb(251,182,27)" fg:x="4835" fg:w="6448"/><text x="38.2640%" y="927.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,448 samples, 50.70%)</title><rect x="38.0140%" y="901" width="50.6958%" height="15" fill="rgb(238,24,4)" fg:x="4835" fg:w="6448"/><text x="38.2640%" y="911.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;:..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (3 samples, 0.02%)</title><rect x="88.7648%" y="757" width="0.0236%" height="15" fill="rgb(224,220,25)" fg:x="11290" fg:w="3"/><text x="89.0148%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (2 samples, 0.02%)</title><rect x="88.7727%" y="741" width="0.0157%" height="15" fill="rgb(239,133,26)" fg:x="11291" fg:w="2"/><text x="89.0227%" y="751.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (2 samples, 0.02%)</title><rect x="88.7727%" y="725" width="0.0157%" height="15" fill="rgb(211,94,48)" fg:x="11291" fg:w="2"/><text x="89.0227%" y="735.50"></text></g><g><title>core::slice::memchr::memchr (2 samples, 0.02%)</title><rect x="88.7727%" y="709" width="0.0157%" height="15" fill="rgb(239,87,6)" fg:x="11291" fg:w="2"/><text x="89.0227%" y="719.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.02%)</title><rect x="88.7727%" y="693" width="0.0157%" height="15" fill="rgb(227,62,0)" fg:x="11291" fg:w="2"/><text x="89.0227%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="88.7334%" y="853" width="0.0629%" height="15" fill="rgb(211,226,4)" fg:x="11286" fg:w="8"/><text x="88.9834%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.06%)</title><rect x="88.7334%" y="837" width="0.0629%" height="15" fill="rgb(253,38,52)" fg:x="11286" fg:w="8"/><text x="88.9834%" y="847.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 0.05%)</title><rect x="88.7491%" y="821" width="0.0472%" height="15" fill="rgb(229,126,40)" fg:x="11288" fg:w="6"/><text x="88.9991%" y="831.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (6 samples, 0.05%)</title><rect x="88.7491%" y="805" width="0.0472%" height="15" fill="rgb(229,165,44)" fg:x="11288" fg:w="6"/><text x="88.9991%" y="815.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (5 samples, 0.04%)</title><rect x="88.7570%" y="789" width="0.0393%" height="15" fill="rgb(247,95,47)" fg:x="11289" fg:w="5"/><text x="89.0070%" y="799.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (5 samples, 0.04%)</title><rect x="88.7570%" y="773" width="0.0393%" height="15" fill="rgb(216,140,30)" fg:x="11289" fg:w="5"/><text x="89.0070%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.08%)</title><rect x="88.7334%" y="885" width="0.0786%" height="15" fill="rgb(246,214,8)" fg:x="11286" fg:w="10"/><text x="88.9834%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (10 samples, 0.08%)</title><rect x="88.7334%" y="869" width="0.0786%" height="15" fill="rgb(227,224,15)" fg:x="11286" fg:w="10"/><text x="88.9834%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="88.7963%" y="853" width="0.0157%" height="15" fill="rgb(233,175,4)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="88.7963%" y="837" width="0.0157%" height="15" fill="rgb(221,66,45)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="88.7963%" y="821" width="0.0157%" height="15" fill="rgb(221,178,18)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="88.7963%" y="805" width="0.0157%" height="15" fill="rgb(213,81,29)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="88.7963%" y="789" width="0.0157%" height="15" fill="rgb(220,89,49)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.02%)</title><rect x="88.7963%" y="773" width="0.0157%" height="15" fill="rgb(227,60,33)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="783.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.02%)</title><rect x="88.7963%" y="757" width="0.0157%" height="15" fill="rgb(205,113,12)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="767.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="88.7963%" y="741" width="0.0157%" height="15" fill="rgb(211,32,1)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="751.50"></text></g><g><title>__realloc (2 samples, 0.02%)</title><rect x="88.7963%" y="725" width="0.0157%" height="15" fill="rgb(246,2,12)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="735.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="88.7963%" y="709" width="0.0157%" height="15" fill="rgb(243,37,27)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="719.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="88.7963%" y="693" width="0.0157%" height="15" fill="rgb(248,211,31)" fg:x="11294" fg:w="2"/><text x="89.0463%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (4 samples, 0.03%)</title><rect x="88.8120%" y="869" width="0.0314%" height="15" fill="rgb(242,146,47)" fg:x="11296" fg:w="4"/><text x="89.0620%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.03%)</title><rect x="88.8120%" y="853" width="0.0314%" height="15" fill="rgb(206,70,20)" fg:x="11296" fg:w="4"/><text x="89.0620%" y="863.50"></text></g><g><title>excel_merge::search_from_files::{{closure}}::{{closure}} (4 samples, 0.03%)</title><rect x="88.8120%" y="837" width="0.0314%" height="15" fill="rgb(215,10,51)" fg:x="11296" fg:w="4"/><text x="89.0620%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (3 samples, 0.02%)</title><rect x="88.8199%" y="821" width="0.0236%" height="15" fill="rgb(243,178,53)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="831.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (3 samples, 0.02%)</title><rect x="88.8199%" y="805" width="0.0236%" height="15" fill="rgb(233,221,20)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="815.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (3 samples, 0.02%)</title><rect x="88.8199%" y="789" width="0.0236%" height="15" fill="rgb(218,95,35)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3 samples, 0.02%)</title><rect x="88.8199%" y="773" width="0.0236%" height="15" fill="rgb(229,13,5)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="783.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (3 samples, 0.02%)</title><rect x="88.8199%" y="757" width="0.0236%" height="15" fill="rgb(252,164,30)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="767.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.02%)</title><rect x="88.8199%" y="741" width="0.0236%" height="15" fill="rgb(232,68,36)" fg:x="11297" fg:w="3"/><text x="89.0699%" y="751.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.02%)</title><rect x="88.8277%" y="725" width="0.0157%" height="15" fill="rgb(219,59,54)" fg:x="11298" fg:w="2"/><text x="89.0777%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.8592%" y="693" width="0.0157%" height="15" fill="rgb(250,92,33)" fg:x="11302" fg:w="2"/><text x="89.1092%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.8592%" y="677" width="0.0157%" height="15" fill="rgb(229,162,54)" fg:x="11302" fg:w="2"/><text x="89.1092%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.8592%" y="661" width="0.0157%" height="15" fill="rgb(244,114,52)" fg:x="11302" fg:w="2"/><text x="89.1092%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="88.8828%" y="565" width="0.0157%" height="15" fill="rgb(212,211,43)" fg:x="11305" fg:w="2"/><text x="89.1328%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.07%)</title><rect x="88.8592%" y="725" width="0.0708%" height="15" fill="rgb(226,147,8)" fg:x="11302" fg:w="9"/><text x="89.1092%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.07%)</title><rect x="88.8592%" y="709" width="0.0708%" height="15" fill="rgb(226,23,13)" fg:x="11302" fg:w="9"/><text x="89.1092%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.06%)</title><rect x="88.8749%" y="693" width="0.0550%" height="15" fill="rgb(240,63,4)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.06%)</title><rect x="88.8749%" y="677" width="0.0550%" height="15" fill="rgb(221,1,32)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="88.8749%" y="661" width="0.0550%" height="15" fill="rgb(242,117,10)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.06%)</title><rect x="88.8749%" y="645" width="0.0550%" height="15" fill="rgb(249,172,44)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="88.8749%" y="629" width="0.0550%" height="15" fill="rgb(244,46,45)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="88.8749%" y="613" width="0.0550%" height="15" fill="rgb(206,43,17)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7 samples, 0.06%)</title><rect x="88.8749%" y="597" width="0.0550%" height="15" fill="rgb(239,218,39)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="88.8749%" y="581" width="0.0550%" height="15" fill="rgb(208,169,54)" fg:x="11304" fg:w="7"/><text x="89.1249%" y="591.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.03%)</title><rect x="88.8985%" y="565" width="0.0314%" height="15" fill="rgb(247,25,42)" fg:x="11307" fg:w="4"/><text x="89.1485%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (15 samples, 0.12%)</title><rect x="88.8592%" y="773" width="0.1179%" height="15" fill="rgb(226,23,31)" fg:x="11302" fg:w="15"/><text x="89.1092%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15 samples, 0.12%)</title><rect x="88.8592%" y="757" width="0.1179%" height="15" fill="rgb(247,16,28)" fg:x="11302" fg:w="15"/><text x="89.1092%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (15 samples, 0.12%)</title><rect x="88.8592%" y="741" width="0.1179%" height="15" fill="rgb(231,147,38)" fg:x="11302" fg:w="15"/><text x="89.1092%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 0.05%)</title><rect x="88.9299%" y="725" width="0.0472%" height="15" fill="rgb(253,81,48)" fg:x="11311" fg:w="6"/><text x="89.1799%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.03%)</title><rect x="88.9457%" y="709" width="0.0314%" height="15" fill="rgb(249,222,43)" fg:x="11313" fg:w="4"/><text x="89.1957%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.03%)</title><rect x="88.9457%" y="693" width="0.0314%" height="15" fill="rgb(221,3,27)" fg:x="11313" fg:w="4"/><text x="89.1957%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.02%)</title><rect x="88.9614%" y="677" width="0.0157%" height="15" fill="rgb(228,180,5)" fg:x="11315" fg:w="2"/><text x="89.2114%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="88.9614%" y="661" width="0.0157%" height="15" fill="rgb(227,131,42)" fg:x="11315" fg:w="2"/><text x="89.2114%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.9771%" y="709" width="0.0157%" height="15" fill="rgb(212,3,39)" fg:x="11317" fg:w="2"/><text x="89.2271%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.9771%" y="693" width="0.0157%" height="15" fill="rgb(226,45,5)" fg:x="11317" fg:w="2"/><text x="89.2271%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="88.9771%" y="677" width="0.0157%" height="15" fill="rgb(215,167,45)" fg:x="11317" fg:w="2"/><text x="89.2271%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="88.9771%" y="661" width="0.0157%" height="15" fill="rgb(250,218,53)" fg:x="11317" fg:w="2"/><text x="89.2271%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="88.9928%" y="709" width="0.0157%" height="15" fill="rgb(207,140,0)" fg:x="11319" fg:w="2"/><text x="89.2428%" y="719.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="88.9928%" y="693" width="0.0157%" height="15" fill="rgb(238,133,51)" fg:x="11319" fg:w="2"/><text x="89.2428%" y="703.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="88.9928%" y="677" width="0.0157%" height="15" fill="rgb(218,203,53)" fg:x="11319" fg:w="2"/><text x="89.2428%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="89.0086%" y="597" width="0.0157%" height="15" fill="rgb(226,184,25)" fg:x="11321" fg:w="2"/><text x="89.2586%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.06%)</title><rect x="88.9771%" y="741" width="0.0629%" height="15" fill="rgb(231,121,21)" fg:x="11317" fg:w="8"/><text x="89.2271%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.06%)</title><rect x="88.9771%" y="725" width="0.0629%" height="15" fill="rgb(251,14,34)" fg:x="11317" fg:w="8"/><text x="89.2271%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="89.0086%" y="709" width="0.0314%" height="15" fill="rgb(249,193,11)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="89.0086%" y="693" width="0.0314%" height="15" fill="rgb(220,172,37)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="89.0086%" y="677" width="0.0314%" height="15" fill="rgb(231,229,43)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.03%)</title><rect x="89.0086%" y="661" width="0.0314%" height="15" fill="rgb(250,161,5)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="89.0086%" y="645" width="0.0314%" height="15" fill="rgb(218,225,18)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="89.0086%" y="629" width="0.0314%" height="15" fill="rgb(245,45,42)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4 samples, 0.03%)</title><rect x="89.0086%" y="613" width="0.0314%" height="15" fill="rgb(211,115,1)" fg:x="11321" fg:w="4"/><text x="89.2586%" y="623.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.02%)</title><rect x="89.0243%" y="597" width="0.0157%" height="15" fill="rgb(248,133,52)" fg:x="11323" fg:w="2"/><text x="89.2743%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="89.0243%" y="581" width="0.0157%" height="15" fill="rgb(238,100,21)" fg:x="11323" fg:w="2"/><text x="89.2743%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="89.0479%" y="661" width="0.0157%" height="15" fill="rgb(247,144,11)" fg:x="11326" fg:w="2"/><text x="89.2979%" y="671.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="89.0479%" y="645" width="0.0157%" height="15" fill="rgb(206,164,16)" fg:x="11326" fg:w="2"/><text x="89.2979%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (2 samples, 0.02%)</title><rect x="89.0479%" y="629" width="0.0157%" height="15" fill="rgb(222,34,3)" fg:x="11326" fg:w="2"/><text x="89.2979%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.02%)</title><rect x="89.0479%" y="613" width="0.0157%" height="15" fill="rgb(248,82,4)" fg:x="11326" fg:w="2"/><text x="89.2979%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (4 samples, 0.03%)</title><rect x="89.0636%" y="661" width="0.0314%" height="15" fill="rgb(228,81,46)" fg:x="11328" fg:w="4"/><text x="89.3136%" y="671.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (3 samples, 0.02%)</title><rect x="89.0715%" y="645" width="0.0236%" height="15" fill="rgb(227,67,47)" fg:x="11329" fg:w="3"/><text x="89.3215%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.02%)</title><rect x="89.0715%" y="629" width="0.0236%" height="15" fill="rgb(215,93,53)" fg:x="11329" fg:w="3"/><text x="89.3215%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="89.0715%" y="613" width="0.0236%" height="15" fill="rgb(248,194,39)" fg:x="11329" fg:w="3"/><text x="89.3215%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.02%)</title><rect x="89.0951%" y="661" width="0.0157%" height="15" fill="rgb(215,5,19)" fg:x="11332" fg:w="2"/><text x="89.3451%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.02%)</title><rect x="89.0951%" y="645" width="0.0157%" height="15" fill="rgb(226,215,51)" fg:x="11332" fg:w="2"/><text x="89.3451%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (2 samples, 0.02%)</title><rect x="89.0951%" y="629" width="0.0157%" height="15" fill="rgb(225,56,26)" fg:x="11332" fg:w="2"/><text x="89.3451%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="89.1108%" y="629" width="0.0157%" height="15" fill="rgb(222,75,29)" fg:x="11334" fg:w="2"/><text x="89.3608%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (5 samples, 0.04%)</title><rect x="89.1344%" y="629" width="0.0393%" height="15" fill="rgb(236,139,6)" fg:x="11337" fg:w="5"/><text x="89.3844%" y="639.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.03%)</title><rect x="89.1422%" y="613" width="0.0314%" height="15" fill="rgb(223,137,36)" fg:x="11338" fg:w="4"/><text x="89.3922%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="89.1422%" y="597" width="0.0314%" height="15" fill="rgb(226,99,2)" fg:x="11338" fg:w="4"/><text x="89.3922%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="89.1422%" y="581" width="0.0314%" height="15" fill="rgb(206,133,23)" fg:x="11338" fg:w="4"/><text x="89.3922%" y="591.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="89.1422%" y="565" width="0.0314%" height="15" fill="rgb(243,173,15)" fg:x="11338" fg:w="4"/><text x="89.3922%" y="575.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.03%)</title><rect x="89.1422%" y="549" width="0.0314%" height="15" fill="rgb(228,69,28)" fg:x="11338" fg:w="4"/><text x="89.3922%" y="559.50"></text></g><g><title>_int_malloc (3 samples, 0.02%)</title><rect x="89.1501%" y="533" width="0.0236%" height="15" fill="rgb(212,51,22)" fg:x="11339" fg:w="3"/><text x="89.4001%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (18 samples, 0.14%)</title><rect x="89.0400%" y="725" width="0.1415%" height="15" fill="rgb(227,113,0)" fg:x="11325" fg:w="18"/><text x="89.2900%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.14%)</title><rect x="89.0400%" y="709" width="0.1415%" height="15" fill="rgb(252,84,27)" fg:x="11325" fg:w="18"/><text x="89.2900%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (18 samples, 0.14%)</title><rect x="89.0400%" y="693" width="0.1415%" height="15" fill="rgb(223,145,39)" fg:x="11325" fg:w="18"/><text x="89.2900%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (17 samples, 0.13%)</title><rect x="89.0479%" y="677" width="0.1337%" height="15" fill="rgb(239,219,30)" fg:x="11326" fg:w="17"/><text x="89.2979%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (9 samples, 0.07%)</title><rect x="89.1108%" y="661" width="0.0708%" height="15" fill="rgb(224,196,39)" fg:x="11334" fg:w="9"/><text x="89.3608%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (9 samples, 0.07%)</title><rect x="89.1108%" y="645" width="0.0708%" height="15" fill="rgb(205,35,43)" fg:x="11334" fg:w="9"/><text x="89.3608%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="89.2051%" y="709" width="0.0157%" height="15" fill="rgb(228,201,21)" fg:x="11346" fg:w="2"/><text x="89.4551%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.43%)</title><rect x="88.8120%" y="885" width="0.4324%" height="15" fill="rgb(237,118,16)" fg:x="11296" fg:w="55"/><text x="89.0620%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (51 samples, 0.40%)</title><rect x="88.8435%" y="869" width="0.4010%" height="15" fill="rgb(241,17,19)" fg:x="11300" fg:w="51"/><text x="89.0935%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (51 samples, 0.40%)</title><rect x="88.8435%" y="853" width="0.4010%" height="15" fill="rgb(214,10,25)" fg:x="11300" fg:w="51"/><text x="89.0935%" y="863.50"></text></g><g><title>&lt;itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.40%)</title><rect x="88.8435%" y="837" width="0.4010%" height="15" fill="rgb(238,37,29)" fg:x="11300" fg:w="51"/><text x="89.0935%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (51 samples, 0.40%)</title><rect x="88.8435%" y="821" width="0.4010%" height="15" fill="rgb(253,83,25)" fg:x="11300" fg:w="51"/><text x="89.0935%" y="831.50"></text></g><g><title>&lt;itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (50 samples, 0.39%)</title><rect x="88.8513%" y="805" width="0.3931%" height="15" fill="rgb(234,192,12)" fg:x="11301" fg:w="50"/><text x="89.1013%" y="815.50"></text></g><g><title>itertools::duplicates_impl::private::Meta&lt;Key,F&gt;::filter (50 samples, 0.39%)</title><rect x="88.8513%" y="789" width="0.3931%" height="15" fill="rgb(241,216,45)" fg:x="11301" fg:w="50"/><text x="89.1013%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (34 samples, 0.27%)</title><rect x="88.9771%" y="773" width="0.2673%" height="15" fill="rgb(242,22,33)" fg:x="11317" fg:w="34"/><text x="89.2271%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.27%)</title><rect x="88.9771%" y="757" width="0.2673%" height="15" fill="rgb(231,105,49)" fg:x="11317" fg:w="34"/><text x="89.2271%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (26 samples, 0.20%)</title><rect x="89.0400%" y="741" width="0.2044%" height="15" fill="rgb(218,204,15)" fg:x="11325" fg:w="26"/><text x="89.2900%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (8 samples, 0.06%)</title><rect x="89.1815%" y="725" width="0.0629%" height="15" fill="rgb(235,138,41)" fg:x="11343" fg:w="8"/><text x="89.4315%" y="735.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.02%)</title><rect x="89.2287%" y="709" width="0.0157%" height="15" fill="rgb(246,0,9)" fg:x="11349" fg:w="2"/><text x="89.4787%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.02%)</title><rect x="89.2287%" y="693" width="0.0157%" height="15" fill="rgb(210,74,4)" fg:x="11349" fg:w="2"/><text x="89.4787%" y="703.50"></text></g><g><title>itertools::Itertools::collect_vec (69 samples, 0.54%)</title><rect x="88.7177%" y="965" width="0.5425%" height="15" fill="rgb(250,60,41)" fg:x="11284" fg:w="69"/><text x="88.9677%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (69 samples, 0.54%)</title><rect x="88.7177%" y="949" width="0.5425%" height="15" fill="rgb(220,115,12)" fg:x="11284" fg:w="69"/><text x="88.9677%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (69 samples, 0.54%)</title><rect x="88.7177%" y="933" width="0.5425%" height="15" fill="rgb(237,100,13)" fg:x="11284" fg:w="69"/><text x="88.9677%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.54%)</title><rect x="88.7177%" y="917" width="0.5425%" height="15" fill="rgb(213,55,26)" fg:x="11284" fg:w="69"/><text x="88.9677%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (69 samples, 0.54%)</title><rect x="88.7177%" y="901" width="0.5425%" height="15" fill="rgb(216,17,4)" fg:x="11284" fg:w="69"/><text x="88.9677%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="89.2444%" y="885" width="0.0157%" height="15" fill="rgb(220,153,47)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="89.2444%" y="869" width="0.0157%" height="15" fill="rgb(215,131,9)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="89.2444%" y="853" width="0.0157%" height="15" fill="rgb(233,46,42)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="89.2444%" y="837" width="0.0157%" height="15" fill="rgb(226,86,7)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="89.2444%" y="821" width="0.0157%" height="15" fill="rgb(239,226,21)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="89.2444%" y="805" width="0.0157%" height="15" fill="rgb(244,137,22)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="815.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="89.2444%" y="789" width="0.0157%" height="15" fill="rgb(211,139,35)" fg:x="11351" fg:w="2"/><text x="89.4944%" y="799.50"></text></g><g><title>excel_merge::FilesMap::search_from_multipart::{{closure}} (9,750 samples, 76.66%)</title><rect x="12.6189%" y="997" width="76.6570%" height="15" fill="rgb(214,62,50)" fg:x="1605" fg:w="9750"/><text x="12.8689%" y="1007.50">excel_merge::FilesMap::search_from_multipart::{{closure}}</text></g><g><title>excel_merge::search_from_files::{{closure}} (8,923 samples, 70.15%)</title><rect x="19.1210%" y="981" width="70.1549%" height="15" fill="rgb(212,113,44)" fg:x="2432" fg:w="8923"/><text x="19.3710%" y="991.50">excel_merge::search_from_files::{{closure}}</text></g><g><title>itertools::Itertools::duplicates (2 samples, 0.02%)</title><rect x="89.2602%" y="965" width="0.0157%" height="15" fill="rgb(226,150,43)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="975.50"></text></g><g><title>itertools::duplicates_impl::duplicates (2 samples, 0.02%)</title><rect x="89.2602%" y="949" width="0.0157%" height="15" fill="rgb(250,71,37)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="959.50"></text></g><g><title>itertools::duplicates_impl::private::DuplicatesBy&lt;I,Key,F&gt;::new (2 samples, 0.02%)</title><rect x="89.2602%" y="933" width="0.0157%" height="15" fill="rgb(219,76,19)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="89.2602%" y="917" width="0.0157%" height="15" fill="rgb(250,39,11)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="927.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="89.2602%" y="901" width="0.0157%" height="15" fill="rgb(230,64,31)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="911.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (2 samples, 0.02%)</title><rect x="89.2602%" y="885" width="0.0157%" height="15" fill="rgb(208,222,23)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="895.50"></text></g><g><title>std::collections::hash::map::RandomState::new (2 samples, 0.02%)</title><rect x="89.2602%" y="869" width="0.0157%" height="15" fill="rgb(227,125,18)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="89.2602%" y="853" width="0.0157%" height="15" fill="rgb(234,210,9)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="89.2602%" y="837" width="0.0157%" height="15" fill="rgb(217,127,24)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="847.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (2 samples, 0.02%)</title><rect x="89.2602%" y="821" width="0.0157%" height="15" fill="rgb(239,141,48)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="831.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="89.2602%" y="805" width="0.0157%" height="15" fill="rgb(227,109,8)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="815.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="89.2602%" y="789" width="0.0157%" height="15" fill="rgb(235,184,23)" fg:x="11353" fg:w="2"/><text x="89.5102%" y="799.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.03%)</title><rect x="89.2759%" y="693" width="0.0314%" height="15" fill="rgb(227,226,48)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (4 samples, 0.03%)</title><rect x="89.2759%" y="677" width="0.0314%" height="15" fill="rgb(206,150,11)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (4 samples, 0.03%)</title><rect x="89.2759%" y="661" width="0.0314%" height="15" fill="rgb(254,2,33)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="671.50"></text></g><g><title>alloc::collections::btree::mem::replace (4 samples, 0.03%)</title><rect x="89.2759%" y="645" width="0.0314%" height="15" fill="rgb(243,160,20)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::{{closure}} (4 samples, 0.03%)</title><rect x="89.2759%" y="629" width="0.0314%" height="15" fill="rgb(218,208,30)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (4 samples, 0.03%)</title><rect x="89.2759%" y="613" width="0.0314%" height="15" fill="rgb(224,120,49)" fg:x="11355" fg:w="4"/><text x="89.5259%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::workbook::Workbook&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="965" width="0.0472%" height="15" fill="rgb(246,12,2)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_xlsxwriter::worksheet::Worksheet&gt;&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="949" width="0.0472%" height="15" fill="rgb(236,117,3)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="933" width="0.0472%" height="15" fill="rgb(216,128,52)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rust_xlsxwriter::worksheet::Worksheet]&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="917" width="0.0472%" height="15" fill="rgb(246,145,19)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::Worksheet&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="901" width="0.0472%" height="15" fill="rgb(222,11,46)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="885" width="0.0472%" height="15" fill="rgb(245,82,36)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="869" width="0.0472%" height="15" fill="rgb(250,73,51)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="879.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="853" width="0.0472%" height="15" fill="rgb(221,189,23)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt;&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="837" width="0.0472%" height="15" fill="rgb(210,33,7)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="847.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="821" width="0.0472%" height="15" fill="rgb(210,107,22)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (6 samples, 0.05%)</title><rect x="89.2759%" y="805" width="0.0472%" height="15" fill="rgb(222,116,37)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="815.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (6 samples, 0.05%)</title><rect x="89.2759%" y="789" width="0.0472%" height="15" fill="rgb(254,17,48)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="773" width="0.0472%" height="15" fill="rgb(224,36,32)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="757" width="0.0472%" height="15" fill="rgb(232,90,46)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="767.50"></text></g><g><title>core::mem::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="741" width="0.0472%" height="15" fill="rgb(241,66,40)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u16,rust_xlsxwriter::worksheet::CellType&gt;&gt; (6 samples, 0.05%)</title><rect x="89.2759%" y="725" width="0.0472%" height="15" fill="rgb(249,184,29)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="89.2759%" y="709" width="0.0472%" height="15" fill="rgb(231,181,1)" fg:x="11355" fg:w="6"/><text x="89.5259%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2 samples, 0.02%)</title><rect x="89.3073%" y="693" width="0.0157%" height="15" fill="rgb(224,94,2)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="703.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2 samples, 0.02%)</title><rect x="89.3073%" y="677" width="0.0157%" height="15" fill="rgb(229,170,15)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::worksheet::CellType&gt; (2 samples, 0.02%)</title><rect x="89.3073%" y="661" width="0.0157%" height="15" fill="rgb(240,127,35)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (2 samples, 0.02%)</title><rect x="89.3073%" y="645" width="0.0157%" height="15" fill="rgb(248,196,34)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="89.3073%" y="629" width="0.0157%" height="15" fill="rgb(236,137,7)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.02%)</title><rect x="89.3073%" y="613" width="0.0157%" height="15" fill="rgb(235,127,16)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="623.50"></text></g><g><title>core::mem::drop (2 samples, 0.02%)</title><rect x="89.3073%" y="597" width="0.0157%" height="15" fill="rgb(250,192,54)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;str&gt;&gt; (2 samples, 0.02%)</title><rect x="89.3073%" y="581" width="0.0157%" height="15" fill="rgb(218,98,20)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="591.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="89.3073%" y="565" width="0.0157%" height="15" fill="rgb(230,176,47)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="89.3073%" y="549" width="0.0157%" height="15" fill="rgb(244,2,33)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="89.3073%" y="533" width="0.0157%" height="15" fill="rgb(231,100,17)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="543.50"></text></g><g><title>__free (2 samples, 0.02%)</title><rect x="89.3073%" y="517" width="0.0157%" height="15" fill="rgb(245,23,12)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="527.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="89.3073%" y="501" width="0.0157%" height="15" fill="rgb(249,55,22)" fg:x="11359" fg:w="2"/><text x="89.5573%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="89.3231%" y="917" width="0.0236%" height="15" fill="rgb(207,134,9)" fg:x="11361" fg:w="3"/><text x="89.5731%" y="927.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (3 samples, 0.02%)</title><rect x="89.3231%" y="901" width="0.0236%" height="15" fill="rgb(218,134,0)" fg:x="11361" fg:w="3"/><text x="89.5731%" y="911.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.02%)</title><rect x="89.3231%" y="885" width="0.0236%" height="15" fill="rgb(213,212,33)" fg:x="11361" fg:w="3"/><text x="89.5731%" y="895.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.02%)</title><rect x="89.3231%" y="869" width="0.0236%" height="15" fill="rgb(252,106,18)" fg:x="11361" fg:w="3"/><text x="89.5731%" y="879.50"></text></g><g><title>core::slice::memchr::memchr_naive (3 samples, 0.02%)</title><rect x="89.3231%" y="853" width="0.0236%" height="15" fill="rgb(208,126,42)" fg:x="11361" fg:w="3"/><text x="89.5731%" y="863.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="89.3231%" y="949" width="0.0314%" height="15" fill="rgb(246,175,29)" fg:x="11361" fg:w="4"/><text x="89.5731%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="89.3231%" y="933" width="0.0314%" height="15" fill="rgb(215,13,50)" fg:x="11361" fg:w="4"/><text x="89.5731%" y="943.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="89.4253%" y="869" width="0.0157%" height="15" fill="rgb(216,172,15)" fg:x="11374" fg:w="2"/><text x="89.6753%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.12%)</title><rect x="89.3781%" y="885" width="0.1179%" height="15" fill="rgb(212,103,13)" fg:x="11368" fg:w="15"/><text x="89.6281%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="89.4410%" y="869" width="0.0550%" height="15" fill="rgb(231,171,36)" fg:x="11376" fg:w="7"/><text x="89.6910%" y="879.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (6 samples, 0.05%)</title><rect x="89.4489%" y="853" width="0.0472%" height="15" fill="rgb(250,123,20)" fg:x="11377" fg:w="6"/><text x="89.6989%" y="863.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.02%)</title><rect x="89.4803%" y="837" width="0.0157%" height="15" fill="rgb(212,53,50)" fg:x="11381" fg:w="2"/><text x="89.7303%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (4 samples, 0.03%)</title><rect x="89.4960%" y="885" width="0.0314%" height="15" fill="rgb(243,54,12)" fg:x="11383" fg:w="4"/><text x="89.7460%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="89.4960%" y="869" width="0.0314%" height="15" fill="rgb(234,101,34)" fg:x="11383" fg:w="4"/><text x="89.7460%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="89.4960%" y="853" width="0.0314%" height="15" fill="rgb(254,67,22)" fg:x="11383" fg:w="4"/><text x="89.7460%" y="863.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="89.4960%" y="837" width="0.0314%" height="15" fill="rgb(250,35,47)" fg:x="11383" fg:w="4"/><text x="89.7460%" y="847.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.02%)</title><rect x="89.5118%" y="821" width="0.0157%" height="15" fill="rgb(226,126,38)" fg:x="11385" fg:w="2"/><text x="89.7618%" y="831.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.02%)</title><rect x="89.5118%" y="805" width="0.0157%" height="15" fill="rgb(216,138,53)" fg:x="11385" fg:w="2"/><text x="89.7618%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (3 samples, 0.02%)</title><rect x="89.5275%" y="885" width="0.0236%" height="15" fill="rgb(246,199,43)" fg:x="11387" fg:w="3"/><text x="89.7775%" y="895.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (28 samples, 0.22%)</title><rect x="89.3545%" y="949" width="0.2201%" height="15" fill="rgb(232,125,11)" fg:x="11365" fg:w="28"/><text x="89.6045%" y="959.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (28 samples, 0.22%)</title><rect x="89.3545%" y="933" width="0.2201%" height="15" fill="rgb(218,219,45)" fg:x="11365" fg:w="28"/><text x="89.6045%" y="943.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (28 samples, 0.22%)</title><rect x="89.3545%" y="917" width="0.2201%" height="15" fill="rgb(216,102,54)" fg:x="11365" fg:w="28"/><text x="89.6045%" y="927.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (28 samples, 0.22%)</title><rect x="89.3545%" y="901" width="0.2201%" height="15" fill="rgb(250,228,7)" fg:x="11365" fg:w="28"/><text x="89.6045%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.02%)</title><rect x="89.5589%" y="885" width="0.0157%" height="15" fill="rgb(226,125,25)" fg:x="11391" fg:w="2"/><text x="89.8089%" y="895.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="89.5589%" y="869" width="0.0157%" height="15" fill="rgb(224,165,27)" fg:x="11391" fg:w="2"/><text x="89.8089%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::lines (4 samples, 0.03%)</title><rect x="89.5747%" y="949" width="0.0314%" height="15" fill="rgb(233,86,3)" fg:x="11393" fg:w="4"/><text x="89.8247%" y="959.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_inclusive (4 samples, 0.03%)</title><rect x="89.5747%" y="933" width="0.0314%" height="15" fill="rgb(228,116,20)" fg:x="11393" fg:w="4"/><text x="89.8247%" y="943.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher (4 samples, 0.03%)</title><rect x="89.5747%" y="917" width="0.0314%" height="15" fill="rgb(209,192,17)" fg:x="11393" fg:w="4"/><text x="89.8247%" y="927.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (4 samples, 0.03%)</title><rect x="89.5747%" y="901" width="0.0314%" height="15" fill="rgb(224,88,34)" fg:x="11393" fg:w="4"/><text x="89.8247%" y="911.50"></text></g><g><title>core::char::methods::encode_utf8_raw (4 samples, 0.03%)</title><rect x="89.5747%" y="885" width="0.0314%" height="15" fill="rgb(233,38,6)" fg:x="11393" fg:w="4"/><text x="89.8247%" y="895.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="869" width="0.0157%" height="15" fill="rgb(212,59,30)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="853" width="0.0157%" height="15" fill="rgb(213,80,3)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="863.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="837" width="0.0157%" height="15" fill="rgb(251,178,7)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="821" width="0.0157%" height="15" fill="rgb(213,154,26)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="831.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="805" width="0.0157%" height="15" fill="rgb(238,165,49)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="815.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (2 samples, 0.02%)</title><rect x="89.5904%" y="789" width="0.0157%" height="15" fill="rgb(248,91,46)" fg:x="11395" fg:w="2"/><text x="89.8404%" y="799.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::autofit (37 samples, 0.29%)</title><rect x="89.3231%" y="965" width="0.2909%" height="15" fill="rgb(244,21,52)" fg:x="11361" fg:w="37"/><text x="89.5731%" y="975.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="89.6297%" y="757" width="0.0236%" height="15" fill="rgb(247,122,20)" fg:x="11400" fg:w="3"/><text x="89.8797%" y="767.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="89.6297%" y="741" width="0.0236%" height="15" fill="rgb(218,27,9)" fg:x="11400" fg:w="3"/><text x="89.8797%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="89.6218%" y="789" width="0.0472%" height="15" fill="rgb(246,7,6)" fg:x="11399" fg:w="6"/><text x="89.8718%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="89.6218%" y="773" width="0.0472%" height="15" fill="rgb(227,135,54)" fg:x="11399" fg:w="6"/><text x="89.8718%" y="783.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="89.6140%" y="805" width="0.0629%" height="15" fill="rgb(247,14,11)" fg:x="11398" fg:w="8"/><text x="89.8640%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.02%)</title><rect x="89.6769%" y="805" width="0.0236%" height="15" fill="rgb(206,149,34)" fg:x="11406" fg:w="3"/><text x="89.9269%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.02%)</title><rect x="89.6769%" y="789" width="0.0236%" height="15" fill="rgb(227,228,4)" fg:x="11406" fg:w="3"/><text x="89.9269%" y="799.50"></text></g><g><title>core::cmp::max (3 samples, 0.02%)</title><rect x="89.7004%" y="805" width="0.0236%" height="15" fill="rgb(238,218,28)" fg:x="11409" fg:w="3"/><text x="89.9504%" y="815.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.02%)</title><rect x="89.7004%" y="789" width="0.0236%" height="15" fill="rgb(252,86,40)" fg:x="11409" fg:w="3"/><text x="89.9504%" y="799.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.02%)</title><rect x="89.7004%" y="773" width="0.0236%" height="15" fill="rgb(251,225,11)" fg:x="11409" fg:w="3"/><text x="89.9504%" y="783.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="89.7083%" y="757" width="0.0157%" height="15" fill="rgb(206,46,49)" fg:x="11410" fg:w="2"/><text x="89.9583%" y="767.50"></text></g><g><title>alloc::string::String::push_str (15 samples, 0.12%)</title><rect x="89.6140%" y="933" width="0.1179%" height="15" fill="rgb(245,128,24)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15 samples, 0.12%)</title><rect x="89.6140%" y="917" width="0.1179%" height="15" fill="rgb(219,177,34)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.12%)</title><rect x="89.6140%" y="901" width="0.1179%" height="15" fill="rgb(218,60,48)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (15 samples, 0.12%)</title><rect x="89.6140%" y="885" width="0.1179%" height="15" fill="rgb(221,11,5)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15 samples, 0.12%)</title><rect x="89.6140%" y="869" width="0.1179%" height="15" fill="rgb(220,148,13)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.12%)</title><rect x="89.6140%" y="853" width="0.1179%" height="15" fill="rgb(210,16,3)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.12%)</title><rect x="89.6140%" y="837" width="0.1179%" height="15" fill="rgb(236,80,2)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.12%)</title><rect x="89.6140%" y="821" width="0.1179%" height="15" fill="rgb(239,129,19)" fg:x="11398" fg:w="15"/><text x="89.8640%" y="831.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::MultiCharEq&gt;::matches (5 samples, 0.04%)</title><rect x="89.7319%" y="869" width="0.0393%" height="15" fill="rgb(220,106,35)" fg:x="11413" fg:w="5"/><text x="89.9819%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5 samples, 0.04%)</title><rect x="89.7319%" y="853" width="0.0393%" height="15" fill="rgb(252,139,45)" fg:x="11413" fg:w="5"/><text x="89.9819%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="89.7398%" y="837" width="0.0314%" height="15" fill="rgb(229,8,36)" fg:x="11414" fg:w="4"/><text x="89.9898%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.02%)</title><rect x="89.7712%" y="853" width="0.0236%" height="15" fill="rgb(230,126,33)" fg:x="11418" fg:w="3"/><text x="90.0212%" y="863.50"></text></g><g><title>core::str::validations::next_code_point_reverse (3 samples, 0.02%)</title><rect x="89.7712%" y="837" width="0.0236%" height="15" fill="rgb(239,140,21)" fg:x="11418" fg:w="3"/><text x="90.0212%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (10 samples, 0.08%)</title><rect x="89.7319%" y="933" width="0.0786%" height="15" fill="rgb(254,104,9)" fg:x="11413" fg:w="10"/><text x="89.9819%" y="943.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (10 samples, 0.08%)</title><rect x="89.7319%" y="917" width="0.0786%" height="15" fill="rgb(239,52,14)" fg:x="11413" fg:w="10"/><text x="89.9819%" y="927.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (10 samples, 0.08%)</title><rect x="89.7319%" y="901" width="0.0786%" height="15" fill="rgb(208,227,44)" fg:x="11413" fg:w="10"/><text x="89.9819%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (10 samples, 0.08%)</title><rect x="89.7319%" y="885" width="0.0786%" height="15" fill="rgb(246,18,19)" fg:x="11413" fg:w="10"/><text x="89.9819%" y="895.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5 samples, 0.04%)</title><rect x="89.7712%" y="869" width="0.0393%" height="15" fill="rgb(235,228,25)" fg:x="11418" fg:w="5"/><text x="90.0212%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="89.7948%" y="853" width="0.0157%" height="15" fill="rgb(240,156,20)" fg:x="11421" fg:w="2"/><text x="90.0448%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (4 samples, 0.03%)</title><rect x="89.8184%" y="853" width="0.0314%" height="15" fill="rgb(224,8,20)" fg:x="11424" fg:w="4"/><text x="90.0684%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.02%)</title><rect x="89.8341%" y="837" width="0.0157%" height="15" fill="rgb(214,12,52)" fg:x="11426" fg:w="2"/><text x="90.0841%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (8 samples, 0.06%)</title><rect x="89.8105%" y="933" width="0.0629%" height="15" fill="rgb(211,220,47)" fg:x="11423" fg:w="8"/><text x="90.0605%" y="943.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (8 samples, 0.06%)</title><rect x="89.8105%" y="917" width="0.0629%" height="15" fill="rgb(250,173,5)" fg:x="11423" fg:w="8"/><text x="90.0605%" y="927.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (8 samples, 0.06%)</title><rect x="89.8105%" y="901" width="0.0629%" height="15" fill="rgb(250,125,52)" fg:x="11423" fg:w="8"/><text x="90.0605%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (8 samples, 0.06%)</title><rect x="89.8105%" y="885" width="0.0629%" height="15" fill="rgb(209,133,18)" fg:x="11423" fg:w="8"/><text x="90.0605%" y="895.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="89.8184%" y="869" width="0.0550%" height="15" fill="rgb(216,173,22)" fg:x="11424" fg:w="7"/><text x="90.0684%" y="879.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="89.8498%" y="853" width="0.0236%" height="15" fill="rgb(205,3,22)" fg:x="11428" fg:w="3"/><text x="90.0998%" y="863.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.02%)</title><rect x="89.8498%" y="837" width="0.0236%" height="15" fill="rgb(248,22,20)" fg:x="11428" fg:w="3"/><text x="90.0998%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="89.8577%" y="821" width="0.0157%" height="15" fill="rgb(233,6,29)" fg:x="11429" fg:w="2"/><text x="90.1077%" y="831.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.27%)</title><rect x="89.8891%" y="805" width="0.2673%" height="15" fill="rgb(240,22,54)" fg:x="11433" fg:w="34"/><text x="90.1391%" y="815.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.27%)</title><rect x="89.8891%" y="789" width="0.2673%" height="15" fill="rgb(231,133,32)" fg:x="11433" fg:w="34"/><text x="90.1391%" y="799.50"></text></g><g><title>_int_malloc (34 samples, 0.27%)</title><rect x="89.8891%" y="773" width="0.2673%" height="15" fill="rgb(248,193,4)" fg:x="11433" fg:w="34"/><text x="90.1391%" y="783.50"></text></g><g><title>sysmalloc (28 samples, 0.22%)</title><rect x="89.9363%" y="757" width="0.2201%" height="15" fill="rgb(211,178,46)" fg:x="11439" fg:w="28"/><text x="90.1863%" y="767.50"></text></g><g><title>__GI___mprotect (18 samples, 0.14%)</title><rect x="90.0149%" y="741" width="0.1415%" height="15" fill="rgb(224,5,42)" fg:x="11449" fg:w="18"/><text x="90.2649%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.28%)</title><rect x="89.8891%" y="837" width="0.2752%" height="15" fill="rgb(239,176,25)" fg:x="11433" fg:w="35"/><text x="90.1391%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.28%)</title><rect x="89.8891%" y="821" width="0.2752%" height="15" fill="rgb(245,187,50)" fg:x="11433" fg:w="35"/><text x="90.1391%" y="831.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.02%)</title><rect x="90.1643%" y="837" width="0.0157%" height="15" fill="rgb(248,24,15)" fg:x="11468" fg:w="2"/><text x="90.4143%" y="847.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.02%)</title><rect x="90.1643%" y="821" width="0.0157%" height="15" fill="rgb(205,166,13)" fg:x="11468" fg:w="2"/><text x="90.4143%" y="831.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::new (40 samples, 0.31%)</title><rect x="89.8734%" y="933" width="0.3145%" height="15" fill="rgb(208,114,23)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="943.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::new (40 samples, 0.31%)</title><rect x="89.8734%" y="917" width="0.3145%" height="15" fill="rgb(239,127,18)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (40 samples, 0.31%)</title><rect x="89.8734%" y="901" width="0.3145%" height="15" fill="rgb(219,154,28)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.31%)</title><rect x="89.8734%" y="885" width="0.3145%" height="15" fill="rgb(225,157,23)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.31%)</title><rect x="89.8734%" y="869" width="0.3145%" height="15" fill="rgb(219,8,6)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.31%)</title><rect x="89.8734%" y="853" width="0.3145%" height="15" fill="rgb(212,47,6)" fg:x="11431" fg:w="40"/><text x="90.1234%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (4 samples, 0.03%)</title><rect x="90.1879%" y="901" width="0.0314%" height="15" fill="rgb(224,190,4)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.03%)</title><rect x="90.1879%" y="885" width="0.0314%" height="15" fill="rgb(239,183,29)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="895.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.03%)</title><rect x="90.1879%" y="869" width="0.0314%" height="15" fill="rgb(213,57,7)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.03%)</title><rect x="90.1879%" y="853" width="0.0314%" height="15" fill="rgb(216,148,1)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.03%)</title><rect x="90.1879%" y="837" width="0.0314%" height="15" fill="rgb(236,182,29)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.03%)</title><rect x="90.1879%" y="821" width="0.0314%" height="15" fill="rgb(244,120,48)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.03%)</title><rect x="90.1879%" y="805" width="0.0314%" height="15" fill="rgb(206,71,34)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.03%)</title><rect x="90.1879%" y="789" width="0.0314%" height="15" fill="rgb(242,32,6)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="90.1879%" y="773" width="0.0314%" height="15" fill="rgb(241,35,3)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="90.1879%" y="757" width="0.0314%" height="15" fill="rgb(222,62,19)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.03%)</title><rect x="90.1879%" y="741" width="0.0314%" height="15" fill="rgb(223,110,41)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="90.1879%" y="725" width="0.0314%" height="15" fill="rgb(208,224,4)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="90.1879%" y="709" width="0.0314%" height="15" fill="rgb(241,137,19)" fg:x="11471" fg:w="4"/><text x="90.4379%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (2 samples, 0.02%)</title><rect x="90.2194%" y="901" width="0.0157%" height="15" fill="rgb(244,24,17)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="90.2194%" y="885" width="0.0157%" height="15" fill="rgb(245,178,49)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="90.2194%" y="869" width="0.0157%" height="15" fill="rgb(219,160,38)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="90.2194%" y="853" width="0.0157%" height="15" fill="rgb(228,137,14)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="90.2194%" y="837" width="0.0157%" height="15" fill="rgb(237,134,11)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="90.2194%" y="821" width="0.0157%" height="15" fill="rgb(211,126,44)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="90.2194%" y="805" width="0.0157%" height="15" fill="rgb(226,171,33)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="90.2194%" y="789" width="0.0157%" height="15" fill="rgb(253,99,13)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="90.2194%" y="773" width="0.0157%" height="15" fill="rgb(244,48,7)" fg:x="11475" fg:w="2"/><text x="90.4694%" y="783.50"></text></g><g><title>alloc::fmt::format (5 samples, 0.04%)</title><rect x="90.2744%" y="869" width="0.0393%" height="15" fill="rgb(244,217,54)" fg:x="11482" fg:w="5"/><text x="90.5244%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (5 samples, 0.04%)</title><rect x="90.2744%" y="853" width="0.0393%" height="15" fill="rgb(224,15,18)" fg:x="11482" fg:w="5"/><text x="90.5244%" y="863.50"></text></g><g><title>alloc::fmt::format::{{closure}} (3 samples, 0.02%)</title><rect x="90.2901%" y="837" width="0.0236%" height="15" fill="rgb(244,99,12)" fg:x="11484" fg:w="3"/><text x="90.5401%" y="847.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.02%)</title><rect x="90.2980%" y="821" width="0.0157%" height="15" fill="rgb(233,226,8)" fg:x="11485" fg:w="2"/><text x="90.5480%" y="831.50"></text></g><g><title>core::fmt::Arguments::new_v1 (2 samples, 0.02%)</title><rect x="90.3137%" y="869" width="0.0157%" height="15" fill="rgb(229,211,3)" fg:x="11487" fg:w="2"/><text x="90.5637%" y="879.50"></text></g><g><title>rust_xlsxwriter::format::Color::attributes (13 samples, 0.10%)</title><rect x="90.2429%" y="901" width="0.1022%" height="15" fill="rgb(216,140,21)" fg:x="11478" fg:w="13"/><text x="90.4929%" y="911.50"></text></g><g><title>rust_xlsxwriter::format::Color::argb_hex_value (9 samples, 0.07%)</title><rect x="90.2744%" y="885" width="0.0708%" height="15" fill="rgb(234,122,30)" fg:x="11482" fg:w="9"/><text x="90.5244%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="90.3294%" y="869" width="0.0157%" height="15" fill="rgb(236,25,46)" fg:x="11489" fg:w="2"/><text x="90.5794%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (5 samples, 0.04%)</title><rect x="90.3452%" y="869" width="0.0393%" height="15" fill="rgb(217,52,54)" fg:x="11491" fg:w="5"/><text x="90.5952%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (5 samples, 0.04%)</title><rect x="90.3452%" y="853" width="0.0393%" height="15" fill="rgb(222,29,26)" fg:x="11491" fg:w="5"/><text x="90.5952%" y="863.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="90.3452%" y="837" width="0.0393%" height="15" fill="rgb(216,177,29)" fg:x="11491" fg:w="5"/><text x="90.5952%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="90.3609%" y="821" width="0.0236%" height="15" fill="rgb(247,136,51)" fg:x="11493" fg:w="3"/><text x="90.6109%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="90.3687%" y="805" width="0.0157%" height="15" fill="rgb(231,47,47)" fg:x="11494" fg:w="2"/><text x="90.6187%" y="815.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (4 samples, 0.03%)</title><rect x="90.3923%" y="837" width="0.0314%" height="15" fill="rgb(211,192,36)" fg:x="11497" fg:w="4"/><text x="90.6423%" y="847.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.02%)</title><rect x="90.4002%" y="821" width="0.0236%" height="15" fill="rgb(229,156,32)" fg:x="11498" fg:w="3"/><text x="90.6502%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="90.4002%" y="805" width="0.0236%" height="15" fill="rgb(248,213,20)" fg:x="11498" fg:w="3"/><text x="90.6502%" y="815.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="90.4002%" y="789" width="0.0236%" height="15" fill="rgb(217,64,7)" fg:x="11498" fg:w="3"/><text x="90.6502%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="90.4002%" y="773" width="0.0236%" height="15" fill="rgb(232,142,8)" fg:x="11498" fg:w="3"/><text x="90.6502%" y="783.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (12 samples, 0.09%)</title><rect x="90.3452%" y="885" width="0.0943%" height="15" fill="rgb(224,92,44)" fg:x="11491" fg:w="12"/><text x="90.5952%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (7 samples, 0.06%)</title><rect x="90.3845%" y="869" width="0.0550%" height="15" fill="rgb(214,169,17)" fg:x="11496" fg:w="7"/><text x="90.6345%" y="879.50"></text></g><g><title>core::fmt::write (7 samples, 0.06%)</title><rect x="90.3845%" y="853" width="0.0550%" height="15" fill="rgb(210,59,37)" fg:x="11496" fg:w="7"/><text x="90.6345%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="90.4238%" y="837" width="0.0157%" height="15" fill="rgb(214,116,48)" fg:x="11501" fg:w="2"/><text x="90.6738%" y="847.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="90.4238%" y="821" width="0.0157%" height="15" fill="rgb(244,191,6)" fg:x="11501" fg:w="2"/><text x="90.6738%" y="831.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="90.4238%" y="805" width="0.0157%" height="15" fill="rgb(241,50,52)" fg:x="11501" fg:w="2"/><text x="90.6738%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="90.4238%" y="789" width="0.0157%" height="15" fill="rgb(236,75,39)" fg:x="11501" fg:w="2"/><text x="90.6738%" y="799.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_color (36 samples, 0.28%)</title><rect x="90.1879%" y="917" width="0.2830%" height="15" fill="rgb(236,99,0)" fg:x="11471" fg:w="36"/><text x="90.4379%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (16 samples, 0.13%)</title><rect x="90.3452%" y="901" width="0.1258%" height="15" fill="rgb(207,202,15)" fg:x="11491" fg:w="16"/><text x="90.5952%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.02%)</title><rect x="90.4474%" y="885" width="0.0236%" height="15" fill="rgb(233,207,14)" fg:x="11504" fg:w="3"/><text x="90.6974%" y="895.50"></text></g><g><title>core::fmt::write (3 samples, 0.02%)</title><rect x="90.4474%" y="869" width="0.0236%" height="15" fill="rgb(226,27,51)" fg:x="11504" fg:w="3"/><text x="90.6974%" y="879.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (2 samples, 0.02%)</title><rect x="90.4709%" y="901" width="0.0157%" height="15" fill="rgb(206,104,42)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="911.50"></text></g><g><title>alloc::string::String::with_capacity (2 samples, 0.02%)</title><rect x="90.4709%" y="885" width="0.0157%" height="15" fill="rgb(212,225,4)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="90.4709%" y="869" width="0.0157%" height="15" fill="rgb(233,96,42)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="90.4709%" y="853" width="0.0157%" height="15" fill="rgb(229,21,32)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="90.4709%" y="837" width="0.0157%" height="15" fill="rgb(226,216,24)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="90.4709%" y="821" width="0.0157%" height="15" fill="rgb(221,163,17)" fg:x="11507" fg:w="2"/><text x="90.7209%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (3 samples, 0.02%)</title><rect x="90.4945%" y="869" width="0.0236%" height="15" fill="rgb(216,216,42)" fg:x="11510" fg:w="3"/><text x="90.7445%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (3 samples, 0.02%)</title><rect x="90.4945%" y="853" width="0.0236%" height="15" fill="rgb(240,118,7)" fg:x="11510" fg:w="3"/><text x="90.7445%" y="863.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="90.4945%" y="837" width="0.0236%" height="15" fill="rgb(221,67,37)" fg:x="11510" fg:w="3"/><text x="90.7445%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="90.5024%" y="821" width="0.0157%" height="15" fill="rgb(241,32,44)" fg:x="11511" fg:w="2"/><text x="90.7524%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="90.5024%" y="805" width="0.0157%" height="15" fill="rgb(235,204,43)" fg:x="11511" fg:w="2"/><text x="90.7524%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="90.5260%" y="805" width="0.0157%" height="15" fill="rgb(213,116,10)" fg:x="11514" fg:w="2"/><text x="90.7760%" y="815.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (9 samples, 0.07%)</title><rect x="90.4867%" y="885" width="0.0708%" height="15" fill="rgb(239,15,48)" fg:x="11509" fg:w="9"/><text x="90.7367%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (5 samples, 0.04%)</title><rect x="90.5181%" y="869" width="0.0393%" height="15" fill="rgb(207,123,36)" fg:x="11513" fg:w="5"/><text x="90.7681%" y="879.50"></text></g><g><title>core::fmt::write (5 samples, 0.04%)</title><rect x="90.5181%" y="853" width="0.0393%" height="15" fill="rgb(209,103,30)" fg:x="11513" fg:w="5"/><text x="90.7681%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="90.5260%" y="837" width="0.0314%" height="15" fill="rgb(238,100,19)" fg:x="11514" fg:w="4"/><text x="90.7760%" y="847.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.03%)</title><rect x="90.5260%" y="821" width="0.0314%" height="15" fill="rgb(244,30,14)" fg:x="11514" fg:w="4"/><text x="90.7760%" y="831.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="90.5574%" y="853" width="0.0157%" height="15" fill="rgb(249,174,6)" fg:x="11518" fg:w="2"/><text x="90.8074%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="90.5574%" y="837" width="0.0157%" height="15" fill="rgb(235,213,41)" fg:x="11518" fg:w="2"/><text x="90.8074%" y="847.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="90.5574%" y="821" width="0.0157%" height="15" fill="rgb(213,118,6)" fg:x="11518" fg:w="2"/><text x="90.8074%" y="831.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_family (14 samples, 0.11%)</title><rect x="90.4709%" y="917" width="0.1101%" height="15" fill="rgb(235,44,51)" fg:x="11507" fg:w="14"/><text x="90.7209%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (12 samples, 0.09%)</title><rect x="90.4867%" y="901" width="0.0943%" height="15" fill="rgb(217,9,53)" fg:x="11509" fg:w="12"/><text x="90.7367%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.02%)</title><rect x="90.5574%" y="885" width="0.0236%" height="15" fill="rgb(237,172,34)" fg:x="11518" fg:w="3"/><text x="90.8074%" y="895.50"></text></g><g><title>core::fmt::write (3 samples, 0.02%)</title><rect x="90.5574%" y="869" width="0.0236%" height="15" fill="rgb(206,206,11)" fg:x="11518" fg:w="3"/><text x="90.8074%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.02%)</title><rect x="90.6046%" y="821" width="0.0157%" height="15" fill="rgb(214,149,29)" fg:x="11524" fg:w="2"/><text x="90.8546%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.02%)</title><rect x="90.6046%" y="805" width="0.0157%" height="15" fill="rgb(208,123,3)" fg:x="11524" fg:w="2"/><text x="90.8546%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="90.6282%" y="789" width="0.0236%" height="15" fill="rgb(229,126,4)" fg:x="11527" fg:w="3"/><text x="90.8782%" y="799.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.07%)</title><rect x="90.5889%" y="837" width="0.0708%" height="15" fill="rgb(222,92,36)" fg:x="11522" fg:w="9"/><text x="90.8389%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="90.6203%" y="821" width="0.0393%" height="15" fill="rgb(216,39,41)" fg:x="11526" fg:w="5"/><text x="90.8703%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (5 samples, 0.04%)</title><rect x="90.6203%" y="805" width="0.0393%" height="15" fill="rgb(253,127,28)" fg:x="11526" fg:w="5"/><text x="90.8703%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="90.6596%" y="837" width="0.0157%" height="15" fill="rgb(249,152,51)" fg:x="11531" fg:w="2"/><text x="90.9096%" y="847.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (14 samples, 0.11%)</title><rect x="90.5810%" y="869" width="0.1101%" height="15" fill="rgb(209,123,42)" fg:x="11521" fg:w="14"/><text x="90.8310%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (14 samples, 0.11%)</title><rect x="90.5810%" y="853" width="0.1101%" height="15" fill="rgb(241,118,22)" fg:x="11521" fg:w="14"/><text x="90.8310%" y="863.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (2 samples, 0.02%)</title><rect x="90.6754%" y="837" width="0.0157%" height="15" fill="rgb(208,25,7)" fg:x="11533" fg:w="2"/><text x="90.9254%" y="847.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="90.6990%" y="837" width="0.0157%" height="15" fill="rgb(243,144,39)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="847.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="90.6990%" y="821" width="0.0157%" height="15" fill="rgb(250,50,5)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="90.6990%" y="805" width="0.0157%" height="15" fill="rgb(207,67,11)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="815.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="90.6990%" y="789" width="0.0157%" height="15" fill="rgb(245,204,40)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="90.6990%" y="773" width="0.0157%" height="15" fill="rgb(238,228,24)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="783.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="90.6990%" y="757" width="0.0157%" height="15" fill="rgb(217,116,22)" fg:x="11536" fg:w="2"/><text x="90.9490%" y="767.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="90.7147%" y="805" width="0.0314%" height="15" fill="rgb(234,98,12)" fg:x="11538" fg:w="4"/><text x="90.9647%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.02%)</title><rect x="90.7225%" y="789" width="0.0236%" height="15" fill="rgb(242,170,50)" fg:x="11539" fg:w="3"/><text x="90.9725%" y="799.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (22 samples, 0.17%)</title><rect x="90.5810%" y="885" width="0.1730%" height="15" fill="rgb(235,7,5)" fg:x="11521" fg:w="22"/><text x="90.8310%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.06%)</title><rect x="90.6911%" y="869" width="0.0629%" height="15" fill="rgb(241,114,28)" fg:x="11535" fg:w="8"/><text x="90.9411%" y="879.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="90.6911%" y="853" width="0.0629%" height="15" fill="rgb(246,112,42)" fg:x="11535" fg:w="8"/><text x="90.9411%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.04%)</title><rect x="90.7147%" y="837" width="0.0393%" height="15" fill="rgb(248,228,14)" fg:x="11538" fg:w="5"/><text x="90.9647%" y="847.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.04%)</title><rect x="90.7147%" y="821" width="0.0393%" height="15" fill="rgb(208,133,18)" fg:x="11538" fg:w="5"/><text x="90.9647%" y="831.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="90.7619%" y="805" width="0.0157%" height="15" fill="rgb(207,35,49)" fg:x="11544" fg:w="2"/><text x="91.0119%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="90.7619%" y="789" width="0.0157%" height="15" fill="rgb(205,68,36)" fg:x="11544" fg:w="2"/><text x="91.0119%" y="799.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.03%)</title><rect x="90.7619%" y="853" width="0.0314%" height="15" fill="rgb(245,62,40)" fg:x="11544" fg:w="4"/><text x="91.0119%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="90.7619%" y="837" width="0.0314%" height="15" fill="rgb(228,27,24)" fg:x="11544" fg:w="4"/><text x="91.0119%" y="847.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.03%)</title><rect x="90.7619%" y="821" width="0.0314%" height="15" fill="rgb(253,19,12)" fg:x="11544" fg:w="4"/><text x="91.0119%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="90.7776%" y="805" width="0.0157%" height="15" fill="rgb(232,28,20)" fg:x="11546" fg:w="2"/><text x="91.0276%" y="815.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_name (28 samples, 0.22%)</title><rect x="90.5810%" y="917" width="0.2201%" height="15" fill="rgb(218,35,51)" fg:x="11521" fg:w="28"/><text x="90.8310%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (28 samples, 0.22%)</title><rect x="90.5810%" y="901" width="0.2201%" height="15" fill="rgb(212,90,40)" fg:x="11521" fg:w="28"/><text x="90.8310%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (5 samples, 0.04%)</title><rect x="90.7619%" y="885" width="0.0393%" height="15" fill="rgb(220,172,12)" fg:x="11544" fg:w="5"/><text x="91.0119%" y="895.50"></text></g><g><title>core::fmt::write (5 samples, 0.04%)</title><rect x="90.7619%" y="869" width="0.0393%" height="15" fill="rgb(226,159,20)" fg:x="11544" fg:w="5"/><text x="91.0119%" y="879.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="90.8248%" y="805" width="0.0157%" height="15" fill="rgb(234,205,16)" fg:x="11552" fg:w="2"/><text x="91.0748%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="90.8090%" y="853" width="0.0393%" height="15" fill="rgb(207,9,39)" fg:x="11550" fg:w="5"/><text x="91.0590%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="90.8248%" y="837" width="0.0236%" height="15" fill="rgb(249,143,15)" fg:x="11552" fg:w="3"/><text x="91.0748%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="90.8248%" y="821" width="0.0236%" height="15" fill="rgb(253,133,29)" fg:x="11552" fg:w="3"/><text x="91.0748%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.06%)</title><rect x="90.8012%" y="901" width="0.0629%" height="15" fill="rgb(221,187,0)" fg:x="11549" fg:w="8"/><text x="91.0512%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.06%)</title><rect x="90.8012%" y="885" width="0.0629%" height="15" fill="rgb(205,204,26)" fg:x="11549" fg:w="8"/><text x="91.0512%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.06%)</title><rect x="90.8012%" y="869" width="0.0629%" height="15" fill="rgb(224,68,54)" fg:x="11549" fg:w="8"/><text x="91.0512%" y="879.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.02%)</title><rect x="90.8955%" y="821" width="0.0157%" height="15" fill="rgb(209,67,4)" fg:x="11561" fg:w="2"/><text x="91.1455%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="90.9112%" y="805" width="0.0157%" height="15" fill="rgb(228,229,18)" fg:x="11563" fg:w="2"/><text x="91.1612%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="90.9348%" y="789" width="0.0314%" height="15" fill="rgb(231,89,13)" fg:x="11566" fg:w="4"/><text x="91.1848%" y="799.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (11 samples, 0.09%)</title><rect x="90.8876%" y="869" width="0.0865%" height="15" fill="rgb(210,182,18)" fg:x="11560" fg:w="11"/><text x="91.1376%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (11 samples, 0.09%)</title><rect x="90.8876%" y="853" width="0.0865%" height="15" fill="rgb(240,105,2)" fg:x="11560" fg:w="11"/><text x="91.1376%" y="863.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="90.8876%" y="837" width="0.0865%" height="15" fill="rgb(207,170,50)" fg:x="11560" fg:w="11"/><text x="91.1376%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="90.9112%" y="821" width="0.0629%" height="15" fill="rgb(232,133,24)" fg:x="11563" fg:w="8"/><text x="91.1612%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.05%)</title><rect x="90.9270%" y="805" width="0.0472%" height="15" fill="rgb(235,166,27)" fg:x="11565" fg:w="6"/><text x="91.1770%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="90.9741%" y="789" width="0.0157%" height="15" fill="rgb(209,19,13)" fg:x="11571" fg:w="2"/><text x="91.2241%" y="799.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="90.9741%" y="773" width="0.0157%" height="15" fill="rgb(226,79,39)" fg:x="11571" fg:w="2"/><text x="91.2241%" y="783.50"></text></g><g><title>std::io::cursor::reserve_and_pad (2 samples, 0.02%)</title><rect x="90.9741%" y="757" width="0.0157%" height="15" fill="rgb(222,163,10)" fg:x="11571" fg:w="2"/><text x="91.2241%" y="767.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.02%)</title><rect x="90.9741%" y="837" width="0.0236%" height="15" fill="rgb(214,44,19)" fg:x="11571" fg:w="3"/><text x="91.2241%" y="847.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="90.9741%" y="821" width="0.0236%" height="15" fill="rgb(210,217,13)" fg:x="11571" fg:w="3"/><text x="91.2241%" y="831.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="90.9741%" y="805" width="0.0236%" height="15" fill="rgb(237,61,54)" fg:x="11571" fg:w="3"/><text x="91.2241%" y="815.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (21 samples, 0.17%)</title><rect x="90.8719%" y="885" width="0.1651%" height="15" fill="rgb(226,184,24)" fg:x="11558" fg:w="21"/><text x="91.1219%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.06%)</title><rect x="90.9741%" y="869" width="0.0629%" height="15" fill="rgb(223,226,4)" fg:x="11571" fg:w="8"/><text x="91.2241%" y="879.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="90.9741%" y="853" width="0.0629%" height="15" fill="rgb(210,26,41)" fg:x="11571" fg:w="8"/><text x="91.2241%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="91.0056%" y="837" width="0.0314%" height="15" fill="rgb(220,221,6)" fg:x="11575" fg:w="4"/><text x="91.2556%" y="847.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="91.0134%" y="821" width="0.0236%" height="15" fill="rgb(225,89,49)" fg:x="11576" fg:w="3"/><text x="91.2634%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="91.0134%" y="805" width="0.0236%" height="15" fill="rgb(218,70,45)" fg:x="11576" fg:w="3"/><text x="91.2634%" y="815.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="91.0134%" y="789" width="0.0236%" height="15" fill="rgb(238,166,21)" fg:x="11576" fg:w="3"/><text x="91.2634%" y="799.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="91.0134%" y="773" width="0.0236%" height="15" fill="rgb(224,141,44)" fg:x="11576" fg:w="3"/><text x="91.2634%" y="783.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="91.0449%" y="869" width="0.0157%" height="15" fill="rgb(230,12,49)" fg:x="11580" fg:w="2"/><text x="91.2949%" y="879.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.03%)</title><rect x="91.0449%" y="885" width="0.0314%" height="15" fill="rgb(212,174,12)" fg:x="11580" fg:w="4"/><text x="91.2949%" y="895.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="91.0763%" y="853" width="0.0157%" height="15" fill="rgb(246,67,9)" fg:x="11584" fg:w="2"/><text x="91.3263%" y="863.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_scheme (41 samples, 0.32%)</title><rect x="90.8012%" y="917" width="0.3224%" height="15" fill="rgb(239,35,23)" fg:x="11549" fg:w="41"/><text x="91.0512%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (32 samples, 0.25%)</title><rect x="90.8719%" y="901" width="0.2516%" height="15" fill="rgb(211,167,0)" fg:x="11558" fg:w="32"/><text x="91.1219%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (6 samples, 0.05%)</title><rect x="91.0763%" y="885" width="0.0472%" height="15" fill="rgb(225,119,45)" fg:x="11584" fg:w="6"/><text x="91.3263%" y="895.50"></text></g><g><title>core::fmt::write (6 samples, 0.05%)</title><rect x="91.0763%" y="869" width="0.0472%" height="15" fill="rgb(210,162,6)" fg:x="11584" fg:w="6"/><text x="91.3263%" y="879.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="91.0921%" y="853" width="0.0314%" height="15" fill="rgb(208,118,35)" fg:x="11586" fg:w="4"/><text x="91.3421%" y="863.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="91.0999%" y="837" width="0.0236%" height="15" fill="rgb(239,4,53)" fg:x="11587" fg:w="3"/><text x="91.3499%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="91.1628%" y="789" width="0.0157%" height="15" fill="rgb(213,130,21)" fg:x="11595" fg:w="2"/><text x="91.4128%" y="799.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (5 samples, 0.04%)</title><rect x="91.1471%" y="869" width="0.0393%" height="15" fill="rgb(235,148,0)" fg:x="11593" fg:w="5"/><text x="91.3971%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (5 samples, 0.04%)</title><rect x="91.1471%" y="853" width="0.0393%" height="15" fill="rgb(244,224,18)" fg:x="11593" fg:w="5"/><text x="91.3971%" y="863.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="91.1628%" y="837" width="0.0236%" height="15" fill="rgb(211,214,4)" fg:x="11595" fg:w="3"/><text x="91.4128%" y="847.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="91.1628%" y="821" width="0.0236%" height="15" fill="rgb(206,119,25)" fg:x="11595" fg:w="3"/><text x="91.4128%" y="831.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.02%)</title><rect x="91.1628%" y="805" width="0.0236%" height="15" fill="rgb(243,93,47)" fg:x="11595" fg:w="3"/><text x="91.4128%" y="815.50"></text></g><g><title>&lt;(&amp;str,&amp;str) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (16 samples, 0.13%)</title><rect x="91.1235%" y="885" width="0.1258%" height="15" fill="rgb(224,194,6)" fg:x="11590" fg:w="16"/><text x="91.3735%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.06%)</title><rect x="91.1864%" y="869" width="0.0629%" height="15" fill="rgb(243,229,6)" fg:x="11598" fg:w="8"/><text x="91.4364%" y="879.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="91.1864%" y="853" width="0.0629%" height="15" fill="rgb(207,23,50)" fg:x="11598" fg:w="8"/><text x="91.4364%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.06%)</title><rect x="91.1943%" y="837" width="0.0550%" height="15" fill="rgb(253,192,32)" fg:x="11599" fg:w="7"/><text x="91.4443%" y="847.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.06%)</title><rect x="91.1943%" y="821" width="0.0550%" height="15" fill="rgb(213,21,6)" fg:x="11599" fg:w="7"/><text x="91.4443%" y="831.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.04%)</title><rect x="91.2100%" y="805" width="0.0393%" height="15" fill="rgb(243,151,13)" fg:x="11601" fg:w="5"/><text x="91.4600%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (5 samples, 0.04%)</title><rect x="91.2100%" y="789" width="0.0393%" height="15" fill="rgb(233,165,41)" fg:x="11601" fg:w="5"/><text x="91.4600%" y="799.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (3 samples, 0.02%)</title><rect x="91.2257%" y="773" width="0.0236%" height="15" fill="rgb(246,176,45)" fg:x="11603" fg:w="3"/><text x="91.4757%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (2 samples, 0.02%)</title><rect x="91.2336%" y="757" width="0.0157%" height="15" fill="rgb(217,170,52)" fg:x="11604" fg:w="2"/><text x="91.4836%" y="767.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.02%)</title><rect x="91.2336%" y="741" width="0.0157%" height="15" fill="rgb(214,203,54)" fg:x="11604" fg:w="2"/><text x="91.4836%" y="751.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font_size (19 samples, 0.15%)</title><rect x="91.1235%" y="917" width="0.1494%" height="15" fill="rgb(248,215,49)" fg:x="11590" fg:w="19"/><text x="91.3735%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_empty_tag (19 samples, 0.15%)</title><rect x="91.1235%" y="901" width="0.1494%" height="15" fill="rgb(208,46,10)" fg:x="11590" fg:w="19"/><text x="91.3735%" y="911.50"></text></g><g><title>std::io::Write::write_fmt (2 samples, 0.02%)</title><rect x="91.2572%" y="885" width="0.0157%" height="15" fill="rgb(254,5,31)" fg:x="11607" fg:w="2"/><text x="91.5072%" y="895.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="91.2572%" y="869" width="0.0157%" height="15" fill="rgb(222,104,33)" fg:x="11607" fg:w="2"/><text x="91.5072%" y="879.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="91.2572%" y="853" width="0.0157%" height="15" fill="rgb(248,49,16)" fg:x="11607" fg:w="2"/><text x="91.5072%" y="863.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (4 samples, 0.03%)</title><rect x="91.2729%" y="917" width="0.0314%" height="15" fill="rgb(232,198,41)" fg:x="11609" fg:w="4"/><text x="91.5229%" y="927.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.03%)</title><rect x="91.2729%" y="901" width="0.0314%" height="15" fill="rgb(214,125,3)" fg:x="11609" fg:w="4"/><text x="91.5229%" y="911.50"></text></g><g><title>core::fmt::write (4 samples, 0.03%)</title><rect x="91.2729%" y="885" width="0.0314%" height="15" fill="rgb(229,220,28)" fg:x="11609" fg:w="4"/><text x="91.5229%" y="895.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="91.2808%" y="869" width="0.0236%" height="15" fill="rgb(222,64,37)" fg:x="11610" fg:w="3"/><text x="91.5308%" y="879.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="91.2808%" y="853" width="0.0236%" height="15" fill="rgb(249,184,13)" fg:x="11610" fg:w="3"/><text x="91.5308%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="91.2886%" y="837" width="0.0157%" height="15" fill="rgb(252,176,6)" fg:x="11611" fg:w="2"/><text x="91.5386%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="91.2886%" y="821" width="0.0157%" height="15" fill="rgb(228,153,7)" fg:x="11611" fg:w="2"/><text x="91.5386%" y="831.50"></text></g><g><title>rust_xlsxwriter::styles::Styles::write_font (144 samples, 1.13%)</title><rect x="90.1879%" y="933" width="1.1322%" height="15" fill="rgb(242,193,5)" fg:x="11471" fg:w="144"/><text x="90.4379%" y="943.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (2 samples, 0.02%)</title><rect x="91.3043%" y="917" width="0.0157%" height="15" fill="rgb(232,140,9)" fg:x="11613" fg:w="2"/><text x="91.5543%" y="927.50"></text></g><g><title>std::io::Write::write_fmt (2 samples, 0.02%)</title><rect x="91.3043%" y="901" width="0.0157%" height="15" fill="rgb(213,222,16)" fg:x="11613" fg:w="2"/><text x="91.5543%" y="911.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="91.3043%" y="885" width="0.0157%" height="15" fill="rgb(222,75,50)" fg:x="11613" fg:w="2"/><text x="91.5543%" y="895.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="91.3515%" y="693" width="0.0236%" height="15" fill="rgb(205,180,2)" fg:x="11619" fg:w="3"/><text x="91.6015%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="91.3437%" y="741" width="0.0393%" height="15" fill="rgb(216,34,7)" fg:x="11618" fg:w="5"/><text x="91.5937%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="91.3437%" y="725" width="0.0393%" height="15" fill="rgb(253,16,32)" fg:x="11618" fg:w="5"/><text x="91.5937%" y="735.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="91.3515%" y="709" width="0.0314%" height="15" fill="rgb(208,97,28)" fg:x="11619" fg:w="4"/><text x="91.6015%" y="719.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::read_to_string (9 samples, 0.07%)</title><rect x="91.3201%" y="933" width="0.0708%" height="15" fill="rgb(225,92,11)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="943.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (9 samples, 0.07%)</title><rect x="91.3201%" y="917" width="0.0708%" height="15" fill="rgb(243,38,12)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (9 samples, 0.07%)</title><rect x="91.3201%" y="901" width="0.0708%" height="15" fill="rgb(208,139,16)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.07%)</title><rect x="91.3201%" y="885" width="0.0708%" height="15" fill="rgb(227,24,9)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.07%)</title><rect x="91.3201%" y="869" width="0.0708%" height="15" fill="rgb(206,62,11)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.07%)</title><rect x="91.3201%" y="853" width="0.0708%" height="15" fill="rgb(228,134,27)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.07%)</title><rect x="91.3201%" y="837" width="0.0708%" height="15" fill="rgb(205,55,33)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.07%)</title><rect x="91.3201%" y="821" width="0.0708%" height="15" fill="rgb(243,75,43)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.07%)</title><rect x="91.3201%" y="805" width="0.0708%" height="15" fill="rgb(223,27,42)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.07%)</title><rect x="91.3201%" y="789" width="0.0708%" height="15" fill="rgb(232,189,33)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.07%)</title><rect x="91.3201%" y="773" width="0.0708%" height="15" fill="rgb(210,9,39)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.07%)</title><rect x="91.3201%" y="757" width="0.0708%" height="15" fill="rgb(242,85,26)" fg:x="11615" fg:w="9"/><text x="91.5701%" y="767.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4 samples, 0.03%)</title><rect x="91.3908%" y="917" width="0.0314%" height="15" fill="rgb(248,44,4)" fg:x="11624" fg:w="4"/><text x="91.6408%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.02%)</title><rect x="91.4459%" y="869" width="0.0157%" height="15" fill="rgb(250,96,46)" fg:x="11631" fg:w="2"/><text x="91.6959%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="91.4616%" y="853" width="0.0157%" height="15" fill="rgb(229,116,26)" fg:x="11633" fg:w="2"/><text x="91.7116%" y="863.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.13%)</title><rect x="91.4301%" y="885" width="0.1337%" height="15" fill="rgb(246,94,34)" fg:x="11629" fg:w="17"/><text x="91.6801%" y="895.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="91.4616%" y="869" width="0.1022%" height="15" fill="rgb(251,73,21)" fg:x="11633" fg:w="13"/><text x="91.7116%" y="879.50"></text></g><g><title>core::str::validations::next_code_point (11 samples, 0.09%)</title><rect x="91.4773%" y="853" width="0.0865%" height="15" fill="rgb(254,121,25)" fg:x="11635" fg:w="11"/><text x="91.7273%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="91.5324%" y="837" width="0.0314%" height="15" fill="rgb(215,161,49)" fg:x="11642" fg:w="4"/><text x="91.7824%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.02%)</title><rect x="91.5638%" y="885" width="0.0157%" height="15" fill="rgb(221,43,13)" fg:x="11646" fg:w="2"/><text x="91.8138%" y="895.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::match_xml_char (2 samples, 0.02%)</title><rect x="91.5638%" y="869" width="0.0157%" height="15" fill="rgb(249,5,37)" fg:x="11646" fg:w="2"/><text x="91.8138%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_data (21 samples, 0.17%)</title><rect x="91.4223%" y="917" width="0.1651%" height="15" fill="rgb(226,25,44)" fg:x="11628" fg:w="21"/><text x="91.6723%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (21 samples, 0.17%)</title><rect x="91.4223%" y="901" width="0.1651%" height="15" fill="rgb(238,189,16)" fg:x="11628" fg:w="21"/><text x="91.6723%" y="911.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="91.5953%" y="837" width="0.0314%" height="15" fill="rgb(251,186,8)" fg:x="11650" fg:w="4"/><text x="91.8453%" y="847.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.03%)</title><rect x="91.5953%" y="821" width="0.0314%" height="15" fill="rgb(254,34,31)" fg:x="11650" fg:w="4"/><text x="91.8453%" y="831.50"></text></g><g><title>std::io::cursor::reserve_and_pad (2 samples, 0.02%)</title><rect x="91.6110%" y="805" width="0.0157%" height="15" fill="rgb(225,215,27)" fg:x="11652" fg:w="2"/><text x="91.8610%" y="815.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (7 samples, 0.06%)</title><rect x="91.5953%" y="885" width="0.0550%" height="15" fill="rgb(221,192,48)" fg:x="11650" fg:w="7"/><text x="91.8453%" y="895.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.06%)</title><rect x="91.5953%" y="869" width="0.0550%" height="15" fill="rgb(219,137,20)" fg:x="11650" fg:w="7"/><text x="91.8453%" y="879.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.06%)</title><rect x="91.5953%" y="853" width="0.0550%" height="15" fill="rgb(219,84,11)" fg:x="11650" fg:w="7"/><text x="91.8453%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="91.6267%" y="837" width="0.0236%" height="15" fill="rgb(224,10,23)" fg:x="11654" fg:w="3"/><text x="91.8767%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="91.6267%" y="821" width="0.0236%" height="15" fill="rgb(248,22,39)" fg:x="11654" fg:w="3"/><text x="91.8767%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="91.6346%" y="805" width="0.0157%" height="15" fill="rgb(212,154,20)" fg:x="11655" fg:w="2"/><text x="91.8846%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="91.6503%" y="821" width="0.0157%" height="15" fill="rgb(236,199,50)" fg:x="11657" fg:w="2"/><text x="91.9003%" y="831.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="91.6503%" y="805" width="0.0157%" height="15" fill="rgb(211,9,17)" fg:x="11657" fg:w="2"/><text x="91.9003%" y="815.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.02%)</title><rect x="91.6503%" y="885" width="0.0236%" height="15" fill="rgb(243,216,36)" fg:x="11657" fg:w="3"/><text x="91.9003%" y="895.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.02%)</title><rect x="91.6503%" y="869" width="0.0236%" height="15" fill="rgb(250,2,10)" fg:x="11657" fg:w="3"/><text x="91.9003%" y="879.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="91.6503%" y="853" width="0.0236%" height="15" fill="rgb(226,50,48)" fg:x="11657" fg:w="3"/><text x="91.9003%" y="863.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="91.6503%" y="837" width="0.0236%" height="15" fill="rgb(243,81,16)" fg:x="11657" fg:w="3"/><text x="91.9003%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="91.7368%" y="821" width="0.0157%" height="15" fill="rgb(250,14,2)" fg:x="11668" fg:w="2"/><text x="91.9868%" y="831.50"></text></g><g><title>std::io::cursor::reserve_and_pad (6 samples, 0.05%)</title><rect x="91.7525%" y="821" width="0.0472%" height="15" fill="rgb(233,135,29)" fg:x="11670" fg:w="6"/><text x="92.0025%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="91.7839%" y="805" width="0.0157%" height="15" fill="rgb(224,64,43)" fg:x="11674" fg:w="2"/><text x="92.0339%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (15 samples, 0.12%)</title><rect x="91.7053%" y="853" width="0.1179%" height="15" fill="rgb(238,84,13)" fg:x="11664" fg:w="15"/><text x="91.9553%" y="863.50"></text></g><g><title>std::io::cursor::vec_write (14 samples, 0.11%)</title><rect x="91.7132%" y="837" width="0.1101%" height="15" fill="rgb(253,48,26)" fg:x="11665" fg:w="14"/><text x="91.9632%" y="847.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (3 samples, 0.02%)</title><rect x="91.7997%" y="821" width="0.0236%" height="15" fill="rgb(205,223,31)" fg:x="11676" fg:w="3"/><text x="92.0497%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_data_element (57 samples, 0.45%)</title><rect x="91.3908%" y="933" width="0.4481%" height="15" fill="rgb(221,41,32)" fg:x="11624" fg:w="57"/><text x="91.6408%" y="943.50"></text></g><g><title>std::io::Write::write_fmt (32 samples, 0.25%)</title><rect x="91.5874%" y="917" width="0.2516%" height="15" fill="rgb(213,158,31)" fg:x="11649" fg:w="32"/><text x="91.8374%" y="927.50"></text></g><g><title>core::fmt::write (31 samples, 0.24%)</title><rect x="91.5953%" y="901" width="0.2437%" height="15" fill="rgb(245,126,43)" fg:x="11650" fg:w="31"/><text x="91.8453%" y="911.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (21 samples, 0.17%)</title><rect x="91.6739%" y="885" width="0.1651%" height="15" fill="rgb(227,7,22)" fg:x="11660" fg:w="21"/><text x="91.9239%" y="895.50"></text></g><g><title>std::io::Write::write_all (18 samples, 0.14%)</title><rect x="91.6975%" y="869" width="0.1415%" height="15" fill="rgb(252,90,44)" fg:x="11663" fg:w="18"/><text x="91.9475%" y="879.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.04%)</title><rect x="91.8468%" y="853" width="0.0393%" height="15" fill="rgb(253,91,0)" fg:x="11682" fg:w="5"/><text x="92.0968%" y="863.50"></text></g><g><title>std::io::cursor::vec_write (5 samples, 0.04%)</title><rect x="91.8468%" y="837" width="0.0393%" height="15" fill="rgb(252,175,49)" fg:x="11682" fg:w="5"/><text x="92.0968%" y="847.50"></text></g><g><title>std::io::cursor::reserve_and_pad (3 samples, 0.02%)</title><rect x="91.8626%" y="821" width="0.0236%" height="15" fill="rgb(246,150,1)" fg:x="11684" fg:w="3"/><text x="92.1126%" y="831.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_end_tag (8 samples, 0.06%)</title><rect x="91.8390%" y="933" width="0.0629%" height="15" fill="rgb(241,192,25)" fg:x="11681" fg:w="8"/><text x="92.0890%" y="943.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.06%)</title><rect x="91.8390%" y="917" width="0.0629%" height="15" fill="rgb(239,187,11)" fg:x="11681" fg:w="8"/><text x="92.0890%" y="927.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="91.8390%" y="901" width="0.0629%" height="15" fill="rgb(218,202,51)" fg:x="11681" fg:w="8"/><text x="92.0890%" y="911.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.06%)</title><rect x="91.8468%" y="885" width="0.0550%" height="15" fill="rgb(225,176,8)" fg:x="11682" fg:w="7"/><text x="92.0968%" y="895.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.06%)</title><rect x="91.8468%" y="869" width="0.0550%" height="15" fill="rgb(219,122,41)" fg:x="11682" fg:w="7"/><text x="92.0968%" y="879.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="91.8862%" y="853" width="0.0157%" height="15" fill="rgb(248,140,20)" fg:x="11687" fg:w="2"/><text x="92.1362%" y="863.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="91.8862%" y="837" width="0.0157%" height="15" fill="rgb(245,41,37)" fg:x="11687" fg:w="2"/><text x="92.1362%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="91.8862%" y="821" width="0.0157%" height="15" fill="rgb(235,82,39)" fg:x="11687" fg:w="2"/><text x="92.1362%" y="831.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="91.8862%" y="805" width="0.0157%" height="15" fill="rgb(230,108,42)" fg:x="11687" fg:w="2"/><text x="92.1362%" y="815.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="91.9019%" y="885" width="0.0157%" height="15" fill="rgb(215,150,50)" fg:x="11689" fg:w="2"/><text x="92.1519%" y="895.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="91.9019%" y="869" width="0.0157%" height="15" fill="rgb(233,212,5)" fg:x="11689" fg:w="2"/><text x="92.1519%" y="879.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="91.9019%" y="853" width="0.0157%" height="15" fill="rgb(245,80,22)" fg:x="11689" fg:w="2"/><text x="92.1519%" y="863.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="91.9019%" y="837" width="0.0157%" height="15" fill="rgb(238,129,16)" fg:x="11689" fg:w="2"/><text x="92.1519%" y="847.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="91.9019%" y="821" width="0.0157%" height="15" fill="rgb(240,19,0)" fg:x="11689" fg:w="2"/><text x="92.1519%" y="831.50"></text></g><g><title>std::io::cursor::reserve_and_pad (4 samples, 0.03%)</title><rect x="91.9648%" y="821" width="0.0314%" height="15" fill="rgb(232,42,35)" fg:x="11697" fg:w="4"/><text x="92.2148%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.03%)</title><rect x="91.9648%" y="805" width="0.0314%" height="15" fill="rgb(223,130,24)" fg:x="11697" fg:w="4"/><text x="92.2148%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (13 samples, 0.10%)</title><rect x="91.9255%" y="853" width="0.1022%" height="15" fill="rgb(237,16,22)" fg:x="11692" fg:w="13"/><text x="92.1755%" y="863.50"></text></g><g><title>std::io::cursor::vec_write (12 samples, 0.09%)</title><rect x="91.9333%" y="837" width="0.0943%" height="15" fill="rgb(248,192,20)" fg:x="11693" fg:w="12"/><text x="92.1833%" y="847.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (4 samples, 0.03%)</title><rect x="91.9962%" y="821" width="0.0314%" height="15" fill="rgb(233,167,2)" fg:x="11701" fg:w="4"/><text x="92.2462%" y="831.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_rich_string (311 samples, 2.45%)</title><rect x="89.6140%" y="949" width="2.4452%" height="15" fill="rgb(252,71,44)" fg:x="11398" fg:w="311"/><text x="89.8640%" y="959.50">ru..</text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag_only (20 samples, 0.16%)</title><rect x="91.9019%" y="933" width="0.1572%" height="15" fill="rgb(238,37,47)" fg:x="11689" fg:w="20"/><text x="92.1519%" y="943.50"></text></g><g><title>std::io::Write::write_fmt (20 samples, 0.16%)</title><rect x="91.9019%" y="917" width="0.1572%" height="15" fill="rgb(214,202,54)" fg:x="11689" fg:w="20"/><text x="92.1519%" y="927.50"></text></g><g><title>core::fmt::write (20 samples, 0.16%)</title><rect x="91.9019%" y="901" width="0.1572%" height="15" fill="rgb(254,165,40)" fg:x="11689" fg:w="20"/><text x="92.1519%" y="911.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (18 samples, 0.14%)</title><rect x="91.9176%" y="885" width="0.1415%" height="15" fill="rgb(246,173,38)" fg:x="11691" fg:w="18"/><text x="92.1676%" y="895.50"></text></g><g><title>std::io::Write::write_all (18 samples, 0.14%)</title><rect x="91.9176%" y="869" width="0.1415%" height="15" fill="rgb(215,3,27)" fg:x="11691" fg:w="18"/><text x="92.1676%" y="879.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="92.0277%" y="853" width="0.0314%" height="15" fill="rgb(239,169,51)" fg:x="11705" fg:w="4"/><text x="92.2777%" y="863.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="92.0277%" y="837" width="0.0314%" height="15" fill="rgb(212,5,25)" fg:x="11705" fg:w="4"/><text x="92.2777%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="92.0434%" y="821" width="0.0157%" height="15" fill="rgb(243,45,17)" fg:x="11707" fg:w="2"/><text x="92.2934%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (8 samples, 0.06%)</title><rect x="92.0591%" y="933" width="0.0629%" height="15" fill="rgb(242,97,9)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (8 samples, 0.06%)</title><rect x="92.0591%" y="917" width="0.0629%" height="15" fill="rgb(228,71,31)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (8 samples, 0.06%)</title><rect x="92.0591%" y="901" width="0.0629%" height="15" fill="rgb(252,184,16)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (8 samples, 0.06%)</title><rect x="92.0591%" y="885" width="0.0629%" height="15" fill="rgb(236,169,46)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (8 samples, 0.06%)</title><rect x="92.0591%" y="869" width="0.0629%" height="15" fill="rgb(207,17,47)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (8 samples, 0.06%)</title><rect x="92.0591%" y="853" width="0.0629%" height="15" fill="rgb(206,201,28)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::{{closure}} (8 samples, 0.06%)</title><rect x="92.0591%" y="837" width="0.0629%" height="15" fill="rgb(224,184,23)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.06%)</title><rect x="92.0591%" y="821" width="0.0629%" height="15" fill="rgb(208,139,48)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.06%)</title><rect x="92.0591%" y="805" width="0.0629%" height="15" fill="rgb(208,130,10)" fg:x="11709" fg:w="8"/><text x="92.3091%" y="815.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="92.0748%" y="789" width="0.0472%" height="15" fill="rgb(211,213,45)" fg:x="11711" fg:w="6"/><text x="92.3248%" y="799.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="92.0827%" y="773" width="0.0393%" height="15" fill="rgb(235,100,30)" fg:x="11712" fg:w="5"/><text x="92.3327%" y="783.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="92.0827%" y="757" width="0.0393%" height="15" fill="rgb(206,144,31)" fg:x="11712" fg:w="5"/><text x="92.3327%" y="767.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="92.1299%" y="885" width="0.0157%" height="15" fill="rgb(224,200,26)" fg:x="11718" fg:w="2"/><text x="92.3799%" y="895.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="92.1299%" y="869" width="0.0157%" height="15" fill="rgb(247,104,53)" fg:x="11718" fg:w="2"/><text x="92.3799%" y="879.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (3 samples, 0.02%)</title><rect x="92.1456%" y="885" width="0.0236%" height="15" fill="rgb(220,14,17)" fg:x="11720" fg:w="3"/><text x="92.3956%" y="895.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.02%)</title><rect x="92.1535%" y="869" width="0.0157%" height="15" fill="rgb(230,140,40)" fg:x="11721" fg:w="2"/><text x="92.4035%" y="879.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.02%)</title><rect x="92.2714%" y="853" width="0.0157%" height="15" fill="rgb(229,2,41)" fg:x="11736" fg:w="2"/><text x="92.5214%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.02%)</title><rect x="92.4129%" y="821" width="0.0157%" height="15" fill="rgb(232,89,16)" fg:x="11754" fg:w="2"/><text x="92.6629%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.16%)</title><rect x="92.2871%" y="853" width="0.1572%" height="15" fill="rgb(247,59,52)" fg:x="11738" fg:w="20"/><text x="92.5371%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="92.3815%" y="837" width="0.0629%" height="15" fill="rgb(226,110,21)" fg:x="11750" fg:w="8"/><text x="92.6315%" y="847.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.02%)</title><rect x="92.4287%" y="821" width="0.0157%" height="15" fill="rgb(224,176,43)" fg:x="11756" fg:w="2"/><text x="92.6787%" y="831.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.02%)</title><rect x="92.4444%" y="853" width="0.0236%" height="15" fill="rgb(221,73,6)" fg:x="11758" fg:w="3"/><text x="92.6944%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (46 samples, 0.36%)</title><rect x="92.1220%" y="917" width="0.3617%" height="15" fill="rgb(232,78,19)" fg:x="11717" fg:w="46"/><text x="92.3720%" y="927.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (46 samples, 0.36%)</title><rect x="92.1220%" y="901" width="0.3617%" height="15" fill="rgb(233,112,48)" fg:x="11717" fg:w="46"/><text x="92.3720%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (40 samples, 0.31%)</title><rect x="92.1692%" y="885" width="0.3145%" height="15" fill="rgb(243,131,47)" fg:x="11723" fg:w="40"/><text x="92.4192%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (36 samples, 0.28%)</title><rect x="92.2006%" y="869" width="0.2830%" height="15" fill="rgb(226,51,1)" fg:x="11727" fg:w="36"/><text x="92.4506%" y="879.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (2 samples, 0.02%)</title><rect x="92.4680%" y="853" width="0.0157%" height="15" fill="rgb(247,58,7)" fg:x="11761" fg:w="2"/><text x="92.7180%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="92.5387%" y="869" width="0.0157%" height="15" fill="rgb(209,7,32)" fg:x="11770" fg:w="2"/><text x="92.7887%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.09%)</title><rect x="92.5859%" y="837" width="0.0943%" height="15" fill="rgb(209,39,41)" fg:x="11776" fg:w="12"/><text x="92.8359%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="92.5938%" y="821" width="0.0865%" height="15" fill="rgb(226,182,46)" fg:x="11777" fg:w="11"/><text x="92.8438%" y="831.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (6 samples, 0.05%)</title><rect x="92.6331%" y="805" width="0.0472%" height="15" fill="rgb(230,219,10)" fg:x="11782" fg:w="6"/><text x="92.8831%" y="815.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.02%)</title><rect x="92.6802%" y="837" width="0.0236%" height="15" fill="rgb(227,175,30)" fg:x="11788" fg:w="3"/><text x="92.9302%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="92.6881%" y="821" width="0.0157%" height="15" fill="rgb(217,2,50)" fg:x="11789" fg:w="2"/><text x="92.9381%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="92.6881%" y="805" width="0.0157%" height="15" fill="rgb(229,160,0)" fg:x="11789" fg:w="2"/><text x="92.9381%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="92.6881%" y="789" width="0.0157%" height="15" fill="rgb(207,78,37)" fg:x="11789" fg:w="2"/><text x="92.9381%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="92.6881%" y="773" width="0.0157%" height="15" fill="rgb(225,57,0)" fg:x="11789" fg:w="2"/><text x="92.9381%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (2 samples, 0.02%)</title><rect x="92.7038%" y="837" width="0.0157%" height="15" fill="rgb(232,154,2)" fg:x="11791" fg:w="2"/><text x="92.9538%" y="847.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (31 samples, 0.24%)</title><rect x="92.4837%" y="901" width="0.2437%" height="15" fill="rgb(241,212,25)" fg:x="11763" fg:w="31"/><text x="92.7337%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (24 samples, 0.19%)</title><rect x="92.5387%" y="885" width="0.1887%" height="15" fill="rgb(226,69,20)" fg:x="11770" fg:w="24"/><text x="92.7887%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (21 samples, 0.17%)</title><rect x="92.5623%" y="869" width="0.1651%" height="15" fill="rgb(247,184,54)" fg:x="11773" fg:w="21"/><text x="92.8123%" y="879.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (21 samples, 0.17%)</title><rect x="92.5623%" y="853" width="0.1651%" height="15" fill="rgb(210,145,0)" fg:x="11773" fg:w="21"/><text x="92.8123%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.02%)</title><rect x="92.7825%" y="869" width="0.0157%" height="15" fill="rgb(253,82,12)" fg:x="11801" fg:w="2"/><text x="93.0325%" y="879.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.02%)</title><rect x="92.7825%" y="853" width="0.0157%" height="15" fill="rgb(245,42,11)" fg:x="11801" fg:w="2"/><text x="93.0325%" y="863.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (2 samples, 0.02%)</title><rect x="92.7825%" y="837" width="0.0157%" height="15" fill="rgb(219,147,32)" fg:x="11801" fg:w="2"/><text x="93.0325%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (2 samples, 0.02%)</title><rect x="92.7825%" y="821" width="0.0157%" height="15" fill="rgb(246,12,7)" fg:x="11801" fg:w="2"/><text x="93.0325%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (5 samples, 0.04%)</title><rect x="92.8296%" y="853" width="0.0393%" height="15" fill="rgb(243,50,9)" fg:x="11807" fg:w="5"/><text x="93.0796%" y="863.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_rich_string (417 samples, 3.28%)</title><rect x="89.6140%" y="965" width="3.2786%" height="15" fill="rgb(219,149,6)" fg:x="11398" fg:w="417"/><text x="89.8640%" y="975.50">rus..</text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_rich_string (106 samples, 0.83%)</title><rect x="92.0591%" y="949" width="0.8334%" height="15" fill="rgb(241,51,42)" fg:x="11709" fg:w="106"/><text x="92.3091%" y="959.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (98 samples, 0.77%)</title><rect x="92.1220%" y="933" width="0.7705%" height="15" fill="rgb(226,128,27)" fg:x="11717" fg:w="98"/><text x="92.3720%" y="943.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (52 samples, 0.41%)</title><rect x="92.4837%" y="917" width="0.4088%" height="15" fill="rgb(244,144,4)" fg:x="11763" fg:w="52"/><text x="92.7337%" y="927.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (21 samples, 0.17%)</title><rect x="92.7274%" y="901" width="0.1651%" height="15" fill="rgb(221,4,13)" fg:x="11794" fg:w="21"/><text x="92.9774%" y="911.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 0.13%)</title><rect x="92.7589%" y="885" width="0.1337%" height="15" fill="rgb(208,170,28)" fg:x="11798" fg:w="17"/><text x="93.0089%" y="895.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (12 samples, 0.09%)</title><rect x="92.7982%" y="869" width="0.0943%" height="15" fill="rgb(226,131,13)" fg:x="11803" fg:w="12"/><text x="93.0482%" y="879.50"></text></g><g><title>alloc::collections::btree::node::splitpoint (2 samples, 0.02%)</title><rect x="92.8768%" y="853" width="0.0157%" height="15" fill="rgb(215,72,41)" fg:x="11813" fg:w="2"/><text x="93.1268%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from (2 samples, 0.02%)</title><rect x="92.8925%" y="933" width="0.0157%" height="15" fill="rgb(243,108,20)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.02%)</title><rect x="92.8925%" y="917" width="0.0157%" height="15" fill="rgb(230,189,17)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (2 samples, 0.02%)</title><rect x="92.8925%" y="901" width="0.0157%" height="15" fill="rgb(220,50,17)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (2 samples, 0.02%)</title><rect x="92.8925%" y="885" width="0.0157%" height="15" fill="rgb(248,152,48)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (2 samples, 0.02%)</title><rect x="92.8925%" y="869" width="0.0157%" height="15" fill="rgb(244,91,11)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (2 samples, 0.02%)</title><rect x="92.8925%" y="853" width="0.0157%" height="15" fill="rgb(220,157,5)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (2 samples, 0.02%)</title><rect x="92.8925%" y="837" width="0.0157%" height="15" fill="rgb(253,137,8)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::{{closure}} (2 samples, 0.02%)</title><rect x="92.8925%" y="821" width="0.0157%" height="15" fill="rgb(217,137,51)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="92.8925%" y="805" width="0.0157%" height="15" fill="rgb(218,209,53)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="92.8925%" y="789" width="0.0157%" height="15" fill="rgb(249,137,25)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="799.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="92.8925%" y="773" width="0.0157%" height="15" fill="rgb(239,155,26)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="783.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="92.8925%" y="757" width="0.0157%" height="15" fill="rgb(227,85,46)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="767.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="92.8925%" y="741" width="0.0157%" height="15" fill="rgb(251,107,43)" fg:x="11815" fg:w="2"/><text x="93.1425%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="92.9082%" y="869" width="0.0236%" height="15" fill="rgb(234,170,33)" fg:x="11817" fg:w="3"/><text x="93.1582%" y="879.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (5 samples, 0.04%)</title><rect x="92.9082%" y="885" width="0.0393%" height="15" fill="rgb(206,29,35)" fg:x="11817" fg:w="5"/><text x="93.1582%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (6 samples, 0.05%)</title><rect x="92.9082%" y="917" width="0.0472%" height="15" fill="rgb(227,138,25)" fg:x="11817" fg:w="6"/><text x="93.1582%" y="927.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (6 samples, 0.05%)</title><rect x="92.9082%" y="901" width="0.0472%" height="15" fill="rgb(249,131,35)" fg:x="11817" fg:w="6"/><text x="93.1582%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="92.9869%" y="853" width="0.0865%" height="15" fill="rgb(239,6,40)" fg:x="11827" fg:w="11"/><text x="93.2369%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.06%)</title><rect x="93.0183%" y="837" width="0.0550%" height="15" fill="rgb(246,136,47)" fg:x="11831" fg:w="7"/><text x="93.2683%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (2 samples, 0.02%)</title><rect x="93.0734%" y="853" width="0.0157%" height="15" fill="rgb(253,58,26)" fg:x="11838" fg:w="2"/><text x="93.3234%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (19 samples, 0.15%)</title><rect x="92.9554%" y="917" width="0.1494%" height="15" fill="rgb(237,141,10)" fg:x="11823" fg:w="19"/><text x="93.2054%" y="927.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (19 samples, 0.15%)</title><rect x="92.9554%" y="901" width="0.1494%" height="15" fill="rgb(234,156,12)" fg:x="11823" fg:w="19"/><text x="93.2054%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (19 samples, 0.15%)</title><rect x="92.9554%" y="885" width="0.1494%" height="15" fill="rgb(243,224,36)" fg:x="11823" fg:w="19"/><text x="93.2054%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (19 samples, 0.15%)</title><rect x="92.9554%" y="869" width="0.1494%" height="15" fill="rgb(205,229,51)" fg:x="11823" fg:w="19"/><text x="93.2054%" y="879.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (2 samples, 0.02%)</title><rect x="93.0891%" y="853" width="0.0157%" height="15" fill="rgb(223,189,4)" fg:x="11840" fg:w="2"/><text x="93.3391%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3 samples, 0.02%)</title><rect x="93.1048%" y="901" width="0.0236%" height="15" fill="rgb(249,167,54)" fg:x="11842" fg:w="3"/><text x="93.3548%" y="911.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.02%)</title><rect x="93.1048%" y="885" width="0.0236%" height="15" fill="rgb(218,34,28)" fg:x="11842" fg:w="3"/><text x="93.3548%" y="895.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.02%)</title><rect x="93.1048%" y="869" width="0.0236%" height="15" fill="rgb(232,109,42)" fg:x="11842" fg:w="3"/><text x="93.3548%" y="879.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.02%)</title><rect x="93.1048%" y="853" width="0.0236%" height="15" fill="rgb(248,214,46)" fg:x="11842" fg:w="3"/><text x="93.3548%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="93.1127%" y="837" width="0.0157%" height="15" fill="rgb(244,216,40)" fg:x="11843" fg:w="2"/><text x="93.3627%" y="847.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.07%)</title><rect x="93.1048%" y="917" width="0.0708%" height="15" fill="rgb(231,226,31)" fg:x="11842" fg:w="9"/><text x="93.3548%" y="927.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (6 samples, 0.05%)</title><rect x="93.1284%" y="901" width="0.0472%" height="15" fill="rgb(238,38,43)" fg:x="11845" fg:w="6"/><text x="93.3784%" y="911.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.05%)</title><rect x="93.1284%" y="885" width="0.0472%" height="15" fill="rgb(208,88,43)" fg:x="11845" fg:w="6"/><text x="93.3784%" y="895.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.02%)</title><rect x="93.1520%" y="869" width="0.0236%" height="15" fill="rgb(205,136,37)" fg:x="11848" fg:w="3"/><text x="93.4020%" y="879.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (2 samples, 0.02%)</title><rect x="93.1598%" y="853" width="0.0157%" height="15" fill="rgb(237,34,14)" fg:x="11849" fg:w="2"/><text x="93.4098%" y="863.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (2 samples, 0.02%)</title><rect x="93.1598%" y="837" width="0.0157%" height="15" fill="rgb(236,193,44)" fg:x="11849" fg:w="2"/><text x="93.4098%" y="847.50"></text></g><g><title>excel_merge::routes::search::search_files::{{closure}} (499 samples, 3.92%)</title><rect x="89.2759%" y="997" width="3.9233%" height="15" fill="rgb(231,48,10)" fg:x="11355" fg:w="499"/><text x="89.5259%" y="1007.50">exce..</text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (499 samples, 3.92%)</title><rect x="89.2759%" y="981" width="3.9233%" height="15" fill="rgb(213,141,34)" fg:x="11355" fg:w="499"/><text x="89.5259%" y="991.50">exce..</text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string (39 samples, 0.31%)</title><rect x="92.8925%" y="965" width="0.3066%" height="15" fill="rgb(249,130,34)" fg:x="11815" fg:w="39"/><text x="93.1425%" y="975.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::store_string (39 samples, 0.31%)</title><rect x="92.8925%" y="949" width="0.3066%" height="15" fill="rgb(219,42,41)" fg:x="11815" fg:w="39"/><text x="93.1425%" y="959.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::insert_cell (37 samples, 0.29%)</title><rect x="92.9082%" y="933" width="0.2909%" height="15" fill="rgb(224,100,54)" fg:x="11817" fg:w="37"/><text x="93.1582%" y="943.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.02%)</title><rect x="93.1756%" y="917" width="0.0236%" height="15" fill="rgb(229,200,27)" fg:x="11851" fg:w="3"/><text x="93.4256%" y="927.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.02%)</title><rect x="93.1756%" y="901" width="0.0236%" height="15" fill="rgb(217,118,10)" fg:x="11851" fg:w="3"/><text x="93.4256%" y="911.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.02%)</title><rect x="93.1756%" y="885" width="0.0236%" height="15" fill="rgb(206,22,3)" fg:x="11851" fg:w="3"/><text x="93.4256%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_xlsxwriter::shared_strings_table::SharedStringsTable&gt; (3 samples, 0.02%)</title><rect x="93.1992%" y="933" width="0.0236%" height="15" fill="rgb(232,163,46)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::sync::Arc&lt;str&gt;,u32&gt;&gt; (3 samples, 0.02%)</title><rect x="93.1992%" y="917" width="0.0236%" height="15" fill="rgb(206,95,13)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::sync::Arc&lt;str&gt;,u32,std::collections::hash::map::RandomState&gt;&gt; (3 samples, 0.02%)</title><rect x="93.1992%" y="901" width="0.0236%" height="15" fill="rgb(253,154,18)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::sync::Arc&lt;str&gt;,u32)&gt;&gt; (3 samples, 0.02%)</title><rect x="93.1992%" y="885" width="0.0236%" height="15" fill="rgb(219,32,23)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="93.1992%" y="869" width="0.0236%" height="15" fill="rgb(230,191,45)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (3 samples, 0.02%)</title><rect x="93.1992%" y="853" width="0.0236%" height="15" fill="rgb(229,64,36)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.02%)</title><rect x="93.1992%" y="837" width="0.0236%" height="15" fill="rgb(205,129,25)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (3 samples, 0.02%)</title><rect x="93.1992%" y="821" width="0.0236%" height="15" fill="rgb(254,112,7)" fg:x="11854" fg:w="3"/><text x="93.4492%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::sync::Arc&lt;str&gt;,u32)&gt; (2 samples, 0.02%)</title><rect x="93.2070%" y="805" width="0.0157%" height="15" fill="rgb(226,53,48)" fg:x="11855" fg:w="2"/><text x="93.4570%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (2 samples, 0.02%)</title><rect x="93.2070%" y="789" width="0.0157%" height="15" fill="rgb(214,153,38)" fg:x="11855" fg:w="2"/><text x="93.4570%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="93.2070%" y="773" width="0.0157%" height="15" fill="rgb(243,101,7)" fg:x="11855" fg:w="2"/><text x="93.4570%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="93.2070%" y="757" width="0.0157%" height="15" fill="rgb(240,140,22)" fg:x="11855" fg:w="2"/><text x="93.4570%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="93.2070%" y="741" width="0.0157%" height="15" fill="rgb(235,114,2)" fg:x="11855" fg:w="2"/><text x="93.4570%" y="751.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_root_rels_file (3 samples, 0.02%)</title><rect x="93.2463%" y="933" width="0.0236%" height="15" fill="rgb(242,59,12)" fg:x="11860" fg:w="3"/><text x="93.4963%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (2 samples, 0.02%)</title><rect x="93.2542%" y="917" width="0.0157%" height="15" fill="rgb(252,134,9)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="927.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="93.2542%" y="901" width="0.0157%" height="15" fill="rgb(236,4,44)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="911.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="93.2542%" y="885" width="0.0157%" height="15" fill="rgb(254,172,41)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="895.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="93.2542%" y="869" width="0.0157%" height="15" fill="rgb(244,63,20)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="879.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="93.2542%" y="853" width="0.0157%" height="15" fill="rgb(250,73,31)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="93.2542%" y="837" width="0.0157%" height="15" fill="rgb(241,38,36)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="93.2542%" y="821" width="0.0157%" height="15" fill="rgb(245,211,2)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="93.2542%" y="805" width="0.0157%" height="15" fill="rgb(206,120,28)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="93.2542%" y="789" width="0.0157%" height="15" fill="rgb(211,59,34)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="93.2542%" y="773" width="0.0157%" height="15" fill="rgb(233,168,5)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="93.2542%" y="757" width="0.0157%" height="15" fill="rgb(234,33,13)" fg:x="11861" fg:w="2"/><text x="93.5042%" y="767.50"></text></g><g><title>core::slice::sort::merge (7 samples, 0.06%)</title><rect x="93.3092%" y="837" width="0.0550%" height="15" fill="rgb(231,150,26)" fg:x="11868" fg:w="7"/><text x="93.5592%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key::{{closure}} (3 samples, 0.02%)</title><rect x="93.3407%" y="821" width="0.0236%" height="15" fill="rgb(217,191,4)" fg:x="11872" fg:w="3"/><text x="93.5907%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (3 samples, 0.02%)</title><rect x="93.3407%" y="805" width="0.0236%" height="15" fill="rgb(246,198,38)" fg:x="11872" fg:w="3"/><text x="93.5907%" y="815.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.02%)</title><rect x="93.3643%" y="805" width="0.0157%" height="15" fill="rgb(245,64,37)" fg:x="11875" fg:w="2"/><text x="93.6143%" y="815.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.02%)</title><rect x="93.3643%" y="789" width="0.0157%" height="15" fill="rgb(250,30,36)" fg:x="11875" fg:w="2"/><text x="93.6143%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (14 samples, 0.11%)</title><rect x="93.2935%" y="885" width="0.1101%" height="15" fill="rgb(217,86,53)" fg:x="11866" fg:w="14"/><text x="93.5435%" y="895.50"></text></g><g><title>alloc::slice::stable_sort (14 samples, 0.11%)</title><rect x="93.2935%" y="869" width="0.1101%" height="15" fill="rgb(228,157,16)" fg:x="11866" fg:w="14"/><text x="93.5435%" y="879.50"></text></g><g><title>core::slice::sort::merge_sort (14 samples, 0.11%)</title><rect x="93.2935%" y="853" width="0.1101%" height="15" fill="rgb(217,59,31)" fg:x="11866" fg:w="14"/><text x="93.5435%" y="863.50"></text></g><g><title>core::slice::sort::provide_sorted_batch (5 samples, 0.04%)</title><rect x="93.3643%" y="837" width="0.0393%" height="15" fill="rgb(237,138,41)" fg:x="11875" fg:w="5"/><text x="93.6143%" y="847.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (5 samples, 0.04%)</title><rect x="93.3643%" y="821" width="0.0393%" height="15" fill="rgb(227,91,49)" fg:x="11875" fg:w="5"/><text x="93.6143%" y="831.50"></text></g><g><title>core::slice::sort::insert_tail (3 samples, 0.02%)</title><rect x="93.3800%" y="805" width="0.0236%" height="15" fill="rgb(247,21,44)" fg:x="11877" fg:w="3"/><text x="93.6300%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key::{{closure}} (2 samples, 0.02%)</title><rect x="93.3878%" y="789" width="0.0157%" height="15" fill="rgb(219,210,51)" fg:x="11878" fg:w="2"/><text x="93.6378%" y="799.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (6 samples, 0.05%)</title><rect x="93.4036%" y="885" width="0.0472%" height="15" fill="rgb(209,140,6)" fg:x="11880" fg:w="6"/><text x="93.6536%" y="895.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_suffix_of (5 samples, 0.04%)</title><rect x="93.4114%" y="869" width="0.0393%" height="15" fill="rgb(221,188,24)" fg:x="11881" fg:w="5"/><text x="93.6614%" y="879.50"></text></g><g><title>core::str::pattern::Pattern::is_suffix_of (5 samples, 0.04%)</title><rect x="93.4114%" y="853" width="0.0393%" height="15" fill="rgb(232,154,20)" fg:x="11881" fg:w="5"/><text x="93.6614%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (5 samples, 0.04%)</title><rect x="93.4114%" y="837" width="0.0393%" height="15" fill="rgb(244,137,50)" fg:x="11881" fg:w="5"/><text x="93.6614%" y="847.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.03%)</title><rect x="93.4193%" y="821" width="0.0314%" height="15" fill="rgb(225,185,43)" fg:x="11882" fg:w="4"/><text x="93.6693%" y="831.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.03%)</title><rect x="93.4193%" y="805" width="0.0314%" height="15" fill="rgb(213,205,38)" fg:x="11882" fg:w="4"/><text x="93.6693%" y="815.50"></text></g><g><title>core::str::validations::next_code_point_reverse (4 samples, 0.03%)</title><rect x="93.4193%" y="789" width="0.0314%" height="15" fill="rgb(236,73,12)" fg:x="11882" fg:w="4"/><text x="93.6693%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.02%)</title><rect x="93.4272%" y="773" width="0.0236%" height="15" fill="rgb(235,219,13)" fg:x="11883" fg:w="3"/><text x="93.6772%" y="783.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (3 samples, 0.02%)</title><rect x="93.4507%" y="885" width="0.0236%" height="15" fill="rgb(218,59,36)" fg:x="11886" fg:w="3"/><text x="93.7007%" y="895.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::Pattern&gt;::is_prefix_of (2 samples, 0.02%)</title><rect x="93.4586%" y="869" width="0.0157%" height="15" fill="rgb(205,110,39)" fg:x="11887" fg:w="2"/><text x="93.7086%" y="879.50"></text></g><g><title>core::str::pattern::Pattern::is_prefix_of (2 samples, 0.02%)</title><rect x="93.4586%" y="853" width="0.0157%" height="15" fill="rgb(218,206,42)" fg:x="11887" fg:w="2"/><text x="93.7086%" y="863.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (2 samples, 0.02%)</title><rect x="93.4586%" y="837" width="0.0157%" height="15" fill="rgb(248,125,24)" fg:x="11887" fg:w="2"/><text x="93.7086%" y="847.50"></text></g><g><title>&lt;[char: N] as core::str::pattern::MultiCharEq&gt;::matches (2 samples, 0.02%)</title><rect x="93.4586%" y="821" width="0.0157%" height="15" fill="rgb(242,28,27)" fg:x="11887" fg:w="2"/><text x="93.7086%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (2 samples, 0.02%)</title><rect x="93.4586%" y="805" width="0.0157%" height="15" fill="rgb(216,228,15)" fg:x="11887" fg:w="2"/><text x="93.7086%" y="815.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="93.4901%" y="789" width="0.0236%" height="15" fill="rgb(235,116,46)" fg:x="11891" fg:w="3"/><text x="93.7401%" y="799.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.02%)</title><rect x="93.4901%" y="773" width="0.0236%" height="15" fill="rgb(224,18,32)" fg:x="11891" fg:w="3"/><text x="93.7401%" y="783.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.04%)</title><rect x="93.4901%" y="821" width="0.0393%" height="15" fill="rgb(252,5,12)" fg:x="11891" fg:w="5"/><text x="93.7401%" y="831.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.04%)</title><rect x="93.4901%" y="805" width="0.0393%" height="15" fill="rgb(251,36,5)" fg:x="11891" fg:w="5"/><text x="93.7401%" y="815.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="93.5136%" y="789" width="0.0157%" height="15" fill="rgb(217,53,14)" fg:x="11894" fg:w="2"/><text x="93.7636%" y="799.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (6 samples, 0.05%)</title><rect x="93.4901%" y="837" width="0.0472%" height="15" fill="rgb(215,86,45)" fg:x="11891" fg:w="6"/><text x="93.7401%" y="847.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_rich_si_element (10 samples, 0.08%)</title><rect x="93.4743%" y="885" width="0.0786%" height="15" fill="rgb(242,169,11)" fg:x="11889" fg:w="10"/><text x="93.7243%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (9 samples, 0.07%)</title><rect x="93.4822%" y="869" width="0.0708%" height="15" fill="rgb(211,213,45)" fg:x="11890" fg:w="9"/><text x="93.7322%" y="879.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="93.4901%" y="853" width="0.0629%" height="15" fill="rgb(205,88,11)" fg:x="11891" fg:w="8"/><text x="93.7401%" y="863.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="93.5372%" y="837" width="0.0157%" height="15" fill="rgb(252,69,26)" fg:x="11897" fg:w="2"/><text x="93.7872%" y="847.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="93.5372%" y="821" width="0.0157%" height="15" fill="rgb(246,123,37)" fg:x="11897" fg:w="2"/><text x="93.7872%" y="831.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="93.5372%" y="805" width="0.0157%" height="15" fill="rgb(212,205,5)" fg:x="11897" fg:w="2"/><text x="93.7872%" y="815.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="93.5372%" y="789" width="0.0157%" height="15" fill="rgb(253,148,0)" fg:x="11897" fg:w="2"/><text x="93.7872%" y="799.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_data (2 samples, 0.02%)</title><rect x="93.5530%" y="869" width="0.0157%" height="15" fill="rgb(239,22,4)" fg:x="11899" fg:w="2"/><text x="93.8030%" y="879.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (2 samples, 0.02%)</title><rect x="93.5530%" y="853" width="0.0157%" height="15" fill="rgb(226,26,53)" fg:x="11899" fg:w="2"/><text x="93.8030%" y="863.50"></text></g><g><title>&lt;&amp;str as regex::regex::string::Replacer&gt;::no_expansion (4 samples, 0.03%)</title><rect x="93.5765%" y="821" width="0.0314%" height="15" fill="rgb(225,229,45)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="831.50"></text></g><g><title>regex::regex::string::no_expansion (4 samples, 0.03%)</title><rect x="93.5765%" y="805" width="0.0314%" height="15" fill="rgb(220,60,37)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="815.50"></text></g><g><title>regex::find_byte::find_byte (4 samples, 0.03%)</title><rect x="93.5765%" y="789" width="0.0314%" height="15" fill="rgb(217,180,35)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="799.50"></text></g><g><title>regex::find_byte::find_byte::imp (4 samples, 0.03%)</title><rect x="93.5765%" y="773" width="0.0314%" height="15" fill="rgb(229,7,53)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="783.50"></text></g><g><title>memchr::memchr::memchr (4 samples, 0.03%)</title><rect x="93.5765%" y="757" width="0.0314%" height="15" fill="rgb(254,137,3)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="767.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (4 samples, 0.03%)</title><rect x="93.5765%" y="741" width="0.0314%" height="15" fill="rgb(215,140,41)" fg:x="11902" fg:w="4"/><text x="93.8265%" y="751.50"></text></g><g><title>memchr::memchr::memchr::{{closure}} (3 samples, 0.02%)</title><rect x="93.5844%" y="725" width="0.0236%" height="15" fill="rgb(250,80,15)" fg:x="11903" fg:w="3"/><text x="93.8344%" y="735.50"></text></g><g><title>memchr::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="93.5844%" y="709" width="0.0236%" height="15" fill="rgb(252,191,6)" fg:x="11903" fg:w="3"/><text x="93.8344%" y="719.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3 samples, 0.02%)</title><rect x="93.5844%" y="693" width="0.0236%" height="15" fill="rgb(246,217,18)" fg:x="11903" fg:w="3"/><text x="93.8344%" y="703.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="93.5923%" y="677" width="0.0157%" height="15" fill="rgb(223,93,7)" fg:x="11904" fg:w="2"/><text x="93.8423%" y="687.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 0.02%)</title><rect x="93.6080%" y="821" width="0.0157%" height="15" fill="rgb(225,55,52)" fg:x="11906" fg:w="2"/><text x="93.8580%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2 samples, 0.02%)</title><rect x="93.6080%" y="805" width="0.0157%" height="15" fill="rgb(240,31,24)" fg:x="11906" fg:w="2"/><text x="93.8580%" y="815.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (2 samples, 0.02%)</title><rect x="93.6080%" y="789" width="0.0157%" height="15" fill="rgb(205,56,52)" fg:x="11906" fg:w="2"/><text x="93.8580%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="93.6080%" y="773" width="0.0157%" height="15" fill="rgb(246,146,12)" fg:x="11906" fg:w="2"/><text x="93.8580%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Regex::create_captures (4 samples, 0.03%)</title><rect x="93.6394%" y="789" width="0.0314%" height="15" fill="rgb(239,84,36)" fg:x="11910" fg:w="4"/><text x="93.8894%" y="799.50"></text></g><g><title>regex_automata::util::captures::Captures::all (3 samples, 0.02%)</title><rect x="93.6473%" y="773" width="0.0236%" height="15" fill="rgb(207,41,40)" fg:x="11911" fg:w="3"/><text x="93.8973%" y="783.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.02%)</title><rect x="93.6473%" y="757" width="0.0236%" height="15" fill="rgb(241,179,25)" fg:x="11911" fg:w="3"/><text x="93.8973%" y="767.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.02%)</title><rect x="93.6473%" y="741" width="0.0236%" height="15" fill="rgb(210,0,34)" fg:x="11911" fg:w="3"/><text x="93.8973%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="93.6552%" y="725" width="0.0157%" height="15" fill="rgb(225,217,29)" fg:x="11912" fg:w="2"/><text x="93.9052%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="93.6552%" y="709" width="0.0157%" height="15" fill="rgb(216,191,38)" fg:x="11912" fg:w="2"/><text x="93.9052%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="93.6552%" y="693" width="0.0157%" height="15" fill="rgb(232,140,52)" fg:x="11912" fg:w="2"/><text x="93.9052%" y="703.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_escapes (14 samples, 0.11%)</title><rect x="93.5687%" y="869" width="0.1101%" height="15" fill="rgb(223,158,51)" fg:x="11901" fg:w="14"/><text x="93.8187%" y="879.50"></text></g><g><title>regex::regex::string::Regex::replace_all (13 samples, 0.10%)</title><rect x="93.5765%" y="853" width="0.1022%" height="15" fill="rgb(235,29,51)" fg:x="11902" fg:w="13"/><text x="93.8265%" y="863.50"></text></g><g><title>regex::regex::string::Regex::replacen (13 samples, 0.10%)</title><rect x="93.5765%" y="837" width="0.1022%" height="15" fill="rgb(215,181,18)" fg:x="11902" fg:w="13"/><text x="93.8265%" y="847.50"></text></g><g><title>regex::regex::string::Regex::captures_iter (7 samples, 0.06%)</title><rect x="93.6237%" y="821" width="0.0550%" height="15" fill="rgb(227,125,34)" fg:x="11908" fg:w="7"/><text x="93.8737%" y="831.50"></text></g><g><title>regex_automata::meta::regex::Regex::captures_iter (6 samples, 0.05%)</title><rect x="93.6316%" y="805" width="0.0472%" height="15" fill="rgb(230,197,49)" fg:x="11909" fg:w="6"/><text x="93.8816%" y="815.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="93.6787%" y="837" width="0.0157%" height="15" fill="rgb(239,141,16)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="847.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.02%)</title><rect x="93.6787%" y="821" width="0.0157%" height="15" fill="rgb(225,105,43)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="831.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="93.6787%" y="805" width="0.0157%" height="15" fill="rgb(214,131,14)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="815.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="93.6787%" y="789" width="0.0157%" height="15" fill="rgb(229,177,11)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="799.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="93.6787%" y="773" width="0.0157%" height="15" fill="rgb(231,180,14)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="783.50"></text></g><g><title>std::io::cursor::vec_write (2 samples, 0.02%)</title><rect x="93.6787%" y="757" width="0.0157%" height="15" fill="rgb(232,88,2)" fg:x="11915" fg:w="2"/><text x="93.9287%" y="767.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::assemble_xml_file (55 samples, 0.43%)</title><rect x="93.2699%" y="917" width="0.4324%" height="15" fill="rgb(205,220,8)" fg:x="11863" fg:w="55"/><text x="93.5199%" y="927.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::write_sst_strings (55 samples, 0.43%)</title><rect x="93.2699%" y="901" width="0.4324%" height="15" fill="rgb(225,23,53)" fg:x="11863" fg:w="55"/><text x="93.5199%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_si_element (19 samples, 0.15%)</title><rect x="93.5530%" y="885" width="0.1494%" height="15" fill="rgb(213,62,29)" fg:x="11899" fg:w="19"/><text x="93.8030%" y="895.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.02%)</title><rect x="93.6787%" y="869" width="0.0236%" height="15" fill="rgb(227,75,7)" fg:x="11915" fg:w="3"/><text x="93.9287%" y="879.50"></text></g><g><title>core::fmt::write (3 samples, 0.02%)</title><rect x="93.6787%" y="853" width="0.0236%" height="15" fill="rgb(207,105,14)" fg:x="11915" fg:w="3"/><text x="93.9287%" y="863.50"></text></g><g><title>_tr_flush_block (7 samples, 0.06%)</title><rect x="94.2291%" y="693" width="0.0550%" height="15" fill="rgb(245,62,29)" fg:x="11985" fg:w="7"/><text x="94.4791%" y="703.50"></text></g><g><title>compress_block (7 samples, 0.06%)</title><rect x="94.2291%" y="677" width="0.0550%" height="15" fill="rgb(236,202,4)" fg:x="11985" fg:w="7"/><text x="94.4791%" y="687.50"></text></g><g><title>read_buf (5 samples, 0.04%)</title><rect x="94.2841%" y="677" width="0.0393%" height="15" fill="rgb(250,67,1)" fg:x="11992" fg:w="5"/><text x="94.5341%" y="687.50"></text></g><g><title>zmemcpy (5 samples, 0.04%)</title><rect x="94.2841%" y="661" width="0.0393%" height="15" fill="rgb(253,115,44)" fg:x="11992" fg:w="5"/><text x="94.5341%" y="671.50"></text></g><g><title>slide_hash (31 samples, 0.24%)</title><rect x="94.3235%" y="677" width="0.2437%" height="15" fill="rgb(251,139,18)" fg:x="11997" fg:w="31"/><text x="94.5735%" y="687.50"></text></g><g><title>fill_window (40 samples, 0.31%)</title><rect x="94.2841%" y="693" width="0.3145%" height="15" fill="rgb(218,22,32)" fg:x="11992" fg:w="40"/><text x="94.5341%" y="703.50"></text></g><g><title>zmemcpy (4 samples, 0.03%)</title><rect x="94.5672%" y="677" width="0.0314%" height="15" fill="rgb(243,53,5)" fg:x="12028" fg:w="4"/><text x="94.8172%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (136 samples, 1.07%)</title><rect x="93.7023%" y="885" width="1.0693%" height="15" fill="rgb(227,56,16)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="895.50"></text></g><g><title>&lt;flate2::deflate::write::DeflateEncoder&lt;W&gt; as std::io::Write&gt;::write (136 samples, 1.07%)</title><rect x="93.7023%" y="869" width="1.0693%" height="15" fill="rgb(245,53,0)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="879.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (136 samples, 1.07%)</title><rect x="93.7023%" y="853" width="1.0693%" height="15" fill="rgb(216,170,35)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (136 samples, 1.07%)</title><rect x="93.7023%" y="837" width="1.0693%" height="15" fill="rgb(211,200,8)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (136 samples, 1.07%)</title><rect x="93.7023%" y="821" width="1.0693%" height="15" fill="rgb(228,204,44)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (136 samples, 1.07%)</title><rect x="93.7023%" y="805" width="1.0693%" height="15" fill="rgb(214,121,17)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (136 samples, 1.07%)</title><rect x="93.7023%" y="789" width="1.0693%" height="15" fill="rgb(233,64,38)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="799.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (136 samples, 1.07%)</title><rect x="93.7023%" y="773" width="1.0693%" height="15" fill="rgb(253,54,19)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="783.50"></text></g><g><title>flate2::mem::Compress::compress (136 samples, 1.07%)</title><rect x="93.7023%" y="757" width="1.0693%" height="15" fill="rgb(253,94,18)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="767.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (136 samples, 1.07%)</title><rect x="93.7023%" y="741" width="1.0693%" height="15" fill="rgb(227,57,52)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="751.50"></text></g><g><title>deflate (136 samples, 1.07%)</title><rect x="93.7023%" y="725" width="1.0693%" height="15" fill="rgb(230,228,50)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="735.50"></text></g><g><title>deflate_slow (136 samples, 1.07%)</title><rect x="93.7023%" y="709" width="1.0693%" height="15" fill="rgb(217,205,27)" fg:x="11918" fg:w="136"/><text x="93.9523%" y="719.50"></text></g><g><title>longest_match (22 samples, 0.17%)</title><rect x="94.5986%" y="693" width="0.1730%" height="15" fill="rgb(252,71,50)" fg:x="12032" fg:w="22"/><text x="94.8486%" y="703.50"></text></g><g><title>std::io::Write::write_all (147 samples, 1.16%)</title><rect x="93.7023%" y="917" width="1.1558%" height="15" fill="rgb(209,86,4)" fg:x="11918" fg:w="147"/><text x="93.9523%" y="927.50"></text></g><g><title>zip::write::&lt;impl std::io::Write for zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::write (147 samples, 1.16%)</title><rect x="93.7023%" y="901" width="1.1558%" height="15" fill="rgb(229,94,0)" fg:x="11918" fg:w="147"/><text x="93.9523%" y="911.50"></text></g><g><title>zip::write::ZipWriterStats::update (11 samples, 0.09%)</title><rect x="94.7716%" y="885" width="0.0865%" height="15" fill="rgb(252,223,21)" fg:x="12054" fg:w="11"/><text x="95.0216%" y="895.50"></text></g><g><title>crc32fast::Hasher::update (11 samples, 0.09%)</title><rect x="94.7716%" y="869" width="0.0865%" height="15" fill="rgb(230,210,4)" fg:x="12054" fg:w="11"/><text x="95.0216%" y="879.50"></text></g><g><title>crc32fast::baseline::State::update (11 samples, 0.09%)</title><rect x="94.7716%" y="853" width="0.0865%" height="15" fill="rgb(240,149,38)" fg:x="12054" fg:w="11"/><text x="95.0216%" y="863.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (11 samples, 0.09%)</title><rect x="94.7716%" y="837" width="0.0865%" height="15" fill="rgb(254,105,20)" fg:x="12054" fg:w="11"/><text x="95.0216%" y="847.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="94.8581%" y="901" width="0.0157%" height="15" fill="rgb(253,87,46)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="911.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="94.8581%" y="885" width="0.0157%" height="15" fill="rgb(253,116,33)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="895.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="94.8581%" y="869" width="0.0157%" height="15" fill="rgb(229,198,5)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="879.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="94.8581%" y="853" width="0.0157%" height="15" fill="rgb(242,38,37)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="94.8581%" y="837" width="0.0157%" height="15" fill="rgb(242,69,53)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="94.8581%" y="821" width="0.0157%" height="15" fill="rgb(249,80,16)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="94.8581%" y="805" width="0.0157%" height="15" fill="rgb(206,128,11)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="94.8581%" y="789" width="0.0157%" height="15" fill="rgb(212,35,20)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="799.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (2 samples, 0.02%)</title><rect x="94.8581%" y="773" width="0.0157%" height="15" fill="rgb(236,79,13)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="783.50"></text></g><g><title>flate2::mem::Compress::compress (2 samples, 0.02%)</title><rect x="94.8581%" y="757" width="0.0157%" height="15" fill="rgb(233,123,3)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="767.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (2 samples, 0.02%)</title><rect x="94.8581%" y="741" width="0.0157%" height="15" fill="rgb(214,93,52)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="751.50"></text></g><g><title>deflate (2 samples, 0.02%)</title><rect x="94.8581%" y="725" width="0.0157%" height="15" fill="rgb(251,37,40)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="735.50"></text></g><g><title>deflate_slow (2 samples, 0.02%)</title><rect x="94.8581%" y="709" width="0.0157%" height="15" fill="rgb(227,80,54)" fg:x="12065" fg:w="2"/><text x="95.1081%" y="719.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_shared_strings_file (205 samples, 1.61%)</title><rect x="93.2699%" y="933" width="1.6118%" height="15" fill="rgb(254,48,11)" fg:x="11863" fg:w="205"/><text x="93.5199%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (3 samples, 0.02%)</title><rect x="94.8581%" y="917" width="0.0236%" height="15" fill="rgb(235,193,26)" fg:x="12065" fg:w="3"/><text x="95.1081%" y="927.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_styles_file (3 samples, 0.02%)</title><rect x="94.8817%" y="933" width="0.0236%" height="15" fill="rgb(229,99,21)" fg:x="12068" fg:w="3"/><text x="95.1317%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (2 samples, 0.02%)</title><rect x="94.8895%" y="917" width="0.0157%" height="15" fill="rgb(211,140,41)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="927.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="94.8895%" y="901" width="0.0157%" height="15" fill="rgb(240,227,30)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="911.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="94.8895%" y="885" width="0.0157%" height="15" fill="rgb(215,224,45)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="895.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="94.8895%" y="869" width="0.0157%" height="15" fill="rgb(206,123,31)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="879.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="94.8895%" y="853" width="0.0157%" height="15" fill="rgb(210,138,16)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="94.8895%" y="837" width="0.0157%" height="15" fill="rgb(228,57,28)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="94.8895%" y="821" width="0.0157%" height="15" fill="rgb(242,170,10)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="94.8895%" y="805" width="0.0157%" height="15" fill="rgb(228,214,39)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="94.8895%" y="789" width="0.0157%" height="15" fill="rgb(218,179,33)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="94.8895%" y="773" width="0.0157%" height="15" fill="rgb(235,193,39)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="94.8895%" y="757" width="0.0157%" height="15" fill="rgb(219,221,36)" fg:x="12069" fg:w="2"/><text x="95.1395%" y="767.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_theme_file (3 samples, 0.02%)</title><rect x="94.9053%" y="933" width="0.0236%" height="15" fill="rgb(248,218,19)" fg:x="12071" fg:w="3"/><text x="95.1553%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (2 samples, 0.02%)</title><rect x="94.9131%" y="917" width="0.0157%" height="15" fill="rgb(205,50,9)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="927.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="94.9131%" y="901" width="0.0157%" height="15" fill="rgb(238,81,28)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="911.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="94.9131%" y="885" width="0.0157%" height="15" fill="rgb(235,110,19)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="895.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="94.9131%" y="869" width="0.0157%" height="15" fill="rgb(214,7,14)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="879.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="94.9131%" y="853" width="0.0157%" height="15" fill="rgb(211,77,3)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="94.9131%" y="837" width="0.0157%" height="15" fill="rgb(229,5,9)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="94.9131%" y="821" width="0.0157%" height="15" fill="rgb(225,90,11)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="94.9131%" y="805" width="0.0157%" height="15" fill="rgb(242,56,8)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="94.9131%" y="789" width="0.0157%" height="15" fill="rgb(249,212,39)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="94.9131%" y="773" width="0.0157%" height="15" fill="rgb(236,90,9)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="94.9131%" y="757" width="0.0157%" height="15" fill="rgb(206,88,35)" fg:x="12072" fg:w="2"/><text x="95.1631%" y="767.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_workbook_file (2 samples, 0.02%)</title><rect x="94.9288%" y="933" width="0.0157%" height="15" fill="rgb(205,126,30)" fg:x="12074" fg:w="2"/><text x="95.1788%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="94.9446%" y="901" width="0.0157%" height="15" fill="rgb(230,176,12)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="911.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="94.9446%" y="885" width="0.0157%" height="15" fill="rgb(243,19,9)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="895.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="94.9446%" y="869" width="0.0157%" height="15" fill="rgb(245,171,17)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="879.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="94.9446%" y="853" width="0.0157%" height="15" fill="rgb(227,52,21)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="94.9446%" y="837" width="0.0157%" height="15" fill="rgb(238,69,14)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="94.9446%" y="821" width="0.0157%" height="15" fill="rgb(241,156,39)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="94.9446%" y="805" width="0.0157%" height="15" fill="rgb(212,227,28)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="94.9446%" y="789" width="0.0157%" height="15" fill="rgb(209,118,27)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="94.9446%" y="773" width="0.0157%" height="15" fill="rgb(226,102,5)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="94.9446%" y="757" width="0.0157%" height="15" fill="rgb(223,34,3)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="767.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.02%)</title><rect x="94.9446%" y="741" width="0.0157%" height="15" fill="rgb(221,81,38)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="751.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.02%)</title><rect x="94.9446%" y="725" width="0.0157%" height="15" fill="rgb(236,219,28)" fg:x="12076" fg:w="2"/><text x="95.1946%" y="735.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_workbook_rels_file (3 samples, 0.02%)</title><rect x="94.9446%" y="933" width="0.0236%" height="15" fill="rgb(213,200,14)" fg:x="12076" fg:w="3"/><text x="95.1946%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (3 samples, 0.02%)</title><rect x="94.9446%" y="917" width="0.0236%" height="15" fill="rgb(240,33,19)" fg:x="12076" fg:w="3"/><text x="95.1946%" y="927.50"></text></g><g><title>compress_block (7 samples, 0.06%)</title><rect x="95.4792%" y="677" width="0.0550%" height="15" fill="rgb(233,113,27)" fg:x="12144" fg:w="7"/><text x="95.7292%" y="687.50"></text></g><g><title>_tr_flush_block (8 samples, 0.06%)</title><rect x="95.4792%" y="693" width="0.0629%" height="15" fill="rgb(220,221,18)" fg:x="12144" fg:w="8"/><text x="95.7292%" y="703.50"></text></g><g><title>read_buf (4 samples, 0.03%)</title><rect x="95.5421%" y="677" width="0.0314%" height="15" fill="rgb(238,92,8)" fg:x="12152" fg:w="4"/><text x="95.7921%" y="687.50"></text></g><g><title>zmemcpy (4 samples, 0.03%)</title><rect x="95.5421%" y="661" width="0.0314%" height="15" fill="rgb(222,164,16)" fg:x="12152" fg:w="4"/><text x="95.7921%" y="671.50"></text></g><g><title>slide_hash (24 samples, 0.19%)</title><rect x="95.5736%" y="677" width="0.1887%" height="15" fill="rgb(241,119,3)" fg:x="12156" fg:w="24"/><text x="95.8236%" y="687.50"></text></g><g><title>fill_window (33 samples, 0.26%)</title><rect x="95.5421%" y="693" width="0.2595%" height="15" fill="rgb(241,44,8)" fg:x="12152" fg:w="33"/><text x="95.7921%" y="703.50"></text></g><g><title>zmemcpy (5 samples, 0.04%)</title><rect x="95.7622%" y="677" width="0.0393%" height="15" fill="rgb(230,36,40)" fg:x="12180" fg:w="5"/><text x="96.0122%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (170 samples, 1.34%)</title><rect x="94.9682%" y="885" width="1.3366%" height="15" fill="rgb(243,16,36)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="895.50"></text></g><g><title>&lt;flate2::deflate::write::DeflateEncoder&lt;W&gt; as std::io::Write&gt;::write (170 samples, 1.34%)</title><rect x="94.9682%" y="869" width="1.3366%" height="15" fill="rgb(231,4,26)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="879.50"></text></g><g><title>&lt;flate2::zio::Writer&lt;W,D&gt; as std::io::Write&gt;::write (170 samples, 1.34%)</title><rect x="94.9682%" y="853" width="1.3366%" height="15" fill="rgb(240,9,31)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="863.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::write_with_status (170 samples, 1.34%)</title><rect x="94.9682%" y="837" width="1.3366%" height="15" fill="rgb(207,173,15)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="847.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (170 samples, 1.34%)</title><rect x="94.9682%" y="821" width="1.3366%" height="15" fill="rgb(224,192,53)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec (170 samples, 1.34%)</title><rect x="94.9682%" y="805" width="1.3366%" height="15" fill="rgb(223,67,28)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="815.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (170 samples, 1.34%)</title><rect x="94.9682%" y="789" width="1.3366%" height="15" fill="rgb(211,20,47)" fg:x="12079" fg:w="170"/><text x="95.2182%" y="799.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (169 samples, 1.33%)</title><rect x="94.9760%" y="773" width="1.3287%" height="15" fill="rgb(240,228,2)" fg:x="12080" fg:w="169"/><text x="95.2260%" y="783.50"></text></g><g><title>flate2::mem::Compress::compress (169 samples, 1.33%)</title><rect x="94.9760%" y="757" width="1.3287%" height="15" fill="rgb(248,151,12)" fg:x="12080" fg:w="169"/><text x="95.2260%" y="767.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (169 samples, 1.33%)</title><rect x="94.9760%" y="741" width="1.3287%" height="15" fill="rgb(244,8,39)" fg:x="12080" fg:w="169"/><text x="95.2260%" y="751.50"></text></g><g><title>deflate (169 samples, 1.33%)</title><rect x="94.9760%" y="725" width="1.3287%" height="15" fill="rgb(222,26,8)" fg:x="12080" fg:w="169"/><text x="95.2260%" y="735.50"></text></g><g><title>deflate_slow (169 samples, 1.33%)</title><rect x="94.9760%" y="709" width="1.3287%" height="15" fill="rgb(213,106,44)" fg:x="12080" fg:w="169"/><text x="95.2260%" y="719.50"></text></g><g><title>longest_match (63 samples, 0.50%)</title><rect x="95.8094%" y="693" width="0.4953%" height="15" fill="rgb(214,129,20)" fg:x="12186" fg:w="63"/><text x="96.0594%" y="703.50"></text></g><g><title>std::io::Write::write_all (180 samples, 1.42%)</title><rect x="94.9682%" y="917" width="1.4152%" height="15" fill="rgb(212,32,13)" fg:x="12079" fg:w="180"/><text x="95.2182%" y="927.50"></text></g><g><title>zip::write::&lt;impl std::io::Write for zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::write (180 samples, 1.42%)</title><rect x="94.9682%" y="901" width="1.4152%" height="15" fill="rgb(208,168,33)" fg:x="12079" fg:w="180"/><text x="95.2182%" y="911.50"></text></g><g><title>zip::write::ZipWriterStats::update (10 samples, 0.08%)</title><rect x="96.3047%" y="885" width="0.0786%" height="15" fill="rgb(231,207,8)" fg:x="12249" fg:w="10"/><text x="96.5547%" y="895.50"></text></g><g><title>crc32fast::Hasher::update (10 samples, 0.08%)</title><rect x="96.3047%" y="869" width="0.0786%" height="15" fill="rgb(235,219,23)" fg:x="12249" fg:w="10"/><text x="96.5547%" y="879.50"></text></g><g><title>crc32fast::baseline::State::update (10 samples, 0.08%)</title><rect x="96.3047%" y="853" width="0.0786%" height="15" fill="rgb(226,216,26)" fg:x="12249" fg:w="10"/><text x="96.5547%" y="863.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (10 samples, 0.08%)</title><rect x="96.3047%" y="837" width="0.0786%" height="15" fill="rgb(239,137,16)" fg:x="12249" fg:w="10"/><text x="96.5547%" y="847.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_worksheet_file (181 samples, 1.42%)</title><rect x="94.9682%" y="933" width="1.4231%" height="15" fill="rgb(207,12,36)" fg:x="12079" fg:w="181"/><text x="95.2182%" y="943.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (4 samples, 0.03%)</title><rect x="96.3991%" y="805" width="0.0314%" height="15" fill="rgb(210,214,24)" fg:x="12261" fg:w="4"/><text x="96.6491%" y="815.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (2 samples, 0.02%)</title><rect x="96.4148%" y="789" width="0.0157%" height="15" fill="rgb(206,56,30)" fg:x="12263" fg:w="2"/><text x="96.6648%" y="799.50"></text></g><g><title>alloc::collections::btree::mem::replace (5 samples, 0.04%)</title><rect x="96.3991%" y="853" width="0.0393%" height="15" fill="rgb(228,143,26)" fg:x="12261" fg:w="5"/><text x="96.6491%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (5 samples, 0.04%)</title><rect x="96.3991%" y="837" width="0.0393%" height="15" fill="rgb(216,218,46)" fg:x="12261" fg:w="5"/><text x="96.6491%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (5 samples, 0.04%)</title><rect x="96.3991%" y="821" width="0.0393%" height="15" fill="rgb(206,6,19)" fg:x="12261" fg:w="5"/><text x="96.6491%" y="831.50"></text></g><g><title>&lt;alloc::collections::btree::map::ValuesMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="96.3991%" y="917" width="0.0472%" height="15" fill="rgb(239,177,51)" fg:x="12261" fg:w="6"/><text x="96.6491%" y="927.50"></text></g><g><title>&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="96.3991%" y="901" width="0.0472%" height="15" fill="rgb(216,55,25)" fg:x="12261" fg:w="6"/><text x="96.6491%" y="911.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::ValMut,K,V&gt;::next_unchecked (6 samples, 0.05%)</title><rect x="96.3991%" y="885" width="0.0472%" height="15" fill="rgb(231,163,29)" fg:x="12261" fg:w="6"/><text x="96.6491%" y="895.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6 samples, 0.05%)</title><rect x="96.3991%" y="869" width="0.0472%" height="15" fill="rgb(232,149,50)" fg:x="12261" fg:w="6"/><text x="96.6491%" y="879.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (2 samples, 0.02%)</title><rect x="96.4541%" y="885" width="0.0157%" height="15" fill="rgb(223,142,48)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (2 samples, 0.02%)</title><rect x="96.4541%" y="869" width="0.0157%" height="15" fill="rgb(245,83,23)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::sync::Arc&lt;str&gt;,u32&gt;&gt; (2 samples, 0.02%)</title><rect x="96.4541%" y="853" width="0.0157%" height="15" fill="rgb(224,63,2)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="96.4541%" y="837" width="0.0157%" height="15" fill="rgb(218,65,53)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (2 samples, 0.02%)</title><rect x="96.4541%" y="821" width="0.0157%" height="15" fill="rgb(221,84,29)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="96.4541%" y="805" width="0.0157%" height="15" fill="rgb(234,0,32)" fg:x="12268" fg:w="2"/><text x="96.7041%" y="815.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="96.4856%" y="789" width="0.0157%" height="15" fill="rgb(206,20,16)" fg:x="12272" fg:w="2"/><text x="96.7356%" y="799.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (7 samples, 0.06%)</title><rect x="96.4541%" y="901" width="0.0550%" height="15" fill="rgb(244,172,18)" fg:x="12268" fg:w="7"/><text x="96.7041%" y="911.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (5 samples, 0.04%)</title><rect x="96.4698%" y="885" width="0.0393%" height="15" fill="rgb(254,133,1)" fg:x="12270" fg:w="5"/><text x="96.7198%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.03%)</title><rect x="96.4777%" y="869" width="0.0314%" height="15" fill="rgb(222,206,41)" fg:x="12271" fg:w="4"/><text x="96.7277%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (4 samples, 0.03%)</title><rect x="96.4777%" y="853" width="0.0314%" height="15" fill="rgb(212,3,42)" fg:x="12271" fg:w="4"/><text x="96.7277%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (3 samples, 0.02%)</title><rect x="96.4856%" y="837" width="0.0236%" height="15" fill="rgb(241,11,4)" fg:x="12272" fg:w="3"/><text x="96.7356%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 0.02%)</title><rect x="96.4856%" y="821" width="0.0236%" height="15" fill="rgb(205,19,26)" fg:x="12272" fg:w="3"/><text x="96.7356%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (3 samples, 0.02%)</title><rect x="96.4856%" y="805" width="0.0236%" height="15" fill="rgb(210,179,32)" fg:x="12272" fg:w="3"/><text x="96.7356%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="96.5406%" y="725" width="0.0629%" height="15" fill="rgb(227,116,49)" fg:x="12279" fg:w="8"/><text x="96.7906%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="96.5406%" y="709" width="0.0629%" height="15" fill="rgb(211,146,6)" fg:x="12279" fg:w="8"/><text x="96.7906%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.06%)</title><rect x="96.5406%" y="693" width="0.0629%" height="15" fill="rgb(219,44,39)" fg:x="12279" fg:w="8"/><text x="96.7906%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.05%)</title><rect x="96.5563%" y="677" width="0.0472%" height="15" fill="rgb(234,128,11)" fg:x="12281" fg:w="6"/><text x="96.8063%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="96.5878%" y="661" width="0.0157%" height="15" fill="rgb(220,183,53)" fg:x="12285" fg:w="2"/><text x="96.8378%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.04%)</title><rect x="96.6035%" y="725" width="0.0393%" height="15" fill="rgb(213,219,32)" fg:x="12287" fg:w="5"/><text x="96.8535%" y="735.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.04%)</title><rect x="96.6035%" y="709" width="0.0393%" height="15" fill="rgb(232,156,16)" fg:x="12287" fg:w="5"/><text x="96.8535%" y="719.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.02%)</title><rect x="96.6192%" y="693" width="0.0236%" height="15" fill="rgb(246,135,34)" fg:x="12289" fg:w="3"/><text x="96.8692%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.02%)</title><rect x="96.6585%" y="613" width="0.0236%" height="15" fill="rgb(241,99,0)" fg:x="12294" fg:w="3"/><text x="96.9085%" y="623.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="96.6821%" y="613" width="0.0157%" height="15" fill="rgb(222,103,45)" fg:x="12297" fg:w="2"/><text x="96.9321%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="96.6428%" y="629" width="0.0708%" height="15" fill="rgb(212,57,4)" fg:x="12292" fg:w="9"/><text x="96.8928%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="96.6979%" y="613" width="0.0157%" height="15" fill="rgb(215,68,47)" fg:x="12299" fg:w="2"/><text x="96.9479%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (23 samples, 0.18%)</title><rect x="96.5406%" y="789" width="0.1808%" height="15" fill="rgb(230,84,2)" fg:x="12279" fg:w="23"/><text x="96.7906%" y="799.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (23 samples, 0.18%)</title><rect x="96.5406%" y="773" width="0.1808%" height="15" fill="rgb(220,102,14)" fg:x="12279" fg:w="23"/><text x="96.7906%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 0.18%)</title><rect x="96.5406%" y="757" width="0.1808%" height="15" fill="rgb(240,10,32)" fg:x="12279" fg:w="23"/><text x="96.7906%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.18%)</title><rect x="96.5406%" y="741" width="0.1808%" height="15" fill="rgb(215,47,27)" fg:x="12279" fg:w="23"/><text x="96.7906%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.08%)</title><rect x="96.6428%" y="725" width="0.0786%" height="15" fill="rgb(233,188,43)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (10 samples, 0.08%)</title><rect x="96.6428%" y="709" width="0.0786%" height="15" fill="rgb(253,190,1)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10 samples, 0.08%)</title><rect x="96.6428%" y="693" width="0.0786%" height="15" fill="rgb(206,114,52)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (10 samples, 0.08%)</title><rect x="96.6428%" y="677" width="0.0786%" height="15" fill="rgb(233,120,37)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="687.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (10 samples, 0.08%)</title><rect x="96.6428%" y="661" width="0.0786%" height="15" fill="rgb(214,52,39)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (10 samples, 0.08%)</title><rect x="96.6428%" y="645" width="0.0786%" height="15" fill="rgb(223,80,29)" fg:x="12292" fg:w="10"/><text x="96.8928%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (32 samples, 0.25%)</title><rect x="96.5092%" y="869" width="0.2516%" height="15" fill="rgb(230,101,40)" fg:x="12275" fg:w="32"/><text x="96.7592%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (32 samples, 0.25%)</title><rect x="96.5092%" y="853" width="0.2516%" height="15" fill="rgb(219,211,8)" fg:x="12275" fg:w="32"/><text x="96.7592%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.25%)</title><rect x="96.5092%" y="837" width="0.2516%" height="15" fill="rgb(252,126,28)" fg:x="12275" fg:w="32"/><text x="96.7592%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (32 samples, 0.25%)</title><rect x="96.5092%" y="821" width="0.2516%" height="15" fill="rgb(215,56,38)" fg:x="12275" fg:w="32"/><text x="96.7592%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (32 samples, 0.25%)</title><rect x="96.5092%" y="805" width="0.2516%" height="15" fill="rgb(249,55,44)" fg:x="12275" fg:w="32"/><text x="96.7592%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (4 samples, 0.03%)</title><rect x="96.7293%" y="789" width="0.0314%" height="15" fill="rgb(220,221,32)" fg:x="12303" fg:w="4"/><text x="96.9793%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (4 samples, 0.03%)</title><rect x="96.7293%" y="773" width="0.0314%" height="15" fill="rgb(212,216,41)" fg:x="12303" fg:w="4"/><text x="96.9793%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.02%)</title><rect x="96.7450%" y="757" width="0.0157%" height="15" fill="rgb(228,213,43)" fg:x="12305" fg:w="2"/><text x="96.9950%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.02%)</title><rect x="96.7450%" y="741" width="0.0157%" height="15" fill="rgb(211,31,26)" fg:x="12305" fg:w="2"/><text x="96.9950%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="96.7608%" y="789" width="0.0157%" height="15" fill="rgb(229,202,19)" fg:x="12307" fg:w="2"/><text x="97.0108%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="96.7608%" y="837" width="0.0786%" height="15" fill="rgb(229,105,46)" fg:x="12307" fg:w="10"/><text x="97.0108%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="96.7608%" y="821" width="0.0786%" height="15" fill="rgb(235,108,1)" fg:x="12307" fg:w="10"/><text x="97.0108%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.08%)</title><rect x="96.7608%" y="805" width="0.0786%" height="15" fill="rgb(245,111,35)" fg:x="12307" fg:w="10"/><text x="97.0108%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.06%)</title><rect x="96.7765%" y="789" width="0.0629%" height="15" fill="rgb(219,185,31)" fg:x="12309" fg:w="8"/><text x="97.0265%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.02%)</title><rect x="96.8158%" y="773" width="0.0236%" height="15" fill="rgb(214,4,43)" fg:x="12314" fg:w="3"/><text x="97.0658%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="96.8394%" y="837" width="0.0157%" height="15" fill="rgb(235,227,40)" fg:x="12317" fg:w="2"/><text x="97.0894%" y="847.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.02%)</title><rect x="96.8394%" y="821" width="0.0157%" height="15" fill="rgb(230,88,30)" fg:x="12317" fg:w="2"/><text x="97.0894%" y="831.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="96.8394%" y="805" width="0.0157%" height="15" fill="rgb(216,217,1)" fg:x="12317" fg:w="2"/><text x="97.0894%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="96.8865%" y="725" width="0.0393%" height="15" fill="rgb(248,139,50)" fg:x="12323" fg:w="5"/><text x="97.1365%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="96.9101%" y="709" width="0.0157%" height="15" fill="rgb(233,1,21)" fg:x="12326" fg:w="2"/><text x="97.1601%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="96.8630%" y="741" width="0.0708%" height="15" fill="rgb(215,183,12)" fg:x="12320" fg:w="9"/><text x="97.1130%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.20%)</title><rect x="96.7608%" y="869" width="0.2044%" height="15" fill="rgb(229,104,42)" fg:x="12307" fg:w="26"/><text x="97.0108%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.20%)</title><rect x="96.7608%" y="853" width="0.2044%" height="15" fill="rgb(243,34,48)" fg:x="12307" fg:w="26"/><text x="97.0108%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.11%)</title><rect x="96.8551%" y="837" width="0.1101%" height="15" fill="rgb(239,11,44)" fg:x="12319" fg:w="14"/><text x="97.1051%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (14 samples, 0.11%)</title><rect x="96.8551%" y="821" width="0.1101%" height="15" fill="rgb(231,98,35)" fg:x="12319" fg:w="14"/><text x="97.1051%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (14 samples, 0.11%)</title><rect x="96.8551%" y="805" width="0.1101%" height="15" fill="rgb(233,28,25)" fg:x="12319" fg:w="14"/><text x="97.1051%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (14 samples, 0.11%)</title><rect x="96.8551%" y="789" width="0.1101%" height="15" fill="rgb(234,123,11)" fg:x="12319" fg:w="14"/><text x="97.1051%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (13 samples, 0.10%)</title><rect x="96.8630%" y="773" width="0.1022%" height="15" fill="rgb(220,69,3)" fg:x="12320" fg:w="13"/><text x="97.1130%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (13 samples, 0.10%)</title><rect x="96.8630%" y="757" width="0.1022%" height="15" fill="rgb(214,64,36)" fg:x="12320" fg:w="13"/><text x="97.1130%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.03%)</title><rect x="96.9337%" y="741" width="0.0314%" height="15" fill="rgb(211,138,32)" fg:x="12329" fg:w="4"/><text x="97.1837%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="96.9337%" y="725" width="0.0314%" height="15" fill="rgb(213,118,47)" fg:x="12329" fg:w="4"/><text x="97.1837%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="96.9730%" y="837" width="0.0157%" height="15" fill="rgb(243,124,49)" fg:x="12334" fg:w="2"/><text x="97.2230%" y="847.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="96.9730%" y="821" width="0.0157%" height="15" fill="rgb(221,30,28)" fg:x="12334" fg:w="2"/><text x="97.2230%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.02%)</title><rect x="96.9888%" y="837" width="0.0236%" height="15" fill="rgb(246,37,13)" fg:x="12336" fg:w="3"/><text x="97.2388%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.02%)</title><rect x="96.9966%" y="821" width="0.0157%" height="15" fill="rgb(249,66,14)" fg:x="12337" fg:w="2"/><text x="97.2466%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="96.9966%" y="805" width="0.0157%" height="15" fill="rgb(213,166,5)" fg:x="12337" fg:w="2"/><text x="97.2466%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as alloc::sync::ArcEqIdent&lt;T&gt;&gt;::eq (2 samples, 0.02%)</title><rect x="96.9966%" y="789" width="0.0157%" height="15" fill="rgb(221,66,24)" fg:x="12337" fg:w="2"/><text x="97.2466%" y="799.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::update_string_table_ids (82 samples, 0.64%)</title><rect x="96.3912%" y="933" width="0.6447%" height="15" fill="rgb(210,132,17)" fg:x="12260" fg:w="82"/><text x="96.6412%" y="943.50"></text></g><g><title>rust_xlsxwriter::shared_strings_table::SharedStringsTable::shared_string_index (75 samples, 0.59%)</title><rect x="96.4463%" y="917" width="0.5897%" height="15" fill="rgb(243,202,5)" fg:x="12267" fg:w="75"/><text x="96.6963%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (67 samples, 0.53%)</title><rect x="96.5092%" y="901" width="0.5268%" height="15" fill="rgb(233,70,48)" fg:x="12275" fg:w="67"/><text x="96.7592%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (67 samples, 0.53%)</title><rect x="96.5092%" y="885" width="0.5268%" height="15" fill="rgb(238,41,26)" fg:x="12275" fg:w="67"/><text x="96.7592%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.07%)</title><rect x="96.9652%" y="869" width="0.0708%" height="15" fill="rgb(241,19,31)" fg:x="12333" fg:w="9"/><text x="97.2152%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.06%)</title><rect x="96.9730%" y="853" width="0.0629%" height="15" fill="rgb(214,76,10)" fg:x="12334" fg:w="8"/><text x="97.2230%" y="863.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (490 samples, 3.85%)</title><rect x="93.1992%" y="949" width="3.8525%" height="15" fill="rgb(254,202,22)" fg:x="11854" fg:w="490"/><text x="93.4492%" y="959.50">rust..</text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish (2 samples, 0.02%)</title><rect x="97.0359%" y="933" width="0.0157%" height="15" fill="rgb(214,72,24)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finalize (2 samples, 0.02%)</title><rect x="97.0359%" y="917" width="0.0157%" height="15" fill="rgb(221,92,46)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="927.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="97.0359%" y="901" width="0.0157%" height="15" fill="rgb(246,13,50)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="911.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="97.0359%" y="885" width="0.0157%" height="15" fill="rgb(240,165,38)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="895.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="97.0359%" y="869" width="0.0157%" height="15" fill="rgb(241,24,51)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="879.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="97.0359%" y="853" width="0.0157%" height="15" fill="rgb(227,51,44)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="863.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="97.0359%" y="837" width="0.0157%" height="15" fill="rgb(231,121,3)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="847.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="97.0359%" y="821" width="0.0157%" height="15" fill="rgb(245,3,41)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="831.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="97.0359%" y="805" width="0.0157%" height="15" fill="rgb(214,13,26)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.02%)</title><rect x="97.0359%" y="789" width="0.0157%" height="15" fill="rgb(252,75,11)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.02%)</title><rect x="97.0359%" y="773" width="0.0157%" height="15" fill="rgb(218,226,17)" fg:x="12342" fg:w="2"/><text x="97.2859%" y="783.50"></text></g><g><title>excel_merge::search::SearchFiles::write_to_buffer (491 samples, 3.86%)</title><rect x="93.1992%" y="997" width="3.8604%" height="15" fill="rgb(248,89,38)" fg:x="11854" fg:w="491"/><text x="93.4492%" y="1007.50">exce..</text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_to_buffer (491 samples, 3.86%)</title><rect x="93.1992%" y="981" width="3.8604%" height="15" fill="rgb(237,73,46)" fg:x="11854" fg:w="491"/><text x="93.4492%" y="991.50">rust..</text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (491 samples, 3.86%)</title><rect x="93.1992%" y="965" width="3.8604%" height="15" fill="rgb(242,78,33)" fg:x="11854" fg:w="491"/><text x="93.4492%" y="975.50">rust..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="97.0595%" y="997" width="0.0157%" height="15" fill="rgb(235,60,3)" fg:x="12345" fg:w="2"/><text x="97.3095%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (6 samples, 0.05%)</title><rect x="97.0988%" y="965" width="0.0472%" height="15" fill="rgb(216,172,19)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="975.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io::{{closure}} (6 samples, 0.05%)</title><rect x="97.0988%" y="949" width="0.0472%" height="15" fill="rgb(227,6,42)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="959.50"></text></g><g><title>tracing_core::event::Event::dispatch (6 samples, 0.05%)</title><rect x="97.0988%" y="933" width="0.0472%" height="15" fill="rgb(223,207,42)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="943.50"></text></g><g><title>tracing_core::dispatcher::get_default (6 samples, 0.05%)</title><rect x="97.0988%" y="917" width="0.0472%" height="15" fill="rgb(246,138,30)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="927.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (6 samples, 0.05%)</title><rect x="97.0988%" y="901" width="0.0472%" height="15" fill="rgb(251,199,47)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="911.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (6 samples, 0.05%)</title><rect x="97.0988%" y="885" width="0.0472%" height="15" fill="rgb(228,218,44)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="895.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="97.0988%" y="869" width="0.0472%" height="15" fill="rgb(220,68,6)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="97.0988%" y="853" width="0.0472%" height="15" fill="rgb(240,60,26)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (6 samples, 0.05%)</title><rect x="97.0988%" y="837" width="0.0472%" height="15" fill="rgb(211,200,19)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (6 samples, 0.05%)</title><rect x="97.0988%" y="821" width="0.0472%" height="15" fill="rgb(242,145,30)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.05%)</title><rect x="97.0988%" y="805" width="0.0472%" height="15" fill="rgb(225,64,13)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.05%)</title><rect x="97.0988%" y="789" width="0.0472%" height="15" fill="rgb(218,103,35)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (6 samples, 0.05%)</title><rect x="97.0988%" y="773" width="0.0472%" height="15" fill="rgb(216,93,46)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="783.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (6 samples, 0.05%)</title><rect x="97.0988%" y="757" width="0.0472%" height="15" fill="rgb(225,159,27)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="767.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (6 samples, 0.05%)</title><rect x="97.0988%" y="741" width="0.0472%" height="15" fill="rgb(225,204,11)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (6 samples, 0.05%)</title><rect x="97.0988%" y="725" width="0.0472%" height="15" fill="rgb(205,56,4)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="735.50"></text></g><g><title>syscall (6 samples, 0.05%)</title><rect x="97.0988%" y="709" width="0.0472%" height="15" fill="rgb(206,6,35)" fg:x="12350" fg:w="6"/><text x="97.3488%" y="719.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (10 samples, 0.08%)</title><rect x="97.0831%" y="997" width="0.0786%" height="15" fill="rgb(247,73,52)" fg:x="12348" fg:w="10"/><text x="97.3331%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (9 samples, 0.07%)</title><rect x="97.0910%" y="981" width="0.0708%" height="15" fill="rgb(246,97,4)" fg:x="12349" fg:w="9"/><text x="97.3410%" y="991.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (2 samples, 0.02%)</title><rect x="97.1460%" y="965" width="0.0157%" height="15" fill="rgb(212,37,15)" fg:x="12356" fg:w="2"/><text x="97.3960%" y="975.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (3 samples, 0.02%)</title><rect x="97.1696%" y="997" width="0.0236%" height="15" fill="rgb(208,130,40)" fg:x="12359" fg:w="3"/><text x="97.4196%" y="1007.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (3 samples, 0.02%)</title><rect x="97.1696%" y="981" width="0.0236%" height="15" fill="rgb(236,55,29)" fg:x="12359" fg:w="3"/><text x="97.4196%" y="991.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (2 samples, 0.02%)</title><rect x="97.1775%" y="965" width="0.0157%" height="15" fill="rgb(209,156,45)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="975.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head::{{closure}} (2 samples, 0.02%)</title><rect x="97.1775%" y="949" width="0.0157%" height="15" fill="rgb(249,107,4)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="959.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="97.1775%" y="933" width="0.0157%" height="15" fill="rgb(227,7,13)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="943.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="97.1775%" y="917" width="0.0157%" height="15" fill="rgb(250,129,14)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="927.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="97.1775%" y="901" width="0.0157%" height="15" fill="rgb(229,92,13)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="911.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="97.1775%" y="885" width="0.0157%" height="15" fill="rgb(245,98,39)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="895.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.1775%" y="869" width="0.0157%" height="15" fill="rgb(234,135,48)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.1775%" y="853" width="0.0157%" height="15" fill="rgb(230,98,28)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.1775%" y="837" width="0.0157%" height="15" fill="rgb(223,121,0)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="97.1775%" y="821" width="0.0157%" height="15" fill="rgb(234,173,33)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="97.1775%" y="805" width="0.0157%" height="15" fill="rgb(245,47,8)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.1775%" y="789" width="0.0157%" height="15" fill="rgb(205,17,20)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="97.1775%" y="773" width="0.0157%" height="15" fill="rgb(232,151,16)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="783.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.1775%" y="757" width="0.0157%" height="15" fill="rgb(208,30,32)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="767.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.1775%" y="741" width="0.0157%" height="15" fill="rgb(254,26,3)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="751.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.1775%" y="725" width="0.0157%" height="15" fill="rgb(240,177,30)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="97.1775%" y="709" width="0.0157%" height="15" fill="rgb(248,76,44)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="719.50"></text></g><g><title>__GI___write (2 samples, 0.02%)</title><rect x="97.1775%" y="693" width="0.0157%" height="15" fill="rgb(241,186,54)" fg:x="12360" fg:w="2"/><text x="97.4275%" y="703.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body (3 samples, 0.02%)</title><rect x="97.2010%" y="981" width="0.0236%" height="15" fill="rgb(249,171,29)" fg:x="12363" fg:w="3"/><text x="97.4510%" y="991.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::buffer (2 samples, 0.02%)</title><rect x="97.2089%" y="965" width="0.0157%" height="15" fill="rgb(237,151,44)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="975.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (2 samples, 0.02%)</title><rect x="97.2089%" y="949" width="0.0157%" height="15" fill="rgb(228,174,30)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="959.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer::{{closure}} (2 samples, 0.02%)</title><rect x="97.2089%" y="933" width="0.0157%" height="15" fill="rgb(252,14,37)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="943.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="97.2089%" y="917" width="0.0157%" height="15" fill="rgb(207,111,40)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="927.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="97.2089%" y="901" width="0.0157%" height="15" fill="rgb(248,171,54)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="911.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="97.2089%" y="885" width="0.0157%" height="15" fill="rgb(211,127,2)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="895.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="97.2089%" y="869" width="0.0157%" height="15" fill="rgb(236,87,47)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2089%" y="853" width="0.0157%" height="15" fill="rgb(223,190,45)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2089%" y="837" width="0.0157%" height="15" fill="rgb(215,5,16)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2089%" y="821" width="0.0157%" height="15" fill="rgb(252,82,33)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="97.2089%" y="805" width="0.0157%" height="15" fill="rgb(247,213,44)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="97.2089%" y="789" width="0.0157%" height="15" fill="rgb(205,196,44)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.2089%" y="773" width="0.0157%" height="15" fill="rgb(237,96,54)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="783.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="97.2089%" y="757" width="0.0157%" height="15" fill="rgb(230,113,34)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.02%)</title><rect x="97.2089%" y="741" width="0.0157%" height="15" fill="rgb(221,224,12)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::FmtContext&lt;S,N&gt; as tracing_subscriber::fmt::format::FormatFields&gt;::format_fields (2 samples, 0.02%)</title><rect x="97.2089%" y="725" width="0.0157%" height="15" fill="rgb(219,112,44)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="735.50"></text></g><g><title>&lt;M as tracing_subscriber::fmt::format::FormatFields&gt;::format_fields (2 samples, 0.02%)</title><rect x="97.2089%" y="709" width="0.0157%" height="15" fill="rgb(210,31,13)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="719.50"></text></g><g><title>&lt;&amp;F as tracing_subscriber::field::RecordFields&gt;::record (2 samples, 0.02%)</title><rect x="97.2089%" y="693" width="0.0157%" height="15" fill="rgb(230,25,16)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="703.50"></text></g><g><title>&lt;tracing_core::event::Event as tracing_subscriber::field::RecordFields&gt;::record (2 samples, 0.02%)</title><rect x="97.2089%" y="677" width="0.0157%" height="15" fill="rgb(246,108,53)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="687.50"></text></g><g><title>tracing_core::event::Event::record (2 samples, 0.02%)</title><rect x="97.2089%" y="661" width="0.0157%" height="15" fill="rgb(241,172,50)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="671.50"></text></g><g><title>tracing_core::field::ValueSet::record (2 samples, 0.02%)</title><rect x="97.2089%" y="645" width="0.0157%" height="15" fill="rgb(235,141,10)" fg:x="12364" fg:w="2"/><text x="97.4589%" y="655.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (2 samples, 0.02%)</title><rect x="97.2246%" y="933" width="0.0157%" height="15" fill="rgb(220,174,43)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="943.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode::{{closure}} (2 samples, 0.02%)</title><rect x="97.2246%" y="917" width="0.0157%" height="15" fill="rgb(215,181,40)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="927.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="97.2246%" y="901" width="0.0157%" height="15" fill="rgb(230,97,2)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="911.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="97.2246%" y="885" width="0.0157%" height="15" fill="rgb(211,25,27)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="895.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="97.2246%" y="869" width="0.0157%" height="15" fill="rgb(230,87,26)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="879.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="97.2246%" y="853" width="0.0157%" height="15" fill="rgb(227,160,17)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2246%" y="837" width="0.0157%" height="15" fill="rgb(244,85,34)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="847.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2246%" y="821" width="0.0157%" height="15" fill="rgb(207,70,0)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="831.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2246%" y="805" width="0.0157%" height="15" fill="rgb(223,129,7)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="97.2246%" y="789" width="0.0157%" height="15" fill="rgb(246,105,7)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="97.2246%" y="773" width="0.0157%" height="15" fill="rgb(215,154,42)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.2246%" y="757" width="0.0157%" height="15" fill="rgb(220,215,30)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="767.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="97.2246%" y="741" width="0.0157%" height="15" fill="rgb(228,81,51)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.02%)</title><rect x="97.2246%" y="725" width="0.0157%" height="15" fill="rgb(247,71,54)" fg:x="12366" fg:w="2"/><text x="97.4746%" y="735.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (3 samples, 0.02%)</title><rect x="97.2246%" y="981" width="0.0236%" height="15" fill="rgb(234,176,34)" fg:x="12366" fg:w="3"/><text x="97.4746%" y="991.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (3 samples, 0.02%)</title><rect x="97.2246%" y="965" width="0.0236%" height="15" fill="rgb(241,103,54)" fg:x="12366" fg:w="3"/><text x="97.4746%" y="975.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (3 samples, 0.02%)</title><rect x="97.2246%" y="949" width="0.0236%" height="15" fill="rgb(228,22,34)" fg:x="12366" fg:w="3"/><text x="97.4746%" y="959.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (8 samples, 0.06%)</title><rect x="97.1932%" y="997" width="0.0629%" height="15" fill="rgb(241,179,48)" fg:x="12362" fg:w="8"/><text x="97.4432%" y="1007.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 0.02%)</title><rect x="97.2639%" y="981" width="0.0157%" height="15" fill="rgb(235,167,37)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="991.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io::{{closure}} (2 samples, 0.02%)</title><rect x="97.2639%" y="965" width="0.0157%" height="15" fill="rgb(213,109,30)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="975.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="97.2639%" y="949" width="0.0157%" height="15" fill="rgb(222,172,16)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="959.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="97.2639%" y="933" width="0.0157%" height="15" fill="rgb(233,192,5)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="943.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="97.2639%" y="917" width="0.0157%" height="15" fill="rgb(247,189,41)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="927.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="97.2639%" y="901" width="0.0157%" height="15" fill="rgb(218,134,47)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="911.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2639%" y="885" width="0.0157%" height="15" fill="rgb(216,29,3)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="895.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2639%" y="869" width="0.0157%" height="15" fill="rgb(246,140,12)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.2639%" y="853" width="0.0157%" height="15" fill="rgb(230,136,11)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="97.2639%" y="837" width="0.0157%" height="15" fill="rgb(247,22,47)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="97.2639%" y="821" width="0.0157%" height="15" fill="rgb(218,84,22)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.2639%" y="805" width="0.0157%" height="15" fill="rgb(216,87,39)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="815.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="97.2639%" y="789" width="0.0157%" height="15" fill="rgb(221,178,8)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="799.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.02%)</title><rect x="97.2639%" y="773" width="0.0157%" height="15" fill="rgb(230,42,11)" fg:x="12371" fg:w="2"/><text x="97.5139%" y="783.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (3 samples, 0.02%)</title><rect x="97.2639%" y="997" width="0.0236%" height="15" fill="rgb(237,229,4)" fg:x="12371" fg:w="3"/><text x="97.5139%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="97.2954%" y="741" width="0.0157%" height="15" fill="rgb(222,31,33)" fg:x="12375" fg:w="2"/><text x="97.5454%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="97.2954%" y="725" width="0.0157%" height="15" fill="rgb(210,17,39)" fg:x="12375" fg:w="2"/><text x="97.5454%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="97.2954%" y="709" width="0.0157%" height="15" fill="rgb(244,93,20)" fg:x="12375" fg:w="2"/><text x="97.5454%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="97.2954%" y="693" width="0.0157%" height="15" fill="rgb(210,40,47)" fg:x="12375" fg:w="2"/><text x="97.5454%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="97.2954%" y="677" width="0.0157%" height="15" fill="rgb(239,211,47)" fg:x="12375" fg:w="2"/><text x="97.5454%" y="687.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (11 samples, 0.09%)</title><rect x="97.2875%" y="997" width="0.0865%" height="15" fill="rgb(251,223,49)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="1007.50"></text></g><g><title>tracing::span::Span::new (11 samples, 0.09%)</title><rect x="97.2875%" y="981" width="0.0865%" height="15" fill="rgb(221,149,5)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="991.50"></text></g><g><title>tracing_core::dispatcher::get_default (11 samples, 0.09%)</title><rect x="97.2875%" y="965" width="0.0865%" height="15" fill="rgb(219,224,51)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="975.50"></text></g><g><title>tracing::span::Span::new::{{closure}} (11 samples, 0.09%)</title><rect x="97.2875%" y="949" width="0.0865%" height="15" fill="rgb(223,7,8)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="959.50"></text></g><g><title>tracing::span::Span::new_with (11 samples, 0.09%)</title><rect x="97.2875%" y="933" width="0.0865%" height="15" fill="rgb(241,217,22)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="943.50"></text></g><g><title>tracing::span::Span::make_with (11 samples, 0.09%)</title><rect x="97.2875%" y="917" width="0.0865%" height="15" fill="rgb(248,209,0)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="927.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new_span (11 samples, 0.09%)</title><rect x="97.2875%" y="901" width="0.0865%" height="15" fill="rgb(217,205,4)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="911.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (11 samples, 0.09%)</title><rect x="97.2875%" y="885" width="0.0865%" height="15" fill="rgb(228,124,39)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="895.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (11 samples, 0.09%)</title><rect x="97.2875%" y="869" width="0.0865%" height="15" fill="rgb(250,116,42)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="879.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (11 samples, 0.09%)</title><rect x="97.2875%" y="853" width="0.0865%" height="15" fill="rgb(223,202,9)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="863.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (11 samples, 0.09%)</title><rect x="97.2875%" y="837" width="0.0865%" height="15" fill="rgb(242,222,40)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="847.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::create_with (11 samples, 0.09%)</title><rect x="97.2875%" y="821" width="0.0865%" height="15" fill="rgb(229,99,46)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="831.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::create (11 samples, 0.09%)</title><rect x="97.2875%" y="805" width="0.0865%" height="15" fill="rgb(225,56,46)" fg:x="12374" fg:w="11"/><text x="97.5375%" y="815.50"></text></g><g><title>sharded_slab::shard::Shard&lt;T,C&gt;::init_with (10 samples, 0.08%)</title><rect x="97.2954%" y="789" width="0.0786%" height="15" fill="rgb(227,94,5)" fg:x="12375" fg:w="10"/><text x="97.5454%" y="799.50"></text></g><g><title>sharded_slab::page::Shared&lt;T,C&gt;::init_with (10 samples, 0.08%)</title><rect x="97.2954%" y="773" width="0.0786%" height="15" fill="rgb(205,112,38)" fg:x="12375" fg:w="10"/><text x="97.5454%" y="783.50"></text></g><g><title>sharded_slab::page::Shared&lt;T,C&gt;::allocate (10 samples, 0.08%)</title><rect x="97.2954%" y="757" width="0.0786%" height="15" fill="rgb(231,133,46)" fg:x="12375" fg:w="10"/><text x="97.5454%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.06%)</title><rect x="97.3111%" y="741" width="0.0629%" height="15" fill="rgb(217,16,9)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.06%)</title><rect x="97.3111%" y="725" width="0.0629%" height="15" fill="rgb(249,173,9)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.06%)</title><rect x="97.3111%" y="709" width="0.0629%" height="15" fill="rgb(205,163,53)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.06%)</title><rect x="97.3111%" y="693" width="0.0629%" height="15" fill="rgb(217,54,41)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.06%)</title><rect x="97.3111%" y="677" width="0.0629%" height="15" fill="rgb(228,216,12)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.06%)</title><rect x="97.3111%" y="661" width="0.0629%" height="15" fill="rgb(244,228,15)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="671.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.06%)</title><rect x="97.3111%" y="645" width="0.0629%" height="15" fill="rgb(221,176,53)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="655.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.06%)</title><rect x="97.3111%" y="629" width="0.0629%" height="15" fill="rgb(205,94,34)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="639.50"></text></g><g><title>_int_malloc (8 samples, 0.06%)</title><rect x="97.3111%" y="613" width="0.0629%" height="15" fill="rgb(213,110,48)" fg:x="12377" fg:w="8"/><text x="97.5611%" y="623.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2 samples, 0.02%)</title><rect x="97.3819%" y="997" width="0.0157%" height="15" fill="rgb(236,142,28)" fg:x="12386" fg:w="2"/><text x="97.6319%" y="1007.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (2 samples, 0.02%)</title><rect x="97.4369%" y="997" width="0.0157%" height="15" fill="rgb(225,135,29)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="1007.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (2 samples, 0.02%)</title><rect x="97.4369%" y="981" width="0.0157%" height="15" fill="rgb(252,45,31)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="991.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_core_file (2 samples, 0.02%)</title><rect x="97.4369%" y="965" width="0.0157%" height="15" fill="rgb(211,187,50)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="975.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_file (2 samples, 0.02%)</title><rect x="97.4369%" y="949" width="0.0157%" height="15" fill="rgb(229,109,7)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="959.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::start_entry (2 samples, 0.02%)</title><rect x="97.4369%" y="933" width="0.0157%" height="15" fill="rgb(251,131,51)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="943.50"></text></g><g><title>zip::write::&lt;impl zip::write::zip_writer::ZipWriter&lt;W&gt;&gt;::finish_file (2 samples, 0.02%)</title><rect x="97.4369%" y="917" width="0.0157%" height="15" fill="rgb(251,180,35)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="927.50"></text></g><g><title>zip::write::GenericZipWriter&lt;W&gt;::switch_to (2 samples, 0.02%)</title><rect x="97.4369%" y="901" width="0.0157%" height="15" fill="rgb(211,46,32)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="911.50"></text></g><g><title>flate2::deflate::write::DeflateEncoder&lt;W&gt;::finish (2 samples, 0.02%)</title><rect x="97.4369%" y="885" width="0.0157%" height="15" fill="rgb(248,123,17)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="895.50"></text></g><g><title>flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.02%)</title><rect x="97.4369%" y="869" width="0.0157%" height="15" fill="rgb(227,141,18)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="879.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.02%)</title><rect x="97.4369%" y="853" width="0.0157%" height="15" fill="rgb(216,102,9)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="863.50"></text></g><g><title>flate2::mem::Compress::compress_vec (2 samples, 0.02%)</title><rect x="97.4369%" y="837" width="0.0157%" height="15" fill="rgb(253,47,13)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="847.50"></text></g><g><title>flate2::mem::write_to_spare_capacity_of_vec (2 samples, 0.02%)</title><rect x="97.4369%" y="821" width="0.0157%" height="15" fill="rgb(226,93,23)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="831.50"></text></g><g><title>flate2::mem::Compress::compress_vec::{{closure}} (2 samples, 0.02%)</title><rect x="97.4369%" y="805" width="0.0157%" height="15" fill="rgb(247,104,17)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="815.50"></text></g><g><title>flate2::mem::Compress::compress (2 samples, 0.02%)</title><rect x="97.4369%" y="789" width="0.0157%" height="15" fill="rgb(233,203,26)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="799.50"></text></g><g><title>&lt;flate2::ffi::c::Deflate as flate2::ffi::DeflateBackend&gt;::compress (2 samples, 0.02%)</title><rect x="97.4369%" y="773" width="0.0157%" height="15" fill="rgb(244,98,49)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="783.50"></text></g><g><title>deflate (2 samples, 0.02%)</title><rect x="97.4369%" y="757" width="0.0157%" height="15" fill="rgb(235,134,22)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="767.50"></text></g><g><title>deflate_slow (2 samples, 0.02%)</title><rect x="97.4369%" y="741" width="0.0157%" height="15" fill="rgb(221,70,32)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="751.50"></text></g><g><title>_tr_flush_block (2 samples, 0.02%)</title><rect x="97.4369%" y="725" width="0.0157%" height="15" fill="rgb(238,15,50)" fg:x="12393" fg:w="2"/><text x="97.6869%" y="735.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::write_shared_strings_file (2 samples, 0.02%)</title><rect x="97.4605%" y="949" width="0.0157%" height="15" fill="rgb(215,221,48)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="959.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::assemble_xml_file (2 samples, 0.02%)</title><rect x="97.4605%" y="933" width="0.0157%" height="15" fill="rgb(236,73,3)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="943.50"></text></g><g><title>rust_xlsxwriter::shared_strings::SharedStrings::write_sst_strings (2 samples, 0.02%)</title><rect x="97.4605%" y="917" width="0.0157%" height="15" fill="rgb(250,107,11)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="927.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_si_element (2 samples, 0.02%)</title><rect x="97.4605%" y="901" width="0.0157%" height="15" fill="rgb(242,39,14)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="911.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_xml_escapes (2 samples, 0.02%)</title><rect x="97.4605%" y="885" width="0.0157%" height="15" fill="rgb(248,164,37)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="895.50"></text></g><g><title>regex::regex::string::Regex::replace_all (2 samples, 0.02%)</title><rect x="97.4605%" y="869" width="0.0157%" height="15" fill="rgb(217,60,12)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="879.50"></text></g><g><title>regex::regex::string::Regex::replacen (2 samples, 0.02%)</title><rect x="97.4605%" y="853" width="0.0157%" height="15" fill="rgb(240,125,29)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="863.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 0.02%)</title><rect x="97.4605%" y="837" width="0.0157%" height="15" fill="rgb(208,207,28)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2 samples, 0.02%)</title><rect x="97.4605%" y="821" width="0.0157%" height="15" fill="rgb(209,159,27)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="831.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (2 samples, 0.02%)</title><rect x="97.4605%" y="805" width="0.0157%" height="15" fill="rgb(251,176,53)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.4605%" y="789" width="0.0157%" height="15" fill="rgb(211,85,7)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="799.50"></text></g><g><title>&lt;regex::regex::string::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.4605%" y="773" width="0.0157%" height="15" fill="rgb(216,64,54)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="783.50"></text></g><g><title>&lt;regex_automata::meta::regex::CapturesMatches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.4605%" y="757" width="0.0157%" height="15" fill="rgb(217,54,24)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="767.50"></text></g><g><title>regex_automata::util::iter::Searcher::advance (2 samples, 0.02%)</title><rect x="97.4605%" y="741" width="0.0157%" height="15" fill="rgb(208,206,53)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="751.50"></text></g><g><title>regex_automata::util::iter::Searcher::try_advance (2 samples, 0.02%)</title><rect x="97.4605%" y="725" width="0.0157%" height="15" fill="rgb(251,74,39)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="735.50"></text></g><g><title>&lt;regex_automata::meta::regex::CapturesMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.02%)</title><rect x="97.4605%" y="709" width="0.0157%" height="15" fill="rgb(226,47,5)" fg:x="12396" fg:w="2"/><text x="97.7105%" y="719.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_to_buffer (4 samples, 0.03%)</title><rect x="97.4526%" y="997" width="0.0314%" height="15" fill="rgb(234,111,33)" fg:x="12395" fg:w="4"/><text x="97.7026%" y="1007.50"></text></g><g><title>rust_xlsxwriter::workbook::Workbook::save_internal (4 samples, 0.03%)</title><rect x="97.4526%" y="981" width="0.0314%" height="15" fill="rgb(251,14,10)" fg:x="12395" fg:w="4"/><text x="97.7026%" y="991.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file (4 samples, 0.03%)</title><rect x="97.4526%" y="965" width="0.0314%" height="15" fill="rgb(232,43,0)" fg:x="12395" fg:w="4"/><text x="97.7026%" y="975.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.02%)</title><rect x="97.5391%" y="997" width="0.0157%" height="15" fill="rgb(222,68,43)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="1007.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.02%)</title><rect x="97.5391%" y="981" width="0.0157%" height="15" fill="rgb(217,24,23)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="991.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (2 samples, 0.02%)</title><rect x="97.5391%" y="965" width="0.0157%" height="15" fill="rgb(229,209,14)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="975.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.5391%" y="949" width="0.0157%" height="15" fill="rgb(250,149,48)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="959.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.5391%" y="933" width="0.0157%" height="15" fill="rgb(210,120,37)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="943.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.5391%" y="917" width="0.0157%" height="15" fill="rgb(210,21,8)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="927.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.5391%" y="901" width="0.0157%" height="15" fill="rgb(243,145,7)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="911.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2 samples, 0.02%)</title><rect x="97.5391%" y="885" width="0.0157%" height="15" fill="rgb(238,178,32)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="895.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (2 samples, 0.02%)</title><rect x="97.5391%" y="869" width="0.0157%" height="15" fill="rgb(222,4,10)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="879.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (2 samples, 0.02%)</title><rect x="97.5391%" y="853" width="0.0157%" height="15" fill="rgb(239,7,37)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="863.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 0.02%)</title><rect x="97.5391%" y="837" width="0.0157%" height="15" fill="rgb(215,31,37)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="847.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 0.02%)</title><rect x="97.5391%" y="821" width="0.0157%" height="15" fill="rgb(224,83,33)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="831.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush::{{closure}} (2 samples, 0.02%)</title><rect x="97.5391%" y="805" width="0.0157%" height="15" fill="rgb(239,55,3)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="815.50"></text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.02%)</title><rect x="97.5391%" y="789" width="0.0157%" height="15" fill="rgb(247,92,11)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="799.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.02%)</title><rect x="97.5391%" y="773" width="0.0157%" height="15" fill="rgb(239,200,7)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="783.50"></text></g><g><title>tracing_core::event::Event::dispatch::{{closure}} (2 samples, 0.02%)</title><rect x="97.5391%" y="757" width="0.0157%" height="15" fill="rgb(227,115,8)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="767.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::event (2 samples, 0.02%)</title><rect x="97.5391%" y="741" width="0.0157%" height="15" fill="rgb(215,189,27)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="751.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.5391%" y="725" width="0.0157%" height="15" fill="rgb(251,216,39)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="735.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.5391%" y="709" width="0.0157%" height="15" fill="rgb(207,29,47)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="719.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.02%)</title><rect x="97.5391%" y="693" width="0.0157%" height="15" fill="rgb(210,71,34)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="703.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 0.02%)</title><rect x="97.5391%" y="677" width="0.0157%" height="15" fill="rgb(253,217,51)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="97.5391%" y="661" width="0.0157%" height="15" fill="rgb(222,117,46)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="97.5391%" y="645" width="0.0157%" height="15" fill="rgb(226,132,6)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="655.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::{{closure}} (2 samples, 0.02%)</title><rect x="97.5391%" y="629" width="0.0157%" height="15" fill="rgb(254,145,51)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="639.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.5391%" y="613" width="0.0157%" height="15" fill="rgb(231,199,27)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="623.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.5391%" y="597" width="0.0157%" height="15" fill="rgb(245,158,14)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="607.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="97.5391%" y="581" width="0.0157%" height="15" fill="rgb(240,113,14)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="97.5391%" y="565" width="0.0157%" height="15" fill="rgb(210,20,13)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="575.50"></text></g><g><title>__GI___write (2 samples, 0.02%)</title><rect x="97.5391%" y="549" width="0.0157%" height="15" fill="rgb(241,144,13)" fg:x="12406" fg:w="2"/><text x="97.7891%" y="559.50"></text></g><g><title>[unknown] (11,824 samples, 92.96%)</title><rect x="4.5994%" y="1013" width="92.9633%" height="15" fill="rgb(235,43,34)" fg:x="585" fg:w="11824"/><text x="4.8494%" y="1023.50">[unknown]</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (2 samples, 0.02%)</title><rect x="97.6099%" y="677" width="0.0157%" height="15" fill="rgb(208,36,20)" fg:x="12415" fg:w="2"/><text x="97.8599%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.02%)</title><rect x="97.6099%" y="661" width="0.0157%" height="15" fill="rgb(239,204,10)" fg:x="12415" fg:w="2"/><text x="97.8599%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (4 samples, 0.03%)</title><rect x="97.6020%" y="725" width="0.0314%" height="15" fill="rgb(217,84,43)" fg:x="12414" fg:w="4"/><text x="97.8520%" y="735.50"></text></g><g><title>alloc::collections::btree::mem::replace (4 samples, 0.03%)</title><rect x="97.6020%" y="709" width="0.0314%" height="15" fill="rgb(241,170,50)" fg:x="12414" fg:w="4"/><text x="97.8520%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (4 samples, 0.03%)</title><rect x="97.6020%" y="693" width="0.0314%" height="15" fill="rgb(226,205,29)" fg:x="12414" fg:w="4"/><text x="97.8520%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="97.6020%" y="757" width="0.0393%" height="15" fill="rgb(233,113,1)" fg:x="12414" fg:w="5"/><text x="97.8520%" y="767.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (5 samples, 0.04%)</title><rect x="97.6020%" y="741" width="0.0393%" height="15" fill="rgb(253,98,13)" fg:x="12414" fg:w="5"/><text x="97.8520%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.6570%" y="693" width="0.0157%" height="15" fill="rgb(211,115,12)" fg:x="12421" fg:w="2"/><text x="97.9070%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (6 samples, 0.05%)</title><rect x="97.6413%" y="757" width="0.0472%" height="15" fill="rgb(208,12,16)" fg:x="12419" fg:w="6"/><text x="97.8913%" y="767.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.05%)</title><rect x="97.6413%" y="741" width="0.0472%" height="15" fill="rgb(237,193,54)" fg:x="12419" fg:w="6"/><text x="97.8913%" y="751.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (5 samples, 0.04%)</title><rect x="97.6492%" y="725" width="0.0393%" height="15" fill="rgb(243,22,42)" fg:x="12420" fg:w="5"/><text x="97.8992%" y="735.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.03%)</title><rect x="97.6570%" y="709" width="0.0314%" height="15" fill="rgb(233,151,36)" fg:x="12421" fg:w="4"/><text x="97.9070%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (2 samples, 0.02%)</title><rect x="97.7042%" y="645" width="0.0157%" height="15" fill="rgb(237,57,45)" fg:x="12427" fg:w="2"/><text x="97.9542%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="97.6885%" y="725" width="0.0393%" height="15" fill="rgb(221,88,17)" fg:x="12425" fg:w="5"/><text x="97.9385%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (4 samples, 0.03%)</title><rect x="97.6964%" y="709" width="0.0314%" height="15" fill="rgb(230,79,15)" fg:x="12426" fg:w="4"/><text x="97.9464%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (4 samples, 0.03%)</title><rect x="97.6964%" y="693" width="0.0314%" height="15" fill="rgb(213,57,13)" fg:x="12426" fg:w="4"/><text x="97.9464%" y="703.50"></text></g><g><title>alloc::collections::btree::mem::replace (4 samples, 0.03%)</title><rect x="97.6964%" y="677" width="0.0314%" height="15" fill="rgb(222,116,39)" fg:x="12426" fg:w="4"/><text x="97.9464%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (3 samples, 0.02%)</title><rect x="97.7042%" y="661" width="0.0236%" height="15" fill="rgb(245,107,2)" fg:x="12427" fg:w="3"/><text x="97.9542%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="97.6885%" y="741" width="0.0472%" height="15" fill="rgb(238,1,10)" fg:x="12425" fg:w="6"/><text x="97.9385%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (4 samples, 0.03%)</title><rect x="97.7357%" y="741" width="0.0314%" height="15" fill="rgb(249,4,48)" fg:x="12431" fg:w="4"/><text x="97.9857%" y="751.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.03%)</title><rect x="97.7357%" y="725" width="0.0314%" height="15" fill="rgb(223,151,18)" fg:x="12431" fg:w="4"/><text x="97.9857%" y="735.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.03%)</title><rect x="97.7357%" y="709" width="0.0314%" height="15" fill="rgb(227,65,43)" fg:x="12431" fg:w="4"/><text x="97.9857%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.03%)</title><rect x="97.7357%" y="693" width="0.0314%" height="15" fill="rgb(218,40,45)" fg:x="12431" fg:w="4"/><text x="97.9857%" y="703.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::calculate_spans (11 samples, 0.09%)</title><rect x="97.6885%" y="757" width="0.0865%" height="15" fill="rgb(252,121,31)" fg:x="12425" fg:w="11"/><text x="97.9385%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="97.7828%" y="661" width="0.0157%" height="15" fill="rgb(219,158,43)" fg:x="12437" fg:w="2"/><text x="98.0328%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="97.7828%" y="645" width="0.0157%" height="15" fill="rgb(231,162,42)" fg:x="12437" fg:w="2"/><text x="98.0328%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.02%)</title><rect x="97.7828%" y="629" width="0.0157%" height="15" fill="rgb(217,179,25)" fg:x="12437" fg:w="2"/><text x="98.0328%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.02%)</title><rect x="97.7828%" y="613" width="0.0157%" height="15" fill="rgb(206,212,31)" fg:x="12437" fg:w="2"/><text x="98.0328%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.02%)</title><rect x="97.7986%" y="661" width="0.0236%" height="15" fill="rgb(235,144,12)" fg:x="12439" fg:w="3"/><text x="98.0486%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.02%)</title><rect x="97.7986%" y="645" width="0.0236%" height="15" fill="rgb(213,51,10)" fg:x="12439" fg:w="3"/><text x="98.0486%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.02%)</title><rect x="97.8064%" y="629" width="0.0157%" height="15" fill="rgb(231,145,14)" fg:x="12440" fg:w="2"/><text x="98.0564%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.05%)</title><rect x="97.7828%" y="693" width="0.0472%" height="15" fill="rgb(235,15,28)" fg:x="12437" fg:w="6"/><text x="98.0328%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.05%)</title><rect x="97.7828%" y="677" width="0.0472%" height="15" fill="rgb(237,206,10)" fg:x="12437" fg:w="6"/><text x="98.0328%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.8457%" y="645" width="0.0157%" height="15" fill="rgb(236,227,27)" fg:x="12445" fg:w="2"/><text x="98.0957%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.02%)</title><rect x="97.8457%" y="629" width="0.0157%" height="15" fill="rgb(246,83,35)" fg:x="12445" fg:w="2"/><text x="98.0957%" y="639.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::get_cell_xf_index (13 samples, 0.10%)</title><rect x="97.7750%" y="757" width="0.1022%" height="15" fill="rgb(220,136,24)" fg:x="12436" fg:w="13"/><text x="98.0250%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (12 samples, 0.09%)</title><rect x="97.7828%" y="741" width="0.0943%" height="15" fill="rgb(217,3,25)" fg:x="12437" fg:w="12"/><text x="98.0328%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (12 samples, 0.09%)</title><rect x="97.7828%" y="725" width="0.0943%" height="15" fill="rgb(239,24,14)" fg:x="12437" fg:w="12"/><text x="98.0328%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 0.09%)</title><rect x="97.7828%" y="709" width="0.0943%" height="15" fill="rgb(244,16,53)" fg:x="12437" fg:w="12"/><text x="98.0328%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 0.05%)</title><rect x="97.8300%" y="693" width="0.0472%" height="15" fill="rgb(208,175,44)" fg:x="12443" fg:w="6"/><text x="98.0800%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="97.8379%" y="677" width="0.0393%" height="15" fill="rgb(252,18,48)" fg:x="12444" fg:w="5"/><text x="98.0879%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.03%)</title><rect x="97.8457%" y="661" width="0.0314%" height="15" fill="rgb(234,199,32)" fg:x="12445" fg:w="4"/><text x="98.0957%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.02%)</title><rect x="97.8615%" y="645" width="0.0157%" height="15" fill="rgb(225,77,54)" fg:x="12447" fg:w="2"/><text x="98.1115%" y="655.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::col_to_name (5 samples, 0.04%)</title><rect x="97.8851%" y="741" width="0.0393%" height="15" fill="rgb(225,42,25)" fg:x="12450" fg:w="5"/><text x="98.1351%" y="751.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (5 samples, 0.04%)</title><rect x="97.8851%" y="725" width="0.0393%" height="15" fill="rgb(242,227,46)" fg:x="12450" fg:w="5"/><text x="98.1351%" y="735.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (5 samples, 0.04%)</title><rect x="97.8851%" y="709" width="0.0393%" height="15" fill="rgb(246,197,35)" fg:x="12450" fg:w="5"/><text x="98.1351%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (5 samples, 0.04%)</title><rect x="97.8851%" y="693" width="0.0393%" height="15" fill="rgb(215,159,26)" fg:x="12450" fg:w="5"/><text x="98.1351%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.02%)</title><rect x="97.9086%" y="677" width="0.0157%" height="15" fill="rgb(212,194,50)" fg:x="12453" fg:w="2"/><text x="98.1586%" y="687.50"></text></g><g><title>std::io::cursor::reserve_and_pad (2 samples, 0.02%)</title><rect x="98.0187%" y="645" width="0.0157%" height="15" fill="rgb(246,132,1)" fg:x="12467" fg:w="2"/><text x="98.2687%" y="655.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (8 samples, 0.06%)</title><rect x="97.9951%" y="677" width="0.0629%" height="15" fill="rgb(217,71,7)" fg:x="12464" fg:w="8"/><text x="98.2451%" y="687.50"></text></g><g><title>std::io::cursor::vec_write (8 samples, 0.06%)</title><rect x="97.9951%" y="661" width="0.0629%" height="15" fill="rgb(252,59,32)" fg:x="12464" fg:w="8"/><text x="98.2451%" y="671.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (3 samples, 0.02%)</title><rect x="98.0344%" y="645" width="0.0236%" height="15" fill="rgb(253,204,25)" fg:x="12469" fg:w="3"/><text x="98.2844%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (2 samples, 0.02%)</title><rect x="98.0423%" y="629" width="0.0157%" height="15" fill="rgb(232,21,16)" fg:x="12470" fg:w="2"/><text x="98.2923%" y="639.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.02%)</title><rect x="98.0423%" y="613" width="0.0157%" height="15" fill="rgb(248,90,29)" fg:x="12470" fg:w="2"/><text x="98.2923%" y="623.50"></text></g><g><title>__memmove_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="98.0423%" y="597" width="0.0157%" height="15" fill="rgb(249,223,7)" fg:x="12470" fg:w="2"/><text x="98.2923%" y="607.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (16 samples, 0.13%)</title><rect x="97.9637%" y="709" width="0.1258%" height="15" fill="rgb(231,119,42)" fg:x="12460" fg:w="16"/><text x="98.2137%" y="719.50"></text></g><g><title>std::io::Write::write_all (14 samples, 0.11%)</title><rect x="97.9794%" y="693" width="0.1101%" height="15" fill="rgb(215,41,35)" fg:x="12462" fg:w="14"/><text x="98.2294%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="98.0580%" y="677" width="0.0314%" height="15" fill="rgb(220,44,45)" fg:x="12472" fg:w="4"/><text x="98.3080%" y="687.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="98.0659%" y="661" width="0.0236%" height="15" fill="rgb(253,197,36)" fg:x="12473" fg:w="3"/><text x="98.3159%" y="671.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="98.0737%" y="645" width="0.0157%" height="15" fill="rgb(245,225,54)" fg:x="12474" fg:w="2"/><text x="98.3237%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="98.0737%" y="629" width="0.0157%" height="15" fill="rgb(239,94,37)" fg:x="12474" fg:w="2"/><text x="98.3237%" y="639.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_string_cell (35 samples, 0.28%)</title><rect x="97.8772%" y="757" width="0.2752%" height="15" fill="rgb(242,217,10)" fg:x="12449" fg:w="35"/><text x="98.1272%" y="767.50"></text></g><g><title>std::io::Write::write_fmt (29 samples, 0.23%)</title><rect x="97.9244%" y="741" width="0.2280%" height="15" fill="rgb(250,193,7)" fg:x="12455" fg:w="29"/><text x="98.1744%" y="751.50"></text></g><g><title>core::fmt::write (29 samples, 0.23%)</title><rect x="97.9244%" y="725" width="0.2280%" height="15" fill="rgb(230,104,19)" fg:x="12455" fg:w="29"/><text x="98.1744%" y="735.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (8 samples, 0.06%)</title><rect x="98.0895%" y="709" width="0.0629%" height="15" fill="rgb(230,181,4)" fg:x="12476" fg:w="8"/><text x="98.3395%" y="719.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.06%)</title><rect x="98.0895%" y="693" width="0.0629%" height="15" fill="rgb(216,219,49)" fg:x="12476" fg:w="8"/><text x="98.3395%" y="703.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.06%)</title><rect x="98.0973%" y="677" width="0.0550%" height="15" fill="rgb(254,144,0)" fg:x="12477" fg:w="7"/><text x="98.3473%" y="687.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5 samples, 0.04%)</title><rect x="98.1131%" y="661" width="0.0393%" height="15" fill="rgb(205,209,38)" fg:x="12479" fg:w="5"/><text x="98.3631%" y="671.50"></text></g><g><title>std::io::cursor::vec_write (4 samples, 0.03%)</title><rect x="98.1209%" y="645" width="0.0314%" height="15" fill="rgb(240,21,42)" fg:x="12480" fg:w="4"/><text x="98.3709%" y="655.50"></text></g><g><title>std::io::cursor::reserve_and_pad (4 samples, 0.03%)</title><rect x="98.1209%" y="629" width="0.0314%" height="15" fill="rgb(241,132,3)" fg:x="12480" fg:w="4"/><text x="98.3709%" y="639.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="98.1838%" y="677" width="0.0236%" height="15" fill="rgb(225,14,2)" fg:x="12488" fg:w="3"/><text x="98.4338%" y="687.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="98.1917%" y="661" width="0.0157%" height="15" fill="rgb(210,141,35)" fg:x="12489" fg:w="2"/><text x="98.4417%" y="671.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.02%)</title><rect x="98.1917%" y="645" width="0.0157%" height="15" fill="rgb(251,14,44)" fg:x="12489" fg:w="2"/><text x="98.4417%" y="655.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_attributes (4 samples, 0.03%)</title><rect x="98.1838%" y="709" width="0.0314%" height="15" fill="rgb(247,48,18)" fg:x="12488" fg:w="4"/><text x="98.4338%" y="719.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::escape_string (4 samples, 0.03%)</title><rect x="98.1838%" y="693" width="0.0314%" height="15" fill="rgb(225,0,40)" fg:x="12488" fg:w="4"/><text x="98.4338%" y="703.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="98.2467%" y="645" width="0.0236%" height="15" fill="rgb(221,31,33)" fg:x="12496" fg:w="3"/><text x="98.4967%" y="655.50"></text></g><g><title>std::io::cursor::vec_write (3 samples, 0.02%)</title><rect x="98.2467%" y="629" width="0.0236%" height="15" fill="rgb(237,42,40)" fg:x="12496" fg:w="3"/><text x="98.4967%" y="639.50"></text></g><g><title>std::io::cursor::reserve_and_pad (2 samples, 0.02%)</title><rect x="98.2546%" y="613" width="0.0157%" height="15" fill="rgb(233,51,29)" fg:x="12497" fg:w="2"/><text x="98.5046%" y="623.50"></text></g><g><title>&lt;(&amp;str,alloc::string::String) as rust_xlsxwriter::xmlwriter::IntoAttribute&gt;::write_to (12 samples, 0.09%)</title><rect x="98.1838%" y="725" width="0.0943%" height="15" fill="rgb(226,58,20)" fg:x="12488" fg:w="12"/><text x="98.4338%" y="735.50"></text></g><g><title>std::io::Write::write_fmt (8 samples, 0.06%)</title><rect x="98.2153%" y="709" width="0.0629%" height="15" fill="rgb(208,98,7)" fg:x="12492" fg:w="8"/><text x="98.4653%" y="719.50"></text></g><g><title>core::fmt::write (8 samples, 0.06%)</title><rect x="98.2153%" y="693" width="0.0629%" height="15" fill="rgb(228,143,44)" fg:x="12492" fg:w="8"/><text x="98.4653%" y="703.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.05%)</title><rect x="98.2310%" y="677" width="0.0472%" height="15" fill="rgb(246,55,38)" fg:x="12494" fg:w="6"/><text x="98.4810%" y="687.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.04%)</title><rect x="98.2389%" y="661" width="0.0393%" height="15" fill="rgb(247,87,16)" fg:x="12495" fg:w="5"/><text x="98.4889%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="98.2782%" y="725" width="0.0157%" height="15" fill="rgb(234,129,42)" fg:x="12500" fg:w="2"/><text x="98.5282%" y="735.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_table_row (20 samples, 0.16%)</title><rect x="98.1524%" y="757" width="0.1572%" height="15" fill="rgb(220,82,16)" fg:x="12484" fg:w="20"/><text x="98.4024%" y="767.50"></text></g><g><title>rust_xlsxwriter::xmlwriter::XMLWriter::xml_start_tag (16 samples, 0.13%)</title><rect x="98.1838%" y="741" width="0.1258%" height="15" fill="rgb(211,88,4)" fg:x="12488" fg:w="16"/><text x="98.4338%" y="751.50"></text></g><g><title>rust_xlsxwriter::packager::Packager&lt;W&gt;::assemble_file::{{closure}}::{{closure}} (92 samples, 0.72%)</title><rect x="97.5942%" y="821" width="0.7233%" height="15" fill="rgb(248,151,21)" fg:x="12413" fg:w="92"/><text x="97.8442%" y="831.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::assemble_xml_file (92 samples, 0.72%)</title><rect x="97.5942%" y="805" width="0.7233%" height="15" fill="rgb(238,163,6)" fg:x="12413" fg:w="92"/><text x="97.8442%" y="815.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_sheet_data (92 samples, 0.72%)</title><rect x="97.5942%" y="789" width="0.7233%" height="15" fill="rgb(209,183,11)" fg:x="12413" fg:w="92"/><text x="97.8442%" y="799.50"></text></g><g><title>rust_xlsxwriter::worksheet::Worksheet::write_data_table (92 samples, 0.72%)</title><rect x="97.5942%" y="773" width="0.7233%" height="15" fill="rgb(219,37,20)" fg:x="12413" fg:w="92"/><text x="97.8442%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (6 samples, 0.05%)</title><rect x="98.3175%" y="709" width="0.0472%" height="15" fill="rgb(210,158,4)" fg:x="12505" fg:w="6"/><text x="98.5675%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.05%)</title><rect x="98.3175%" y="693" width="0.0472%" height="15" fill="rgb(221,167,53)" fg:x="12505" fg:w="6"/><text x="98.5675%" y="703.50"></text></g><g><title>core::mem::drop (9 samples, 0.07%)</title><rect x="98.3175%" y="789" width="0.0708%" height="15" fill="rgb(237,151,45)" fg:x="12505" fg:w="9"/><text x="98.5675%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (9 samples, 0.07%)</title><rect x="98.3175%" y="773" width="0.0708%" height="15" fill="rgb(231,39,3)" fg:x="12505" fg:w="9"/><text x="98.5675%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (9 samples, 0.07%)</title><rect x="98.3175%" y="757" width="0.0708%" height="15" fill="rgb(212,167,28)" fg:x="12505" fg:w="9"/><text x="98.5675%" y="767.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.07%)</title><rect x="98.3175%" y="741" width="0.0708%" height="15" fill="rgb(232,178,8)" fg:x="12505" fg:w="9"/><text x="98.5675%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.07%)</title><rect x="98.3175%" y="725" width="0.0708%" height="15" fill="rgb(225,151,20)" fg:x="12505" fg:w="9"/><text x="98.5675%" y="735.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (3 samples, 0.02%)</title><rect x="98.3647%" y="709" width="0.0236%" height="15" fill="rgb(238,3,37)" fg:x="12511" fg:w="3"/><text x="98.6147%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (3 samples, 0.02%)</title><rect x="98.3647%" y="693" width="0.0236%" height="15" fill="rgb(251,147,42)" fg:x="12511" fg:w="3"/><text x="98.6147%" y="703.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.05%)</title><rect x="98.4433%" y="677" width="0.0472%" height="15" fill="rgb(208,173,10)" fg:x="12521" fg:w="6"/><text x="98.6933%" y="687.50"></text></g><g><title>syscall (6 samples, 0.05%)</title><rect x="98.4433%" y="661" width="0.0472%" height="15" fill="rgb(246,225,4)" fg:x="12521" fg:w="6"/><text x="98.6933%" y="671.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (7 samples, 0.06%)</title><rect x="98.4433%" y="693" width="0.0550%" height="15" fill="rgb(248,102,6)" fg:x="12521" fg:w="7"/><text x="98.6933%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait_timeout (15 samples, 0.12%)</title><rect x="98.3961%" y="789" width="0.1179%" height="15" fill="rgb(232,6,21)" fg:x="12515" fg:w="15"/><text x="98.6461%" y="799.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_for (15 samples, 0.12%)</title><rect x="98.3961%" y="773" width="0.1179%" height="15" fill="rgb(221,179,22)" fg:x="12515" fg:w="15"/><text x="98.6461%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (15 samples, 0.12%)</title><rect x="98.3961%" y="757" width="0.1179%" height="15" fill="rgb(252,50,20)" fg:x="12515" fg:w="15"/><text x="98.6461%" y="767.50"></text></g><g><title>parking_lot_core::parking_lot::park (9 samples, 0.07%)</title><rect x="98.4433%" y="741" width="0.0708%" height="15" fill="rgb(222,56,38)" fg:x="12521" fg:w="9"/><text x="98.6933%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (9 samples, 0.07%)</title><rect x="98.4433%" y="725" width="0.0708%" height="15" fill="rgb(206,193,29)" fg:x="12521" fg:w="9"/><text x="98.6933%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (9 samples, 0.07%)</title><rect x="98.4433%" y="709" width="0.0708%" height="15" fill="rgb(239,192,45)" fg:x="12521" fg:w="9"/><text x="98.6933%" y="719.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (13 samples, 0.10%)</title><rect x="98.5140%" y="677" width="0.1022%" height="15" fill="rgb(254,18,36)" fg:x="12530" fg:w="13"/><text x="98.7640%" y="687.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (13 samples, 0.10%)</title><rect x="98.5140%" y="661" width="0.1022%" height="15" fill="rgb(221,127,11)" fg:x="12530" fg:w="13"/><text x="98.7640%" y="671.50"></text></g><g><title>syscall (13 samples, 0.10%)</title><rect x="98.5140%" y="645" width="0.1022%" height="15" fill="rgb(234,146,35)" fg:x="12530" fg:w="13"/><text x="98.7640%" y="655.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (14 samples, 0.11%)</title><rect x="98.5140%" y="693" width="0.1101%" height="15" fill="rgb(254,201,37)" fg:x="12530" fg:w="14"/><text x="98.7640%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (22 samples, 0.17%)</title><rect x="98.5140%" y="789" width="0.1730%" height="15" fill="rgb(211,202,23)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="799.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (22 samples, 0.17%)</title><rect x="98.5140%" y="773" width="0.1730%" height="15" fill="rgb(237,91,2)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="783.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (22 samples, 0.17%)</title><rect x="98.5140%" y="757" width="0.1730%" height="15" fill="rgb(226,228,36)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="767.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (22 samples, 0.17%)</title><rect x="98.5140%" y="741" width="0.1730%" height="15" fill="rgb(213,63,50)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::park (22 samples, 0.17%)</title><rect x="98.5140%" y="725" width="0.1730%" height="15" fill="rgb(235,194,19)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="735.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (22 samples, 0.17%)</title><rect x="98.5140%" y="709" width="0.1730%" height="15" fill="rgb(207,204,18)" fg:x="12530" fg:w="22"/><text x="98.7640%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.06%)</title><rect x="98.6241%" y="693" width="0.0629%" height="15" fill="rgb(248,8,7)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (8 samples, 0.06%)</title><rect x="98.6241%" y="677" width="0.0629%" height="15" fill="rgb(223,145,47)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="687.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (8 samples, 0.06%)</title><rect x="98.6241%" y="661" width="0.0629%" height="15" fill="rgb(228,84,11)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="671.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (8 samples, 0.06%)</title><rect x="98.6241%" y="645" width="0.0629%" height="15" fill="rgb(218,76,45)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="655.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (8 samples, 0.06%)</title><rect x="98.6241%" y="629" width="0.0629%" height="15" fill="rgb(223,80,15)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="639.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit::{{closure}} (8 samples, 0.06%)</title><rect x="98.6241%" y="613" width="0.0629%" height="15" fill="rgb(219,218,33)" fg:x="12544" fg:w="8"/><text x="98.8741%" y="623.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__init (6 samples, 0.05%)</title><rect x="98.6398%" y="597" width="0.0472%" height="15" fill="rgb(208,51,11)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="607.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (6 samples, 0.05%)</title><rect x="98.6398%" y="581" width="0.0472%" height="15" fill="rgb(229,165,39)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="591.50"></text></g><g><title>parking_lot_core::parking_lot::grow_hashtable (6 samples, 0.05%)</title><rect x="98.6398%" y="565" width="0.0472%" height="15" fill="rgb(241,100,24)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="575.50"></text></g><g><title>parking_lot_core::parking_lot::get_hashtable (6 samples, 0.05%)</title><rect x="98.6398%" y="549" width="0.0472%" height="15" fill="rgb(228,14,23)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::create_hashtable (6 samples, 0.05%)</title><rect x="98.6398%" y="533" width="0.0472%" height="15" fill="rgb(247,116,52)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (6 samples, 0.05%)</title><rect x="98.6398%" y="517" width="0.0472%" height="15" fill="rgb(216,149,33)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.05%)</title><rect x="98.6398%" y="501" width="0.0472%" height="15" fill="rgb(238,142,29)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="98.6398%" y="485" width="0.0472%" height="15" fill="rgb(224,83,40)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="98.6398%" y="469" width="0.0472%" height="15" fill="rgb(234,165,11)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="98.6398%" y="453" width="0.0472%" height="15" fill="rgb(215,96,23)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="98.6398%" y="437" width="0.0472%" height="15" fill="rgb(233,179,26)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="98.6398%" y="421" width="0.0472%" height="15" fill="rgb(225,129,33)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="431.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="98.6398%" y="405" width="0.0472%" height="15" fill="rgb(237,49,13)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="415.50"></text></g><g><title>__rdl_alloc (6 samples, 0.05%)</title><rect x="98.6398%" y="389" width="0.0472%" height="15" fill="rgb(211,3,31)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="399.50"></text></g><g><title>__posix_memalign (6 samples, 0.05%)</title><rect x="98.6398%" y="373" width="0.0472%" height="15" fill="rgb(216,152,19)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="383.50"></text></g><g><title>_mid_memalign.constprop.0 (6 samples, 0.05%)</title><rect x="98.6398%" y="357" width="0.0472%" height="15" fill="rgb(251,121,35)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="367.50"></text></g><g><title>_int_memalign (6 samples, 0.05%)</title><rect x="98.6398%" y="341" width="0.0472%" height="15" fill="rgb(210,217,47)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="351.50"></text></g><g><title>_int_malloc (6 samples, 0.05%)</title><rect x="98.6398%" y="325" width="0.0472%" height="15" fill="rgb(244,116,22)" fg:x="12546" fg:w="6"/><text x="98.8898%" y="335.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (2 samples, 0.02%)</title><rect x="98.6870%" y="485" width="0.0157%" height="15" fill="rgb(228,17,21)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="495.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.02%)</title><rect x="98.6870%" y="469" width="0.0157%" height="15" fill="rgb(240,149,34)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (2 samples, 0.02%)</title><rect x="98.6870%" y="453" width="0.0157%" height="15" fill="rgb(208,125,47)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (2 samples, 0.02%)</title><rect x="98.6870%" y="437" width="0.0157%" height="15" fill="rgb(249,186,39)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (2 samples, 0.02%)</title><rect x="98.6870%" y="421" width="0.0157%" height="15" fill="rgb(240,220,33)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="431.50"></text></g><g><title>tokio::runtime::context::with_scheduler (2 samples, 0.02%)</title><rect x="98.6870%" y="405" width="0.0157%" height="15" fill="rgb(243,110,23)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="98.6870%" y="389" width="0.0157%" height="15" fill="rgb(219,163,46)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="399.50"></text></g><g><title>tokio::runtime::context::with_scheduler::{{closure}} (2 samples, 0.02%)</title><rect x="98.6870%" y="373" width="0.0157%" height="15" fill="rgb(216,126,30)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="383.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="98.6870%" y="357" width="0.0157%" height="15" fill="rgb(208,139,11)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::{{closure}} (2 samples, 0.02%)</title><rect x="98.6870%" y="341" width="0.0157%" height="15" fill="rgb(213,118,36)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (2 samples, 0.02%)</title><rect x="98.6870%" y="325" width="0.0157%" height="15" fill="rgb(226,43,17)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (2 samples, 0.02%)</title><rect x="98.6870%" y="309" width="0.0157%" height="15" fill="rgb(254,217,4)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.02%)</title><rect x="98.6870%" y="293" width="0.0157%" height="15" fill="rgb(210,134,47)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.02%)</title><rect x="98.6870%" y="277" width="0.0157%" height="15" fill="rgb(237,24,49)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (2 samples, 0.02%)</title><rect x="98.6870%" y="261" width="0.0157%" height="15" fill="rgb(251,39,46)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="271.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (2 samples, 0.02%)</title><rect x="98.6870%" y="245" width="0.0157%" height="15" fill="rgb(251,220,3)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (2 samples, 0.02%)</title><rect x="98.6870%" y="229" width="0.0157%" height="15" fill="rgb(228,105,12)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.02%)</title><rect x="98.6870%" y="213" width="0.0157%" height="15" fill="rgb(215,196,1)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.02%)</title><rect x="98.6870%" y="197" width="0.0157%" height="15" fill="rgb(214,33,39)" fg:x="12552" fg:w="2"/><text x="98.9370%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (3 samples, 0.02%)</title><rect x="98.6870%" y="709" width="0.0236%" height="15" fill="rgb(220,19,52)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="719.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.02%)</title><rect x="98.6870%" y="693" width="0.0236%" height="15" fill="rgb(221,78,38)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="703.50"></text></g><g><title>std::panicking::try (3 samples, 0.02%)</title><rect x="98.6870%" y="677" width="0.0236%" height="15" fill="rgb(253,30,16)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="687.50"></text></g><g><title>__rust_try (3 samples, 0.02%)</title><rect x="98.6870%" y="661" width="0.0236%" height="15" fill="rgb(242,65,0)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="671.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.02%)</title><rect x="98.6870%" y="645" width="0.0236%" height="15" fill="rgb(235,201,12)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.02%)</title><rect x="98.6870%" y="629" width="0.0236%" height="15" fill="rgb(233,161,9)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="98.6870%" y="613" width="0.0236%" height="15" fill="rgb(241,207,41)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::{{closure}} (3 samples, 0.02%)</title><rect x="98.6870%" y="597" width="0.0236%" height="15" fill="rgb(212,69,46)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="607.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join (3 samples, 0.02%)</title><rect x="98.6870%" y="581" width="0.0236%" height="15" fill="rgb(239,69,45)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="98.6870%" y="565" width="0.0236%" height="15" fill="rgb(242,117,48)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="575.50"></text></g><g><title>tokio::runtime::task::core::Trailer::wake_join::{{closure}} (3 samples, 0.02%)</title><rect x="98.6870%" y="549" width="0.0236%" height="15" fill="rgb(228,41,36)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="559.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (3 samples, 0.02%)</title><rect x="98.6870%" y="533" width="0.0236%" height="15" fill="rgb(212,3,32)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (3 samples, 0.02%)</title><rect x="98.6870%" y="517" width="0.0236%" height="15" fill="rgb(233,41,49)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_ref (3 samples, 0.02%)</title><rect x="98.6870%" y="501" width="0.0236%" height="15" fill="rgb(252,170,49)" fg:x="12552" fg:w="3"/><text x="98.9370%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (45 samples, 0.35%)</title><rect x="98.7814%" y="277" width="0.3538%" height="15" fill="rgb(229,53,26)" fg:x="12564" fg:w="45"/><text x="99.0314%" y="287.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (44 samples, 0.35%)</title><rect x="98.7892%" y="261" width="0.3459%" height="15" fill="rgb(217,157,12)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (44 samples, 0.35%)</title><rect x="98.7892%" y="245" width="0.3459%" height="15" fill="rgb(227,17,9)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (44 samples, 0.35%)</title><rect x="98.7892%" y="229" width="0.3459%" height="15" fill="rgb(218,84,12)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::park (44 samples, 0.35%)</title><rect x="98.7892%" y="213" width="0.3459%" height="15" fill="rgb(212,79,24)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="223.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (44 samples, 0.35%)</title><rect x="98.7892%" y="197" width="0.3459%" height="15" fill="rgb(217,222,37)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="207.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (44 samples, 0.35%)</title><rect x="98.7892%" y="181" width="0.3459%" height="15" fill="rgb(246,208,8)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="191.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (44 samples, 0.35%)</title><rect x="98.7892%" y="165" width="0.3459%" height="15" fill="rgb(244,133,10)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="175.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (44 samples, 0.35%)</title><rect x="98.7892%" y="149" width="0.3459%" height="15" fill="rgb(209,219,41)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="159.50"></text></g><g><title>syscall (44 samples, 0.35%)</title><rect x="98.7892%" y="133" width="0.3459%" height="15" fill="rgb(253,175,45)" fg:x="12565" fg:w="44"/><text x="99.0392%" y="143.50"></text></g><g><title>mio::poll::Poll::poll (11 samples, 0.09%)</title><rect x="99.1430%" y="117" width="0.0865%" height="15" fill="rgb(235,100,37)" fg:x="12610" fg:w="11"/><text x="99.3930%" y="127.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (11 samples, 0.09%)</title><rect x="99.1430%" y="101" width="0.0865%" height="15" fill="rgb(225,87,19)" fg:x="12610" fg:w="11"/><text x="99.3930%" y="111.50"></text></g><g><title>epoll_wait (11 samples, 0.09%)</title><rect x="99.1430%" y="85" width="0.0865%" height="15" fill="rgb(217,152,17)" fg:x="12610" fg:w="11"/><text x="99.3930%" y="95.50"></text></g><g><title>tokio::runtime::driver::IoStack::park (14 samples, 0.11%)</title><rect x="99.1352%" y="197" width="0.1101%" height="15" fill="rgb(235,72,13)" fg:x="12609" fg:w="14"/><text x="99.3852%" y="207.50"></text></g><g><title>tokio::runtime::process::Driver::park (14 samples, 0.11%)</title><rect x="99.1352%" y="181" width="0.1101%" height="15" fill="rgb(233,140,18)" fg:x="12609" fg:w="14"/><text x="99.3852%" y="191.50"></text></g><g><title>tokio::runtime::signal::Driver::park (14 samples, 0.11%)</title><rect x="99.1352%" y="165" width="0.1101%" height="15" fill="rgb(207,212,28)" fg:x="12609" fg:w="14"/><text x="99.3852%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::park (13 samples, 0.10%)</title><rect x="99.1430%" y="149" width="0.1022%" height="15" fill="rgb(220,130,25)" fg:x="12610" fg:w="13"/><text x="99.3930%" y="159.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (13 samples, 0.10%)</title><rect x="99.1430%" y="133" width="0.1022%" height="15" fill="rgb(205,55,34)" fg:x="12610" fg:w="13"/><text x="99.3930%" y="143.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.02%)</title><rect x="99.2452%" y="181" width="0.0157%" height="15" fill="rgb(237,54,35)" fg:x="12623" fg:w="2"/><text x="99.4952%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (63 samples, 0.50%)</title><rect x="98.7735%" y="309" width="0.4953%" height="15" fill="rgb(208,67,23)" fg:x="12563" fg:w="63"/><text x="99.0235%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (63 samples, 0.50%)</title><rect x="98.7735%" y="293" width="0.4953%" height="15" fill="rgb(206,207,50)" fg:x="12563" fg:w="63"/><text x="99.0235%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (17 samples, 0.13%)</title><rect x="99.1352%" y="277" width="0.1337%" height="15" fill="rgb(213,211,42)" fg:x="12609" fg:w="17"/><text x="99.3852%" y="287.50"></text></g><g><title>tokio::runtime::driver::Driver::park (17 samples, 0.13%)</title><rect x="99.1352%" y="261" width="0.1337%" height="15" fill="rgb(252,197,50)" fg:x="12609" fg:w="17"/><text x="99.3852%" y="271.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (17 samples, 0.13%)</title><rect x="99.1352%" y="245" width="0.1337%" height="15" fill="rgb(251,211,41)" fg:x="12609" fg:w="17"/><text x="99.3852%" y="255.50"></text></g><g><title>tokio::runtime::time::Driver::park (17 samples, 0.13%)</title><rect x="99.1352%" y="229" width="0.1337%" height="15" fill="rgb(229,211,5)" fg:x="12609" fg:w="17"/><text x="99.3852%" y="239.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (17 samples, 0.13%)</title><rect x="99.1352%" y="213" width="0.1337%" height="15" fill="rgb(239,36,31)" fg:x="12609" fg:w="17"/><text x="99.3852%" y="223.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (3 samples, 0.02%)</title><rect x="99.2452%" y="197" width="0.0236%" height="15" fill="rgb(248,67,31)" fg:x="12623" fg:w="3"/><text x="99.4952%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (65 samples, 0.51%)</title><rect x="98.7656%" y="325" width="0.5110%" height="15" fill="rgb(249,55,44)" fg:x="12562" fg:w="65"/><text x="99.0156%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (68 samples, 0.53%)</title><rect x="98.7656%" y="341" width="0.5346%" height="15" fill="rgb(216,82,12)" fg:x="12562" fg:w="68"/><text x="99.0156%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (2 samples, 0.02%)</title><rect x="99.2845%" y="325" width="0.0157%" height="15" fill="rgb(242,174,1)" fg:x="12628" fg:w="2"/><text x="99.5345%" y="335.50"></text></g><g><title>tokio::runtime::coop::budget (7 samples, 0.06%)</title><rect x="99.3003%" y="325" width="0.0550%" height="15" fill="rgb(208,120,29)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="335.50"></text></g><g><title>tokio::runtime::coop::with_budget (7 samples, 0.06%)</title><rect x="99.3003%" y="309" width="0.0550%" height="15" fill="rgb(221,105,43)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (7 samples, 0.06%)</title><rect x="99.3003%" y="293" width="0.0550%" height="15" fill="rgb(234,124,22)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="303.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (7 samples, 0.06%)</title><rect x="99.3003%" y="277" width="0.0550%" height="15" fill="rgb(212,23,30)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (7 samples, 0.06%)</title><rect x="99.3003%" y="261" width="0.0550%" height="15" fill="rgb(219,122,53)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="271.50"></text></g><g><title>tokio::runtime::task::raw::poll (7 samples, 0.06%)</title><rect x="99.3003%" y="245" width="0.0550%" height="15" fill="rgb(248,84,24)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (7 samples, 0.06%)</title><rect x="99.3003%" y="229" width="0.0550%" height="15" fill="rgb(245,115,18)" fg:x="12630" fg:w="7"/><text x="99.5503%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (6 samples, 0.05%)</title><rect x="99.3081%" y="213" width="0.0472%" height="15" fill="rgb(227,176,51)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (6 samples, 0.05%)</title><rect x="99.3081%" y="197" width="0.0472%" height="15" fill="rgb(229,63,42)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="207.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 0.05%)</title><rect x="99.3081%" y="181" width="0.0472%" height="15" fill="rgb(247,202,24)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="191.50"></text></g><g><title>std::panicking::try (6 samples, 0.05%)</title><rect x="99.3081%" y="165" width="0.0472%" height="15" fill="rgb(244,173,20)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="175.50"></text></g><g><title>__rust_try (6 samples, 0.05%)</title><rect x="99.3081%" y="149" width="0.0472%" height="15" fill="rgb(242,81,47)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="159.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 0.05%)</title><rect x="99.3081%" y="133" width="0.0472%" height="15" fill="rgb(231,185,54)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="143.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 0.05%)</title><rect x="99.3081%" y="117" width="0.0472%" height="15" fill="rgb(243,55,32)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (6 samples, 0.05%)</title><rect x="99.3081%" y="101" width="0.0472%" height="15" fill="rgb(208,167,19)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6 samples, 0.05%)</title><rect x="99.3081%" y="85" width="0.0472%" height="15" fill="rgb(231,72,35)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="95.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6 samples, 0.05%)</title><rect x="99.3081%" y="69" width="0.0472%" height="15" fill="rgb(250,173,51)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="79.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (6 samples, 0.05%)</title><rect x="99.3081%" y="53" width="0.0472%" height="15" fill="rgb(209,5,22)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="63.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (6 samples, 0.05%)</title><rect x="99.3081%" y="37" width="0.0472%" height="15" fill="rgb(250,174,19)" fg:x="12631" fg:w="6"/><text x="99.5581%" y="47.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (2 samples, 0.02%)</title><rect x="99.3553%" y="325" width="0.0157%" height="15" fill="rgb(217,3,49)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (2 samples, 0.02%)</title><rect x="99.3553%" y="309" width="0.0157%" height="15" fill="rgb(218,225,5)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (2 samples, 0.02%)</title><rect x="99.3553%" y="293" width="0.0157%" height="15" fill="rgb(236,89,11)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (2 samples, 0.02%)</title><rect x="99.3553%" y="277" width="0.0157%" height="15" fill="rgb(206,33,28)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (2 samples, 0.02%)</title><rect x="99.3553%" y="261" width="0.0157%" height="15" fill="rgb(241,56,42)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (2 samples, 0.02%)</title><rect x="99.3553%" y="245" width="0.0157%" height="15" fill="rgb(222,44,11)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="255.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (2 samples, 0.02%)</title><rect x="99.3553%" y="229" width="0.0157%" height="15" fill="rgb(234,111,20)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (2 samples, 0.02%)</title><rect x="99.3553%" y="213" width="0.0157%" height="15" fill="rgb(237,77,6)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.02%)</title><rect x="99.3553%" y="197" width="0.0157%" height="15" fill="rgb(235,111,23)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="207.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (2 samples, 0.02%)</title><rect x="99.3553%" y="181" width="0.0157%" height="15" fill="rgb(251,135,29)" fg:x="12637" fg:w="2"/><text x="99.6053%" y="191.50"></text></g><g><title>std::panic::catch_unwind (227 samples, 1.78%)</title><rect x="97.5942%" y="933" width="1.7847%" height="15" fill="rgb(217,57,1)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="943.50">s..</text></g><g><title>std::panicking::try (227 samples, 1.78%)</title><rect x="97.5942%" y="917" width="1.7847%" height="15" fill="rgb(249,119,31)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="927.50">s..</text></g><g><title>__rust_try (227 samples, 1.78%)</title><rect x="97.5942%" y="901" width="1.7847%" height="15" fill="rgb(233,164,33)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="911.50">_..</text></g><g><title>std::panicking::try::do_call (227 samples, 1.78%)</title><rect x="97.5942%" y="885" width="1.7847%" height="15" fill="rgb(250,217,43)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="895.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (227 samples, 1.78%)</title><rect x="97.5942%" y="869" width="1.7847%" height="15" fill="rgb(232,154,50)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="879.50">&lt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (227 samples, 1.78%)</title><rect x="97.5942%" y="853" width="1.7847%" height="15" fill="rgb(227,190,8)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="863.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (227 samples, 1.78%)</title><rect x="97.5942%" y="837" width="1.7847%" height="15" fill="rgb(209,217,32)" fg:x="12413" fg:w="227"/><text x="97.8442%" y="847.50">s..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (135 samples, 1.06%)</title><rect x="98.3175%" y="821" width="1.0614%" height="15" fill="rgb(243,203,50)" fg:x="12505" fg:w="135"/><text x="98.5675%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (135 samples, 1.06%)</title><rect x="98.3175%" y="805" width="1.0614%" height="15" fill="rgb(232,152,27)" fg:x="12505" fg:w="135"/><text x="98.5675%" y="815.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (88 samples, 0.69%)</title><rect x="98.6870%" y="789" width="0.6919%" height="15" fill="rgb(240,34,29)" fg:x="12552" fg:w="88"/><text x="98.9370%" y="799.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (88 samples, 0.69%)</title><rect x="98.6870%" y="773" width="0.6919%" height="15" fill="rgb(215,185,52)" fg:x="12552" fg:w="88"/><text x="98.9370%" y="783.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (88 samples, 0.69%)</title><rect x="98.6870%" y="757" width="0.6919%" height="15" fill="rgb(240,89,49)" fg:x="12552" fg:w="88"/><text x="98.9370%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::poll (88 samples, 0.69%)</title><rect x="98.6870%" y="741" width="0.6919%" height="15" fill="rgb(225,12,52)" fg:x="12552" fg:w="88"/><text x="98.9370%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (88 samples, 0.69%)</title><rect x="98.6870%" y="725" width="0.6919%" height="15" fill="rgb(239,128,45)" fg:x="12552" fg:w="88"/><text x="98.9370%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (85 samples, 0.67%)</title><rect x="98.7106%" y="709" width="0.6683%" height="15" fill="rgb(211,78,47)" fg:x="12555" fg:w="85"/><text x="98.9606%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (84 samples, 0.66%)</title><rect x="98.7185%" y="693" width="0.6604%" height="15" fill="rgb(232,31,21)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="703.50"></text></g><g><title>std::panic::catch_unwind (84 samples, 0.66%)</title><rect x="98.7185%" y="677" width="0.6604%" height="15" fill="rgb(222,168,14)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="687.50"></text></g><g><title>std::panicking::try (84 samples, 0.66%)</title><rect x="98.7185%" y="661" width="0.6604%" height="15" fill="rgb(209,128,24)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="671.50"></text></g><g><title>__rust_try (84 samples, 0.66%)</title><rect x="98.7185%" y="645" width="0.6604%" height="15" fill="rgb(249,35,13)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="655.50"></text></g><g><title>std::panicking::try::do_call (84 samples, 0.66%)</title><rect x="98.7185%" y="629" width="0.6604%" height="15" fill="rgb(218,7,2)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="639.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (84 samples, 0.66%)</title><rect x="98.7185%" y="613" width="0.6604%" height="15" fill="rgb(238,107,27)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (84 samples, 0.66%)</title><rect x="98.7185%" y="597" width="0.6604%" height="15" fill="rgb(217,88,38)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="607.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (84 samples, 0.66%)</title><rect x="98.7185%" y="581" width="0.6604%" height="15" fill="rgb(230,207,0)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (84 samples, 0.66%)</title><rect x="98.7185%" y="565" width="0.6604%" height="15" fill="rgb(249,64,54)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="575.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (84 samples, 0.66%)</title><rect x="98.7185%" y="549" width="0.6604%" height="15" fill="rgb(231,7,11)" fg:x="12556" fg:w="84"/><text x="98.9685%" y="559.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (83 samples, 0.65%)</title><rect x="98.7263%" y="533" width="0.6526%" height="15" fill="rgb(205,149,21)" fg:x="12557" fg:w="83"/><text x="98.9763%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (78 samples, 0.61%)</title><rect x="98.7656%" y="517" width="0.6133%" height="15" fill="rgb(215,126,34)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="527.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (78 samples, 0.61%)</title><rect x="98.7656%" y="501" width="0.6133%" height="15" fill="rgb(241,132,45)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="511.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (78 samples, 0.61%)</title><rect x="98.7656%" y="485" width="0.6133%" height="15" fill="rgb(252,69,32)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="495.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (78 samples, 0.61%)</title><rect x="98.7656%" y="469" width="0.6133%" height="15" fill="rgb(232,204,19)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="479.50"></text></g><g><title>tokio::runtime::context::set_scheduler (78 samples, 0.61%)</title><rect x="98.7656%" y="453" width="0.6133%" height="15" fill="rgb(249,15,47)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (78 samples, 0.61%)</title><rect x="98.7656%" y="437" width="0.6133%" height="15" fill="rgb(209,227,23)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (78 samples, 0.61%)</title><rect x="98.7656%" y="421" width="0.6133%" height="15" fill="rgb(248,92,24)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="431.50"></text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (78 samples, 0.61%)</title><rect x="98.7656%" y="405" width="0.6133%" height="15" fill="rgb(247,59,2)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="415.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (78 samples, 0.61%)</title><rect x="98.7656%" y="389" width="0.6133%" height="15" fill="rgb(221,30,5)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (78 samples, 0.61%)</title><rect x="98.7656%" y="373" width="0.6133%" height="15" fill="rgb(208,108,53)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (78 samples, 0.61%)</title><rect x="98.7656%" y="357" width="0.6133%" height="15" fill="rgb(211,183,26)" fg:x="12562" fg:w="78"/><text x="99.0156%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (10 samples, 0.08%)</title><rect x="99.3003%" y="341" width="0.0786%" height="15" fill="rgb(232,132,4)" fg:x="12630" fg:w="10"/><text x="99.5503%" y="351.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.02%)</title><rect x="99.4496%" y="837" width="0.0236%" height="15" fill="rgb(253,128,37)" fg:x="12649" fg:w="3"/><text x="99.6996%" y="847.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.10%)</title><rect x="99.3789%" y="901" width="0.1022%" height="15" fill="rgb(221,58,24)" fg:x="12640" fg:w="13"/><text x="99.6289%" y="911.50"></text></g><g><title>tcache_init.part.0 (13 samples, 0.10%)</title><rect x="99.3789%" y="885" width="0.1022%" height="15" fill="rgb(230,54,45)" fg:x="12640" fg:w="13"/><text x="99.6289%" y="895.50"></text></g><g><title>arena_get2 (13 samples, 0.10%)</title><rect x="99.3789%" y="869" width="0.1022%" height="15" fill="rgb(254,21,18)" fg:x="12640" fg:w="13"/><text x="99.6289%" y="879.50"></text></g><g><title>alloc_new_heap (12 samples, 0.09%)</title><rect x="99.3867%" y="853" width="0.0943%" height="15" fill="rgb(221,108,0)" fg:x="12641" fg:w="12"/><text x="99.6367%" y="863.50"></text></g><g><title>__clone3 (247 samples, 1.94%)</title><rect x="97.5627%" y="1013" width="1.9420%" height="15" fill="rgb(206,95,1)" fg:x="12409" fg:w="247"/><text x="97.8127%" y="1023.50">_..</text></g><g><title>start_thread (244 samples, 1.92%)</title><rect x="97.5863%" y="997" width="1.9184%" height="15" fill="rgb(237,52,5)" fg:x="12412" fg:w="244"/><text x="97.8363%" y="1007.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (243 samples, 1.91%)</title><rect x="97.5942%" y="981" width="1.9105%" height="15" fill="rgb(218,150,34)" fg:x="12413" fg:w="243"/><text x="97.8442%" y="991.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (243 samples, 1.91%)</title><rect x="97.5942%" y="965" width="1.9105%" height="15" fill="rgb(235,194,28)" fg:x="12413" fg:w="243"/><text x="97.8442%" y="975.50">c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (243 samples, 1.91%)</title><rect x="97.5942%" y="949" width="1.9105%" height="15" fill="rgb(245,92,18)" fg:x="12413" fg:w="243"/><text x="97.8442%" y="959.50">s..</text></g><g><title>std::sys::unix::thread::guard::current (16 samples, 0.13%)</title><rect x="99.3789%" y="933" width="0.1258%" height="15" fill="rgb(253,203,53)" fg:x="12640" fg:w="16"/><text x="99.6289%" y="943.50"></text></g><g><title>__pthread_getattr_np (16 samples, 0.13%)</title><rect x="99.3789%" y="917" width="0.1258%" height="15" fill="rgb(249,185,47)" fg:x="12640" fg:w="16"/><text x="99.6289%" y="927.50"></text></g><g><title>__pthread_getaffinity_alias (2 samples, 0.02%)</title><rect x="99.4890%" y="901" width="0.0157%" height="15" fill="rgb(252,194,52)" fg:x="12654" fg:w="2"/><text x="99.7390%" y="911.50"></text></g><g><title>__rdl_alloc (12 samples, 0.09%)</title><rect x="99.5047%" y="1013" width="0.0943%" height="15" fill="rgb(210,53,36)" fg:x="12656" fg:w="12"/><text x="99.7547%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.02%)</title><rect x="99.5990%" y="1013" width="0.0236%" height="15" fill="rgb(237,37,25)" fg:x="12668" fg:w="3"/><text x="99.8490%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.06%)</title><rect x="99.6226%" y="1013" width="0.0550%" height="15" fill="rgb(242,116,27)" fg:x="12671" fg:w="7"/><text x="99.8726%" y="1023.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.05%)</title><rect x="99.6855%" y="1013" width="0.0472%" height="15" fill="rgb(213,185,26)" fg:x="12679" fg:w="6"/><text x="99.9355%" y="1023.50"></text></g><g><title>core::fmt::Formatter::pad_integral (17 samples, 0.13%)</title><rect x="99.7327%" y="1013" width="0.1337%" height="15" fill="rgb(225,204,8)" fg:x="12685" fg:w="17"/><text x="99.9827%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.03%)</title><rect x="99.8742%" y="1013" width="0.0314%" height="15" fill="rgb(254,111,37)" fg:x="12703" fg:w="4"/><text x="100.1242%" y="1023.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.02%)</title><rect x="99.9135%" y="1013" width="0.0157%" height="15" fill="rgb(242,35,9)" fg:x="12708" fg:w="2"/><text x="100.1635%" y="1023.50"></text></g><g><title>all (12,719 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,138,49)" fg:x="0" fg:w="12719"/><text x="0.2500%" y="1055.50"></text></g><g><title>tokio-runtime-w (12,625 samples, 99.26%)</title><rect x="0.7391%" y="1029" width="99.2609%" height="15" fill="rgb(247,56,4)" fg:x="94" fg:w="12625"/><text x="0.9891%" y="1039.50">tokio-runtime-w</text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.02%)</title><rect x="99.9843%" y="1013" width="0.0157%" height="15" fill="rgb(226,179,17)" fg:x="12717" fg:w="2"/><text x="100.2343%" y="1023.50"></text></g></svg></svg>